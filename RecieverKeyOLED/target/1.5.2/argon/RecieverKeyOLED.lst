
/Users/christianc/Documents/IoT/Capstone/RecieverKeyOLED/target/1.5.2/argon/RecieverKeyOLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002ed4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6ef0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000048c  2003debc  000d6ef4  0001debc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004a8  2003e348  2003e348  0002e348  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7380  000d7380  00027380  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d73a8  000d73a8  000273a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000f0a1c  00000000  00000000  000273ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012e33  00000000  00000000  00117dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001f419  00000000  00000000  0012abfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000026a8  00000000  00000000  0014a014  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004768  00000000  00000000  0014c6bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00039822  00000000  00000000  00150e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002ee27  00000000  00000000  0018a646  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001094c0  00000000  00000000  001b946d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d0a8  00000000  00000000  002c2930  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fa65 	bl	d64fc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fa6a 	bl	d6512 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003debc 	.word	0x2003debc
   d4048:	000d6ef4 	.word	0x000d6ef4
   d404c:	2003e348 	.word	0x2003e348
   d4050:	2003e348 	.word	0x2003e348
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 ffab 	bl	d5fb4 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6ee4 	.word	0x000d6ee4
   d4080:	000d6ea0 	.word	0x000d6ea0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b82c 	b.w	d40e0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8f7 	bl	d427c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bf51 	b.w	d5f38 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f001 b96f 	b.w	d5378 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f001 b96d 	b.w	d5378 <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f001 f8da 	bl	d5260 <panic_>
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d4f41 	.word	0x000d4f41

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40c4:	4770      	bx	lr

000d40c6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40c6:	b510      	push	{r4, lr}
   d40c8:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40ca:	6800      	ldr	r0, [r0, #0]
   d40cc:	b108      	cbz	r0, d40d2 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40ce:	f001 f953 	bl	d5378 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40d2:	4620      	mov	r0, r4
   d40d4:	bd10      	pop	{r4, pc}

000d40d6 <_ZN5Print6printfIIEEEjPKcDpT_>:
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d40d6:	460a      	mov	r2, r1
   d40d8:	2100      	movs	r1, #0
   d40da:	f001 bc4c 	b.w	d5976 <_ZN5Print11printf_implEbPKcz>
	...

000d40e0 <setup>:
int bitFour;
int n;
bool hasRun = false;


void setup() {
   d40e0:	b513      	push	{r0, r1, r4, lr}

  Serial.begin(9600);
   d40e2:	f001 fea7 	bl	d5e34 <_Z16_fetch_usbserialv>
   d40e6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40ea:	f001 fe97 	bl	d5e1c <_ZN9USBSerial5beginEl>

  myServo.attach(D5);
   d40ee:	2400      	movs	r4, #0
   d40f0:	23b4      	movs	r3, #180	; 0xb4
   d40f2:	f44f 7208 	mov.w	r2, #544	; 0x220
   d40f6:	9301      	str	r3, [sp, #4]
   d40f8:	9400      	str	r4, [sp, #0]
   d40fa:	f44f 6316 	mov.w	r3, #2400	; 0x960
   d40fe:	2105      	movs	r1, #5
   d4100:	4818      	ldr	r0, [pc, #96]	; (d4164 <setup+0x84>)
   d4102:	f001 fcaa 	bl	d5a5a <_ZN5Servo6attachEtttss>

  pinMode(anodePin, INPUT);
   d4106:	4621      	mov	r1, r4
   d4108:	200e      	movs	r0, #14

  pinMode(D7, OUTPUT); //for testing only
 
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d410a:	4c17      	ldr	r4, [pc, #92]	; (d4168 <setup+0x88>)

  Serial.begin(9600);

  myServo.attach(D5);

  pinMode(anodePin, INPUT);
   d410c:	f001 ffb4 	bl	d6078 <pinMode>

  pinMode(D7, OUTPUT); //for testing only
   d4110:	2101      	movs	r1, #1
   d4112:	2007      	movs	r0, #7
   d4114:	f001 ffb0 	bl	d6078 <pinMode>
 
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d4118:	223c      	movs	r2, #60	; 0x3c
   d411a:	2102      	movs	r1, #2
   d411c:	4620      	mov	r0, r4
   d411e:	f000 fd8b 	bl	d4c38 <_ZN16Adafruit_SSD13065beginEhh>
  display.display();
   d4122:	4620      	mov	r0, r4
   d4124:	f000 fe5a 	bl	d4ddc <_ZN16Adafruit_SSD13067displayEv>
  display.clearDisplay();
   d4128:	4620      	mov	r0, r4
   d412a:	f000 fd1d 	bl	d4b68 <_ZN16Adafruit_SSD130612clearDisplayEv>
  // display.setRotation(1);
  display.setTextSize(2);
   d412e:	4620      	mov	r0, r4
   d4130:	2102      	movs	r1, #2
   d4132:	f000 fb31 	bl	d4798 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   d4136:	2101      	movs	r1, #1
   d4138:	4620      	mov	r0, r4
   d413a:	f000 fb32 	bl	d47a2 <_ZN12Adafruit_GFX12setTextColorEt>


  delay(1000); //set up time
   d413e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4142:	f001 f929 	bl	d5398 <delay>
  Serial.printf("System Ready...");
   d4146:	f001 fe75 	bl	d5e34 <_Z16_fetch_usbserialv>
   d414a:	4908      	ldr	r1, [pc, #32]	; (d416c <setup+0x8c>)
   d414c:	f7ff ffc3 	bl	d40d6 <_ZN5Print6printfIIEEEjPKcDpT_>
  display.printf("ALARM\nSYSTEM\nREADY");
   d4150:	4907      	ldr	r1, [pc, #28]	; (d4170 <setup+0x90>)
   d4152:	4620      	mov	r0, r4
   d4154:	f7ff ffbf 	bl	d40d6 <_ZN5Print6printfIIEEEjPKcDpT_>
  display.display();
   d4158:	4620      	mov	r0, r4

}
   d415a:	b002      	add	sp, #8
   d415c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}


  delay(1000); //set up time
  Serial.printf("System Ready...");
  display.printf("ALARM\nSYSTEM\nREADY");
  display.display();
   d4160:	f000 be3c 	b.w	d4ddc <_ZN16Adafruit_SSD13067displayEv>
   d4164:	2003e350 	.word	0x2003e350
   d4168:	2003e398 	.word	0x2003e398
   d416c:	000d6598 	.word	0x000d6598
   d4170:	000d65a8 	.word	0x000d65a8

000d4174 <_Z11unlockServov>:
    }
  }

}

void unlockServo(){
   d4174:	b510      	push	{r4, lr}

    display.clearDisplay();
   d4176:	4c0e      	ldr	r4, [pc, #56]	; (d41b0 <_Z11unlockServov+0x3c>)
   d4178:	4620      	mov	r0, r4
   d417a:	f000 fcf5 	bl	d4b68 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setCursor(0,0);
   d417e:	2200      	movs	r2, #0
   d4180:	4611      	mov	r1, r2
   d4182:	4620      	mov	r0, r4
   d4184:	f000 fb05 	bl	d4792 <_ZN12Adafruit_GFX9setCursorEss>
    display.printf("CODE TAKENSYSTEM\nDISARMED");
   d4188:	490a      	ldr	r1, [pc, #40]	; (d41b4 <_Z11unlockServov+0x40>)
   d418a:	4620      	mov	r0, r4
   d418c:	f7ff ffa3 	bl	d40d6 <_ZN5Print6printfIIEEEjPKcDpT_>
    display.display();
   d4190:	4620      	mov	r0, r4
   d4192:	f000 fe23 	bl	d4ddc <_ZN16Adafruit_SSD13067displayEv>
    // myServo.write(100);
    // delay(1000);
    analogWrite(D7, 255); //for testing only
   d4196:	21ff      	movs	r1, #255	; 0xff
   d4198:	2007      	movs	r0, #7
   d419a:	f001 ffae 	bl	d60fa <_Z11analogWritetm>
    Serial.printf("Blue Button\n");
   d419e:	f001 fe49 	bl	d5e34 <_Z16_fetch_usbserialv>
   d41a2:	4905      	ldr	r1, [pc, #20]	; (d41b8 <_Z11unlockServov+0x44>)
   d41a4:	f7ff ff97 	bl	d40d6 <_ZN5Print6printfIIEEEjPKcDpT_>
    hasRun = true;
   d41a8:	4b04      	ldr	r3, [pc, #16]	; (d41bc <_Z11unlockServov+0x48>)
   d41aa:	2201      	movs	r2, #1
   d41ac:	701a      	strb	r2, [r3, #0]
   d41ae:	bd10      	pop	{r4, pc}
   d41b0:	2003e398 	.word	0x2003e398
   d41b4:	000d65bb 	.word	0x000d65bb
   d41b8:	000d65d5 	.word	0x000d65d5
   d41bc:	2003e3c9 	.word	0x2003e3c9

000d41c0 <_Z9lockServov>:
  
}

void lockServo(){
   d41c0:	b510      	push	{r4, lr}

    display.clearDisplay();
   d41c2:	4c0e      	ldr	r4, [pc, #56]	; (d41fc <_Z9lockServov+0x3c>)
   d41c4:	4620      	mov	r0, r4
   d41c6:	f000 fccf 	bl	d4b68 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setCursor(0,0);
   d41ca:	2200      	movs	r2, #0
   d41cc:	4611      	mov	r1, r2
   d41ce:	4620      	mov	r0, r4
   d41d0:	f000 fadf 	bl	d4792 <_ZN12Adafruit_GFX9setCursorEss>
    display.printf("INCORRECT CODE\nSYSTEM\nLOCKED");
   d41d4:	490a      	ldr	r1, [pc, #40]	; (d4200 <_Z9lockServov+0x40>)
   d41d6:	4620      	mov	r0, r4
   d41d8:	f7ff ff7d 	bl	d40d6 <_ZN5Print6printfIIEEEjPKcDpT_>
    display.display();
   d41dc:	4620      	mov	r0, r4
   d41de:	f000 fdfd 	bl	d4ddc <_ZN16Adafruit_SSD13067displayEv>
    // myServo.write(50);
    // delay(1000);
    analogWrite(D7, 20); //for testing only
   d41e2:	2114      	movs	r1, #20
   d41e4:	2007      	movs	r0, #7
   d41e6:	f001 ff88 	bl	d60fa <_Z11analogWritetm>
    Serial.printf("Yellow button\n");
   d41ea:	f001 fe23 	bl	d5e34 <_Z16_fetch_usbserialv>
   d41ee:	4905      	ldr	r1, [pc, #20]	; (d4204 <_Z9lockServov+0x44>)
   d41f0:	f7ff ff71 	bl	d40d6 <_ZN5Print6printfIIEEEjPKcDpT_>
    hasRun = true;
   d41f4:	4b04      	ldr	r3, [pc, #16]	; (d4208 <_Z9lockServov+0x48>)
   d41f6:	2201      	movs	r2, #1
   d41f8:	701a      	strb	r2, [r3, #0]
   d41fa:	bd10      	pop	{r4, pc}
   d41fc:	2003e398 	.word	0x2003e398
   d4200:	000d65e2 	.word	0x000d65e2
   d4204:	000d65ff 	.word	0x000d65ff
   d4208:	2003e3c9 	.word	0x2003e3c9

000d420c <_Z10displayKeyv>:

}

void displayKey() {

  if(bitZero == 0 && bitOne == 0 && bitTwo == 1 && bitThree == 0 && bitFour == 0){
   d420c:	4b15      	ldr	r3, [pc, #84]	; (d4264 <_Z10displayKeyv+0x58>)
   d420e:	681b      	ldr	r3, [r3, #0]
   d4210:	b98b      	cbnz	r3, d4236 <_Z10displayKeyv+0x2a>
   d4212:	4b15      	ldr	r3, [pc, #84]	; (d4268 <_Z10displayKeyv+0x5c>)
   d4214:	681b      	ldr	r3, [r3, #0]
   d4216:	bb23      	cbnz	r3, d4262 <_Z10displayKeyv+0x56>
   d4218:	4b14      	ldr	r3, [pc, #80]	; (d426c <_Z10displayKeyv+0x60>)
   d421a:	681b      	ldr	r3, [r3, #0]
   d421c:	2b01      	cmp	r3, #1
   d421e:	d120      	bne.n	d4262 <_Z10displayKeyv+0x56>
   d4220:	4b13      	ldr	r3, [pc, #76]	; (d4270 <_Z10displayKeyv+0x64>)
   d4222:	681b      	ldr	r3, [r3, #0]
   d4224:	b9eb      	cbnz	r3, d4262 <_Z10displayKeyv+0x56>
   d4226:	4b13      	ldr	r3, [pc, #76]	; (d4274 <_Z10displayKeyv+0x68>)
   d4228:	681b      	ldr	r3, [r3, #0]
   d422a:	b9d3      	cbnz	r3, d4262 <_Z10displayKeyv+0x56>

    if(hasRun == false){
   d422c:	4b12      	ldr	r3, [pc, #72]	; (d4278 <_Z10displayKeyv+0x6c>)
   d422e:	781b      	ldrb	r3, [r3, #0]
   d4230:	b9bb      	cbnz	r3, d4262 <_Z10displayKeyv+0x56>
    //Serial.printf("Yellow button\n");
    lockServo();
   d4232:	f7ff bfc5 	b.w	d41c0 <_Z9lockServov>
    }

    
  }
  else if(bitZero == 1 && bitOne == 1 && bitTwo == 0 && bitThree == 1 && bitFour == 1){
   d4236:	2b01      	cmp	r3, #1
   d4238:	d113      	bne.n	d4262 <_Z10displayKeyv+0x56>
   d423a:	4b0b      	ldr	r3, [pc, #44]	; (d4268 <_Z10displayKeyv+0x5c>)
   d423c:	681b      	ldr	r3, [r3, #0]
   d423e:	2b01      	cmp	r3, #1
   d4240:	d10f      	bne.n	d4262 <_Z10displayKeyv+0x56>
   d4242:	4b0a      	ldr	r3, [pc, #40]	; (d426c <_Z10displayKeyv+0x60>)
   d4244:	681b      	ldr	r3, [r3, #0]
   d4246:	b963      	cbnz	r3, d4262 <_Z10displayKeyv+0x56>
   d4248:	4b09      	ldr	r3, [pc, #36]	; (d4270 <_Z10displayKeyv+0x64>)
   d424a:	681b      	ldr	r3, [r3, #0]
   d424c:	2b01      	cmp	r3, #1
   d424e:	d108      	bne.n	d4262 <_Z10displayKeyv+0x56>
   d4250:	4b08      	ldr	r3, [pc, #32]	; (d4274 <_Z10displayKeyv+0x68>)
   d4252:	681b      	ldr	r3, [r3, #0]
   d4254:	2b01      	cmp	r3, #1
   d4256:	d104      	bne.n	d4262 <_Z10displayKeyv+0x56>
    
    if(hasRun == false){
   d4258:	4b07      	ldr	r3, [pc, #28]	; (d4278 <_Z10displayKeyv+0x6c>)
   d425a:	781b      	ldrb	r3, [r3, #0]
   d425c:	b90b      	cbnz	r3, d4262 <_Z10displayKeyv+0x56>
    //Serial.printf("Blue button\n");
    unlockServo();
   d425e:	f7ff bf89 	b.w	d4174 <_Z11unlockServov>
   d4262:	4770      	bx	lr
   d4264:	2003e3c4 	.word	0x2003e3c4
   d4268:	2003e380 	.word	0x2003e380
   d426c:	2003e34c 	.word	0x2003e34c
   d4270:	2003e3cc 	.word	0x2003e3cc
   d4274:	2003e360 	.word	0x2003e360
   d4278:	2003e3c9 	.word	0x2003e3c9

000d427c <loop>:
  Serial.printf("System Ready...");
  display.printf("ALARM\nSYSTEM\nREADY");
  display.display();

}
void loop() {
   d427c:	b573      	push	{r0, r1, r4, r5, r6, lr}

  anodeRead = analogRead(anodePin);
  //Serial.printf("Anode: %i\n", anodeRead); //used for testing

  
  if (i == 5){
   d427e:	4c3a      	ldr	r4, [pc, #232]	; (d4368 <loop+0xec>)

}
void loop() {


  anodeRead = analogRead(anodePin);
   d4280:	4d3a      	ldr	r5, [pc, #232]	; (d436c <loop+0xf0>)
   d4282:	200e      	movs	r0, #14
   d4284:	f001 ff22 	bl	d60cc <analogRead>
  //Serial.printf("Anode: %i\n", anodeRead); //used for testing

  
  if (i == 5){
   d4288:	6823      	ldr	r3, [r4, #0]

}
void loop() {


  anodeRead = analogRead(anodePin);
   d428a:	6028      	str	r0, [r5, #0]
  //Serial.printf("Anode: %i\n", anodeRead); //used for testing

  
  if (i == 5){
   d428c:	2b05      	cmp	r3, #5
   d428e:	d101      	bne.n	d4294 <loop+0x18>
    displayKey();
   d4290:	f7ff ffbc 	bl	d420c <_Z10displayKeyv>
  }

  if (i > 5){ //do not change
   d4294:	6823      	ldr	r3, [r4, #0]
   d4296:	2b05      	cmp	r3, #5
   d4298:	dd05      	ble.n	d42a6 <loop+0x2a>
   i = 1; //do not change 
   d429a:	4b33      	ldr	r3, [pc, #204]	; (d4368 <loop+0xec>)
   d429c:	2201      	movs	r2, #1
   d429e:	601a      	str	r2, [r3, #0]
   hasRun = false;
   d42a0:	4b33      	ldr	r3, [pc, #204]	; (d4370 <loop+0xf4>)
   d42a2:	2200      	movs	r2, #0
   d42a4:	701a      	strb	r2, [r3, #0]
  }

  if (!timerState && anodeRead > triggerValue){ //if timer is not running and anode is triggered then run
   d42a6:	4e33      	ldr	r6, [pc, #204]	; (d4374 <loop+0xf8>)
   d42a8:	7833      	ldrb	r3, [r6, #0]
   d42aa:	b96b      	cbnz	r3, d42c8 <loop+0x4c>
   d42ac:	4b32      	ldr	r3, [pc, #200]	; (d4378 <loop+0xfc>)
   d42ae:	682a      	ldr	r2, [r5, #0]
   d42b0:	681b      	ldr	r3, [r3, #0]
   d42b2:	429a      	cmp	r2, r3
   d42b4:	dd08      	ble.n	d42c8 <loop+0x4c>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d42b6:	f000 fe4b 	bl	d4f50 <HAL_Timer_Get_Milli_Seconds>
    startTime = millis();
   d42ba:	4b30      	ldr	r3, [pc, #192]	; (d437c <loop+0x100>)
   d42bc:	6018      	str	r0, [r3, #0]
    timerState = true;
   d42be:	2301      	movs	r3, #1
   d42c0:	7033      	strb	r3, [r6, #0]
    i++; //sets i = to 1 right away
   d42c2:	6823      	ldr	r3, [r4, #0]
   d42c4:	3301      	adds	r3, #1
   d42c6:	6023      	str	r3, [r4, #0]
  }

  if (timerState && anodeRead < triggerValue){ // if timer is running and anode is not triggered then run
   d42c8:	7833      	ldrb	r3, [r6, #0]
   d42ca:	4e2d      	ldr	r6, [pc, #180]	; (d4380 <loop+0x104>)
   d42cc:	2b00      	cmp	r3, #0
   d42ce:	d03a      	beq.n	d4346 <loop+0xca>
   d42d0:	4b29      	ldr	r3, [pc, #164]	; (d4378 <loop+0xfc>)
   d42d2:	682a      	ldr	r2, [r5, #0]
   d42d4:	681b      	ldr	r3, [r3, #0]
   d42d6:	429a      	cmp	r2, r3
   d42d8:	da35      	bge.n	d4346 <loop+0xca>
   d42da:	f000 fe39 	bl	d4f50 <HAL_Timer_Get_Milli_Seconds>
    endTime = millis();
   d42de:	4b29      	ldr	r3, [pc, #164]	; (d4384 <loop+0x108>)
   d42e0:	6018      	str	r0, [r3, #0]
    timerState = false;
   d42e2:	4b24      	ldr	r3, [pc, #144]	; (d4374 <loop+0xf8>)
   d42e4:	2500      	movs	r5, #0
   d42e6:	701d      	strb	r5, [r3, #0]
    duration = endTime - startTime;
   d42e8:	4b24      	ldr	r3, [pc, #144]	; (d437c <loop+0x100>)
   d42ea:	681b      	ldr	r3, [r3, #0]
   d42ec:	1ac0      	subs	r0, r0, r3
   d42ee:	4b26      	ldr	r3, [pc, #152]	; (d4388 <loop+0x10c>)
   d42f0:	6018      	str	r0, [r3, #0]

    if(duration > zeroMin && duration < zeroMax){
   d42f2:	4b26      	ldr	r3, [pc, #152]	; (d438c <loop+0x110>)
   d42f4:	681b      	ldr	r3, [r3, #0]
   d42f6:	4298      	cmp	r0, r3
   d42f8:	d90f      	bls.n	d431a <loop+0x9e>
   d42fa:	4b25      	ldr	r3, [pc, #148]	; (d4390 <loop+0x114>)
   d42fc:	681b      	ldr	r3, [r3, #0]
   d42fe:	4298      	cmp	r0, r3
   d4300:	d20b      	bcs.n	d431a <loop+0x9e>
      array[i] = 0;
   d4302:	6823      	ldr	r3, [r4, #0]
   d4304:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
      Serial.printf("ZERO i = %i Array Value: %i\n", i, array[i]);
   d4308:	f001 fd94 	bl	d5e34 <_Z16_fetch_usbserialv>
   d430c:	6823      	ldr	r3, [r4, #0]
   d430e:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   d4312:	9200      	str	r2, [sp, #0]
   d4314:	4629      	mov	r1, r5
   d4316:	4a1f      	ldr	r2, [pc, #124]	; (d4394 <loop+0x118>)
   d4318:	e013      	b.n	d4342 <loop+0xc6>
    }
    else if(duration > oneMin && duration < oneMax){
   d431a:	4b1f      	ldr	r3, [pc, #124]	; (d4398 <loop+0x11c>)
   d431c:	681b      	ldr	r3, [r3, #0]
   d431e:	4298      	cmp	r0, r3
   d4320:	d911      	bls.n	d4346 <loop+0xca>
   d4322:	4b1e      	ldr	r3, [pc, #120]	; (d439c <loop+0x120>)
   d4324:	681b      	ldr	r3, [r3, #0]
   d4326:	4298      	cmp	r0, r3
   d4328:	d20d      	bcs.n	d4346 <loop+0xca>
      array[i] = 1;
   d432a:	6823      	ldr	r3, [r4, #0]
   d432c:	2201      	movs	r2, #1
   d432e:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
      Serial.printf("ONE  i = %i Array Value: %i\n", i, array[i]);
   d4332:	f001 fd7f 	bl	d5e34 <_Z16_fetch_usbserialv>
   d4336:	6823      	ldr	r3, [r4, #0]
   d4338:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   d433c:	9200      	str	r2, [sp, #0]
   d433e:	4a18      	ldr	r2, [pc, #96]	; (d43a0 <loop+0x124>)
   d4340:	2100      	movs	r1, #0
   d4342:	f001 fb18 	bl	d5976 <_ZN5Print11printf_implEbPKcz>
    }
  }

    bitZero = array[1];
   d4346:	4b17      	ldr	r3, [pc, #92]	; (d43a4 <loop+0x128>)
   d4348:	6872      	ldr	r2, [r6, #4]
   d434a:	601a      	str	r2, [r3, #0]
    bitOne = array[2];
   d434c:	4b16      	ldr	r3, [pc, #88]	; (d43a8 <loop+0x12c>)
   d434e:	68b2      	ldr	r2, [r6, #8]
   d4350:	601a      	str	r2, [r3, #0]
    bitTwo = array[3];
   d4352:	4b16      	ldr	r3, [pc, #88]	; (d43ac <loop+0x130>)
   d4354:	68f2      	ldr	r2, [r6, #12]
   d4356:	601a      	str	r2, [r3, #0]
    bitThree = array[4];
   d4358:	4b15      	ldr	r3, [pc, #84]	; (d43b0 <loop+0x134>)
   d435a:	6932      	ldr	r2, [r6, #16]
   d435c:	601a      	str	r2, [r3, #0]
    bitFour = array[5];
   d435e:	6972      	ldr	r2, [r6, #20]
   d4360:	4b14      	ldr	r3, [pc, #80]	; (d43b4 <loop+0x138>)
   d4362:	601a      	str	r2, [r3, #0]

}
   d4364:	b002      	add	sp, #8
   d4366:	bd70      	pop	{r4, r5, r6, pc}
   d4368:	2003e3c0 	.word	0x2003e3c0
   d436c:	2003e364 	.word	0x2003e364
   d4370:	2003e3c9 	.word	0x2003e3c9
   d4374:	2003e3c8 	.word	0x2003e3c8
   d4378:	2003dec4 	.word	0x2003dec4
   d437c:	2003e3bc 	.word	0x2003e3bc
   d4380:	2003e368 	.word	0x2003e368
   d4384:	2003e394 	.word	0x2003e394
   d4388:	2003e390 	.word	0x2003e390
   d438c:	2003decc 	.word	0x2003decc
   d4390:	2003debc 	.word	0x2003debc
   d4394:	000d660e 	.word	0x000d660e
   d4398:	2003dec8 	.word	0x2003dec8
   d439c:	2003dec0 	.word	0x2003dec0
   d43a0:	000d662b 	.word	0x000d662b
   d43a4:	2003e3c4 	.word	0x2003e3c4
   d43a8:	2003e380 	.word	0x2003e380
   d43ac:	2003e34c 	.word	0x2003e34c
   d43b0:	2003e3cc 	.word	0x2003e3cc
   d43b4:	2003e360 	.word	0x2003e360

000d43b8 <_ZN16Adafruit_SSD1306D0Ev>:
   d43b8:	b510      	push	{r4, lr}
   d43ba:	2124      	movs	r1, #36	; 0x24
   d43bc:	4604      	mov	r4, r0
   d43be:	f001 ff2a 	bl	d6216 <_ZdlPvj>
   d43c2:	4620      	mov	r0, r4
   d43c4:	bd10      	pop	{r4, pc}
	...

000d43c8 <_GLOBAL__sub_I_SystemMode>:
    // myServo.write(50);
    // delay(1000);
    analogWrite(D7, 20); //for testing only
    Serial.printf("Yellow button\n");
    hasRun = true;
}
   d43c8:	b538      	push	{r3, r4, r5, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d43ca:	4c11      	ldr	r4, [pc, #68]	; (d4410 <_GLOBAL__sub_I_SystemMode+0x48>)
 * Description:
 * Author:
 * Date:
 */

SYSTEM_MODE(SEMI_AUTOMATIC);
   d43cc:	4d11      	ldr	r5, [pc, #68]	; (d4414 <_GLOBAL__sub_I_SystemMode+0x4c>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d43ce:	f000 fdc7 	bl	d4f60 <HAL_Pin_Map>
   d43d2:	2300      	movs	r3, #0
   d43d4:	6023      	str	r3, [r4, #0]
   d43d6:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d43d8:	71a3      	strb	r3, [r4, #6]
   d43da:	8123      	strh	r3, [r4, #8]
   d43dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d43e0:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d43e2:	2002      	movs	r0, #2
   d43e4:	f000 ff44 	bl	d5270 <set_system_mode>
   d43e8:	4620      	mov	r0, r4

#include <Adafruit_SSD1306.h>

#define OLED_RESET D4

Adafruit_SSD1306 display(OLED_RESET);
   d43ea:	4c0b      	ldr	r4, [pc, #44]	; (d4418 <_GLOBAL__sub_I_SystemMode+0x50>)
 * Description:
 * Author:
 * Date:
 */

SYSTEM_MODE(SEMI_AUTOMATIC);
   d43ec:	490b      	ldr	r1, [pc, #44]	; (d441c <_GLOBAL__sub_I_SystemMode+0x54>)
   d43ee:	462a      	mov	r2, r5
   d43f0:	f001 ff0c 	bl	d620c <__aeabi_atexit>

#include <Adafruit_SSD1306.h>

#define OLED_RESET D4

Adafruit_SSD1306 display(OLED_RESET);
   d43f4:	2104      	movs	r1, #4
   d43f6:	4620      	mov	r0, r4
   d43f8:	f000 fba0 	bl	d4b3c <_ZN16Adafruit_SSD1306C1Ea>
   d43fc:	462a      	mov	r2, r5
   d43fe:	4620      	mov	r0, r4
   d4400:	4907      	ldr	r1, [pc, #28]	; (d4420 <_GLOBAL__sub_I_SystemMode+0x58>)
   d4402:	f001 ff03 	bl	d620c <__aeabi_atexit>

const int anodePin = A5; 

//revert to here before SERVO

Servo myServo;
   d4406:	4807      	ldr	r0, [pc, #28]	; (d4424 <_GLOBAL__sub_I_SystemMode+0x5c>)
    // myServo.write(50);
    // delay(1000);
    analogWrite(D7, 20); //for testing only
    Serial.printf("Yellow button\n");
    hasRun = true;
}
   d4408:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

const int anodePin = A5; 

//revert to here before SERVO

Servo myServo;
   d440c:	f001 bb11 	b.w	d5a32 <_ZN5ServoC1Ev>
   d4410:	2003e384 	.word	0x2003e384
   d4414:	2003e348 	.word	0x2003e348
   d4418:	2003e398 	.word	0x2003e398
   d441c:	000d40c7 	.word	0x000d40c7
   d4420:	000d40c5 	.word	0x000d40c5
   d4424:	2003e350 	.word	0x2003e350

000d4428 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d4428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d442c:	b085      	sub	sp, #20
   d442e:	461e      	mov	r6, r3
   d4430:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d4434:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d4438:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d443a:	1a9a      	subs	r2, r3, r2
   d443c:	2a00      	cmp	r2, #0
   d443e:	bfb8      	it	lt
   d4440:	4252      	neglt	r2, r2
   d4442:	9200      	str	r2, [sp, #0]
   d4444:	1a72      	subs	r2, r6, r1
   d4446:	2a00      	cmp	r2, #0
   d4448:	bfb8      	it	lt
   d444a:	4252      	neglt	r2, r2
   d444c:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d444e:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d4450:	9a00      	ldr	r2, [sp, #0]
   d4452:	9901      	ldr	r1, [sp, #4]
   d4454:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d4456:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d4458:	dd05      	ble.n	d4466 <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d445a:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
   d445c:	461e      	mov	r6, r3
   d445e:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d4460:	4622      	mov	r2, r4
    swap(x0, y0);
   d4462:	462c      	mov	r4, r5
   d4464:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
   d4466:	42b4      	cmp	r4, r6
   d4468:	dd05      	ble.n	d4476 <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d446a:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d446c:	461d      	mov	r5, r3
   d446e:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
   d4470:	4622      	mov	r2, r4
   d4472:	4634      	mov	r4, r6
   d4474:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d4476:	1b5a      	subs	r2, r3, r5
   d4478:	2a00      	cmp	r2, #0
   d447a:	bfb8      	it	lt
   d447c:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d447e:	ebc4 0806 	rsb	r8, r4, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d4482:	429d      	cmp	r5, r3
   d4484:	bfb4      	ite	lt
   d4486:	2301      	movlt	r3, #1
   d4488:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d448c:	fa1f f888 	uxth.w	r8, r8
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d4490:	9302      	str	r3, [sp, #8]
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d4492:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
   d4494:	fa0f f788 	sxth.w	r7, r8
   d4498:	2202      	movs	r2, #2
   d449a:	fb97 f7f2 	sdiv	r7, r7, r2
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d449e:	42b4      	cmp	r4, r6
   d44a0:	dc1f      	bgt.n	d44e2 <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
   d44a2:	9a01      	ldr	r2, [sp, #4]
   d44a4:	9b00      	ldr	r3, [sp, #0]
   d44a6:	4293      	cmp	r3, r2
   d44a8:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
   d44ac:	bfc8      	it	gt
   d44ae:	4622      	movgt	r2, r4
   d44b0:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d44b4:	bfc8      	it	gt
   d44b6:	4629      	movgt	r1, r5
   d44b8:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
   d44ba:	bfdc      	itt	le
   d44bc:	462a      	movle	r2, r5
   d44be:	4621      	movle	r1, r4
   d44c0:	4648      	mov	r0, r9
   d44c2:	47d8      	blx	fp
    }
    err -= dy;
   d44c4:	9b03      	ldr	r3, [sp, #12]
   d44c6:	1aff      	subs	r7, r7, r3
   d44c8:	b2bb      	uxth	r3, r7
   d44ca:	b21f      	sxth	r7, r3
    if (err < 0) {
   d44cc:	2f00      	cmp	r7, #0
   d44ce:	da05      	bge.n	d44dc <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
   d44d0:	9a02      	ldr	r2, [sp, #8]
      err += dx;
   d44d2:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
   d44d6:	4415      	add	r5, r2
   d44d8:	b22d      	sxth	r5, r5
      err += dx;
   d44da:	b23f      	sxth	r7, r7
   d44dc:	3401      	adds	r4, #1
   d44de:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d44e0:	e7dd      	b.n	d449e <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
   d44e2:	b005      	add	sp, #20
   d44e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d44e8 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d44e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d44ec:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d44f0:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d44f2:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d44f6:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d44f8:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d44fa:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d44fc:	4691      	mov	r9, r2
   d44fe:	460d      	mov	r5, r1
   d4500:	4698      	mov	r8, r3
  drawFastHLine(x, y, w, color);
   d4502:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d4504:	6823      	ldr	r3, [r4, #0]
   d4506:	9600      	str	r6, [sp, #0]
   d4508:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   d450c:	444a      	add	r2, r9
   d450e:	69df      	ldr	r7, [r3, #28]
   d4510:	4629      	mov	r1, r5
   d4512:	4643      	mov	r3, r8
   d4514:	4620      	mov	r0, r4
   d4516:	b212      	sxth	r2, r2
   d4518:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d451a:	6823      	ldr	r3, [r4, #0]
   d451c:	9600      	str	r6, [sp, #0]
   d451e:	699f      	ldr	r7, [r3, #24]
   d4520:	464a      	mov	r2, r9
   d4522:	4653      	mov	r3, sl
   d4524:	4629      	mov	r1, r5
   d4526:	4620      	mov	r0, r4
   d4528:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d452a:	6823      	ldr	r3, [r4, #0]
   d452c:	960a      	str	r6, [sp, #40]	; 0x28
   d452e:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
   d4532:	4429      	add	r1, r5
   d4534:	699d      	ldr	r5, [r3, #24]
   d4536:	464a      	mov	r2, r9
   d4538:	4653      	mov	r3, sl
   d453a:	b209      	sxth	r1, r1
   d453c:	4620      	mov	r0, r4
   d453e:	46ac      	mov	ip, r5
}
   d4540:	b002      	add	sp, #8
   d4542:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
   d4546:	4760      	bx	ip

000d4548 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d4548:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d454a:	3b01      	subs	r3, #1
   d454c:	4413      	add	r3, r2
   d454e:	6804      	ldr	r4, [r0, #0]
   d4550:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d4554:	9501      	str	r5, [sp, #4]
   d4556:	b21b      	sxth	r3, r3
   d4558:	9300      	str	r3, [sp, #0]
   d455a:	6964      	ldr	r4, [r4, #20]
   d455c:	460b      	mov	r3, r1
   d455e:	47a0      	blx	r4
}
   d4560:	b003      	add	sp, #12
   d4562:	bd30      	pop	{r4, r5, pc}

000d4564 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d4564:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d4566:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d456a:	6804      	ldr	r4, [r0, #0]
   d456c:	e88d 0024 	stmia.w	sp, {r2, r5}
   d4570:	3b01      	subs	r3, #1
   d4572:	440b      	add	r3, r1
   d4574:	6964      	ldr	r4, [r4, #20]
   d4576:	b21b      	sxth	r3, r3
   d4578:	47a0      	blx	r4
}
   d457a:	b003      	add	sp, #12
   d457c:	bd30      	pop	{r4, r5, pc}

000d457e <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d457e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4582:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d4586:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d458a:	4605      	mov	r5, r0
   d458c:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d458e:	460c      	mov	r4, r1
   d4590:	eb01 0a03 	add.w	sl, r1, r3
   d4594:	4554      	cmp	r4, sl
   d4596:	da0b      	bge.n	d45b0 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
   d4598:	682b      	ldr	r3, [r5, #0]
   d459a:	f8cd 9000 	str.w	r9, [sp]
   d459e:	699e      	ldr	r6, [r3, #24]
   d45a0:	4621      	mov	r1, r4
   d45a2:	4643      	mov	r3, r8
   d45a4:	463a      	mov	r2, r7
   d45a6:	4628      	mov	r0, r5
   d45a8:	3401      	adds	r4, #1
   d45aa:	47b0      	blx	r6
   d45ac:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d45ae:	e7f1      	b.n	d4594 <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
   d45b0:	b002      	add	sp, #8
   d45b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d45b6 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d45b6:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d45b8:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d45bc:	6804      	ldr	r4, [r0, #0]
   d45be:	9101      	str	r1, [sp, #4]
   d45c0:	9200      	str	r2, [sp, #0]
   d45c2:	2200      	movs	r2, #0
   d45c4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d45c8:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d45ca:	4611      	mov	r1, r2
   d45cc:	47a0      	blx	r4
}
   d45ce:	b002      	add	sp, #8
   d45d0:	bd10      	pop	{r4, pc}

000d45d2 <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d45d2:	4770      	bx	lr

000d45d4 <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d45d4:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d45d6:	8101      	strh	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d45d8:	2400      	movs	r4, #0
   d45da:	4d08      	ldr	r5, [pc, #32]	; (d45fc <_ZN12Adafruit_GFXC1Ess+0x28>)
   d45dc:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
   d45de:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
   d45e0:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
   d45e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
   d45e6:	2201      	movs	r2, #1
   d45e8:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
   d45ea:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
   d45ec:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
   d45ee:	8204      	strh	r4, [r0, #16]
   d45f0:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
   d45f2:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
   d45f4:	82c1      	strh	r1, [r0, #22]
   d45f6:	8281      	strh	r1, [r0, #20]
  wrap      = true;
   d45f8:	7682      	strb	r2, [r0, #26]
}
   d45fa:	bd30      	pop	{r4, r5, pc}
   d45fc:	000d6650 	.word	0x000d6650

000d4600 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d4600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4604:	b08f      	sub	sp, #60	; 0x3c
   d4606:	4605      	mov	r5, r0
   d4608:	9106      	str	r1, [sp, #24]
   d460a:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d460e:	9107      	str	r1, [sp, #28]
   d4610:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d4614:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
   d4616:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d461a:	9806      	ldr	r0, [sp, #24]
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d461c:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68

  if((x >= _width)            || // Clip right
   d4620:	4281      	cmp	r1, r0
   d4622:	dd7c      	ble.n	d471e <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d4624:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d4628:	4291      	cmp	r1, r2
   d462a:	dd78      	ble.n	d471e <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
   d462c:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
   d462e:	fb11 0008 	smlabb	r0, r1, r8, r0
   d4632:	2800      	cmp	r0, #0
   d4634:	dd73      	ble.n	d471e <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     ((x + 6 * size - 1) < 0) || // Clip left
   d4636:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d463a:	2800      	cmp	r0, #0
   d463c:	dd6f      	ble.n	d471e <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d463e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4642:	b296      	uxth	r6, r2
   d4644:	930c      	str	r3, [sp, #48]	; 0x30
   d4646:	f106 0308 	add.w	r3, r6, #8
   d464a:	b29b      	uxth	r3, r3
   d464c:	9109      	str	r1, [sp, #36]	; 0x24
   d464e:	2400      	movs	r4, #0
   d4650:	930d      	str	r3, [sp, #52]	; 0x34
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
   d4652:	2c05      	cmp	r4, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4654:	bf1c      	itt	ne
   d4656:	4b33      	ldrne	r3, [pc, #204]	; (d4724 <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d4658:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d465a:	9605      	str	r6, [sp, #20]
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d465c:	bf16      	itet	ne
   d465e:	191b      	addne	r3, r3, r4
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
   d4660:	f04f 0900 	moveq.w	r9, #0
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4664:	f813 9002 	ldrbne.w	r9, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4668:	9604      	str	r6, [sp, #16]
   d466a:	fa1f f388 	uxth.w	r3, r8
   d466e:	9303      	str	r3, [sp, #12]
   d4670:	9a03      	ldr	r2, [sp, #12]
   d4672:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d4676:	fb04 3202 	mla	r2, r4, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d467a:	fa13 f384 	uxtah	r3, r3, r4
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d467e:	b212      	sxth	r2, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4680:	b21b      	sxth	r3, r3
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4682:	920a      	str	r2, [sp, #40]	; 0x28
   d4684:	4637      	mov	r7, r6
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4686:	fa0f fa88 	sxth.w	sl, r8
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d468a:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
   d468c:	f019 0f01 	tst.w	r9, #1
   d4690:	d011      	beq.n	d46b6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
        if (size == 1) // default size
   d4692:	f1b8 0f01 	cmp.w	r8, #1
   d4696:	682b      	ldr	r3, [r5, #0]
   d4698:	d103      	bne.n	d46a2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
          drawPixel(x+i, y+j, color);
   d469a:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d469e:	9b07      	ldr	r3, [sp, #28]
   d46a0:	e014      	b.n	d46cc <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d46a2:	9a07      	ldr	r2, [sp, #28]
   d46a4:	9201      	str	r2, [sp, #4]
   d46a6:	f8cd a000 	str.w	sl, [sp]
   d46aa:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d46ae:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d46b2:	4653      	mov	r3, sl
   d46b4:	e018      	b.n	d46e8 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
        } 
      } else if (bg != color) {
   d46b6:	9b07      	ldr	r3, [sp, #28]
   d46b8:	9a08      	ldr	r2, [sp, #32]
   d46ba:	4293      	cmp	r3, r2
   d46bc:	d017      	beq.n	d46ee <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d46be:	f1b8 0f01 	cmp.w	r8, #1
   d46c2:	682b      	ldr	r3, [r5, #0]
   d46c4:	d107      	bne.n	d46d6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, bg);
   d46c6:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d46ca:	4613      	mov	r3, r2
   d46cc:	b23a      	sxth	r2, r7
   d46ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d46d0:	4628      	mov	r0, r5
   d46d2:	47d8      	blx	fp
   d46d4:	e00b      	b.n	d46ee <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d46d6:	9a08      	ldr	r2, [sp, #32]
   d46d8:	9201      	str	r2, [sp, #4]
   d46da:	f8cd a000 	str.w	sl, [sp]
   d46de:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d46e2:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d46e6:	4653      	mov	r3, sl
   d46e8:	990a      	ldr	r1, [sp, #40]	; 0x28
   d46ea:	4628      	mov	r0, r5
   d46ec:	47d8      	blx	fp
   d46ee:	9b04      	ldr	r3, [sp, #16]
   d46f0:	9a03      	ldr	r2, [sp, #12]
   d46f2:	4413      	add	r3, r2
   d46f4:	b29b      	uxth	r3, r3
   d46f6:	9304      	str	r3, [sp, #16]
   d46f8:	9b05      	ldr	r3, [sp, #20]
   d46fa:	4413      	add	r3, r2
   d46fc:	b29b      	uxth	r3, r3
   d46fe:	3701      	adds	r7, #1
   d4700:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d4702:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d4704:	b2bf      	uxth	r7, r7
   d4706:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
   d4708:	ea4f 0959 	mov.w	r9, r9, lsr #1
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d470c:	d1be      	bne.n	d468c <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d470e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4710:	3b01      	subs	r3, #1
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
   d4712:	3401      	adds	r4, #1
   d4714:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d4718:	b264      	sxtb	r4, r4
   d471a:	9309      	str	r3, [sp, #36]	; 0x24
   d471c:	d199      	bne.n	d4652 <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
   d471e:	b00f      	add	sp, #60	; 0x3c
   d4720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4724:	000d6680 	.word	0x000d6680

000d4728 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d4728:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
   d472a:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d472c:	b085      	sub	sp, #20
   d472e:	4604      	mov	r4, r0
   d4730:	460b      	mov	r3, r1

  if (c == '\n') {
   d4732:	d104      	bne.n	d473e <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
   d4734:	7e02      	ldrb	r2, [r0, #24]
   d4736:	8a43      	ldrh	r3, [r0, #18]
   d4738:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d473c:	e023      	b.n	d4786 <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
   d473e:	290d      	cmp	r1, #13
   d4740:	d024      	beq.n	d478c <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d4742:	7e05      	ldrb	r5, [r0, #24]
   d4744:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d4748:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d474c:	9502      	str	r5, [sp, #8]
   d474e:	8ac5      	ldrh	r5, [r0, #22]
   d4750:	9501      	str	r5, [sp, #4]
   d4752:	8a85      	ldrh	r5, [r0, #20]
   d4754:	9500      	str	r5, [sp, #0]
   d4756:	f7ff ff53 	bl	d4600 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d475a:	7e22      	ldrb	r2, [r4, #24]
   d475c:	8a23      	ldrh	r3, [r4, #16]
   d475e:	b291      	uxth	r1, r2
   d4760:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d4764:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d4768:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
   d476a:	b21b      	sxth	r3, r3
   d476c:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d476e:	b168      	cbz	r0, d478c <_ZN12Adafruit_GFX5writeEh+0x64>
   d4770:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d4774:	f06f 0505 	mvn.w	r5, #5
   d4778:	fb05 0202 	mla	r2, r5, r2, r0
   d477c:	4293      	cmp	r3, r2
   d477e:	dd05      	ble.n	d478c <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
   d4780:	8a63      	ldrh	r3, [r4, #18]
   d4782:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d4786:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d4788:	2300      	movs	r3, #0
   d478a:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
   d478c:	2001      	movs	r0, #1
   d478e:	b005      	add	sp, #20
   d4790:	bd30      	pop	{r4, r5, pc}

000d4792 <_ZN12Adafruit_GFX9setCursorEss>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
   d4792:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d4794:	8242      	strh	r2, [r0, #18]
   d4796:	4770      	bx	lr

000d4798 <_ZN12Adafruit_GFX11setTextSizeEh>:
}

void Adafruit_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
   d4798:	2900      	cmp	r1, #0
   d479a:	bf08      	it	eq
   d479c:	2101      	moveq	r1, #1
   d479e:	7601      	strb	r1, [r0, #24]
   d47a0:	4770      	bx	lr

000d47a2 <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
   d47a2:	82c1      	strh	r1, [r0, #22]
   d47a4:	8281      	strh	r1, [r0, #20]
   d47a6:	4770      	bx	lr

000d47a8 <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
   d47a8:	7e40      	ldrb	r0, [r0, #25]
   d47aa:	4770      	bx	lr

000d47ac <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
   d47ac:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d47b0:	4770      	bx	lr

000d47b2 <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
   d47b2:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d47b6:	4770      	bx	lr

000d47b8 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d47b8:	f000 bbd2 	b.w	d4f60 <HAL_Pin_Map>

000d47bc <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d47bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d47be:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d47c0:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
   d47c4:	2c02      	cmp	r4, #2
   d47c6:	d008      	beq.n	d47da <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
   d47c8:	2c03      	cmp	r4, #3
   d47ca:	d00f      	beq.n	d47ec <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
   d47cc:	2c01      	cmp	r4, #1
   d47ce:	d170      	bne.n	d48b2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d47d0:	8904      	ldrh	r4, [r0, #8]
   d47d2:	3c01      	subs	r4, #1
   d47d4:	1aa2      	subs	r2, r4, r2
   d47d6:	b212      	sxth	r2, r2
      break;
   d47d8:	e00c      	b.n	d47f4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d47da:	8944      	ldrh	r4, [r0, #10]
   d47dc:	3c01      	subs	r4, #1
   d47de:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d47e0:	8904      	ldrh	r4, [r0, #8]
   d47e2:	1ae4      	subs	r4, r4, r3
   d47e4:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d47e6:	b212      	sxth	r2, r2
      x -= (w-1);
   d47e8:	b209      	sxth	r1, r1
      break;
   d47ea:	e062      	b.n	d48b2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d47ec:	8944      	ldrh	r4, [r0, #10]
   d47ee:	1ae4      	subs	r4, r4, r3
   d47f0:	1a61      	subs	r1, r4, r1
   d47f2:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d47f4:	2a00      	cmp	r2, #0
   d47f6:	db5b      	blt.n	d48b0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
   d47f8:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d47fc:	4294      	cmp	r4, r2
   d47fe:	f340 8090 	ble.w	d4922 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4802:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4804:	bfbe      	ittt	lt
   d4806:	185b      	addlt	r3, r3, r1
   d4808:	b21b      	sxthlt	r3, r3
    __y = 0;
   d480a:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d480c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d4810:	18cc      	adds	r4, r1, r3
   d4812:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4814:	bfc4      	itt	gt
   d4816:	1a43      	subgt	r3, r0, r1
   d4818:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d481a:	2b00      	cmp	r3, #0
   d481c:	f340 8081 	ble.w	d4922 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4820:	b2c9      	uxtb	r1, r1


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4822:	08c8      	lsrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d4824:	4f3f      	ldr	r7, [pc, #252]	; (d4924 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d4826:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d482a:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d482e:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4830:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4834:	d017      	beq.n	d4866 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4836:	f1c1 0108 	rsb	r1, r1, #8
   d483a:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d483c:	493a      	ldr	r1, [pc, #232]	; (d4928 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d483e:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4840:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d4842:	bf3f      	itttt	cc
   d4844:	ebc3 0e00 	rsbcc	lr, r3, r0
   d4848:	21ff      	movcc	r1, #255	; 0xff
   d484a:	fa41 f10e 	asrcc.w	r1, r1, lr
   d484e:	400e      	andcc	r6, r1
   d4850:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
   d4852:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4854:	bf0c      	ite	eq
   d4856:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
   d4858:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d485a:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d485c:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d485e:	d360      	bcc.n	d4922 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
   d4860:	1a18      	subs	r0, r3, r0
   d4862:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
   d4864:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d4866:	2b07      	cmp	r3, #7
   d4868:	d917      	bls.n	d489a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d486a:	2d01      	cmp	r5, #1
   d486c:	bf0c      	ite	eq
   d486e:	20ff      	moveq	r0, #255	; 0xff
   d4870:	2000      	movne	r0, #0
   d4872:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d4876:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d4878:	3a08      	subs	r2, #8
   d487a:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d487c:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d487e:	f801 0c80 	strb.w	r0, [r1, #-128]
   d4882:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d4886:	d8f7      	bhi.n	d4878 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
   d4888:	f1a3 0208 	sub.w	r2, r3, #8
   d488c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d4890:	3201      	adds	r2, #1
   d4892:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   d4896:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d489a:	2b00      	cmp	r3, #0
   d489c:	d041      	beq.n	d4922 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d489e:	4a23      	ldr	r2, [pc, #140]	; (d492c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
   d48a0:	5cd2      	ldrb	r2, [r2, r3]
   d48a2:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
   d48a4:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d48a6:	bf0c      	ite	eq
   d48a8:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d48aa:	4393      	bicne	r3, r2
   d48ac:	7023      	strb	r3, [r4, #0]
   d48ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d48b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d48b2:	2a00      	cmp	r2, #0
   d48b4:	db35      	blt.n	d4922 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d48b6:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d48ba:	4294      	cmp	r4, r2
   d48bc:	dd31      	ble.n	d4922 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d48be:	2900      	cmp	r1, #0
    w += x;
   d48c0:	bfbc      	itt	lt
   d48c2:	18c9      	addlt	r1, r1, r3
   d48c4:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d48c6:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d48ca:	bfb8      	it	lt
   d48cc:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d48ce:	18ce      	adds	r6, r1, r3
   d48d0:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d48d2:	bfc4      	itt	gt
   d48d4:	1a63      	subgt	r3, r4, r1
   d48d6:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d48d8:	2b00      	cmp	r3, #0
   d48da:	dd22      	ble.n	d4922 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d48dc:	10d0      	asrs	r0, r2, #3
  // and offset x columns in
  pBuf += x;
   d48de:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   d48e2:	4810      	ldr	r0, [pc, #64]	; (d4924 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
   d48e4:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d48e8:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
   d48ea:	2001      	movs	r0, #1
   d48ec:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
   d48f0:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d48f2:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
   d48f4:	d109      	bne.n	d490a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d48f6:	3b01      	subs	r3, #1
   d48f8:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
   d48fa:	1c5c      	adds	r4, r3, #1
   d48fc:	d011      	beq.n	d4922 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d48fe:	f811 0b01 	ldrb.w	r0, [r1], #1
   d4902:	4310      	orrs	r0, r2
   d4904:	f801 0c01 	strb.w	r0, [r1, #-1]
   d4908:	e7f5      	b.n	d48f6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
   d490a:	43d2      	mvns	r2, r2
   d490c:	b2d2      	uxtb	r2, r2
   d490e:	3b01      	subs	r3, #1
   d4910:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
   d4912:	1c58      	adds	r0, r3, #1
   d4914:	d005      	beq.n	d4922 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4916:	f811 0b01 	ldrb.w	r0, [r1], #1
   d491a:	4010      	ands	r0, r2
   d491c:	f801 0c01 	strb.w	r0, [r1, #-1]
   d4920:	e7f5      	b.n	d490e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   d4922:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4924:	2003dee0 	.word	0x2003dee0
   d4928:	2003ded8 	.word	0x2003ded8
   d492c:	2003ded0 	.word	0x2003ded0

000d4930 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4930:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
   d4932:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4934:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
   d4938:	2c02      	cmp	r4, #2
   d493a:	d008      	beq.n	d494e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d493c:	2c03      	cmp	r4, #3
   d493e:	d00f      	beq.n	d4960 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d4940:	2c01      	cmp	r4, #1
   d4942:	d112      	bne.n	d496a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d4944:	8904      	ldrh	r4, [r0, #8]
   d4946:	1ae4      	subs	r4, r4, r3
   d4948:	1aa2      	subs	r2, r4, r2
   d494a:	b212      	sxth	r2, r2
      break;
   d494c:	e06d      	b.n	d4a2a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d494e:	8904      	ldrh	r4, [r0, #8]
   d4950:	3c01      	subs	r4, #1
   d4952:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d4954:	8944      	ldrh	r4, [r0, #10]
   d4956:	1ae4      	subs	r4, r4, r3
   d4958:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d495a:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d495c:	b212      	sxth	r2, r2
      break;
   d495e:	e004      	b.n	d496a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
   d4960:	8944      	ldrh	r4, [r0, #10]
   d4962:	3c01      	subs	r4, #1
   d4964:	1a61      	subs	r1, r4, r1
   d4966:	b209      	sxth	r1, r1
      break;
   d4968:	e05f      	b.n	d4a2a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d496a:	2900      	cmp	r1, #0
   d496c:	db5c      	blt.n	d4a28 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
   d496e:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4972:	428c      	cmp	r4, r1
   d4974:	f340 8091 	ble.w	d4a9a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4978:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d497a:	bfbc      	itt	lt
   d497c:	18d2      	addlt	r2, r2, r3
   d497e:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4980:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
   d4984:	bfb8      	it	lt
   d4986:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4988:	18d4      	adds	r4, r2, r3
   d498a:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d498c:	bfc4      	itt	gt
   d498e:	1a83      	subgt	r3, r0, r2
   d4990:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4992:	2b00      	cmp	r3, #0
   d4994:	f340 8081 	ble.w	d4a9a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4998:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d499a:	4e40      	ldr	r6, [pc, #256]	; (d4a9c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d499c:	b2da      	uxtb	r2, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d499e:	08e3      	lsrs	r3, r4, #3
  // and offset x columns in
  pBuf += x;
   d49a0:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d49a4:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d49a8:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d49ac:	d017      	beq.n	d49de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d49ae:	f1c4 0408 	rsb	r4, r4, #8
   d49b2:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d49b4:	4c3a      	ldr	r4, [pc, #232]	; (d4aa0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d49b6:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d49b8:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d49ba:	bf3f      	itttt	cc
   d49bc:	ebc2 0e00 	rsbcc	lr, r2, r0
   d49c0:	24ff      	movcc	r4, #255	; 0xff
   d49c2:	fa44 f40e 	asrcc.w	r4, r4, lr
   d49c6:	4027      	andcc	r7, r4
   d49c8:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
   d49ca:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d49cc:	bf0c      	ite	eq
   d49ce:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
   d49d0:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d49d2:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d49d4:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d49d6:	d360      	bcc.n	d4a9a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
   d49d8:	1a10      	subs	r0, r2, r0
   d49da:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
   d49dc:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d49de:	2a07      	cmp	r2, #7
   d49e0:	d917      	bls.n	d4a12 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d49e2:	2d01      	cmp	r5, #1
   d49e4:	bf0c      	ite	eq
   d49e6:	24ff      	moveq	r4, #255	; 0xff
   d49e8:	2400      	movne	r4, #0
   d49ea:	f103 0080 	add.w	r0, r3, #128	; 0x80
   d49ee:	4611      	mov	r1, r2

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d49f0:	3908      	subs	r1, #8
   d49f2:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
   d49f4:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d49f6:	f800 4c80 	strb.w	r4, [r0, #-128]
   d49fa:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d49fe:	d8f7      	bhi.n	d49f0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
   d4a00:	f1a2 0108 	sub.w	r1, r2, #8
   d4a04:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   d4a08:	3101      	adds	r1, #1
   d4a0a:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   d4a0e:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d4a12:	2a00      	cmp	r2, #0
   d4a14:	d041      	beq.n	d4a9a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4a16:	4923      	ldr	r1, [pc, #140]	; (d4aa4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
   d4a18:	5c89      	ldrb	r1, [r1, r2]
   d4a1a:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
   d4a1c:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4a1e:	bf0c      	ite	eq
   d4a20:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
   d4a22:	438a      	bicne	r2, r1
   d4a24:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d4a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d4a2a:	2900      	cmp	r1, #0
   d4a2c:	db35      	blt.n	d4a9a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d4a2e:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d4a32:	428c      	cmp	r4, r1
   d4a34:	dd31      	ble.n	d4a9a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d4a36:	2a00      	cmp	r2, #0
    w += x;
   d4a38:	bfbc      	itt	lt
   d4a3a:	18d2      	addlt	r2, r2, r3
   d4a3c:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4a3e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d4a42:	bfb8      	it	lt
   d4a44:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4a46:	18d6      	adds	r6, r2, r3
   d4a48:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d4a4a:	bfc4      	itt	gt
   d4a4c:	1aa3      	subgt	r3, r4, r2
   d4a4e:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d4a50:	2b00      	cmp	r3, #0
   d4a52:	dd22      	ble.n	d4a9a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4a54:	10c8      	asrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d4a56:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
   d4a5a:	4810      	ldr	r0, [pc, #64]	; (d4a9c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
   d4a5c:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4a60:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
   d4a62:	2201      	movs	r2, #1
   d4a64:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
   d4a68:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d4a6a:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
   d4a6c:	d109      	bne.n	d4a82 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d4a6e:	1e5a      	subs	r2, r3, #1
   d4a70:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
   d4a72:	1c5c      	adds	r4, r3, #1
   d4a74:	d011      	beq.n	d4a9a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d4a76:	f810 2b01 	ldrb.w	r2, [r0], #1
   d4a7a:	430a      	orrs	r2, r1
   d4a7c:	f800 2c01 	strb.w	r2, [r0, #-1]
   d4a80:	e7f5      	b.n	d4a6e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
   d4a82:	43c9      	mvns	r1, r1
   d4a84:	b2c9      	uxtb	r1, r1
   d4a86:	1e5a      	subs	r2, r3, #1
   d4a88:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
   d4a8a:	1c5a      	adds	r2, r3, #1
   d4a8c:	d005      	beq.n	d4a9a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d4a8e:	f810 2b01 	ldrb.w	r2, [r0], #1
   d4a92:	400a      	ands	r2, r1
   d4a94:	f800 2c01 	strb.w	r2, [r0, #-1]
   d4a98:	e7f5      	b.n	d4a86 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   d4a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4a9c:	2003dee0 	.word	0x2003dee0
   d4aa0:	2003ded8 	.word	0x2003ded8
   d4aa4:	2003ded0 	.word	0x2003ded0

000d4aa8 <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4aaa:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4aac:	4606      	mov	r6, r0
   d4aae:	4614      	mov	r4, r2
   d4ab0:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4ab2:	db3f      	blt.n	d4b34 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4ab4:	f7ff fe7a 	bl	d47ac <_ZN12Adafruit_GFX5widthEv>
   d4ab8:	4285      	cmp	r5, r0
   d4aba:	da3b      	bge.n	d4b34 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4abc:	2c00      	cmp	r4, #0
   d4abe:	db39      	blt.n	d4b34 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4ac0:	4630      	mov	r0, r6
   d4ac2:	f7ff fe76 	bl	d47b2 <_ZN12Adafruit_GFX6heightEv>
   d4ac6:	4284      	cmp	r4, r0
   d4ac8:	da34      	bge.n	d4b34 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d4aca:	4630      	mov	r0, r6
   d4acc:	f7ff fe6c 	bl	d47a8 <_ZN12Adafruit_GFX11getRotationEv>
   d4ad0:	2802      	cmp	r0, #2
   d4ad2:	d127      	bne.n	d4b24 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4ad4:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d4ad6:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4ad8:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d4ada:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4adc:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
   d4ade:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4ae0:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
   d4ae2:	b204      	sxth	r4, r0
   d4ae4:	e006      	b.n	d4af4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d4ae6:	2801      	cmp	r0, #1
   d4ae8:	d104      	bne.n	d4af4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
   d4aea:	8933      	ldrh	r3, [r6, #8]
   d4aec:	3b01      	subs	r3, #1
   d4aee:	1b1b      	subs	r3, r3, r4
   d4af0:	462c      	mov	r4, r5
   d4af2:	b21d      	sxth	r5, r3
   d4af4:	2008      	movs	r0, #8
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d4af6:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d4af8:	fb94 f0f0 	sdiv	r0, r4, r0
   d4afc:	b200      	sxth	r0, r0
   d4afe:	4b0e      	ldr	r3, [pc, #56]	; (d4b38 <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
   d4b00:	f004 0207 	and.w	r2, r4, #7
   d4b04:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d4b08:	d104      	bne.n	d4b14 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d4b0a:	4097      	lsls	r7, r2
   d4b0c:	5c5a      	ldrb	r2, [r3, r1]
   d4b0e:	4317      	orrs	r7, r2
   d4b10:	545f      	strb	r7, [r3, r1]
   d4b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d4b14:	5c58      	ldrb	r0, [r3, r1]
   d4b16:	2701      	movs	r7, #1
   d4b18:	fa07 f202 	lsl.w	r2, r7, r2
   d4b1c:	ea20 0202 	bic.w	r2, r0, r2
   d4b20:	545a      	strb	r2, [r3, r1]
   d4b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d4b24:	2803      	cmp	r0, #3
   d4b26:	d1de      	bne.n	d4ae6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
   d4b28:	8973      	ldrh	r3, [r6, #10]
   d4b2a:	3b01      	subs	r3, #1
   d4b2c:	1b5b      	subs	r3, r3, r5
   d4b2e:	4625      	mov	r5, r4
   d4b30:	b21c      	sxth	r4, r3
   d4b32:	e7df      	b.n	d4af4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
   d4b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4b36:	bf00      	nop
   d4b38:	2003dee0 	.word	0x2003dee0

000d4b3c <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d4b3c:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d4b3e:	2240      	movs	r2, #64	; 0x40
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d4b40:	4604      	mov	r4, r0
   d4b42:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d4b44:	2180      	movs	r1, #128	; 0x80
   d4b46:	f7ff fd45 	bl	d45d4 <_ZN12Adafruit_GFXC1Ess>
   d4b4a:	4b06      	ldr	r3, [pc, #24]	; (d4b64 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d4b4c:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d4b4e:	23ff      	movs	r3, #255	; 0xff
   d4b50:	7763      	strb	r3, [r4, #29]
   d4b52:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d4b56:	77e3      	strb	r3, [r4, #31]
   d4b58:	77a3      	strb	r3, [r4, #30]
  rst = reset;
   d4b5a:	f884 5020 	strb.w	r5, [r4, #32]
}
   d4b5e:	4620      	mov	r0, r4
   d4b60:	bd38      	pop	{r3, r4, r5, pc}
   d4b62:	bf00      	nop
   d4b64:	000d6b84 	.word	0x000d6b84

000d4b68 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  }
}

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d4b68:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4b6c:	2100      	movs	r1, #0
   d4b6e:	4801      	ldr	r0, [pc, #4]	; (d4b74 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d4b70:	f001 bccf 	b.w	d6512 <memset>
   d4b74:	2003dee0 	.word	0x2003dee0

000d4b78 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4b78:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d4b7a:	4d09      	ldr	r5, [pc, #36]	; (d4ba0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d4b7c:	6829      	ldr	r1, [r5, #0]
   d4b7e:	f011 0401 	ands.w	r4, r1, #1
   d4b82:	d10a      	bne.n	d4b9a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4b84:	4628      	mov	r0, r5
   d4b86:	f7ff fa95 	bl	d40b4 <__cxa_guard_acquire>
   d4b8a:	b130      	cbz	r0, d4b9a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4b8c:	4621      	mov	r1, r4
   d4b8e:	4805      	ldr	r0, [pc, #20]	; (d4ba4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4b90:	f000 ff94 	bl	d5abc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4b94:	4628      	mov	r0, r5
   d4b96:	f7ff fa92 	bl	d40be <__cxa_guard_release>
        return instance;
    }
   d4b9a:	4802      	ldr	r0, [pc, #8]	; (d4ba4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4b9c:	bd38      	pop	{r3, r4, r5, pc}
   d4b9e:	bf00      	nop
   d4ba0:	2003e3d0 	.word	0x2003e3d0
   d4ba4:	2003e3d4 	.word	0x2003e3d4

000d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d4ba8:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d4baa:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4bae:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d4bb0:	4604      	mov	r4, r0
   d4bb2:	460d      	mov	r5, r1
  if (sid != -1)
   d4bb4:	d028      	beq.n	d4c08 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x60>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d4bb6:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d4bba:	2101      	movs	r1, #1
   d4bbc:	b280      	uxth	r0, r0
   d4bbe:	f001 fa6c 	bl	d609a <digitalWrite>
    digitalWrite(dc, LOW);
   d4bc2:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4bc6:	2100      	movs	r1, #0
   d4bc8:	b280      	uxth	r0, r0
   d4bca:	f001 fa66 	bl	d609a <digitalWrite>
    digitalWrite(cs, LOW);
   d4bce:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4bd2:	2100      	movs	r1, #0
   d4bd4:	b280      	uxth	r0, r0
   d4bd6:	f001 fa60 	bl	d609a <digitalWrite>
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d4bda:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4bde:	b12b      	cbz	r3, d4bec <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4be0:	f7ff ffca 	bl	d4b78 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4be4:	4629      	mov	r1, r5
   d4be6:	f001 f813 	bl	d5c10 <_ZN8SPIClass8transferEh>
   d4bea:	e005      	b.n	d4bf8 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x50>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d4bec:	462b      	mov	r3, r5
   d4bee:	2201      	movs	r2, #1
   d4bf0:	7fa1      	ldrb	r1, [r4, #30]
   d4bf2:	7f60      	ldrb	r0, [r4, #29]
   d4bf4:	f001 faa7 	bl	d6146 <shiftOut>
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d4bf8:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4bfc:	2101      	movs	r1, #1
   d4bfe:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d4c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d4c04:	f001 ba49 	b.w	d609a <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d4c08:	f001 fada 	bl	d61c0 <_Z19__fetch_global_Wirev>
   d4c0c:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4c10:	f000 fc72 	bl	d54f8 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d4c14:	f001 fad4 	bl	d61c0 <_Z19__fetch_global_Wirev>
   d4c18:	6803      	ldr	r3, [r0, #0]
   d4c1a:	2100      	movs	r1, #0
   d4c1c:	689b      	ldr	r3, [r3, #8]
   d4c1e:	4798      	blx	r3
    Wire.write(c);
   d4c20:	f001 face 	bl	d61c0 <_Z19__fetch_global_Wirev>
   d4c24:	6803      	ldr	r3, [r0, #0]
   d4c26:	4629      	mov	r1, r5
   d4c28:	689b      	ldr	r3, [r3, #8]
   d4c2a:	4798      	blx	r3
    Wire.endTransmission();
   d4c2c:	f001 fac8 	bl	d61c0 <_Z19__fetch_global_Wirev>
  }
}
   d4c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d4c34:	f000 bc67 	b.w	d5506 <_ZN7TwoWire15endTransmissionEv>

000d4c38 <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d4c38:	b538      	push	{r3, r4, r5, lr}
   d4c3a:	4604      	mov	r4, r0
   d4c3c:	460d      	mov	r5, r1
  _vccstate = vccstate;
   d4c3e:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d4c40:	f990 301d 	ldrsb.w	r3, [r0, #29]
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d4c44:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
   d4c46:	3301      	adds	r3, #1
   d4c48:	d037      	beq.n	d4cba <_ZN16Adafruit_SSD13065beginEhh+0x82>
    pinMode(dc, OUTPUT);
   d4c4a:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d4c4e:	2101      	movs	r1, #1
   d4c50:	b280      	uxth	r0, r0
   d4c52:	f001 fa11 	bl	d6078 <pinMode>
    pinMode(cs, OUTPUT);
   d4c56:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4c5a:	2101      	movs	r1, #1
   d4c5c:	b280      	uxth	r0, r0
   d4c5e:	f001 fa0b 	bl	d6078 <pinMode>
    if (!hwSPI){
   d4c62:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4c66:	b95b      	cbnz	r3, d4c80 <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
   d4c68:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4c6c:	2101      	movs	r1, #1
   d4c6e:	b280      	uxth	r0, r0
   d4c70:	f001 fa02 	bl	d6078 <pinMode>
    	pinMode(sclk, OUTPUT);
   d4c74:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d4c78:	2101      	movs	r1, #1
   d4c7a:	b280      	uxth	r0, r0
   d4c7c:	f001 f9fc 	bl	d6078 <pinMode>
    	}
    if (hwSPI){
   d4c80:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4c84:	b1eb      	cbz	r3, d4cc2 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
        digitalWrite(cs, HIGH);
   d4c86:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4c8a:	2101      	movs	r1, #1
   d4c8c:	b280      	uxth	r0, r0
   d4c8e:	f001 fa04 	bl	d609a <digitalWrite>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d4c92:	f7ff ff71 	bl	d4b78 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4c96:	2101      	movs	r1, #1
   d4c98:	f000 ff2b 	bl	d5af2 <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d4c9c:	f7ff ff6c 	bl	d4b78 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4ca0:	2110      	movs	r1, #16
   d4ca2:	f000 ff91 	bl	d5bc8 <_ZN8SPIClass15setClockDividerEh>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d4ca6:	f7ff ff67 	bl	d4b78 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4caa:	2100      	movs	r1, #0
   d4cac:	f000 ff32 	bl	d5b14 <_ZN8SPIClass11setDataModeEh>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d4cb0:	f7ff ff62 	bl	d4b78 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4cb4:	f000 ff0c 	bl	d5ad0 <_ZN8SPIClass5beginEv>
   d4cb8:	e003      	b.n	d4cc2 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
   d4cba:	f001 fa81 	bl	d61c0 <_Z19__fetch_global_Wirev>
   d4cbe:	f000 fc11 	bl	d54e4 <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
   d4cc2:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4cc6:	2101      	movs	r1, #1
   d4cc8:	b280      	uxth	r0, r0
   d4cca:	f001 f9d5 	bl	d6078 <pinMode>
  digitalWrite(rst, HIGH);
   d4cce:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4cd2:	2101      	movs	r1, #1
   d4cd4:	b280      	uxth	r0, r0
   d4cd6:	f001 f9e0 	bl	d609a <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
   d4cda:	2001      	movs	r0, #1
   d4cdc:	f000 fb5c 	bl	d5398 <delay>
  // bring reset low
  digitalWrite(rst, LOW);
   d4ce0:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4ce4:	2100      	movs	r1, #0
   d4ce6:	b280      	uxth	r0, r0
   d4ce8:	f001 f9d7 	bl	d609a <digitalWrite>
  // wait 10ms
  delay(10);
   d4cec:	200a      	movs	r0, #10
   d4cee:	f000 fb53 	bl	d5398 <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
   d4cf2:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4cf6:	2101      	movs	r1, #1
   d4cf8:	b280      	uxth	r0, r0
   d4cfa:	f001 f9ce 	bl	d609a <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d4cfe:	4620      	mov	r0, r4
   d4d00:	21ae      	movs	r1, #174	; 0xae
   d4d02:	f7ff ff51 	bl	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d4d06:	4620      	mov	r0, r4
   d4d08:	21d5      	movs	r1, #213	; 0xd5
   d4d0a:	f7ff ff4d 	bl	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d4d0e:	4620      	mov	r0, r4
   d4d10:	2180      	movs	r1, #128	; 0x80
   d4d12:	f7ff ff49 	bl	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d4d16:	4620      	mov	r0, r4
   d4d18:	21a8      	movs	r1, #168	; 0xa8
   d4d1a:	f7ff ff45 	bl	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d4d1e:	4620      	mov	r0, r4
   d4d20:	213f      	movs	r1, #63	; 0x3f
   d4d22:	f7ff ff41 	bl	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d4d26:	4620      	mov	r0, r4
   d4d28:	21d3      	movs	r1, #211	; 0xd3
   d4d2a:	f7ff ff3d 	bl	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d4d2e:	4620      	mov	r0, r4
   d4d30:	2100      	movs	r1, #0
   d4d32:	f7ff ff39 	bl	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d4d36:	4620      	mov	r0, r4
   d4d38:	2140      	movs	r1, #64	; 0x40
   d4d3a:	f7ff ff35 	bl	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d4d3e:	218d      	movs	r1, #141	; 0x8d
   d4d40:	4620      	mov	r0, r4
   d4d42:	f7ff ff31 	bl	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4d46:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d4d48:	bf0c      	ite	eq
   d4d4a:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
   d4d4c:	2114      	movne	r1, #20
   d4d4e:	4620      	mov	r0, r4
   d4d50:	f7ff ff2a 	bl	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d4d54:	4620      	mov	r0, r4
   d4d56:	2120      	movs	r1, #32
   d4d58:	f7ff ff26 	bl	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d4d5c:	4620      	mov	r0, r4
   d4d5e:	2100      	movs	r1, #0
   d4d60:	f7ff ff22 	bl	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d4d64:	4620      	mov	r0, r4
   d4d66:	21a1      	movs	r1, #161	; 0xa1
   d4d68:	f7ff ff1e 	bl	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d4d6c:	4620      	mov	r0, r4
   d4d6e:	21c8      	movs	r1, #200	; 0xc8
   d4d70:	f7ff ff1a 	bl	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d4d74:	4620      	mov	r0, r4
   d4d76:	21da      	movs	r1, #218	; 0xda
   d4d78:	f7ff ff16 	bl	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d4d7c:	4620      	mov	r0, r4
   d4d7e:	2112      	movs	r1, #18
   d4d80:	f7ff ff12 	bl	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d4d84:	2181      	movs	r1, #129	; 0x81
   d4d86:	4620      	mov	r0, r4
   d4d88:	f7ff ff0e 	bl	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4d8c:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d4d8e:	bf0c      	ite	eq
   d4d90:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
   d4d92:	21cf      	movne	r1, #207	; 0xcf
   d4d94:	4620      	mov	r0, r4
   d4d96:	f7ff ff07 	bl	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d4d9a:	21d9      	movs	r1, #217	; 0xd9
   d4d9c:	4620      	mov	r0, r4
   d4d9e:	f7ff ff03 	bl	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4da2:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d4da4:	bf0c      	ite	eq
   d4da6:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
   d4da8:	21f1      	movne	r1, #241	; 0xf1
   d4daa:	4620      	mov	r0, r4
   d4dac:	f7ff fefc 	bl	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d4db0:	4620      	mov	r0, r4
   d4db2:	21db      	movs	r1, #219	; 0xdb
   d4db4:	f7ff fef8 	bl	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d4db8:	4620      	mov	r0, r4
   d4dba:	2140      	movs	r1, #64	; 0x40
   d4dbc:	f7ff fef4 	bl	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d4dc0:	4620      	mov	r0, r4
   d4dc2:	21a4      	movs	r1, #164	; 0xa4
   d4dc4:	f7ff fef0 	bl	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d4dc8:	4620      	mov	r0, r4
   d4dca:	21a6      	movs	r1, #166	; 0xa6
   d4dcc:	f7ff feec 	bl	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d4dd0:	4620      	mov	r0, r4
   d4dd2:	21af      	movs	r1, #175	; 0xaf
}
   d4dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d4dd8:	f7ff bee6 	b.w	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d4ddc <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d4ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d4de0:	2121      	movs	r1, #33	; 0x21
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d4de2:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d4de4:	f7ff fee0 	bl	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d4de8:	2100      	movs	r1, #0
   d4dea:	4620      	mov	r0, r4
   d4dec:	f7ff fedc 	bl	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d4df0:	217f      	movs	r1, #127	; 0x7f
   d4df2:	4620      	mov	r0, r4
   d4df4:	f7ff fed8 	bl	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d4df8:	2122      	movs	r1, #34	; 0x22
   d4dfa:	4620      	mov	r0, r4
   d4dfc:	f7ff fed4 	bl	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d4e00:	2100      	movs	r1, #0
   d4e02:	4620      	mov	r0, r4
   d4e04:	f7ff fed0 	bl	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d4e08:	2107      	movs	r1, #7
   d4e0a:	4620      	mov	r0, r4
   d4e0c:	f7ff fecc 	bl	d4ba8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
   d4e10:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d4e14:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d4ed4 <_ZN16Adafruit_SSD13067displayEv+0xf8>
   d4e18:	3301      	adds	r3, #1
   d4e1a:	d035      	beq.n	d4e88 <_ZN16Adafruit_SSD13067displayEv+0xac>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d4e1c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4e20:	2101      	movs	r1, #1
   d4e22:	b280      	uxth	r0, r0
   d4e24:	f001 f939 	bl	d609a <digitalWrite>
    digitalWrite(dc, HIGH);
   d4e28:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4e2c:	2101      	movs	r1, #1
   d4e2e:	b280      	uxth	r0, r0
   d4e30:	f001 f933 	bl	d609a <digitalWrite>
    digitalWrite(cs, LOW);
   d4e34:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4e38:	2100      	movs	r1, #0
   d4e3a:	b280      	uxth	r0, r0
   d4e3c:	f001 f92d 	bl	d609a <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4e40:	2001      	movs	r0, #1
   d4e42:	f000 f87d 	bl	d4f40 <HAL_Delay_Microseconds>
   d4e46:	2500      	movs	r5, #0
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d4e48:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
   d4e4c:	f818 6005 	ldrb.w	r6, [r8, r5]
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d4e50:	b12b      	cbz	r3, d4e5e <_ZN16Adafruit_SSD13067displayEv+0x82>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4e52:	f7ff fe91 	bl	d4b78 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4e56:	4631      	mov	r1, r6
   d4e58:	f000 feda 	bl	d5c10 <_ZN8SPIClass8transferEh>
   d4e5c:	e005      	b.n	d4e6a <_ZN16Adafruit_SSD13067displayEv+0x8e>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d4e5e:	4633      	mov	r3, r6
   d4e60:	2201      	movs	r2, #1
   d4e62:	7fa1      	ldrb	r1, [r4, #30]
   d4e64:	7f60      	ldrb	r0, [r4, #29]
   d4e66:	f001 f96e 	bl	d6146 <shiftOut>
   d4e6a:	3501      	adds	r5, #1
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d4e6c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d4e70:	d1ea      	bne.n	d4e48 <_ZN16Adafruit_SSD13067displayEv+0x6c>
   d4e72:	2001      	movs	r0, #1
   d4e74:	f000 f864 	bl	d4f40 <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d4e78:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4e7c:	2101      	movs	r1, #1
   d4e7e:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d4e80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d4e84:	f001 b909 	b.w	d609a <digitalWrite>
   d4e88:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d4e8a:	f001 f999 	bl	d61c0 <_Z19__fetch_global_Wirev>
   d4e8e:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4e92:	f000 fb31 	bl	d54f8 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d4e96:	f001 f993 	bl	d61c0 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4e9a:	6803      	ldr	r3, [r0, #0]
   d4e9c:	2140      	movs	r1, #64	; 0x40
   d4e9e:	689b      	ldr	r3, [r3, #8]
   d4ea0:	4798      	blx	r3
   d4ea2:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
   d4ea4:	f001 f98c 	bl	d61c0 <_Z19__fetch_global_Wirev>
   d4ea8:	19af      	adds	r7, r5, r6
   d4eaa:	6803      	ldr	r3, [r0, #0]
   d4eac:	b2bf      	uxth	r7, r7
   d4eae:	689b      	ldr	r3, [r3, #8]
   d4eb0:	f818 1007 	ldrb.w	r1, [r8, r7]
   d4eb4:	3601      	adds	r6, #1
   d4eb6:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
   d4eb8:	2e10      	cmp	r6, #16
   d4eba:	d1f3      	bne.n	d4ea4 <_ZN16Adafruit_SSD13067displayEv+0xc8>
   d4ebc:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
   d4ebe:	f001 f97f 	bl	d61c0 <_Z19__fetch_global_Wirev>
   d4ec2:	b2ad      	uxth	r5, r5
   d4ec4:	f000 fb1f 	bl	d5506 <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d4ec8:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d4ecc:	d1dd      	bne.n	d4e8a <_ZN16Adafruit_SSD13067displayEv+0xae>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d4ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4ed2:	bf00      	nop
   d4ed4:	2003dee0 	.word	0x2003dee0

000d4ed8 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d4ed8:	f000 b842 	b.w	d4f60 <HAL_Pin_Map>

000d4edc <_GLOBAL__sub_I__ZN7StepperC2Eiii>:
   d4edc:	f000 b840 	b.w	d4f60 <HAL_Pin_Map>

000d4ee0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4ee0:	b508      	push	{r3, lr}
   d4ee2:	4b02      	ldr	r3, [pc, #8]	; (d4eec <os_thread_is_current+0xc>)
   d4ee4:	681b      	ldr	r3, [r3, #0]
   d4ee6:	689b      	ldr	r3, [r3, #8]
   d4ee8:	9301      	str	r3, [sp, #4]
   d4eea:	bd08      	pop	{r3, pc}
   d4eec:	00030248 	.word	0x00030248

000d4ef0 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4ef0:	b508      	push	{r3, lr}
   d4ef2:	4b02      	ldr	r3, [pc, #8]	; (d4efc <os_thread_join+0xc>)
   d4ef4:	681b      	ldr	r3, [r3, #0]
   d4ef6:	691b      	ldr	r3, [r3, #16]
   d4ef8:	9301      	str	r3, [sp, #4]
   d4efa:	bd08      	pop	{r3, pc}
   d4efc:	00030248 	.word	0x00030248

000d4f00 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4f00:	b508      	push	{r3, lr}
   d4f02:	4b02      	ldr	r3, [pc, #8]	; (d4f0c <os_thread_cleanup+0xc>)
   d4f04:	681b      	ldr	r3, [r3, #0]
   d4f06:	695b      	ldr	r3, [r3, #20]
   d4f08:	9301      	str	r3, [sp, #4]
   d4f0a:	bd08      	pop	{r3, pc}
   d4f0c:	00030248 	.word	0x00030248

000d4f10 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4f10:	b508      	push	{r3, lr}
   d4f12:	4b02      	ldr	r3, [pc, #8]	; (d4f1c <os_mutex_recursive_create+0xc>)
   d4f14:	681b      	ldr	r3, [r3, #0]
   d4f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4f18:	9301      	str	r3, [sp, #4]
   d4f1a:	bd08      	pop	{r3, pc}
   d4f1c:	00030248 	.word	0x00030248

000d4f20 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4f20:	b508      	push	{r3, lr}
   d4f22:	4b02      	ldr	r3, [pc, #8]	; (d4f2c <os_mutex_recursive_destroy+0xc>)
   d4f24:	681b      	ldr	r3, [r3, #0]
   d4f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4f28:	9301      	str	r3, [sp, #4]
   d4f2a:	bd08      	pop	{r3, pc}
   d4f2c:	00030248 	.word	0x00030248

000d4f30 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4f30:	b508      	push	{r3, lr}
   d4f32:	4b02      	ldr	r3, [pc, #8]	; (d4f3c <HAL_RNG_GetRandomNumber+0xc>)
   d4f34:	681b      	ldr	r3, [r3, #0]
   d4f36:	685b      	ldr	r3, [r3, #4]
   d4f38:	9301      	str	r3, [sp, #4]
   d4f3a:	bd08      	pop	{r3, pc}
   d4f3c:	00030218 	.word	0x00030218

000d4f40 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4f40:	b508      	push	{r3, lr}
   d4f42:	4b02      	ldr	r3, [pc, #8]	; (d4f4c <HAL_Delay_Microseconds+0xc>)
   d4f44:	681b      	ldr	r3, [r3, #0]
   d4f46:	68db      	ldr	r3, [r3, #12]
   d4f48:	9301      	str	r3, [sp, #4]
   d4f4a:	bd08      	pop	{r3, pc}
   d4f4c:	00030218 	.word	0x00030218

000d4f50 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4f50:	b508      	push	{r3, lr}
   d4f52:	4b02      	ldr	r3, [pc, #8]	; (d4f5c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4f54:	681b      	ldr	r3, [r3, #0]
   d4f56:	695b      	ldr	r3, [r3, #20]
   d4f58:	9301      	str	r3, [sp, #4]
   d4f5a:	bd08      	pop	{r3, pc}
   d4f5c:	00030218 	.word	0x00030218

000d4f60 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4f60:	b508      	push	{r3, lr}
   d4f62:	4b02      	ldr	r3, [pc, #8]	; (d4f6c <HAL_Pin_Map+0xc>)
   d4f64:	681b      	ldr	r3, [r3, #0]
   d4f66:	681b      	ldr	r3, [r3, #0]
   d4f68:	9301      	str	r3, [sp, #4]
   d4f6a:	bd08      	pop	{r3, pc}
   d4f6c:	0003022c 	.word	0x0003022c

000d4f70 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4f70:	b508      	push	{r3, lr}
   d4f72:	4b02      	ldr	r3, [pc, #8]	; (d4f7c <HAL_Validate_Pin_Function+0xc>)
   d4f74:	681b      	ldr	r3, [r3, #0]
   d4f76:	685b      	ldr	r3, [r3, #4]
   d4f78:	9301      	str	r3, [sp, #4]
   d4f7a:	bd08      	pop	{r3, pc}
   d4f7c:	0003022c 	.word	0x0003022c

000d4f80 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4f80:	b508      	push	{r3, lr}
   d4f82:	4b02      	ldr	r3, [pc, #8]	; (d4f8c <HAL_Pin_Mode+0xc>)
   d4f84:	681b      	ldr	r3, [r3, #0]
   d4f86:	689b      	ldr	r3, [r3, #8]
   d4f88:	9301      	str	r3, [sp, #4]
   d4f8a:	bd08      	pop	{r3, pc}
   d4f8c:	0003022c 	.word	0x0003022c

000d4f90 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4f90:	b508      	push	{r3, lr}
   d4f92:	4b02      	ldr	r3, [pc, #8]	; (d4f9c <HAL_Get_Pin_Mode+0xc>)
   d4f94:	681b      	ldr	r3, [r3, #0]
   d4f96:	68db      	ldr	r3, [r3, #12]
   d4f98:	9301      	str	r3, [sp, #4]
   d4f9a:	bd08      	pop	{r3, pc}
   d4f9c:	0003022c 	.word	0x0003022c

000d4fa0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4fa0:	b508      	push	{r3, lr}
   d4fa2:	4b02      	ldr	r3, [pc, #8]	; (d4fac <HAL_GPIO_Write+0xc>)
   d4fa4:	681b      	ldr	r3, [r3, #0]
   d4fa6:	691b      	ldr	r3, [r3, #16]
   d4fa8:	9301      	str	r3, [sp, #4]
   d4faa:	bd08      	pop	{r3, pc}
   d4fac:	0003022c 	.word	0x0003022c

000d4fb0 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d4fb0:	b508      	push	{r3, lr}
   d4fb2:	4b02      	ldr	r3, [pc, #8]	; (d4fbc <HAL_DAC_Write+0xc>)
   d4fb4:	681b      	ldr	r3, [r3, #0]
   d4fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4fb8:	9301      	str	r3, [sp, #4]
   d4fba:	bd08      	pop	{r3, pc}
   d4fbc:	0003022c 	.word	0x0003022c

000d4fc0 <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4fc0:	b508      	push	{r3, lr}
   d4fc2:	4b02      	ldr	r3, [pc, #8]	; (d4fcc <HAL_ADC_Read+0xc>)
   d4fc4:	681b      	ldr	r3, [r3, #0]
   d4fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4fc8:	9301      	str	r3, [sp, #4]
   d4fca:	bd08      	pop	{r3, pc}
   d4fcc:	0003022c 	.word	0x0003022c

000d4fd0 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
   d4fd0:	b508      	push	{r3, lr}
   d4fd2:	4b02      	ldr	r3, [pc, #8]	; (d4fdc <HAL_PWM_Write_Ext+0xc>)
   d4fd4:	681b      	ldr	r3, [r3, #0]
   d4fd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d4fd8:	9301      	str	r3, [sp, #4]
   d4fda:	bd08      	pop	{r3, pc}
   d4fdc:	0003022c 	.word	0x0003022c

000d4fe0 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4fe0:	b508      	push	{r3, lr}
   d4fe2:	4b02      	ldr	r3, [pc, #8]	; (d4fec <HAL_I2C_Begin+0xc>)
   d4fe4:	681b      	ldr	r3, [r3, #0]
   d4fe6:	68db      	ldr	r3, [r3, #12]
   d4fe8:	9301      	str	r3, [sp, #4]
   d4fea:	bd08      	pop	{r3, pc}
   d4fec:	00030228 	.word	0x00030228

000d4ff0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4ff0:	b508      	push	{r3, lr}
   d4ff2:	4b02      	ldr	r3, [pc, #8]	; (d4ffc <HAL_I2C_Begin_Transmission+0xc>)
   d4ff4:	681b      	ldr	r3, [r3, #0]
   d4ff6:	699b      	ldr	r3, [r3, #24]
   d4ff8:	9301      	str	r3, [sp, #4]
   d4ffa:	bd08      	pop	{r3, pc}
   d4ffc:	00030228 	.word	0x00030228

000d5000 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5000:	b508      	push	{r3, lr}
   d5002:	4b02      	ldr	r3, [pc, #8]	; (d500c <HAL_I2C_End_Transmission+0xc>)
   d5004:	681b      	ldr	r3, [r3, #0]
   d5006:	69db      	ldr	r3, [r3, #28]
   d5008:	9301      	str	r3, [sp, #4]
   d500a:	bd08      	pop	{r3, pc}
   d500c:	00030228 	.word	0x00030228

000d5010 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5010:	b508      	push	{r3, lr}
   d5012:	4b02      	ldr	r3, [pc, #8]	; (d501c <HAL_I2C_Write_Data+0xc>)
   d5014:	681b      	ldr	r3, [r3, #0]
   d5016:	6a1b      	ldr	r3, [r3, #32]
   d5018:	9301      	str	r3, [sp, #4]
   d501a:	bd08      	pop	{r3, pc}
   d501c:	00030228 	.word	0x00030228

000d5020 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5020:	b508      	push	{r3, lr}
   d5022:	4b02      	ldr	r3, [pc, #8]	; (d502c <HAL_I2C_Available_Data+0xc>)
   d5024:	681b      	ldr	r3, [r3, #0]
   d5026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5028:	9301      	str	r3, [sp, #4]
   d502a:	bd08      	pop	{r3, pc}
   d502c:	00030228 	.word	0x00030228

000d5030 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5030:	b508      	push	{r3, lr}
   d5032:	4b02      	ldr	r3, [pc, #8]	; (d503c <HAL_I2C_Read_Data+0xc>)
   d5034:	681b      	ldr	r3, [r3, #0]
   d5036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5038:	9301      	str	r3, [sp, #4]
   d503a:	bd08      	pop	{r3, pc}
   d503c:	00030228 	.word	0x00030228

000d5040 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5040:	b508      	push	{r3, lr}
   d5042:	4b02      	ldr	r3, [pc, #8]	; (d504c <HAL_I2C_Peek_Data+0xc>)
   d5044:	681b      	ldr	r3, [r3, #0]
   d5046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5048:	9301      	str	r3, [sp, #4]
   d504a:	bd08      	pop	{r3, pc}
   d504c:	00030228 	.word	0x00030228

000d5050 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5050:	b508      	push	{r3, lr}
   d5052:	4b02      	ldr	r3, [pc, #8]	; (d505c <HAL_I2C_Flush_Data+0xc>)
   d5054:	681b      	ldr	r3, [r3, #0]
   d5056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5058:	9301      	str	r3, [sp, #4]
   d505a:	bd08      	pop	{r3, pc}
   d505c:	00030228 	.word	0x00030228

000d5060 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5060:	b508      	push	{r3, lr}
   d5062:	4b02      	ldr	r3, [pc, #8]	; (d506c <HAL_I2C_Is_Enabled+0xc>)
   d5064:	681b      	ldr	r3, [r3, #0]
   d5066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5068:	9301      	str	r3, [sp, #4]
   d506a:	bd08      	pop	{r3, pc}
   d506c:	00030228 	.word	0x00030228

000d5070 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5070:	b508      	push	{r3, lr}
   d5072:	4b02      	ldr	r3, [pc, #8]	; (d507c <HAL_I2C_Init+0xc>)
   d5074:	681b      	ldr	r3, [r3, #0]
   d5076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5078:	9301      	str	r3, [sp, #4]
   d507a:	bd08      	pop	{r3, pc}
   d507c:	00030228 	.word	0x00030228

000d5080 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5080:	b508      	push	{r3, lr}
   d5082:	4b02      	ldr	r3, [pc, #8]	; (d508c <inet_inet_ntop+0xc>)
   d5084:	681b      	ldr	r3, [r3, #0]
   d5086:	695b      	ldr	r3, [r3, #20]
   d5088:	9301      	str	r3, [sp, #4]
   d508a:	bd08      	pop	{r3, pc}
   d508c:	00030264 	.word	0x00030264

000d5090 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5090:	b508      	push	{r3, lr}
   d5092:	4b02      	ldr	r3, [pc, #8]	; (d509c <netdb_freeaddrinfo+0xc>)
   d5094:	681b      	ldr	r3, [r3, #0]
   d5096:	689b      	ldr	r3, [r3, #8]
   d5098:	9301      	str	r3, [sp, #4]
   d509a:	bd08      	pop	{r3, pc}
   d509c:	00030268 	.word	0x00030268

000d50a0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d50a0:	b508      	push	{r3, lr}
   d50a2:	4b02      	ldr	r3, [pc, #8]	; (d50ac <netdb_getaddrinfo+0xc>)
   d50a4:	681b      	ldr	r3, [r3, #0]
   d50a6:	68db      	ldr	r3, [r3, #12]
   d50a8:	9301      	str	r3, [sp, #4]
   d50aa:	bd08      	pop	{r3, pc}
   d50ac:	00030268 	.word	0x00030268

000d50b0 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   d50b0:	b508      	push	{r3, lr}
   d50b2:	4b02      	ldr	r3, [pc, #8]	; (d50bc <HAL_Servo_Attach+0xc>)
   d50b4:	681b      	ldr	r3, [r3, #0]
   d50b6:	691b      	ldr	r3, [r3, #16]
   d50b8:	9301      	str	r3, [sp, #4]
   d50ba:	bd08      	pop	{r3, pc}
   d50bc:	00030224 	.word	0x00030224

000d50c0 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   d50c0:	b508      	push	{r3, lr}
   d50c2:	4b02      	ldr	r3, [pc, #8]	; (d50cc <HAL_Servo_Detach+0xc>)
   d50c4:	681b      	ldr	r3, [r3, #0]
   d50c6:	695b      	ldr	r3, [r3, #20]
   d50c8:	9301      	str	r3, [sp, #4]
   d50ca:	bd08      	pop	{r3, pc}
   d50cc:	00030224 	.word	0x00030224

000d50d0 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d50d0:	b508      	push	{r3, lr}
   d50d2:	4b02      	ldr	r3, [pc, #8]	; (d50dc <HAL_SPI_Begin+0xc>)
   d50d4:	681b      	ldr	r3, [r3, #0]
   d50d6:	681b      	ldr	r3, [r3, #0]
   d50d8:	9301      	str	r3, [sp, #4]
   d50da:	bd08      	pop	{r3, pc}
   d50dc:	00030230 	.word	0x00030230

000d50e0 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d50e0:	b508      	push	{r3, lr}
   d50e2:	4b02      	ldr	r3, [pc, #8]	; (d50ec <HAL_SPI_Set_Bit_Order+0xc>)
   d50e4:	681b      	ldr	r3, [r3, #0]
   d50e6:	689b      	ldr	r3, [r3, #8]
   d50e8:	9301      	str	r3, [sp, #4]
   d50ea:	bd08      	pop	{r3, pc}
   d50ec:	00030230 	.word	0x00030230

000d50f0 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d50f0:	b508      	push	{r3, lr}
   d50f2:	4b02      	ldr	r3, [pc, #8]	; (d50fc <HAL_SPI_Set_Data_Mode+0xc>)
   d50f4:	681b      	ldr	r3, [r3, #0]
   d50f6:	68db      	ldr	r3, [r3, #12]
   d50f8:	9301      	str	r3, [sp, #4]
   d50fa:	bd08      	pop	{r3, pc}
   d50fc:	00030230 	.word	0x00030230

000d5100 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d5100:	b508      	push	{r3, lr}
   d5102:	4b02      	ldr	r3, [pc, #8]	; (d510c <HAL_SPI_Set_Clock_Divider+0xc>)
   d5104:	681b      	ldr	r3, [r3, #0]
   d5106:	691b      	ldr	r3, [r3, #16]
   d5108:	9301      	str	r3, [sp, #4]
   d510a:	bd08      	pop	{r3, pc}
   d510c:	00030230 	.word	0x00030230

000d5110 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d5110:	b508      	push	{r3, lr}
   d5112:	4b02      	ldr	r3, [pc, #8]	; (d511c <HAL_SPI_Send_Receive_Data+0xc>)
   d5114:	681b      	ldr	r3, [r3, #0]
   d5116:	695b      	ldr	r3, [r3, #20]
   d5118:	9301      	str	r3, [sp, #4]
   d511a:	bd08      	pop	{r3, pc}
   d511c:	00030230 	.word	0x00030230

000d5120 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5120:	b508      	push	{r3, lr}
   d5122:	4b02      	ldr	r3, [pc, #8]	; (d512c <HAL_SPI_Init+0xc>)
   d5124:	681b      	ldr	r3, [r3, #0]
   d5126:	69db      	ldr	r3, [r3, #28]
   d5128:	9301      	str	r3, [sp, #4]
   d512a:	bd08      	pop	{r3, pc}
   d512c:	00030230 	.word	0x00030230

000d5130 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5130:	b508      	push	{r3, lr}
   d5132:	4b02      	ldr	r3, [pc, #8]	; (d513c <HAL_SPI_Is_Enabled+0xc>)
   d5134:	681b      	ldr	r3, [r3, #0]
   d5136:	6a1b      	ldr	r3, [r3, #32]
   d5138:	9301      	str	r3, [sp, #4]
   d513a:	bd08      	pop	{r3, pc}
   d513c:	00030230 	.word	0x00030230

000d5140 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d5140:	b508      	push	{r3, lr}
   d5142:	4b02      	ldr	r3, [pc, #8]	; (d514c <HAL_SPI_Info+0xc>)
   d5144:	681b      	ldr	r3, [r3, #0]
   d5146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5148:	9301      	str	r3, [sp, #4]
   d514a:	bd08      	pop	{r3, pc}
   d514c:	00030230 	.word	0x00030230

000d5150 <HAL_SPI_Acquire>:
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d5150:	b508      	push	{r3, lr}
   d5152:	4b02      	ldr	r3, [pc, #8]	; (d515c <HAL_SPI_Acquire+0xc>)
   d5154:	681b      	ldr	r3, [r3, #0]
   d5156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5158:	9301      	str	r3, [sp, #4]
   d515a:	bd08      	pop	{r3, pc}
   d515c:	00030230 	.word	0x00030230

000d5160 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d5160:	b508      	push	{r3, lr}
   d5162:	4b02      	ldr	r3, [pc, #8]	; (d516c <HAL_SPI_Release+0xc>)
   d5164:	681b      	ldr	r3, [r3, #0]
   d5166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5168:	9301      	str	r3, [sp, #4]
   d516a:	bd08      	pop	{r3, pc}
   d516c:	00030230 	.word	0x00030230

000d5170 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5170:	b508      	push	{r3, lr}
   d5172:	4b02      	ldr	r3, [pc, #8]	; (d517c <HAL_USART_Init+0xc>)
   d5174:	681b      	ldr	r3, [r3, #0]
   d5176:	681b      	ldr	r3, [r3, #0]
   d5178:	9301      	str	r3, [sp, #4]
   d517a:	bd08      	pop	{r3, pc}
   d517c:	0003023c 	.word	0x0003023c

000d5180 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5180:	b508      	push	{r3, lr}
   d5182:	4b02      	ldr	r3, [pc, #8]	; (d518c <HAL_USART_Write_Data+0xc>)
   d5184:	681b      	ldr	r3, [r3, #0]
   d5186:	68db      	ldr	r3, [r3, #12]
   d5188:	9301      	str	r3, [sp, #4]
   d518a:	bd08      	pop	{r3, pc}
   d518c:	0003023c 	.word	0x0003023c

000d5190 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5190:	b508      	push	{r3, lr}
   d5192:	4b02      	ldr	r3, [pc, #8]	; (d519c <HAL_USART_Available_Data+0xc>)
   d5194:	681b      	ldr	r3, [r3, #0]
   d5196:	691b      	ldr	r3, [r3, #16]
   d5198:	9301      	str	r3, [sp, #4]
   d519a:	bd08      	pop	{r3, pc}
   d519c:	0003023c 	.word	0x0003023c

000d51a0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d51a0:	b508      	push	{r3, lr}
   d51a2:	4b02      	ldr	r3, [pc, #8]	; (d51ac <HAL_USART_Read_Data+0xc>)
   d51a4:	681b      	ldr	r3, [r3, #0]
   d51a6:	695b      	ldr	r3, [r3, #20]
   d51a8:	9301      	str	r3, [sp, #4]
   d51aa:	bd08      	pop	{r3, pc}
   d51ac:	0003023c 	.word	0x0003023c

000d51b0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d51b0:	b508      	push	{r3, lr}
   d51b2:	4b02      	ldr	r3, [pc, #8]	; (d51bc <HAL_USART_Peek_Data+0xc>)
   d51b4:	681b      	ldr	r3, [r3, #0]
   d51b6:	699b      	ldr	r3, [r3, #24]
   d51b8:	9301      	str	r3, [sp, #4]
   d51ba:	bd08      	pop	{r3, pc}
   d51bc:	0003023c 	.word	0x0003023c

000d51c0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d51c0:	b508      	push	{r3, lr}
   d51c2:	4b02      	ldr	r3, [pc, #8]	; (d51cc <HAL_USART_Flush_Data+0xc>)
   d51c4:	681b      	ldr	r3, [r3, #0]
   d51c6:	69db      	ldr	r3, [r3, #28]
   d51c8:	9301      	str	r3, [sp, #4]
   d51ca:	bd08      	pop	{r3, pc}
   d51cc:	0003023c 	.word	0x0003023c

000d51d0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d51d0:	b508      	push	{r3, lr}
   d51d2:	4b02      	ldr	r3, [pc, #8]	; (d51dc <HAL_USART_Is_Enabled+0xc>)
   d51d4:	681b      	ldr	r3, [r3, #0]
   d51d6:	6a1b      	ldr	r3, [r3, #32]
   d51d8:	9301      	str	r3, [sp, #4]
   d51da:	bd08      	pop	{r3, pc}
   d51dc:	0003023c 	.word	0x0003023c

000d51e0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d51e0:	b508      	push	{r3, lr}
   d51e2:	4b02      	ldr	r3, [pc, #8]	; (d51ec <HAL_USART_Available_Data_For_Write+0xc>)
   d51e4:	681b      	ldr	r3, [r3, #0]
   d51e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d51e8:	9301      	str	r3, [sp, #4]
   d51ea:	bd08      	pop	{r3, pc}
   d51ec:	0003023c 	.word	0x0003023c

000d51f0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d51f0:	b508      	push	{r3, lr}
   d51f2:	4b02      	ldr	r3, [pc, #8]	; (d51fc <HAL_USB_USART_Init+0xc>)
   d51f4:	681b      	ldr	r3, [r3, #0]
   d51f6:	681b      	ldr	r3, [r3, #0]
   d51f8:	9301      	str	r3, [sp, #4]
   d51fa:	bd08      	pop	{r3, pc}
   d51fc:	0003024c 	.word	0x0003024c

000d5200 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5200:	b508      	push	{r3, lr}
   d5202:	4b02      	ldr	r3, [pc, #8]	; (d520c <HAL_USB_USART_Begin+0xc>)
   d5204:	681b      	ldr	r3, [r3, #0]
   d5206:	685b      	ldr	r3, [r3, #4]
   d5208:	9301      	str	r3, [sp, #4]
   d520a:	bd08      	pop	{r3, pc}
   d520c:	0003024c 	.word	0x0003024c

000d5210 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5210:	b508      	push	{r3, lr}
   d5212:	4b02      	ldr	r3, [pc, #8]	; (d521c <HAL_USB_USART_Available_Data+0xc>)
   d5214:	681b      	ldr	r3, [r3, #0]
   d5216:	691b      	ldr	r3, [r3, #16]
   d5218:	9301      	str	r3, [sp, #4]
   d521a:	bd08      	pop	{r3, pc}
   d521c:	0003024c 	.word	0x0003024c

000d5220 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5220:	b508      	push	{r3, lr}
   d5222:	4b02      	ldr	r3, [pc, #8]	; (d522c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5224:	681b      	ldr	r3, [r3, #0]
   d5226:	695b      	ldr	r3, [r3, #20]
   d5228:	9301      	str	r3, [sp, #4]
   d522a:	bd08      	pop	{r3, pc}
   d522c:	0003024c 	.word	0x0003024c

000d5230 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5230:	b508      	push	{r3, lr}
   d5232:	4b02      	ldr	r3, [pc, #8]	; (d523c <HAL_USB_USART_Receive_Data+0xc>)
   d5234:	681b      	ldr	r3, [r3, #0]
   d5236:	699b      	ldr	r3, [r3, #24]
   d5238:	9301      	str	r3, [sp, #4]
   d523a:	bd08      	pop	{r3, pc}
   d523c:	0003024c 	.word	0x0003024c

000d5240 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5240:	b508      	push	{r3, lr}
   d5242:	4b02      	ldr	r3, [pc, #8]	; (d524c <HAL_USB_USART_Send_Data+0xc>)
   d5244:	681b      	ldr	r3, [r3, #0]
   d5246:	69db      	ldr	r3, [r3, #28]
   d5248:	9301      	str	r3, [sp, #4]
   d524a:	bd08      	pop	{r3, pc}
   d524c:	0003024c 	.word	0x0003024c

000d5250 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5250:	b508      	push	{r3, lr}
   d5252:	4b02      	ldr	r3, [pc, #8]	; (d525c <HAL_USB_USART_Flush_Data+0xc>)
   d5254:	681b      	ldr	r3, [r3, #0]
   d5256:	6a1b      	ldr	r3, [r3, #32]
   d5258:	9301      	str	r3, [sp, #4]
   d525a:	bd08      	pop	{r3, pc}
   d525c:	0003024c 	.word	0x0003024c

000d5260 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5260:	b508      	push	{r3, lr}
   d5262:	4b02      	ldr	r3, [pc, #8]	; (d526c <panic_+0xc>)
   d5264:	681b      	ldr	r3, [r3, #0]
   d5266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5268:	9301      	str	r3, [sp, #4]
   d526a:	bd08      	pop	{r3, pc}
   d526c:	00030260 	.word	0x00030260

000d5270 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5270:	b508      	push	{r3, lr}
   d5272:	4b02      	ldr	r3, [pc, #8]	; (d527c <set_system_mode+0xc>)
   d5274:	681b      	ldr	r3, [r3, #0]
   d5276:	685b      	ldr	r3, [r3, #4]
   d5278:	9301      	str	r3, [sp, #4]
   d527a:	bd08      	pop	{r3, pc}
   d527c:	00030220 	.word	0x00030220

000d5280 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5280:	b508      	push	{r3, lr}
   d5282:	4b02      	ldr	r3, [pc, #8]	; (d528c <system_delay_ms+0xc>)
   d5284:	681b      	ldr	r3, [r3, #0]
   d5286:	695b      	ldr	r3, [r3, #20]
   d5288:	9301      	str	r3, [sp, #4]
   d528a:	bd08      	pop	{r3, pc}
   d528c:	00030220 	.word	0x00030220

000d5290 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5290:	b508      	push	{r3, lr}
   d5292:	4b03      	ldr	r3, [pc, #12]	; (d52a0 <system_ctrl_set_app_request_handler+0x10>)
   d5294:	681b      	ldr	r3, [r3, #0]
   d5296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d529a:	9301      	str	r3, [sp, #4]
   d529c:	bd08      	pop	{r3, pc}
   d529e:	0000      	.short	0x0000
   d52a0:	00030220 	.word	0x00030220

000d52a4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d52a4:	b508      	push	{r3, lr}
   d52a6:	4b03      	ldr	r3, [pc, #12]	; (d52b4 <system_ctrl_set_result+0x10>)
   d52a8:	681b      	ldr	r3, [r3, #0]
   d52aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d52ae:	9301      	str	r3, [sp, #4]
   d52b0:	bd08      	pop	{r3, pc}
   d52b2:	0000      	.short	0x0000
   d52b4:	00030220 	.word	0x00030220

000d52b8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d52b8:	b508      	push	{r3, lr}
   d52ba:	4b02      	ldr	r3, [pc, #8]	; (d52c4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d52bc:	681b      	ldr	r3, [r3, #0]
   d52be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d52c0:	9301      	str	r3, [sp, #4]
   d52c2:	bd08      	pop	{r3, pc}
   d52c4:	00030244 	.word	0x00030244

000d52c8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d52c8:	b508      	push	{r3, lr}
   d52ca:	4b02      	ldr	r3, [pc, #8]	; (d52d4 <network_connect+0xc>)
   d52cc:	681b      	ldr	r3, [r3, #0]
   d52ce:	685b      	ldr	r3, [r3, #4]
   d52d0:	9301      	str	r3, [sp, #4]
   d52d2:	bd08      	pop	{r3, pc}
   d52d4:	00030240 	.word	0x00030240

000d52d8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d52d8:	b508      	push	{r3, lr}
   d52da:	4b02      	ldr	r3, [pc, #8]	; (d52e4 <network_connecting+0xc>)
   d52dc:	681b      	ldr	r3, [r3, #0]
   d52de:	689b      	ldr	r3, [r3, #8]
   d52e0:	9301      	str	r3, [sp, #4]
   d52e2:	bd08      	pop	{r3, pc}
   d52e4:	00030240 	.word	0x00030240

000d52e8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d52e8:	b508      	push	{r3, lr}
   d52ea:	4b02      	ldr	r3, [pc, #8]	; (d52f4 <network_disconnect+0xc>)
   d52ec:	681b      	ldr	r3, [r3, #0]
   d52ee:	68db      	ldr	r3, [r3, #12]
   d52f0:	9301      	str	r3, [sp, #4]
   d52f2:	bd08      	pop	{r3, pc}
   d52f4:	00030240 	.word	0x00030240

000d52f8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d52f8:	b508      	push	{r3, lr}
   d52fa:	4b02      	ldr	r3, [pc, #8]	; (d5304 <network_ready+0xc>)
   d52fc:	681b      	ldr	r3, [r3, #0]
   d52fe:	691b      	ldr	r3, [r3, #16]
   d5300:	9301      	str	r3, [sp, #4]
   d5302:	bd08      	pop	{r3, pc}
   d5304:	00030240 	.word	0x00030240

000d5308 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5308:	b508      	push	{r3, lr}
   d530a:	4b02      	ldr	r3, [pc, #8]	; (d5314 <network_on+0xc>)
   d530c:	681b      	ldr	r3, [r3, #0]
   d530e:	695b      	ldr	r3, [r3, #20]
   d5310:	9301      	str	r3, [sp, #4]
   d5312:	bd08      	pop	{r3, pc}
   d5314:	00030240 	.word	0x00030240

000d5318 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5318:	b508      	push	{r3, lr}
   d531a:	4b02      	ldr	r3, [pc, #8]	; (d5324 <network_off+0xc>)
   d531c:	681b      	ldr	r3, [r3, #0]
   d531e:	699b      	ldr	r3, [r3, #24]
   d5320:	9301      	str	r3, [sp, #4]
   d5322:	bd08      	pop	{r3, pc}
   d5324:	00030240 	.word	0x00030240

000d5328 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5328:	b508      	push	{r3, lr}
   d532a:	4b02      	ldr	r3, [pc, #8]	; (d5334 <network_listen+0xc>)
   d532c:	681b      	ldr	r3, [r3, #0]
   d532e:	69db      	ldr	r3, [r3, #28]
   d5330:	9301      	str	r3, [sp, #4]
   d5332:	bd08      	pop	{r3, pc}
   d5334:	00030240 	.word	0x00030240

000d5338 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5338:	b508      	push	{r3, lr}
   d533a:	4b02      	ldr	r3, [pc, #8]	; (d5344 <network_listening+0xc>)
   d533c:	681b      	ldr	r3, [r3, #0]
   d533e:	6a1b      	ldr	r3, [r3, #32]
   d5340:	9301      	str	r3, [sp, #4]
   d5342:	bd08      	pop	{r3, pc}
   d5344:	00030240 	.word	0x00030240

000d5348 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5348:	b508      	push	{r3, lr}
   d534a:	4b02      	ldr	r3, [pc, #8]	; (d5354 <network_set_listen_timeout+0xc>)
   d534c:	681b      	ldr	r3, [r3, #0]
   d534e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5350:	9301      	str	r3, [sp, #4]
   d5352:	bd08      	pop	{r3, pc}
   d5354:	00030240 	.word	0x00030240

000d5358 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5358:	b508      	push	{r3, lr}
   d535a:	4b02      	ldr	r3, [pc, #8]	; (d5364 <network_get_listen_timeout+0xc>)
   d535c:	681b      	ldr	r3, [r3, #0]
   d535e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5360:	9301      	str	r3, [sp, #4]
   d5362:	bd08      	pop	{r3, pc}
   d5364:	00030240 	.word	0x00030240

000d5368 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5368:	b508      	push	{r3, lr}
   d536a:	4b02      	ldr	r3, [pc, #8]	; (d5374 <malloc+0xc>)
   d536c:	681b      	ldr	r3, [r3, #0]
   d536e:	681b      	ldr	r3, [r3, #0]
   d5370:	9301      	str	r3, [sp, #4]
   d5372:	bd08      	pop	{r3, pc}
   d5374:	0003021c 	.word	0x0003021c

000d5378 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5378:	b508      	push	{r3, lr}
   d537a:	4b02      	ldr	r3, [pc, #8]	; (d5384 <free+0xc>)
   d537c:	681b      	ldr	r3, [r3, #0]
   d537e:	685b      	ldr	r3, [r3, #4]
   d5380:	9301      	str	r3, [sp, #4]
   d5382:	bd08      	pop	{r3, pc}
   d5384:	0003021c 	.word	0x0003021c

000d5388 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5388:	b508      	push	{r3, lr}
   d538a:	4b02      	ldr	r3, [pc, #8]	; (d5394 <vsnprintf+0xc>)
   d538c:	681b      	ldr	r3, [r3, #0]
   d538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5390:	9301      	str	r3, [sp, #4]
   d5392:	bd08      	pop	{r3, pc}
   d5394:	0003021c 	.word	0x0003021c

000d5398 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5398:	2100      	movs	r1, #0
   d539a:	f7ff bf71 	b.w	d5280 <system_delay_ms>

000d539e <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d539e:	b510      	push	{r4, lr}
   d53a0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d53a2:	6800      	ldr	r0, [r0, #0]
   d53a4:	b108      	cbz	r0, d53aa <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d53a6:	f7ff fdbb 	bl	d4f20 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d53aa:	4620      	mov	r0, r4
   d53ac:	bd10      	pop	{r4, pc}
	...

000d53b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d53b0:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d53b2:	4c06      	ldr	r4, [pc, #24]	; (d53cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d53b4:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d53b6:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d53b8:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d53ba:	f7ff fda9 	bl	d4f10 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d53be:	4620      	mov	r0, r4
   d53c0:	4a03      	ldr	r2, [pc, #12]	; (d53d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d53c2:	4904      	ldr	r1, [pc, #16]	; (d53d4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d53c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d53c8:	f000 bf20 	b.w	d620c <__aeabi_atexit>
   d53cc:	2003e3dc 	.word	0x2003e3dc
   d53d0:	2003e348 	.word	0x2003e348
   d53d4:	000d539f 	.word	0x000d539f

000d53d8 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d53d8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d53da:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d53dc:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d53de:	b113      	cbz	r3, d53e6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d53e0:	2203      	movs	r2, #3
   d53e2:	4601      	mov	r1, r0
   d53e4:	4798      	blx	r3
    }
   d53e6:	4620      	mov	r0, r4
   d53e8:	bd10      	pop	{r4, pc}

000d53ea <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d53ea:	2200      	movs	r2, #0
   d53ec:	4611      	mov	r1, r2
   d53ee:	6840      	ldr	r0, [r0, #4]
   d53f0:	f7ff bfa2 	b.w	d5338 <network_listening>

000d53f4 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d53f4:	2200      	movs	r2, #0
   d53f6:	4611      	mov	r1, r2
   d53f8:	6840      	ldr	r0, [r0, #4]
   d53fa:	f7ff bfad 	b.w	d5358 <network_get_listen_timeout>

000d53fe <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d53fe:	2200      	movs	r2, #0
   d5400:	6840      	ldr	r0, [r0, #4]
   d5402:	f7ff bfa1 	b.w	d5348 <network_set_listen_timeout>

000d5406 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5406:	2200      	movs	r2, #0
   d5408:	f081 0101 	eor.w	r1, r1, #1
   d540c:	6840      	ldr	r0, [r0, #4]
   d540e:	f7ff bf8b 	b.w	d5328 <network_listen>

000d5412 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5412:	2300      	movs	r3, #0
   d5414:	461a      	mov	r2, r3
   d5416:	4619      	mov	r1, r3
   d5418:	6840      	ldr	r0, [r0, #4]
   d541a:	f7ff bf7d 	b.w	d5318 <network_off>

000d541e <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d541e:	2300      	movs	r3, #0
   d5420:	461a      	mov	r2, r3
   d5422:	4619      	mov	r1, r3
   d5424:	6840      	ldr	r0, [r0, #4]
   d5426:	f7ff bf6f 	b.w	d5308 <network_on>

000d542a <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d542a:	2200      	movs	r2, #0
   d542c:	4611      	mov	r1, r2
   d542e:	6840      	ldr	r0, [r0, #4]
   d5430:	f7ff bf62 	b.w	d52f8 <network_ready>

000d5434 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5434:	2200      	movs	r2, #0
   d5436:	4611      	mov	r1, r2
   d5438:	6840      	ldr	r0, [r0, #4]
   d543a:	f7ff bf4d 	b.w	d52d8 <network_connecting>

000d543e <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d543e:	2200      	movs	r2, #0
   d5440:	2102      	movs	r1, #2
   d5442:	6840      	ldr	r0, [r0, #4]
   d5444:	f7ff bf50 	b.w	d52e8 <network_disconnect>

000d5448 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5448:	2300      	movs	r3, #0
   d544a:	461a      	mov	r2, r3
   d544c:	6840      	ldr	r0, [r0, #4]
   d544e:	f7ff bf3b 	b.w	d52c8 <network_connect>
	...

000d5454 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5454:	4b02      	ldr	r3, [pc, #8]	; (d5460 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5456:	2203      	movs	r2, #3
   d5458:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d545a:	4a02      	ldr	r2, [pc, #8]	; (d5464 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d545c:	601a      	str	r2, [r3, #0]
   d545e:	4770      	bx	lr
   d5460:	2003e3e0 	.word	0x2003e3e0
   d5464:	000d6bbc 	.word	0x000d6bbc

000d5468 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5468:	4770      	bx	lr

000d546a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d546a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d546c:	4606      	mov	r6, r0
   d546e:	4615      	mov	r5, r2
   d5470:	460c      	mov	r4, r1
   d5472:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5474:	42bc      	cmp	r4, r7
   d5476:	d006      	beq.n	d5486 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5478:	6833      	ldr	r3, [r6, #0]
   d547a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d547e:	689b      	ldr	r3, [r3, #8]
   d5480:	4630      	mov	r0, r6
   d5482:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5484:	e7f6      	b.n	d5474 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5486:	4628      	mov	r0, r5
   d5488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d548a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d548a:	2200      	movs	r2, #0
   d548c:	7c00      	ldrb	r0, [r0, #16]
   d548e:	f7ff bdbf 	b.w	d5010 <HAL_I2C_Write_Data>

000d5492 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5492:	2100      	movs	r1, #0
   d5494:	7c00      	ldrb	r0, [r0, #16]
   d5496:	f7ff bdc3 	b.w	d5020 <HAL_I2C_Available_Data>

000d549a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d549a:	2100      	movs	r1, #0
   d549c:	7c00      	ldrb	r0, [r0, #16]
   d549e:	f7ff bdc7 	b.w	d5030 <HAL_I2C_Read_Data>

000d54a2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d54a2:	2100      	movs	r1, #0
   d54a4:	7c00      	ldrb	r0, [r0, #16]
   d54a6:	f7ff bdcb 	b.w	d5040 <HAL_I2C_Peek_Data>

000d54aa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d54aa:	2100      	movs	r1, #0
   d54ac:	7c00      	ldrb	r0, [r0, #16]
   d54ae:	f7ff bdcf 	b.w	d5050 <HAL_I2C_Flush_Data>

000d54b2 <_ZN7TwoWireD0Ev>:
   d54b2:	b510      	push	{r4, lr}
   d54b4:	2114      	movs	r1, #20
   d54b6:	4604      	mov	r4, r0
   d54b8:	f000 fead 	bl	d6216 <_ZdlPvj>
   d54bc:	4620      	mov	r0, r4
   d54be:	bd10      	pop	{r4, pc}

000d54c0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d54c0:	b510      	push	{r4, lr}
   d54c2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d54c4:	2300      	movs	r3, #0
   d54c6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d54c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d54cc:	60a3      	str	r3, [r4, #8]
   d54ce:	4b04      	ldr	r3, [pc, #16]	; (d54e0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d54d0:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d54d2:	4608      	mov	r0, r1
   d54d4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d54d6:	4611      	mov	r1, r2
   d54d8:	f7ff fdca 	bl	d5070 <HAL_I2C_Init>
}
   d54dc:	4620      	mov	r0, r4
   d54de:	bd10      	pop	{r4, pc}
   d54e0:	000d6bf0 	.word	0x000d6bf0

000d54e4 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d54e4:	2300      	movs	r3, #0
   d54e6:	461a      	mov	r2, r3
   d54e8:	4619      	mov	r1, r3
   d54ea:	7c00      	ldrb	r0, [r0, #16]
   d54ec:	f7ff bd78 	b.w	d4fe0 <HAL_I2C_Begin>

000d54f0 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d54f0:	2200      	movs	r2, #0
   d54f2:	7c00      	ldrb	r0, [r0, #16]
   d54f4:	f7ff bd7c 	b.w	d4ff0 <HAL_I2C_Begin_Transmission>

000d54f8 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d54f8:	b2c9      	uxtb	r1, r1
   d54fa:	f7ff bff9 	b.w	d54f0 <_ZN7TwoWire17beginTransmissionEh>

000d54fe <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d54fe:	2200      	movs	r2, #0
   d5500:	7c00      	ldrb	r0, [r0, #16]
   d5502:	f7ff bd7d 	b.w	d5000 <HAL_I2C_End_Transmission>

000d5506 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d5506:	2101      	movs	r1, #1
   d5508:	f7ff bff9 	b.w	d54fe <_ZN7TwoWire15endTransmissionEh>

000d550c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d550c:	2100      	movs	r1, #0
   d550e:	7c00      	ldrb	r0, [r0, #16]
   d5510:	f7ff bda6 	b.w	d5060 <HAL_I2C_Is_Enabled>

000d5514 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5514:	4770      	bx	lr

000d5516 <_ZN9IPAddressD0Ev>:
   d5516:	b510      	push	{r4, lr}
   d5518:	2118      	movs	r1, #24
   d551a:	4604      	mov	r4, r0
   d551c:	f000 fe7b 	bl	d6216 <_ZdlPvj>
   d5520:	4620      	mov	r0, r4
   d5522:	bd10      	pop	{r4, pc}

000d5524 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5524:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5526:	7d03      	ldrb	r3, [r0, #20]
   d5528:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d552a:	b08d      	sub	sp, #52	; 0x34
   d552c:	460e      	mov	r6, r1
   d552e:	f100 0704 	add.w	r7, r0, #4
   d5532:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5536:	d002      	beq.n	d553e <_ZNK9IPAddress7printToER5Print+0x1a>
   d5538:	f100 0508 	add.w	r5, r0, #8
   d553c:	e018      	b.n	d5570 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d553e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5540:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5542:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5546:	232f      	movs	r3, #47	; 0x2f
   d5548:	462a      	mov	r2, r5
   d554a:	200a      	movs	r0, #10
   d554c:	f7ff fd98 	bl	d5080 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5550:	4628      	mov	r0, r5
   d5552:	f001 f80f 	bl	d6574 <strlen>
   d5556:	6833      	ldr	r3, [r6, #0]
   d5558:	4602      	mov	r2, r0
   d555a:	68db      	ldr	r3, [r3, #12]
   d555c:	4629      	mov	r1, r5
   d555e:	4630      	mov	r0, r6
   d5560:	4798      	blx	r3
   d5562:	e00f      	b.n	d5584 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5564:	b124      	cbz	r4, d5570 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5566:	212e      	movs	r1, #46	; 0x2e
   d5568:	4630      	mov	r0, r6
   d556a:	f000 f9d5 	bl	d5918 <_ZN5Print5printEc>
   d556e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5570:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5574:	220a      	movs	r2, #10
   d5576:	4630      	mov	r0, r6
   d5578:	f000 f9dd 	bl	d5936 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d557c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d557e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5580:	d1f0      	bne.n	d5564 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5582:	4620      	mov	r0, r4
    }
    return n;
}
   d5584:	b00d      	add	sp, #52	; 0x34
   d5586:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5588 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5588:	b510      	push	{r4, lr}
   d558a:	4b05      	ldr	r3, [pc, #20]	; (d55a0 <_ZN9IPAddressC1Ev+0x18>)
   d558c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d558e:	2211      	movs	r2, #17
   d5590:	f840 3b04 	str.w	r3, [r0], #4
   d5594:	2100      	movs	r1, #0
   d5596:	f000 ffbc 	bl	d6512 <memset>
{
    clear();
}
   d559a:	4620      	mov	r0, r4
   d559c:	bd10      	pop	{r4, pc}
   d559e:	bf00      	nop
   d55a0:	000d6c18 	.word	0x000d6c18

000d55a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d55a4:	4603      	mov	r3, r0
   d55a6:	4a07      	ldr	r2, [pc, #28]	; (d55c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d55a8:	b510      	push	{r4, lr}
   d55aa:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d55ae:	f101 0210 	add.w	r2, r1, #16
   d55b2:	f851 4b04 	ldr.w	r4, [r1], #4
   d55b6:	f843 4b04 	str.w	r4, [r3], #4
   d55ba:	4291      	cmp	r1, r2
   d55bc:	d1f9      	bne.n	d55b2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d55be:	780a      	ldrb	r2, [r1, #0]
   d55c0:	701a      	strb	r2, [r3, #0]
}
   d55c2:	bd10      	pop	{r4, pc}
   d55c4:	000d6c18 	.word	0x000d6c18

000d55c8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d55c8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d55ca:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d55ce:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d55d2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d55d6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d55da:	2304      	movs	r3, #4
   d55dc:	6041      	str	r1, [r0, #4]
   d55de:	7503      	strb	r3, [r0, #20]
   d55e0:	bd10      	pop	{r4, pc}

000d55e2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d55e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d55e4:	780d      	ldrb	r5, [r1, #0]
   d55e6:	788b      	ldrb	r3, [r1, #2]
   d55e8:	784a      	ldrb	r2, [r1, #1]
   d55ea:	78c9      	ldrb	r1, [r1, #3]
   d55ec:	9100      	str	r1, [sp, #0]
   d55ee:	4629      	mov	r1, r5
   d55f0:	f7ff ffea 	bl	d55c8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d55f4:	b003      	add	sp, #12
   d55f6:	bd30      	pop	{r4, r5, pc}

000d55f8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d55f8:	4b01      	ldr	r3, [pc, #4]	; (d5600 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d55fa:	4a02      	ldr	r2, [pc, #8]	; (d5604 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d55fc:	601a      	str	r2, [r3, #0]
   d55fe:	4770      	bx	lr
   d5600:	2003e3e8 	.word	0x2003e3e8
   d5604:	000d6c97 	.word	0x000d6c97

000d5608 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5608:	2200      	movs	r2, #0
   d560a:	4611      	mov	r1, r2
   d560c:	6840      	ldr	r0, [r0, #4]
   d560e:	f7ff be93 	b.w	d5338 <network_listening>

000d5612 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5612:	2200      	movs	r2, #0
   d5614:	4611      	mov	r1, r2
   d5616:	6840      	ldr	r0, [r0, #4]
   d5618:	f7ff be9e 	b.w	d5358 <network_get_listen_timeout>

000d561c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d561c:	2200      	movs	r2, #0
   d561e:	6840      	ldr	r0, [r0, #4]
   d5620:	f7ff be92 	b.w	d5348 <network_set_listen_timeout>

000d5624 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5624:	2200      	movs	r2, #0
   d5626:	f081 0101 	eor.w	r1, r1, #1
   d562a:	6840      	ldr	r0, [r0, #4]
   d562c:	f7ff be7c 	b.w	d5328 <network_listen>

000d5630 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5630:	2300      	movs	r3, #0
   d5632:	461a      	mov	r2, r3
   d5634:	2101      	movs	r1, #1
   d5636:	6840      	ldr	r0, [r0, #4]
   d5638:	f7ff be6e 	b.w	d5318 <network_off>

000d563c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d563c:	2300      	movs	r3, #0
   d563e:	461a      	mov	r2, r3
   d5640:	4619      	mov	r1, r3
   d5642:	6840      	ldr	r0, [r0, #4]
   d5644:	f7ff be60 	b.w	d5308 <network_on>

000d5648 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5648:	2200      	movs	r2, #0
   d564a:	4611      	mov	r1, r2
   d564c:	6840      	ldr	r0, [r0, #4]
   d564e:	f7ff be53 	b.w	d52f8 <network_ready>

000d5652 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5652:	2200      	movs	r2, #0
   d5654:	4611      	mov	r1, r2
   d5656:	6840      	ldr	r0, [r0, #4]
   d5658:	f7ff be3e 	b.w	d52d8 <network_connecting>

000d565c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d565c:	2200      	movs	r2, #0
   d565e:	2102      	movs	r1, #2
   d5660:	6840      	ldr	r0, [r0, #4]
   d5662:	f7ff be41 	b.w	d52e8 <network_disconnect>

000d5666 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5666:	2300      	movs	r3, #0
   d5668:	461a      	mov	r2, r3
   d566a:	6840      	ldr	r0, [r0, #4]
   d566c:	f7ff be2c 	b.w	d52c8 <network_connect>

000d5670 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5670:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5672:	4605      	mov	r5, r0
   d5674:	b188      	cbz	r0, d569a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5676:	6804      	ldr	r4, [r0, #0]
   d5678:	b14c      	cbz	r4, d568e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d567a:	68a3      	ldr	r3, [r4, #8]
   d567c:	b11b      	cbz	r3, d5686 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d567e:	2203      	movs	r2, #3
   d5680:	4621      	mov	r1, r4
   d5682:	4620      	mov	r0, r4
   d5684:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5686:	2110      	movs	r1, #16
   d5688:	4620      	mov	r0, r4
   d568a:	f000 fdc4 	bl	d6216 <_ZdlPvj>
   d568e:	4628      	mov	r0, r5
   d5690:	2114      	movs	r1, #20
      }
   d5692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5696:	f000 bdbe 	b.w	d6216 <_ZdlPvj>
   d569a:	bd38      	pop	{r3, r4, r5, pc}

000d569c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d569c:	b110      	cbz	r0, d56a4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d569e:	6803      	ldr	r3, [r0, #0]
   d56a0:	685b      	ldr	r3, [r3, #4]
   d56a2:	4718      	bx	r3
   d56a4:	4770      	bx	lr

000d56a6 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d56a6:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d56a8:	6803      	ldr	r3, [r0, #0]
   d56aa:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d56ac:	b1bb      	cbz	r3, d56de <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d56ae:	6858      	ldr	r0, [r3, #4]
   d56b0:	f7ff fc16 	bl	d4ee0 <os_thread_is_current>
   d56b4:	b978      	cbnz	r0, d56d6 <_ZN6ThreadD1Ev+0x30>
   d56b6:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d56b8:	7c5a      	ldrb	r2, [r3, #17]
   d56ba:	b912      	cbnz	r2, d56c2 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d56bc:	6858      	ldr	r0, [r3, #4]
   d56be:	f7ff fc17 	bl	d4ef0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d56c2:	6823      	ldr	r3, [r4, #0]
   d56c4:	6858      	ldr	r0, [r3, #4]
   d56c6:	f7ff fc1b 	bl	d4f00 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d56ca:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d56cc:	2300      	movs	r3, #0
   d56ce:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d56d0:	b128      	cbz	r0, d56de <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d56d2:	f7ff ffcd 	bl	d5670 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d56d6:	6820      	ldr	r0, [r4, #0]
   d56d8:	b108      	cbz	r0, d56de <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d56da:	f7ff ffc9 	bl	d5670 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d56de:	4620      	mov	r0, r4
   d56e0:	bd10      	pop	{r4, pc}

000d56e2 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d56e2:	b538      	push	{r3, r4, r5, lr}
   d56e4:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d56e6:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d56ea:	b108      	cbz	r0, d56f0 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d56ec:	f7fe fcd5 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d56f0:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d56f4:	b108      	cbz	r0, d56fa <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d56f6:	f7ff fc13 	bl	d4f20 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d56fa:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d56fe:	b135      	cbz	r5, d570e <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5700:	4628      	mov	r0, r5
   d5702:	f7ff ffd0 	bl	d56a6 <_ZN6ThreadD1Ev>
   d5706:	2104      	movs	r1, #4
   d5708:	4628      	mov	r0, r5
   d570a:	f000 fd84 	bl	d6216 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d570e:	6820      	ldr	r0, [r4, #0]
   d5710:	b108      	cbz	r0, d5716 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5712:	f7ff ffc3 	bl	d569c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5716:	4620      	mov	r0, r4
   d5718:	bd38      	pop	{r3, r4, r5, pc}
	...

000d571c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d571c:	b510      	push	{r4, lr}
   d571e:	4b04      	ldr	r3, [pc, #16]	; (d5730 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5720:	4604      	mov	r4, r0
   d5722:	f840 3b08 	str.w	r3, [r0], #8
   d5726:	f7ff ffdc 	bl	d56e2 <_ZN5spark11MeshPublishD1Ev>
   d572a:	4620      	mov	r0, r4
   d572c:	bd10      	pop	{r4, pc}
   d572e:	bf00      	nop
   d5730:	000d6d10 	.word	0x000d6d10

000d5734 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5734:	b538      	push	{r3, r4, r5, lr}
   d5736:	4c0e      	ldr	r4, [pc, #56]	; (d5770 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5738:	4b0e      	ldr	r3, [pc, #56]	; (d5774 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d573a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d573c:	2500      	movs	r5, #0
   d573e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5740:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5744:	6063      	str	r3, [r4, #4]
   d5746:	60a5      	str	r5, [r4, #8]
   d5748:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d574c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5750:	f7ff fbde 	bl	d4f10 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5754:	4b08      	ldr	r3, [pc, #32]	; (d5778 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5756:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d575a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d575e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5760:	4620      	mov	r0, r4
   d5762:	4a06      	ldr	r2, [pc, #24]	; (d577c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5764:	4906      	ldr	r1, [pc, #24]	; (d5780 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d576a:	f000 bd4f 	b.w	d620c <__aeabi_atexit>
   d576e:	bf00      	nop
   d5770:	2003e3ec 	.word	0x2003e3ec
   d5774:	000d6d44 	.word	0x000d6d44
   d5778:	000d6d10 	.word	0x000d6d10
   d577c:	2003e348 	.word	0x2003e348
   d5780:	000d571d 	.word	0x000d571d

000d5784 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5784:	2300      	movs	r3, #0
   d5786:	461a      	mov	r2, r3
   d5788:	6840      	ldr	r0, [r0, #4]
   d578a:	f7ff bd9d 	b.w	d52c8 <network_connect>

000d578e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d578e:	2200      	movs	r2, #0
   d5790:	2102      	movs	r1, #2
   d5792:	6840      	ldr	r0, [r0, #4]
   d5794:	f7ff bda8 	b.w	d52e8 <network_disconnect>

000d5798 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5798:	2200      	movs	r2, #0
   d579a:	4611      	mov	r1, r2
   d579c:	6840      	ldr	r0, [r0, #4]
   d579e:	f7ff bd9b 	b.w	d52d8 <network_connecting>

000d57a2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d57a2:	2200      	movs	r2, #0
   d57a4:	4611      	mov	r1, r2
   d57a6:	6840      	ldr	r0, [r0, #4]
   d57a8:	f7ff bda6 	b.w	d52f8 <network_ready>

000d57ac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d57ac:	2300      	movs	r3, #0
   d57ae:	461a      	mov	r2, r3
   d57b0:	4619      	mov	r1, r3
   d57b2:	6840      	ldr	r0, [r0, #4]
   d57b4:	f7ff bda8 	b.w	d5308 <network_on>

000d57b8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d57b8:	2300      	movs	r3, #0
   d57ba:	461a      	mov	r2, r3
   d57bc:	4619      	mov	r1, r3
   d57be:	6840      	ldr	r0, [r0, #4]
   d57c0:	f7ff bdaa 	b.w	d5318 <network_off>

000d57c4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d57c4:	2200      	movs	r2, #0
   d57c6:	f081 0101 	eor.w	r1, r1, #1
   d57ca:	6840      	ldr	r0, [r0, #4]
   d57cc:	f7ff bdac 	b.w	d5328 <network_listen>

000d57d0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d57d0:	2200      	movs	r2, #0
   d57d2:	6840      	ldr	r0, [r0, #4]
   d57d4:	f7ff bdb8 	b.w	d5348 <network_set_listen_timeout>

000d57d8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d57d8:	2200      	movs	r2, #0
   d57da:	4611      	mov	r1, r2
   d57dc:	6840      	ldr	r0, [r0, #4]
   d57de:	f7ff bdbb 	b.w	d5358 <network_get_listen_timeout>

000d57e2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d57e2:	2200      	movs	r2, #0
   d57e4:	4611      	mov	r1, r2
   d57e6:	6840      	ldr	r0, [r0, #4]
   d57e8:	f7ff bda6 	b.w	d5338 <network_listening>

000d57ec <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d57ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d57f0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d57f2:	b095      	sub	sp, #84	; 0x54
   d57f4:	4616      	mov	r6, r2
   d57f6:	460d      	mov	r5, r1
   d57f8:	4607      	mov	r7, r0
    IPAddress addr;
   d57fa:	f7ff fec5 	bl	d5588 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d57fe:	4621      	mov	r1, r4
   d5800:	2220      	movs	r2, #32
   d5802:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5804:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5806:	f000 fe84 	bl	d6512 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d580a:	2340      	movs	r3, #64	; 0x40
   d580c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d580e:	4621      	mov	r1, r4
   d5810:	466b      	mov	r3, sp
   d5812:	aa0c      	add	r2, sp, #48	; 0x30
   d5814:	4630      	mov	r0, r6
   d5816:	f7ff fc43 	bl	d50a0 <netdb_getaddrinfo>
    if (!r) {
   d581a:	4604      	mov	r4, r0
   d581c:	2800      	cmp	r0, #0
   d581e:	d144      	bne.n	d58aa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5820:	4602      	mov	r2, r0
   d5822:	2101      	movs	r1, #1
   d5824:	6868      	ldr	r0, [r5, #4]
   d5826:	f7ff fd67 	bl	d52f8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d582a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d582c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d582e:	4622      	mov	r2, r4
   d5830:	6868      	ldr	r0, [r5, #4]
   d5832:	f7ff fd61 	bl	d52f8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5836:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5838:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d583a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d583c:	2e00      	cmp	r6, #0
   d583e:	d034      	beq.n	d58aa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5840:	2900      	cmp	r1, #0
   d5842:	d132      	bne.n	d58aa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5844:	6873      	ldr	r3, [r6, #4]
   d5846:	2b02      	cmp	r3, #2
   d5848:	d002      	beq.n	d5850 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d584a:	2b0a      	cmp	r3, #10
   d584c:	d009      	beq.n	d5862 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d584e:	e02a      	b.n	d58a6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5850:	f1b8 0f00 	cmp.w	r8, #0
   d5854:	d027      	beq.n	d58a6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5856:	6971      	ldr	r1, [r6, #20]
   d5858:	4638      	mov	r0, r7
   d585a:	3104      	adds	r1, #4
   d585c:	f7ff fec1 	bl	d55e2 <_ZN9IPAddressaSEPKh>
   d5860:	e020      	b.n	d58a4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5862:	f1b9 0f00 	cmp.w	r9, #0
   d5866:	d01e      	beq.n	d58a6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5868:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d586a:	2211      	movs	r2, #17
   d586c:	a801      	add	r0, sp, #4
   d586e:	f000 fe50 	bl	d6512 <memset>
                    a.v = 6;
   d5872:	2306      	movs	r3, #6
   d5874:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5878:	ad01      	add	r5, sp, #4
   d587a:	f104 0308 	add.w	r3, r4, #8
   d587e:	3418      	adds	r4, #24
   d5880:	6818      	ldr	r0, [r3, #0]
   d5882:	6859      	ldr	r1, [r3, #4]
   d5884:	462a      	mov	r2, r5
   d5886:	c203      	stmia	r2!, {r0, r1}
   d5888:	3308      	adds	r3, #8
   d588a:	42a3      	cmp	r3, r4
   d588c:	4615      	mov	r5, r2
   d588e:	d1f7      	bne.n	d5880 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5890:	a901      	add	r1, sp, #4
   d5892:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5894:	ad07      	add	r5, sp, #28
   d5896:	f7ff fe85 	bl	d55a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d589a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d589c:	1d3c      	adds	r4, r7, #4
   d589e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d58a0:	682b      	ldr	r3, [r5, #0]
   d58a2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d58a4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d58a6:	69f6      	ldr	r6, [r6, #28]
   d58a8:	e7c8      	b.n	d583c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d58aa:	9800      	ldr	r0, [sp, #0]
   d58ac:	f7ff fbf0 	bl	d5090 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d58b0:	4638      	mov	r0, r7
   d58b2:	b015      	add	sp, #84	; 0x54
   d58b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d58b8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d58b8:	4b02      	ldr	r3, [pc, #8]	; (d58c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d58ba:	4a03      	ldr	r2, [pc, #12]	; (d58c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d58bc:	601a      	str	r2, [r3, #0]
   d58be:	2200      	movs	r2, #0
   d58c0:	605a      	str	r2, [r3, #4]
   d58c2:	4770      	bx	lr
   d58c4:	2003e5c0 	.word	0x2003e5c0
   d58c8:	000d6d44 	.word	0x000d6d44

000d58cc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d58cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d58ce:	4606      	mov	r6, r0
   d58d0:	460d      	mov	r5, r1
   d58d2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d58d4:	2400      	movs	r4, #0
  while (size--) {
   d58d6:	42bd      	cmp	r5, r7
   d58d8:	d00c      	beq.n	d58f4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d58da:	6833      	ldr	r3, [r6, #0]
   d58dc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d58e0:	689b      	ldr	r3, [r3, #8]
   d58e2:	4630      	mov	r0, r6
   d58e4:	4798      	blx	r3
     if (chunk>=0)
   d58e6:	2800      	cmp	r0, #0
   d58e8:	db01      	blt.n	d58ee <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d58ea:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d58ec:	e7f3      	b.n	d58d6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d58ee:	2c00      	cmp	r4, #0
   d58f0:	bf08      	it	eq
   d58f2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d58f4:	4620      	mov	r0, r4
   d58f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d58f8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d58f8:	b570      	push	{r4, r5, r6, lr}
   d58fa:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d58fc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d58fe:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5900:	b149      	cbz	r1, d5916 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5902:	f000 fe37 	bl	d6574 <strlen>
   d5906:	682b      	ldr	r3, [r5, #0]
   d5908:	4602      	mov	r2, r0
   d590a:	4621      	mov	r1, r4
   d590c:	4628      	mov	r0, r5
   d590e:	68db      	ldr	r3, [r3, #12]
    }
   d5910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5914:	4718      	bx	r3
    }
   d5916:	bd70      	pop	{r4, r5, r6, pc}

000d5918 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5918:	6803      	ldr	r3, [r0, #0]
   d591a:	689b      	ldr	r3, [r3, #8]
   d591c:	4718      	bx	r3

000d591e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d591e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5920:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5922:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5924:	f7ff fff8 	bl	d5918 <_ZN5Print5printEc>
  n += print('\n');
   d5928:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d592a:	4604      	mov	r4, r0
  n += print('\n');
   d592c:	4628      	mov	r0, r5
   d592e:	f7ff fff3 	bl	d5918 <_ZN5Print5printEc>
  return n;
}
   d5932:	4420      	add	r0, r4
   d5934:	bd38      	pop	{r3, r4, r5, pc}

000d5936 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5936:	b530      	push	{r4, r5, lr}
   d5938:	b08b      	sub	sp, #44	; 0x2c
   d593a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d593c:	2100      	movs	r1, #0
   d593e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5942:	2a01      	cmp	r2, #1
   d5944:	bf98      	it	ls
   d5946:	220a      	movls	r2, #10
   d5948:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d594c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5950:	fb05 3312 	mls	r3, r5, r2, r3
   d5954:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5958:	2b09      	cmp	r3, #9
   d595a:	bf94      	ite	ls
   d595c:	3330      	addls	r3, #48	; 0x30
   d595e:	3337      	addhi	r3, #55	; 0x37
   d5960:	b2db      	uxtb	r3, r3
   d5962:	4621      	mov	r1, r4
   d5964:	f804 3901 	strb.w	r3, [r4], #-1
   d5968:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d596a:	2d00      	cmp	r5, #0
   d596c:	d1ee      	bne.n	d594c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d596e:	f7ff ffc3 	bl	d58f8 <_ZN5Print5writeEPKc>
}
   d5972:	b00b      	add	sp, #44	; 0x2c
   d5974:	bd30      	pop	{r4, r5, pc}

000d5976 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5976:	b40c      	push	{r2, r3}
   d5978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d597c:	b087      	sub	sp, #28
   d597e:	af00      	add	r7, sp, #0
   d5980:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d5984:	4605      	mov	r5, r0
   d5986:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d598a:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d598c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d598e:	4623      	mov	r3, r4
   d5990:	464a      	mov	r2, r9
   d5992:	2114      	movs	r1, #20
   d5994:	1d38      	adds	r0, r7, #4
   d5996:	f7ff fcf7 	bl	d5388 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d599a:	2813      	cmp	r0, #19
   d599c:	d805      	bhi.n	d59aa <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d599e:	1d39      	adds	r1, r7, #4
   d59a0:	4628      	mov	r0, r5
   d59a2:	f7ff ffa9 	bl	d58f8 <_ZN5Print5writeEPKc>
   d59a6:	4604      	mov	r4, r0
   d59a8:	e013      	b.n	d59d2 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d59aa:	f100 0308 	add.w	r3, r0, #8
   d59ae:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d59b2:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d59b4:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d59b8:	1c41      	adds	r1, r0, #1
   d59ba:	4623      	mov	r3, r4
   d59bc:	464a      	mov	r2, r9
   d59be:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d59c0:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d59c2:	f7ff fce1 	bl	d5388 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d59c6:	4669      	mov	r1, sp
   d59c8:	4628      	mov	r0, r5
   d59ca:	f7ff ff95 	bl	d58f8 <_ZN5Print5writeEPKc>
   d59ce:	4604      	mov	r4, r0
   d59d0:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d59d2:	b11e      	cbz	r6, d59dc <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d59d4:	4628      	mov	r0, r5
   d59d6:	f7ff ffa2 	bl	d591e <_ZN5Print7printlnEv>
   d59da:	4404      	add	r4, r0
    return n;
}
   d59dc:	4620      	mov	r0, r4
   d59de:	371c      	adds	r7, #28
   d59e0:	46bd      	mov	sp, r7
   d59e2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d59e6:	b002      	add	sp, #8
   d59e8:	4770      	bx	lr

000d59ea <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d59ea:	b510      	push	{r4, lr}
   d59ec:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d59ee:	f7ff fcf3 	bl	d53d8 <_ZNSt14_Function_baseD1Ev>
   d59f2:	4620      	mov	r0, r4
   d59f4:	bd10      	pop	{r4, pc}
	...

000d59f8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d59f8:	4803      	ldr	r0, [pc, #12]	; (d5a08 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d59fa:	4a04      	ldr	r2, [pc, #16]	; (d5a0c <_GLOBAL__sub_I_RGB+0x14>)
   d59fc:	4904      	ldr	r1, [pc, #16]	; (d5a10 <_GLOBAL__sub_I_RGB+0x18>)
   d59fe:	2300      	movs	r3, #0
   d5a00:	6083      	str	r3, [r0, #8]
   d5a02:	f000 bc03 	b.w	d620c <__aeabi_atexit>
   d5a06:	bf00      	nop
   d5a08:	2003e5c8 	.word	0x2003e5c8
   d5a0c:	2003e348 	.word	0x2003e348
   d5a10:	000d59eb 	.word	0x000d59eb

000d5a14 <_ZN5Servo11resetFieldsEv>:

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   d5a14:	22b4      	movs	r2, #180	; 0xb4
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
   d5a16:	f64f 73ff 	movw	r3, #65535	; 0xffff
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   d5a1a:	8102      	strh	r2, [r0, #8]
  this->minPW = SERVO_DEFAULT_MIN_PW;
   d5a1c:	f44f 7208 	mov.w	r2, #544	; 0x220
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
   d5a20:	8003      	strh	r3, [r0, #0]
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
   d5a22:	8042      	strh	r2, [r0, #2]
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
   d5a24:	2300      	movs	r3, #0
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   d5a26:	f44f 6216 	mov.w	r2, #2400	; 0x960
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
   d5a2a:	80c3      	strh	r3, [r0, #6]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   d5a2c:	8082      	strh	r2, [r0, #4]
  this->trim = 0;
   d5a2e:	60c3      	str	r3, [r0, #12]
   d5a30:	4770      	bx	lr

000d5a32 <_ZN5ServoC1Ev>:
#define ANGLE_TO_US(a)    ((uint16_t)(map((a), this->minAngle, this->maxAngle, \
                                        this->minPW, this->maxPW)))
#define US_TO_ANGLE(us)   ((int16_t)(map((us), this->minPW, this->maxPW,  \
                                       this->minAngle, this->maxAngle)))

Servo::Servo()
   d5a32:	b508      	push	{r3, lr}
{
  this->resetFields();
   d5a34:	f7ff ffee 	bl	d5a14 <_ZN5Servo11resetFieldsEv>
}
   d5a38:	bd08      	pop	{r3, pc}

000d5a3a <_ZN5Servo6detachEv>:

  return true;
}

bool Servo::detach()
{
   d5a3a:	b510      	push	{r4, lr}
   d5a3c:	4604      	mov	r4, r0
   d5a3e:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
   d5a42:	1c43      	adds	r3, r0, #1
   d5a44:	d007      	beq.n	d5a56 <_ZN5Servo6detachEv+0x1c>
  {
    return false;
  }

  HAL_Servo_Detach(this->pin);
   d5a46:	b280      	uxth	r0, r0
   d5a48:	f7ff fb3a 	bl	d50c0 <HAL_Servo_Detach>

  this->resetFields();
   d5a4c:	4620      	mov	r0, r4
   d5a4e:	f7ff ffe1 	bl	d5a14 <_ZN5Servo11resetFieldsEv>

  return true;
   d5a52:	2001      	movs	r0, #1
   d5a54:	bd10      	pop	{r4, pc}

bool Servo::detach()
{
  if (!this->attached())
  {
    return false;
   d5a56:	2000      	movs	r0, #0
  HAL_Servo_Detach(this->pin);

  this->resetFields();

  return true;
}
   d5a58:	bd10      	pop	{r4, pc}

000d5a5a <_ZN5Servo6attachEtttss>:
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
   d5a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5a5e:	460d      	mov	r5, r1
   d5a60:	4604      	mov	r4, r0

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   d5a62:	2102      	movs	r1, #2
   d5a64:	4628      	mov	r0, r5
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
   d5a66:	4690      	mov	r8, r2
   d5a68:	461f      	mov	r7, r3

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   d5a6a:	f7ff fa81 	bl	d4f70 <HAL_Validate_Pin_Function>
   d5a6e:	2802      	cmp	r0, #2
   d5a70:	d001      	beq.n	d5a76 <_ZN5Servo6attachEtttss+0x1c>
  {
    return false;
   d5a72:	2600      	movs	r6, #0
   d5a74:	e019      	b.n	d5aaa <_ZN5Servo6attachEtttss+0x50>
  }

  // Safety check
  if (!pinAvailable(pin))
   d5a76:	4628      	mov	r0, r5
   d5a78:	f000 fac8 	bl	d600c <pinAvailable>
   d5a7c:	4606      	mov	r6, r0
   d5a7e:	2800      	cmp	r0, #0
   d5a80:	d0f7      	beq.n	d5a72 <_ZN5Servo6attachEtttss+0x18>
  {
    return false;
  }

  if (this->attached())
   d5a82:	f9b4 3000 	ldrsh.w	r3, [r4]
   d5a86:	3301      	adds	r3, #1
   d5a88:	d002      	beq.n	d5a90 <_ZN5Servo6attachEtttss+0x36>
  {
    this->detach();
   d5a8a:	4620      	mov	r0, r4
   d5a8c:	f7ff ffd5 	bl	d5a3a <_ZN5Servo6detachEv>
  }

  this->pin = pin;
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
   d5a90:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   d5a94:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   d5a96:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  if (this->attached())
  {
    this->detach();
  }

  this->pin = pin;
   d5a9a:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   d5a9c:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   d5aa0:	80a7      	strh	r7, [r4, #4]
  this->minAngle = minAngle;
  this->maxAngle = maxAngle;
   d5aa2:	8123      	strh	r3, [r4, #8]

  HAL_Servo_Attach(this->pin);
   d5aa4:	4628      	mov	r0, r5
   d5aa6:	f7ff fb03 	bl	d50b0 <HAL_Servo_Attach>

  return true;
}
   d5aaa:	4630      	mov	r0, r6
   d5aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5ab0 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d5ab0:	2100      	movs	r1, #0
   d5ab2:	f7ff bb4d 	b.w	d5150 <HAL_SPI_Acquire>

000d5ab6 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d5ab6:	2100      	movs	r1, #0
   d5ab8:	f7ff bb52 	b.w	d5160 <HAL_SPI_Release>

000d5abc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5abc:	b510      	push	{r4, lr}
   d5abe:	4604      	mov	r4, r0
{
    _spi = spi;
   d5ac0:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d5ac2:	4608      	mov	r0, r1
   d5ac4:	f7ff fb2c 	bl	d5120 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5ac8:	2300      	movs	r3, #0
   d5aca:	6063      	str	r3, [r4, #4]
}
   d5acc:	4620      	mov	r0, r4
   d5ace:	bd10      	pop	{r4, pc}

000d5ad0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5ad0:	b510      	push	{r4, lr}
   d5ad2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5ad4:	7800      	ldrb	r0, [r0, #0]
   d5ad6:	f7ff ffeb 	bl	d5ab0 <_ZN8SPIClass4lockEv.isra.0>
   d5ada:	b948      	cbnz	r0, d5af0 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d5adc:	7820      	ldrb	r0, [r4, #0]
   d5ade:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5ae2:	f7ff faf5 	bl	d50d0 <HAL_SPI_Begin>
        unlock();
   d5ae6:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d5aec:	f7ff bfe3 	b.w	d5ab6 <_ZN8SPIClass6unlockEv.isra.1>
   d5af0:	bd10      	pop	{r4, pc}

000d5af2 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5af2:	b538      	push	{r3, r4, r5, lr}
   d5af4:	4604      	mov	r4, r0
    if (!lock())
   d5af6:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5af8:	460d      	mov	r5, r1
    if (!lock())
   d5afa:	f7ff ffd9 	bl	d5ab0 <_ZN8SPIClass4lockEv.isra.0>
   d5afe:	b940      	cbnz	r0, d5b12 <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d5b00:	7820      	ldrb	r0, [r4, #0]
   d5b02:	4629      	mov	r1, r5
   d5b04:	f7ff faec 	bl	d50e0 <HAL_SPI_Set_Bit_Order>
        unlock();
   d5b08:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d5b0e:	f7ff bfd2 	b.w	d5ab6 <_ZN8SPIClass6unlockEv.isra.1>
   d5b12:	bd38      	pop	{r3, r4, r5, pc}

000d5b14 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d5b14:	b538      	push	{r3, r4, r5, lr}
   d5b16:	4604      	mov	r4, r0
    if (!lock())
   d5b18:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d5b1a:	460d      	mov	r5, r1
    if (!lock())
   d5b1c:	f7ff ffc8 	bl	d5ab0 <_ZN8SPIClass4lockEv.isra.0>
   d5b20:	b940      	cbnz	r0, d5b34 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d5b22:	7820      	ldrb	r0, [r4, #0]
   d5b24:	4629      	mov	r1, r5
   d5b26:	f7ff fae3 	bl	d50f0 <HAL_SPI_Set_Data_Mode>
        unlock();
   d5b2a:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d5b30:	f7ff bfc1 	b.w	d5ab6 <_ZN8SPIClass6unlockEv.isra.1>
   d5b34:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5b38 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5b38:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d5b3a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5b3c:	6018      	str	r0, [r3, #0]
   d5b3e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5b40:	6818      	ldr	r0, [r3, #0]
   d5b42:	4288      	cmp	r0, r1
   d5b44:	b2e5      	uxtb	r5, r4
   d5b46:	d906      	bls.n	d5b56 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5b48:	3401      	adds	r4, #1
   d5b4a:	2c08      	cmp	r4, #8
   d5b4c:	d002      	beq.n	d5b54 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5b4e:	0840      	lsrs	r0, r0, #1
   d5b50:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d5b52:	e7f5      	b.n	d5b40 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5b54:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d5b56:	4b02      	ldr	r3, [pc, #8]	; (d5b60 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5b58:	5d5b      	ldrb	r3, [r3, r5]
   d5b5a:	7013      	strb	r3, [r2, #0]
   d5b5c:	bd30      	pop	{r4, r5, pc}
   d5b5e:	bf00      	nop
   d5b60:	000d6d70 	.word	0x000d6d70

000d5b64 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5b68:	b088      	sub	sp, #32
    unsigned clock = 0;
   d5b6a:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5b6c:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d5b6e:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d5b70:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5b72:	460e      	mov	r6, r1
   d5b74:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d5b76:	f7ff ff9b 	bl	d5ab0 <_ZN8SPIClass4lockEv.isra.0>
   d5b7a:	4605      	mov	r5, r0
   d5b7c:	bb00      	cbnz	r0, d5bc0 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d5b7e:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d5b82:	4601      	mov	r1, r0
   d5b84:	2214      	movs	r2, #20
   d5b86:	a803      	add	r0, sp, #12
   d5b88:	f000 fcc3 	bl	d6512 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5b8c:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d5b8e:	462a      	mov	r2, r5
   d5b90:	a903      	add	r1, sp, #12
   d5b92:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d5b94:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d5b98:	f7ff fad2 	bl	d5140 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5b9c:	ab02      	add	r3, sp, #8
   d5b9e:	f10d 0207 	add.w	r2, sp, #7
   d5ba2:	fb07 f106 	mul.w	r1, r7, r6
   d5ba6:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d5ba8:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5bac:	f7ff ffc4 	bl	d5b38 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d5bb0:	7820      	ldrb	r0, [r4, #0]
   d5bb2:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d5bb6:	f7ff faa3 	bl	d5100 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d5bba:	7820      	ldrb	r0, [r4, #0]
   d5bbc:	f7ff ff7b 	bl	d5ab6 <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d5bc0:	9802      	ldr	r0, [sp, #8]
   d5bc2:	b008      	add	sp, #32
   d5bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5bc8 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d5bc8:	b538      	push	{r3, r4, r5, lr}
   d5bca:	4604      	mov	r4, r0
    if (!lock())
   d5bcc:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d5bce:	460d      	mov	r5, r1
    if (!lock())
   d5bd0:	f7ff ff6e 	bl	d5ab0 <_ZN8SPIClass4lockEv.isra.0>
   d5bd4:	b9c8      	cbnz	r0, d5c0a <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d5bd6:	6861      	ldr	r1, [r4, #4]
   d5bd8:	b171      	cbz	r1, d5bf8 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d5bda:	4b0c      	ldr	r3, [pc, #48]	; (d5c0c <_ZN8SPIClass15setClockDividerEh+0x44>)
   d5bdc:	5cc2      	ldrb	r2, [r0, r3]
   d5bde:	42aa      	cmp	r2, r5
   d5be0:	d002      	beq.n	d5be8 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d5be2:	3001      	adds	r0, #1
   d5be4:	2808      	cmp	r0, #8
   d5be6:	d1f9      	bne.n	d5bdc <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d5be8:	3001      	adds	r0, #1
   d5bea:	b2c0      	uxtb	r0, r0
   d5bec:	40c1      	lsrs	r1, r0
   d5bee:	2201      	movs	r2, #1
   d5bf0:	4620      	mov	r0, r4
   d5bf2:	f7ff ffb7 	bl	d5b64 <_ZN8SPIClass13setClockSpeedEjj>
   d5bf6:	e003      	b.n	d5c00 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d5bf8:	4629      	mov	r1, r5
   d5bfa:	7820      	ldrb	r0, [r4, #0]
   d5bfc:	f7ff fa80 	bl	d5100 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d5c00:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5c02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d5c06:	f7ff bf56 	b.w	d5ab6 <_ZN8SPIClass6unlockEv.isra.1>
   d5c0a:	bd38      	pop	{r3, r4, r5, pc}
   d5c0c:	000d6d70 	.word	0x000d6d70

000d5c10 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5c10:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d5c12:	7800      	ldrb	r0, [r0, #0]
   d5c14:	f7ff fa7c 	bl	d5110 <HAL_SPI_Send_Receive_Data>
}
   d5c18:	b2c0      	uxtb	r0, r0
   d5c1a:	bd08      	pop	{r3, pc}

000d5c1c <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d5c1c:	7800      	ldrb	r0, [r0, #0]
   d5c1e:	f7ff ba87 	b.w	d5130 <HAL_SPI_Is_Enabled>
	...

000d5c24 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5c24:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5c26:	4c09      	ldr	r4, [pc, #36]	; (d5c4c <_GLOBAL__sub_I_System+0x28>)
   d5c28:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5c2a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5c2e:	6020      	str	r0, [r4, #0]
   d5c30:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5c32:	71a0      	strb	r0, [r4, #6]
   d5c34:	8120      	strh	r0, [r4, #8]
   d5c36:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5c38:	f7ff fb1a 	bl	d5270 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5c3c:	4620      	mov	r0, r4
   d5c3e:	4a04      	ldr	r2, [pc, #16]	; (d5c50 <_GLOBAL__sub_I_System+0x2c>)
   d5c40:	4904      	ldr	r1, [pc, #16]	; (d5c54 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5c46:	f000 bae1 	b.w	d620c <__aeabi_atexit>
   d5c4a:	bf00      	nop
   d5c4c:	2003e5d8 	.word	0x2003e5d8
   d5c50:	2003e348 	.word	0x2003e348
   d5c54:	000d40c7 	.word	0x000d40c7

000d5c58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5c58:	4b02      	ldr	r3, [pc, #8]	; (d5c64 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5c5a:	681a      	ldr	r2, [r3, #0]
   d5c5c:	4b02      	ldr	r3, [pc, #8]	; (d5c68 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5c5e:	601a      	str	r2, [r3, #0]
   d5c60:	4770      	bx	lr
   d5c62:	bf00      	nop
   d5c64:	2003e2e0 	.word	0x2003e2e0
   d5c68:	2003e5e4 	.word	0x2003e5e4

000d5c6c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5c6c:	4770      	bx	lr

000d5c6e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5c6e:	7441      	strb	r1, [r0, #17]
   d5c70:	4770      	bx	lr

000d5c72 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5c72:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5c74:	7c00      	ldrb	r0, [r0, #16]
   d5c76:	f7ff fab3 	bl	d51e0 <HAL_USART_Available_Data_For_Write>
}
   d5c7a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5c7e:	bd08      	pop	{r3, pc}

000d5c80 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5c80:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5c82:	7c00      	ldrb	r0, [r0, #16]
   d5c84:	f7ff fa84 	bl	d5190 <HAL_USART_Available_Data>
}
   d5c88:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5c8c:	bd08      	pop	{r3, pc}

000d5c8e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5c8e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5c90:	7c00      	ldrb	r0, [r0, #16]
   d5c92:	f7ff fa8d 	bl	d51b0 <HAL_USART_Peek_Data>
}
   d5c96:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5c9a:	bf28      	it	cs
   d5c9c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5ca0:	bd08      	pop	{r3, pc}

000d5ca2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5ca2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5ca4:	7c00      	ldrb	r0, [r0, #16]
   d5ca6:	f7ff fa7b 	bl	d51a0 <HAL_USART_Read_Data>
}
   d5caa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5cae:	bf28      	it	cs
   d5cb0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5cb4:	bd08      	pop	{r3, pc}

000d5cb6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5cb6:	7c00      	ldrb	r0, [r0, #16]
   d5cb8:	f7ff ba82 	b.w	d51c0 <HAL_USART_Flush_Data>

000d5cbc <_ZN11USARTSerialD0Ev>:
   d5cbc:	b510      	push	{r4, lr}
   d5cbe:	2114      	movs	r1, #20
   d5cc0:	4604      	mov	r4, r0
   d5cc2:	f000 faa8 	bl	d6216 <_ZdlPvj>
   d5cc6:	4620      	mov	r0, r4
   d5cc8:	bd10      	pop	{r4, pc}

000d5cca <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5cca:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5ccc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5cce:	4604      	mov	r4, r0
   d5cd0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5cd2:	b925      	cbnz	r5, d5cde <_ZN11USARTSerial5writeEh+0x14>
   d5cd4:	7c00      	ldrb	r0, [r0, #16]
   d5cd6:	f7ff fa83 	bl	d51e0 <HAL_USART_Available_Data_For_Write>
   d5cda:	2800      	cmp	r0, #0
   d5cdc:	dd05      	ble.n	d5cea <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5cde:	4631      	mov	r1, r6
   d5ce0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5ce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5ce6:	f7ff ba4b 	b.w	d5180 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5cea:	4628      	mov	r0, r5
   d5cec:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5cf0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5cf0:	b510      	push	{r4, lr}
   d5cf2:	4604      	mov	r4, r0
   d5cf4:	4608      	mov	r0, r1
   d5cf6:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5cf8:	2200      	movs	r2, #0
   d5cfa:	6062      	str	r2, [r4, #4]
   d5cfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5d00:	60a2      	str	r2, [r4, #8]
   d5d02:	4a05      	ldr	r2, [pc, #20]	; (d5d18 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5d04:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5d06:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5d08:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5d0a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5d0c:	461a      	mov	r2, r3
   d5d0e:	f7ff fa2f 	bl	d5170 <HAL_USART_Init>
}
   d5d12:	4620      	mov	r0, r4
   d5d14:	bd10      	pop	{r4, pc}
   d5d16:	bf00      	nop
   d5d18:	000d6dac 	.word	0x000d6dac

000d5d1c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5d1c:	7c00      	ldrb	r0, [r0, #16]
   d5d1e:	f7ff ba57 	b.w	d51d0 <HAL_USART_Is_Enabled>
	...

000d5d24 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5d24:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5d26:	4d0c      	ldr	r5, [pc, #48]	; (d5d58 <_Z22__fetch_global_Serial1v+0x34>)
   d5d28:	6829      	ldr	r1, [r5, #0]
   d5d2a:	f011 0401 	ands.w	r4, r1, #1
   d5d2e:	d111      	bne.n	d5d54 <_Z22__fetch_global_Serial1v+0x30>
   d5d30:	4628      	mov	r0, r5
   d5d32:	f7fe f9bf 	bl	d40b4 <__cxa_guard_acquire>
   d5d36:	b168      	cbz	r0, d5d54 <_Z22__fetch_global_Serial1v+0x30>
   d5d38:	4a08      	ldr	r2, [pc, #32]	; (d5d5c <_Z22__fetch_global_Serial1v+0x38>)
   d5d3a:	4b09      	ldr	r3, [pc, #36]	; (d5d60 <_Z22__fetch_global_Serial1v+0x3c>)
   d5d3c:	4809      	ldr	r0, [pc, #36]	; (d5d64 <_Z22__fetch_global_Serial1v+0x40>)
   d5d3e:	4621      	mov	r1, r4
   d5d40:	f7ff ffd6 	bl	d5cf0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5d44:	4628      	mov	r0, r5
   d5d46:	f7fe f9ba 	bl	d40be <__cxa_guard_release>
   d5d4a:	4a07      	ldr	r2, [pc, #28]	; (d5d68 <_Z22__fetch_global_Serial1v+0x44>)
   d5d4c:	4907      	ldr	r1, [pc, #28]	; (d5d6c <_Z22__fetch_global_Serial1v+0x48>)
   d5d4e:	4805      	ldr	r0, [pc, #20]	; (d5d64 <_Z22__fetch_global_Serial1v+0x40>)
   d5d50:	f000 fa5c 	bl	d620c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5d54:	4803      	ldr	r0, [pc, #12]	; (d5d64 <_Z22__fetch_global_Serial1v+0x40>)
   d5d56:	bd38      	pop	{r3, r4, r5, pc}
   d5d58:	2003e680 	.word	0x2003e680
   d5d5c:	2003e684 	.word	0x2003e684
   d5d60:	2003e5fc 	.word	0x2003e5fc
   d5d64:	2003e5e8 	.word	0x2003e5e8
   d5d68:	2003e348 	.word	0x2003e348
   d5d6c:	000d5c6d 	.word	0x000d5c6d

000d5d70 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5d70:	7441      	strb	r1, [r0, #17]
   d5d72:	4770      	bx	lr

000d5d74 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5d74:	4770      	bx	lr

000d5d76 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5d76:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5d78:	2100      	movs	r1, #0
   d5d7a:	7c00      	ldrb	r0, [r0, #16]
   d5d7c:	f7ff fa58 	bl	d5230 <HAL_USB_USART_Receive_Data>
}
   d5d80:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5d84:	bf28      	it	cs
   d5d86:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5d8a:	bd08      	pop	{r3, pc}

000d5d8c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5d8c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5d8e:	2101      	movs	r1, #1
   d5d90:	7c00      	ldrb	r0, [r0, #16]
   d5d92:	f7ff fa4d 	bl	d5230 <HAL_USB_USART_Receive_Data>
}
   d5d96:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5d9a:	bf28      	it	cs
   d5d9c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5da0:	bd08      	pop	{r3, pc}

000d5da2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5da2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5da4:	7c00      	ldrb	r0, [r0, #16]
   d5da6:	f7ff fa3b 	bl	d5220 <HAL_USB_USART_Available_Data_For_Write>
}
   d5daa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5dae:	bd08      	pop	{r3, pc}

000d5db0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5db0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5db2:	7c00      	ldrb	r0, [r0, #16]
   d5db4:	f7ff fa2c 	bl	d5210 <HAL_USB_USART_Available_Data>
}
   d5db8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5dbc:	bd08      	pop	{r3, pc}

000d5dbe <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5dbe:	7c00      	ldrb	r0, [r0, #16]
   d5dc0:	f7ff ba46 	b.w	d5250 <HAL_USB_USART_Flush_Data>

000d5dc4 <_ZN9USBSerialD0Ev>:
   d5dc4:	b510      	push	{r4, lr}
   d5dc6:	2114      	movs	r1, #20
   d5dc8:	4604      	mov	r4, r0
   d5dca:	f000 fa24 	bl	d6216 <_ZdlPvj>
   d5dce:	4620      	mov	r0, r4
   d5dd0:	bd10      	pop	{r4, pc}

000d5dd2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5dd2:	b538      	push	{r3, r4, r5, lr}
   d5dd4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5dd6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5dd8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5dda:	f7ff fa21 	bl	d5220 <HAL_USB_USART_Available_Data_For_Write>
   d5dde:	2800      	cmp	r0, #0
   d5de0:	dc01      	bgt.n	d5de6 <_ZN9USBSerial5writeEh+0x14>
   d5de2:	7c60      	ldrb	r0, [r4, #17]
   d5de4:	b128      	cbz	r0, d5df2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5de6:	4629      	mov	r1, r5
   d5de8:	7c20      	ldrb	r0, [r4, #16]
   d5dea:	f7ff fa29 	bl	d5240 <HAL_USB_USART_Send_Data>
   d5dee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5df2:	bd38      	pop	{r3, r4, r5, pc}

000d5df4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5df4:	b510      	push	{r4, lr}
   d5df6:	4604      	mov	r4, r0
   d5df8:	2300      	movs	r3, #0
   d5dfa:	6063      	str	r3, [r4, #4]
   d5dfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5e00:	60a3      	str	r3, [r4, #8]
   d5e02:	4b05      	ldr	r3, [pc, #20]	; (d5e18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5e04:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5e06:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5e08:	4608      	mov	r0, r1
{
  _serial = serial;
   d5e0a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5e0c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5e0e:	4611      	mov	r1, r2
   d5e10:	f7ff f9ee 	bl	d51f0 <HAL_USB_USART_Init>
}
   d5e14:	4620      	mov	r0, r4
   d5e16:	bd10      	pop	{r4, pc}
   d5e18:	000d6ddc 	.word	0x000d6ddc

000d5e1c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5e1c:	2200      	movs	r2, #0
   d5e1e:	7c00      	ldrb	r0, [r0, #16]
   d5e20:	f7ff b9ee 	b.w	d5200 <HAL_USB_USART_Begin>

000d5e24 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5e24:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5e26:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5e28:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5e2a:	2100      	movs	r1, #0
   d5e2c:	f000 fb71 	bl	d6512 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5e30:	4620      	mov	r0, r4
   d5e32:	bd10      	pop	{r4, pc}

000d5e34 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5e34:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5e36:	4d0e      	ldr	r5, [pc, #56]	; (d5e70 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5e38:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5e3a:	a801      	add	r0, sp, #4
   d5e3c:	f7ff fff2 	bl	d5e24 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5e40:	6829      	ldr	r1, [r5, #0]
   d5e42:	f011 0401 	ands.w	r4, r1, #1
   d5e46:	d110      	bne.n	d5e6a <_Z16_fetch_usbserialv+0x36>
   d5e48:	4628      	mov	r0, r5
   d5e4a:	f7fe f933 	bl	d40b4 <__cxa_guard_acquire>
   d5e4e:	b160      	cbz	r0, d5e6a <_Z16_fetch_usbserialv+0x36>
   d5e50:	aa01      	add	r2, sp, #4
   d5e52:	4621      	mov	r1, r4
   d5e54:	4807      	ldr	r0, [pc, #28]	; (d5e74 <_Z16_fetch_usbserialv+0x40>)
   d5e56:	f7ff ffcd 	bl	d5df4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5e5a:	4628      	mov	r0, r5
   d5e5c:	f7fe f92f 	bl	d40be <__cxa_guard_release>
   d5e60:	4a05      	ldr	r2, [pc, #20]	; (d5e78 <_Z16_fetch_usbserialv+0x44>)
   d5e62:	4906      	ldr	r1, [pc, #24]	; (d5e7c <_Z16_fetch_usbserialv+0x48>)
   d5e64:	4803      	ldr	r0, [pc, #12]	; (d5e74 <_Z16_fetch_usbserialv+0x40>)
   d5e66:	f000 f9d1 	bl	d620c <__aeabi_atexit>
	return _usbserial;
}
   d5e6a:	4802      	ldr	r0, [pc, #8]	; (d5e74 <_Z16_fetch_usbserialv+0x40>)
   d5e6c:	b007      	add	sp, #28
   d5e6e:	bd30      	pop	{r4, r5, pc}
   d5e70:	2003e708 	.word	0x2003e708
   d5e74:	2003e70c 	.word	0x2003e70c
   d5e78:	2003e348 	.word	0x2003e348
   d5e7c:	000d5d75 	.word	0x000d5d75

000d5e80 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5e80:	2200      	movs	r2, #0
   d5e82:	4611      	mov	r1, r2
   d5e84:	6840      	ldr	r0, [r0, #4]
   d5e86:	f7ff ba37 	b.w	d52f8 <network_ready>

000d5e8a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5e8a:	2200      	movs	r2, #0
   d5e8c:	4611      	mov	r1, r2
   d5e8e:	6840      	ldr	r0, [r0, #4]
   d5e90:	f7ff ba52 	b.w	d5338 <network_listening>

000d5e94 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5e94:	2200      	movs	r2, #0
   d5e96:	4611      	mov	r1, r2
   d5e98:	6840      	ldr	r0, [r0, #4]
   d5e9a:	f7ff ba5d 	b.w	d5358 <network_get_listen_timeout>

000d5e9e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5e9e:	2200      	movs	r2, #0
   d5ea0:	6840      	ldr	r0, [r0, #4]
   d5ea2:	f7ff ba51 	b.w	d5348 <network_set_listen_timeout>

000d5ea6 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5ea6:	2200      	movs	r2, #0
   d5ea8:	f081 0101 	eor.w	r1, r1, #1
   d5eac:	6840      	ldr	r0, [r0, #4]
   d5eae:	f7ff ba3b 	b.w	d5328 <network_listen>

000d5eb2 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5eb2:	2300      	movs	r3, #0
   d5eb4:	461a      	mov	r2, r3
   d5eb6:	4619      	mov	r1, r3
   d5eb8:	6840      	ldr	r0, [r0, #4]
   d5eba:	f7ff ba2d 	b.w	d5318 <network_off>

000d5ebe <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5ebe:	2300      	movs	r3, #0
   d5ec0:	461a      	mov	r2, r3
   d5ec2:	4619      	mov	r1, r3
   d5ec4:	6840      	ldr	r0, [r0, #4]
   d5ec6:	f7ff ba1f 	b.w	d5308 <network_on>

000d5eca <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5eca:	2200      	movs	r2, #0
   d5ecc:	4611      	mov	r1, r2
   d5ece:	6840      	ldr	r0, [r0, #4]
   d5ed0:	f7ff ba02 	b.w	d52d8 <network_connecting>

000d5ed4 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5ed4:	2200      	movs	r2, #0
   d5ed6:	2102      	movs	r1, #2
   d5ed8:	6840      	ldr	r0, [r0, #4]
   d5eda:	f7ff ba05 	b.w	d52e8 <network_disconnect>

000d5ede <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5ede:	2300      	movs	r3, #0
   d5ee0:	461a      	mov	r2, r3
   d5ee2:	6840      	ldr	r0, [r0, #4]
   d5ee4:	f7ff b9f0 	b.w	d52c8 <network_connect>

000d5ee8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5ee8:	4b02      	ldr	r3, [pc, #8]	; (d5ef4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5eea:	2204      	movs	r2, #4
   d5eec:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5eee:	4a02      	ldr	r2, [pc, #8]	; (d5ef8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5ef0:	601a      	str	r2, [r3, #0]
   d5ef2:	4770      	bx	lr
   d5ef4:	2003e720 	.word	0x2003e720
   d5ef8:	000d6e0c 	.word	0x000d6e0c

000d5efc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5efc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5efe:	4b0c      	ldr	r3, [pc, #48]	; (d5f30 <serialEventRun+0x34>)
   d5f00:	b133      	cbz	r3, d5f10 <serialEventRun+0x14>
   d5f02:	f7ff ff97 	bl	d5e34 <_Z16_fetch_usbserialv>
   d5f06:	6803      	ldr	r3, [r0, #0]
   d5f08:	691b      	ldr	r3, [r3, #16]
   d5f0a:	4798      	blx	r3
   d5f0c:	2800      	cmp	r0, #0
   d5f0e:	dc09      	bgt.n	d5f24 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5f10:	4b08      	ldr	r3, [pc, #32]	; (d5f34 <serialEventRun+0x38>)
   d5f12:	b163      	cbz	r3, d5f2e <serialEventRun+0x32>
   d5f14:	f7ff ff06 	bl	d5d24 <_Z22__fetch_global_Serial1v>
   d5f18:	6803      	ldr	r3, [r0, #0]
   d5f1a:	691b      	ldr	r3, [r3, #16]
   d5f1c:	4798      	blx	r3
   d5f1e:	2800      	cmp	r0, #0
   d5f20:	dc03      	bgt.n	d5f2a <serialEventRun+0x2e>
   d5f22:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5f24:	f3af 8000 	nop.w
   d5f28:	e7f2      	b.n	d5f10 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5f2a:	f3af 8000 	nop.w
   d5f2e:	bd08      	pop	{r3, pc}
	...

000d5f38 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5f38:	b508      	push	{r3, lr}
	serialEventRun();
   d5f3a:	f7ff ffdf 	bl	d5efc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5f3e:	f7ff f807 	bl	d4f50 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5f42:	4b01      	ldr	r3, [pc, #4]	; (d5f48 <_post_loop+0x10>)
   d5f44:	6018      	str	r0, [r3, #0]
   d5f46:	bd08      	pop	{r3, pc}
   d5f48:	2003e730 	.word	0x2003e730

000d5f4c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5f4c:	4802      	ldr	r0, [pc, #8]	; (d5f58 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5f4e:	4a03      	ldr	r2, [pc, #12]	; (d5f5c <_Z33system_initialize_user_backup_ramv+0x10>)
   d5f50:	4903      	ldr	r1, [pc, #12]	; (d5f60 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5f52:	1a12      	subs	r2, r2, r0
   d5f54:	f000 bad2 	b.w	d64fc <memcpy>
   d5f58:	2003f400 	.word	0x2003f400
   d5f5c:	2003f404 	.word	0x2003f404
   d5f60:	000d6ef0 	.word	0x000d6ef0

000d5f64 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5f64:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5f66:	2300      	movs	r3, #0
   d5f68:	9300      	str	r3, [sp, #0]
   d5f6a:	461a      	mov	r2, r3
   d5f6c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5f70:	f7ff f998 	bl	d52a4 <system_ctrl_set_result>
}
   d5f74:	b003      	add	sp, #12
   d5f76:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5f7c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5f7c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5f7e:	8843      	ldrh	r3, [r0, #2]
   d5f80:	2b0a      	cmp	r3, #10
   d5f82:	d008      	beq.n	d5f96 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5f84:	2b50      	cmp	r3, #80	; 0x50
   d5f86:	d109      	bne.n	d5f9c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5f88:	4b09      	ldr	r3, [pc, #36]	; (d5fb0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5f8a:	681b      	ldr	r3, [r3, #0]
   d5f8c:	b13b      	cbz	r3, d5f9e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5f8e:	b003      	add	sp, #12
   d5f90:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5f94:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5f96:	f7ff ffe5 	bl	d5f64 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5f9a:	e006      	b.n	d5faa <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5f9c:	2300      	movs	r3, #0
   d5f9e:	9300      	str	r3, [sp, #0]
   d5fa0:	461a      	mov	r2, r3
   d5fa2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5fa6:	f7ff f97d 	bl	d52a4 <system_ctrl_set_result>
        break;
    }
}
   d5faa:	b003      	add	sp, #12
   d5fac:	f85d fb04 	ldr.w	pc, [sp], #4
   d5fb0:	2003e728 	.word	0x2003e728

000d5fb4 <module_user_init_hook>:

void module_user_init_hook()
{
   d5fb4:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5fb6:	4c10      	ldr	r4, [pc, #64]	; (d5ff8 <module_user_init_hook+0x44>)
   d5fb8:	4d10      	ldr	r5, [pc, #64]	; (d5ffc <module_user_init_hook+0x48>)
   d5fba:	6823      	ldr	r3, [r4, #0]
   d5fbc:	42ab      	cmp	r3, r5
   d5fbe:	4b10      	ldr	r3, [pc, #64]	; (d6000 <module_user_init_hook+0x4c>)
   d5fc0:	bf0c      	ite	eq
   d5fc2:	2201      	moveq	r2, #1
   d5fc4:	2200      	movne	r2, #0
   d5fc6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5fc8:	d002      	beq.n	d5fd0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d5fca:	f7ff ffbf 	bl	d5f4c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5fce:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5fd0:	f7fe ffae 	bl	d4f30 <HAL_RNG_GetRandomNumber>
   d5fd4:	4604      	mov	r4, r0
    srand(seed);
   d5fd6:	f000 faa5 	bl	d6524 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5fda:	4b0a      	ldr	r3, [pc, #40]	; (d6004 <module_user_init_hook+0x50>)
   d5fdc:	b113      	cbz	r3, d5fe4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5fde:	4620      	mov	r0, r4
   d5fe0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5fe4:	2100      	movs	r1, #0
   d5fe6:	4807      	ldr	r0, [pc, #28]	; (d6004 <module_user_init_hook+0x50>)
   d5fe8:	f7ff f966 	bl	d52b8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5fec:	2100      	movs	r1, #0
   d5fee:	4806      	ldr	r0, [pc, #24]	; (d6008 <module_user_init_hook+0x54>)
}
   d5ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5ff4:	f7ff b94c 	b.w	d5290 <system_ctrl_set_app_request_handler>
   d5ff8:	2003f400 	.word	0x2003f400
   d5ffc:	9a271c1e 	.word	0x9a271c1e
   d6000:	2003e72c 	.word	0x2003e72c
   d6004:	00000000 	.word	0x00000000
   d6008:	000d5f7d 	.word	0x000d5f7d

000d600c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d600c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d600e:	4e18      	ldr	r6, [pc, #96]	; (d6070 <pinAvailable+0x64>)
   d6010:	6831      	ldr	r1, [r6, #0]
   d6012:	f011 0501 	ands.w	r5, r1, #1
   d6016:	4604      	mov	r4, r0
   d6018:	d10a      	bne.n	d6030 <pinAvailable+0x24>
   d601a:	4630      	mov	r0, r6
   d601c:	f7fe f84a 	bl	d40b4 <__cxa_guard_acquire>
   d6020:	b130      	cbz	r0, d6030 <pinAvailable+0x24>
   d6022:	4629      	mov	r1, r5
   d6024:	4813      	ldr	r0, [pc, #76]	; (d6074 <pinAvailable+0x68>)
   d6026:	f7ff fd49 	bl	d5abc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d602a:	4630      	mov	r0, r6
   d602c:	f7fe f847 	bl	d40be <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d6030:	4810      	ldr	r0, [pc, #64]	; (d6074 <pinAvailable+0x68>)
   d6032:	f7ff fdf3 	bl	d5c1c <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6036:	b128      	cbz	r0, d6044 <pinAvailable+0x38>
   d6038:	f1a4 030b 	sub.w	r3, r4, #11
   d603c:	2b02      	cmp	r3, #2
   d603e:	d801      	bhi.n	d6044 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d6040:	2000      	movs	r0, #0
   d6042:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6044:	f000 f8bc 	bl	d61c0 <_Z19__fetch_global_Wirev>
   d6048:	f7ff fa60 	bl	d550c <_ZN7TwoWire9isEnabledEv>
   d604c:	b108      	cbz	r0, d6052 <pinAvailable+0x46>
   d604e:	2c01      	cmp	r4, #1
   d6050:	d9f6      	bls.n	d6040 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6052:	f7ff fe67 	bl	d5d24 <_Z22__fetch_global_Serial1v>
   d6056:	f7ff fe61 	bl	d5d1c <_ZN11USARTSerial9isEnabledEv>
   d605a:	b118      	cbz	r0, d6064 <pinAvailable+0x58>
   d605c:	f1a4 0309 	sub.w	r3, r4, #9
   d6060:	2b01      	cmp	r3, #1
   d6062:	d9ed      	bls.n	d6040 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6064:	2c23      	cmp	r4, #35	; 0x23
   d6066:	bf8c      	ite	hi
   d6068:	2000      	movhi	r0, #0
   d606a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d606c:	bd70      	pop	{r4, r5, r6, pc}
   d606e:	bf00      	nop
   d6070:	2003e3d0 	.word	0x2003e3d0
   d6074:	2003e3d4 	.word	0x2003e3d4

000d6078 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6078:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d607a:	b538      	push	{r3, r4, r5, lr}
   d607c:	4604      	mov	r4, r0
   d607e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6080:	d80a      	bhi.n	d6098 <pinMode+0x20>
   d6082:	29ff      	cmp	r1, #255	; 0xff
   d6084:	d008      	beq.n	d6098 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6086:	f7ff ffc1 	bl	d600c <pinAvailable>
   d608a:	b128      	cbz	r0, d6098 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d608c:	4629      	mov	r1, r5
   d608e:	4620      	mov	r0, r4
}
   d6090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6094:	f7fe bf74 	b.w	d4f80 <HAL_Pin_Mode>
   d6098:	bd38      	pop	{r3, r4, r5, pc}

000d609a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d609a:	b538      	push	{r3, r4, r5, lr}
   d609c:	4604      	mov	r4, r0
   d609e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d60a0:	f7fe ff76 	bl	d4f90 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d60a4:	28ff      	cmp	r0, #255	; 0xff
   d60a6:	d010      	beq.n	d60ca <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d60a8:	2806      	cmp	r0, #6
   d60aa:	d804      	bhi.n	d60b6 <digitalWrite+0x1c>
   d60ac:	234d      	movs	r3, #77	; 0x4d
   d60ae:	fa23 f000 	lsr.w	r0, r3, r0
   d60b2:	07c3      	lsls	r3, r0, #31
   d60b4:	d409      	bmi.n	d60ca <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d60b6:	4620      	mov	r0, r4
   d60b8:	f7ff ffa8 	bl	d600c <pinAvailable>
   d60bc:	b128      	cbz	r0, d60ca <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d60be:	4629      	mov	r1, r5
   d60c0:	4620      	mov	r0, r4
}
   d60c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d60c6:	f7fe bf6b 	b.w	d4fa0 <HAL_GPIO_Write>
   d60ca:	bd38      	pop	{r3, r4, r5, pc}

000d60cc <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d60cc:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d60ce:	b510      	push	{r4, lr}
   d60d0:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d60d2:	bf9c      	itt	ls
   d60d4:	340e      	addls	r4, #14
   d60d6:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d60d8:	4620      	mov	r0, r4
   d60da:	f7ff ff97 	bl	d600c <pinAvailable>
   d60de:	b150      	cbz	r0, d60f6 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d60e0:	2103      	movs	r1, #3
   d60e2:	4620      	mov	r0, r4
   d60e4:	f7fe ff44 	bl	d4f70 <HAL_Validate_Pin_Function>
   d60e8:	2803      	cmp	r0, #3
   d60ea:	d104      	bne.n	d60f6 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d60ec:	4620      	mov	r0, r4
}
   d60ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d60f2:	f7fe bf65 	b.w	d4fc0 <HAL_ADC_Read>
}
   d60f6:	2000      	movs	r0, #0
   d60f8:	bd10      	pop	{r4, pc}

000d60fa <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d60fa:	b538      	push	{r3, r4, r5, lr}
   d60fc:	4604      	mov	r4, r0
   d60fe:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d6100:	f7ff ff84 	bl	d600c <pinAvailable>
   d6104:	b1f0      	cbz	r0, d6144 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d6106:	2104      	movs	r1, #4
   d6108:	4620      	mov	r0, r4
   d610a:	f7fe ff31 	bl	d4f70 <HAL_Validate_Pin_Function>
   d610e:	2804      	cmp	r0, #4
   d6110:	d105      	bne.n	d611e <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d6112:	b2a9      	uxth	r1, r5
   d6114:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
   d6116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
   d611a:	f7fe bf49 	b.w	d4fb0 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d611e:	2102      	movs	r1, #2
   d6120:	4620      	mov	r0, r4
   d6122:	f7fe ff25 	bl	d4f70 <HAL_Validate_Pin_Function>
   d6126:	2802      	cmp	r0, #2
   d6128:	d10c      	bne.n	d6144 <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d612a:	4620      	mov	r0, r4
   d612c:	f7fe ff30 	bl	d4f90 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d6130:	2801      	cmp	r0, #1
   d6132:	d001      	beq.n	d6138 <_Z11analogWritetm+0x3e>
   d6134:	2804      	cmp	r0, #4
   d6136:	d105      	bne.n	d6144 <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d6138:	4629      	mov	r1, r5
   d613a:	4620      	mov	r0, r4
    }
}
   d613c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d6140:	f7fe bf46 	b.w	d4fd0 <HAL_PWM_Write_Ext>
   d6144:	bd38      	pop	{r3, r4, r5, pc}

000d6146 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d6146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d614a:	4690      	mov	r8, r2
   d614c:	461e      	mov	r6, r3
   d614e:	2407      	movs	r4, #7
   d6150:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d6152:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d6154:	f1b8 0f00 	cmp.w	r8, #0
   d6158:	d104      	bne.n	d6164 <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d615a:	f1c4 0107 	rsb	r1, r4, #7
   d615e:	fa46 f101 	asr.w	r1, r6, r1
   d6162:	e001      	b.n	d6168 <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d6164:	fa46 f104 	asr.w	r1, r6, r4
   d6168:	f001 0101 	and.w	r1, r1, #1
   d616c:	4638      	mov	r0, r7
   d616e:	f7ff ff94 	bl	d609a <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d6172:	2101      	movs	r1, #1
   d6174:	4628      	mov	r0, r5
   d6176:	f7ff ff90 	bl	d609a <digitalWrite>
    digitalWrite(clockPin, LOW);
   d617a:	2100      	movs	r1, #0
   d617c:	4628      	mov	r0, r5
   d617e:	f7ff ff8c 	bl	d609a <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d6182:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   d6186:	d2e5      	bcs.n	d6154 <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d6188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d618c <_Z17acquireWireBufferv>:
   d618c:	b570      	push	{r4, r5, r6, lr}
   d618e:	4604      	mov	r4, r0
   d6190:	2514      	movs	r5, #20
   d6192:	462a      	mov	r2, r5
   d6194:	4e09      	ldr	r6, [pc, #36]	; (d61bc <_Z17acquireWireBufferv+0x30>)
   d6196:	2100      	movs	r1, #0
   d6198:	f000 f9bb 	bl	d6512 <memset>
   d619c:	8025      	strh	r5, [r4, #0]
   d619e:	2520      	movs	r5, #32
   d61a0:	4631      	mov	r1, r6
   d61a2:	60a5      	str	r5, [r4, #8]
   d61a4:	6125      	str	r5, [r4, #16]
   d61a6:	4628      	mov	r0, r5
   d61a8:	f000 f84f 	bl	d624a <_ZnajRKSt9nothrow_t>
   d61ac:	4631      	mov	r1, r6
   d61ae:	6060      	str	r0, [r4, #4]
   d61b0:	4628      	mov	r0, r5
   d61b2:	f000 f84a 	bl	d624a <_ZnajRKSt9nothrow_t>
   d61b6:	60e0      	str	r0, [r4, #12]
   d61b8:	4620      	mov	r0, r4
   d61ba:	bd70      	pop	{r4, r5, r6, pc}
   d61bc:	000d6e38 	.word	0x000d6e38

000d61c0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d61c0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d61c2:	4d0e      	ldr	r5, [pc, #56]	; (d61fc <_Z19__fetch_global_Wirev+0x3c>)
   d61c4:	6829      	ldr	r1, [r5, #0]
   d61c6:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d61ca:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d61cc:	d113      	bne.n	d61f6 <_Z19__fetch_global_Wirev+0x36>
   d61ce:	4628      	mov	r0, r5
   d61d0:	f7fd ff70 	bl	d40b4 <__cxa_guard_acquire>
   d61d4:	b178      	cbz	r0, d61f6 <_Z19__fetch_global_Wirev+0x36>
   d61d6:	a801      	add	r0, sp, #4
   d61d8:	f7ff ffd8 	bl	d618c <_Z17acquireWireBufferv>
   d61dc:	aa01      	add	r2, sp, #4
   d61de:	4621      	mov	r1, r4
   d61e0:	4807      	ldr	r0, [pc, #28]	; (d6200 <_Z19__fetch_global_Wirev+0x40>)
   d61e2:	f7ff f96d 	bl	d54c0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d61e6:	4628      	mov	r0, r5
   d61e8:	f7fd ff69 	bl	d40be <__cxa_guard_release>
   d61ec:	4a05      	ldr	r2, [pc, #20]	; (d6204 <_Z19__fetch_global_Wirev+0x44>)
   d61ee:	4906      	ldr	r1, [pc, #24]	; (d6208 <_Z19__fetch_global_Wirev+0x48>)
   d61f0:	4803      	ldr	r0, [pc, #12]	; (d6200 <_Z19__fetch_global_Wirev+0x40>)
   d61f2:	f000 f80b 	bl	d620c <__aeabi_atexit>
	return wire;
}
   d61f6:	4802      	ldr	r0, [pc, #8]	; (d6200 <_Z19__fetch_global_Wirev+0x40>)
   d61f8:	b007      	add	sp, #28
   d61fa:	bd30      	pop	{r4, r5, pc}
   d61fc:	2003e734 	.word	0x2003e734
   d6200:	2003e738 	.word	0x2003e738
   d6204:	2003e348 	.word	0x2003e348
   d6208:	000d5469 	.word	0x000d5469

000d620c <__aeabi_atexit>:
   d620c:	460b      	mov	r3, r1
   d620e:	4601      	mov	r1, r0
   d6210:	4618      	mov	r0, r3
   d6212:	f000 b965 	b.w	d64e0 <__cxa_atexit>

000d6216 <_ZdlPvj>:
   d6216:	f7fd bf3e 	b.w	d4096 <_ZdlPv>
	...

000d621c <_ZSt15get_new_handlerv>:
   d621c:	4b02      	ldr	r3, [pc, #8]	; (d6228 <_ZSt15get_new_handlerv+0xc>)
   d621e:	6818      	ldr	r0, [r3, #0]
   d6220:	f3bf 8f5f 	dmb	sy
   d6224:	4770      	bx	lr
   d6226:	bf00      	nop
   d6228:	2003e74c 	.word	0x2003e74c

000d622c <_ZnwjRKSt9nothrow_t>:
   d622c:	b510      	push	{r4, lr}
   d622e:	2800      	cmp	r0, #0
   d6230:	bf14      	ite	ne
   d6232:	4604      	movne	r4, r0
   d6234:	2401      	moveq	r4, #1
   d6236:	4620      	mov	r0, r4
   d6238:	f7ff f896 	bl	d5368 <malloc>
   d623c:	b920      	cbnz	r0, d6248 <_ZnwjRKSt9nothrow_t+0x1c>
   d623e:	f7ff ffed 	bl	d621c <_ZSt15get_new_handlerv>
   d6242:	b108      	cbz	r0, d6248 <_ZnwjRKSt9nothrow_t+0x1c>
   d6244:	4780      	blx	r0
   d6246:	e7f6      	b.n	d6236 <_ZnwjRKSt9nothrow_t+0xa>
   d6248:	bd10      	pop	{r4, pc}

000d624a <_ZnajRKSt9nothrow_t>:
   d624a:	f7ff bfef 	b.w	d622c <_ZnwjRKSt9nothrow_t>
	...

000d6250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6250:	4b24      	ldr	r3, [pc, #144]	; (d62e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6252:	681a      	ldr	r2, [r3, #0]
   d6254:	07d0      	lsls	r0, r2, #31
   d6256:	bf5c      	itt	pl
   d6258:	2201      	movpl	r2, #1
   d625a:	601a      	strpl	r2, [r3, #0]
   d625c:	4b22      	ldr	r3, [pc, #136]	; (d62e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d625e:	681a      	ldr	r2, [r3, #0]
   d6260:	07d1      	lsls	r1, r2, #31
   d6262:	bf5c      	itt	pl
   d6264:	2201      	movpl	r2, #1
   d6266:	601a      	strpl	r2, [r3, #0]
   d6268:	4b20      	ldr	r3, [pc, #128]	; (d62ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d626a:	681a      	ldr	r2, [r3, #0]
   d626c:	07d2      	lsls	r2, r2, #31
   d626e:	bf5c      	itt	pl
   d6270:	2201      	movpl	r2, #1
   d6272:	601a      	strpl	r2, [r3, #0]
   d6274:	4b1e      	ldr	r3, [pc, #120]	; (d62f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6276:	681a      	ldr	r2, [r3, #0]
   d6278:	07d0      	lsls	r0, r2, #31
   d627a:	bf5c      	itt	pl
   d627c:	2201      	movpl	r2, #1
   d627e:	601a      	strpl	r2, [r3, #0]
   d6280:	4b1c      	ldr	r3, [pc, #112]	; (d62f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6282:	681a      	ldr	r2, [r3, #0]
   d6284:	07d1      	lsls	r1, r2, #31
   d6286:	bf5c      	itt	pl
   d6288:	2201      	movpl	r2, #1
   d628a:	601a      	strpl	r2, [r3, #0]
   d628c:	4b1a      	ldr	r3, [pc, #104]	; (d62f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d628e:	681a      	ldr	r2, [r3, #0]
   d6290:	07d2      	lsls	r2, r2, #31
   d6292:	bf5c      	itt	pl
   d6294:	2201      	movpl	r2, #1
   d6296:	601a      	strpl	r2, [r3, #0]
   d6298:	4b18      	ldr	r3, [pc, #96]	; (d62fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d629a:	681a      	ldr	r2, [r3, #0]
   d629c:	07d0      	lsls	r0, r2, #31
   d629e:	bf5c      	itt	pl
   d62a0:	2201      	movpl	r2, #1
   d62a2:	601a      	strpl	r2, [r3, #0]
   d62a4:	4b16      	ldr	r3, [pc, #88]	; (d6300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d62a6:	681a      	ldr	r2, [r3, #0]
   d62a8:	07d1      	lsls	r1, r2, #31
   d62aa:	bf5c      	itt	pl
   d62ac:	2201      	movpl	r2, #1
   d62ae:	601a      	strpl	r2, [r3, #0]
   d62b0:	4b14      	ldr	r3, [pc, #80]	; (d6304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d62b2:	681a      	ldr	r2, [r3, #0]
   d62b4:	07d2      	lsls	r2, r2, #31
   d62b6:	bf5c      	itt	pl
   d62b8:	2201      	movpl	r2, #1
   d62ba:	601a      	strpl	r2, [r3, #0]
   d62bc:	4b12      	ldr	r3, [pc, #72]	; (d6308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d62be:	681a      	ldr	r2, [r3, #0]
   d62c0:	07d0      	lsls	r0, r2, #31
   d62c2:	bf5c      	itt	pl
   d62c4:	2201      	movpl	r2, #1
   d62c6:	601a      	strpl	r2, [r3, #0]
   d62c8:	4b10      	ldr	r3, [pc, #64]	; (d630c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d62ca:	681a      	ldr	r2, [r3, #0]
   d62cc:	07d1      	lsls	r1, r2, #31
   d62ce:	bf5c      	itt	pl
   d62d0:	2201      	movpl	r2, #1
   d62d2:	601a      	strpl	r2, [r3, #0]
   d62d4:	4b0e      	ldr	r3, [pc, #56]	; (d6310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d62d6:	681a      	ldr	r2, [r3, #0]
   d62d8:	07d2      	lsls	r2, r2, #31
   d62da:	bf5c      	itt	pl
   d62dc:	2201      	movpl	r2, #1
   d62de:	601a      	strpl	r2, [r3, #0]
   d62e0:	4770      	bx	lr
   d62e2:	bf00      	nop
   d62e4:	2003e77c 	.word	0x2003e77c
   d62e8:	2003e778 	.word	0x2003e778
   d62ec:	2003e774 	.word	0x2003e774
   d62f0:	2003e770 	.word	0x2003e770
   d62f4:	2003e76c 	.word	0x2003e76c
   d62f8:	2003e768 	.word	0x2003e768
   d62fc:	2003e764 	.word	0x2003e764
   d6300:	2003e760 	.word	0x2003e760
   d6304:	2003e75c 	.word	0x2003e75c
   d6308:	2003e758 	.word	0x2003e758
   d630c:	2003e754 	.word	0x2003e754
   d6310:	2003e750 	.word	0x2003e750

000d6314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6314:	4b18      	ldr	r3, [pc, #96]	; (d6378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6316:	681a      	ldr	r2, [r3, #0]
   d6318:	07d1      	lsls	r1, r2, #31
   d631a:	bf5c      	itt	pl
   d631c:	2201      	movpl	r2, #1
   d631e:	601a      	strpl	r2, [r3, #0]
   d6320:	4b16      	ldr	r3, [pc, #88]	; (d637c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6322:	681a      	ldr	r2, [r3, #0]
   d6324:	07d2      	lsls	r2, r2, #31
   d6326:	bf5c      	itt	pl
   d6328:	2201      	movpl	r2, #1
   d632a:	601a      	strpl	r2, [r3, #0]
   d632c:	4b14      	ldr	r3, [pc, #80]	; (d6380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d632e:	681a      	ldr	r2, [r3, #0]
   d6330:	07d0      	lsls	r0, r2, #31
   d6332:	bf5c      	itt	pl
   d6334:	2201      	movpl	r2, #1
   d6336:	601a      	strpl	r2, [r3, #0]
   d6338:	4b12      	ldr	r3, [pc, #72]	; (d6384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d633a:	681a      	ldr	r2, [r3, #0]
   d633c:	07d1      	lsls	r1, r2, #31
   d633e:	bf5c      	itt	pl
   d6340:	2201      	movpl	r2, #1
   d6342:	601a      	strpl	r2, [r3, #0]
   d6344:	4b10      	ldr	r3, [pc, #64]	; (d6388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6346:	681a      	ldr	r2, [r3, #0]
   d6348:	07d2      	lsls	r2, r2, #31
   d634a:	bf5c      	itt	pl
   d634c:	2201      	movpl	r2, #1
   d634e:	601a      	strpl	r2, [r3, #0]
   d6350:	4b0e      	ldr	r3, [pc, #56]	; (d638c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6352:	681a      	ldr	r2, [r3, #0]
   d6354:	07d0      	lsls	r0, r2, #31
   d6356:	bf5c      	itt	pl
   d6358:	2201      	movpl	r2, #1
   d635a:	601a      	strpl	r2, [r3, #0]
   d635c:	4b0c      	ldr	r3, [pc, #48]	; (d6390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d635e:	681a      	ldr	r2, [r3, #0]
   d6360:	07d1      	lsls	r1, r2, #31
   d6362:	bf5c      	itt	pl
   d6364:	2201      	movpl	r2, #1
   d6366:	601a      	strpl	r2, [r3, #0]
   d6368:	4b0a      	ldr	r3, [pc, #40]	; (d6394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d636a:	681a      	ldr	r2, [r3, #0]
   d636c:	07d2      	lsls	r2, r2, #31
   d636e:	bf5c      	itt	pl
   d6370:	2201      	movpl	r2, #1
   d6372:	601a      	strpl	r2, [r3, #0]
   d6374:	4770      	bx	lr
   d6376:	bf00      	nop
   d6378:	2003e79c 	.word	0x2003e79c
   d637c:	2003e798 	.word	0x2003e798
   d6380:	2003e794 	.word	0x2003e794
   d6384:	2003e790 	.word	0x2003e790
   d6388:	2003e78c 	.word	0x2003e78c
   d638c:	2003e788 	.word	0x2003e788
   d6390:	2003e784 	.word	0x2003e784
   d6394:	2003e780 	.word	0x2003e780

000d6398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6398:	4b18      	ldr	r3, [pc, #96]	; (d63fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d639a:	681a      	ldr	r2, [r3, #0]
   d639c:	07d1      	lsls	r1, r2, #31
   d639e:	bf5c      	itt	pl
   d63a0:	2201      	movpl	r2, #1
   d63a2:	601a      	strpl	r2, [r3, #0]
   d63a4:	4b16      	ldr	r3, [pc, #88]	; (d6400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d63a6:	681a      	ldr	r2, [r3, #0]
   d63a8:	07d2      	lsls	r2, r2, #31
   d63aa:	bf5c      	itt	pl
   d63ac:	2201      	movpl	r2, #1
   d63ae:	601a      	strpl	r2, [r3, #0]
   d63b0:	4b14      	ldr	r3, [pc, #80]	; (d6404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d63b2:	681a      	ldr	r2, [r3, #0]
   d63b4:	07d0      	lsls	r0, r2, #31
   d63b6:	bf5c      	itt	pl
   d63b8:	2201      	movpl	r2, #1
   d63ba:	601a      	strpl	r2, [r3, #0]
   d63bc:	4b12      	ldr	r3, [pc, #72]	; (d6408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d63be:	681a      	ldr	r2, [r3, #0]
   d63c0:	07d1      	lsls	r1, r2, #31
   d63c2:	bf5c      	itt	pl
   d63c4:	2201      	movpl	r2, #1
   d63c6:	601a      	strpl	r2, [r3, #0]
   d63c8:	4b10      	ldr	r3, [pc, #64]	; (d640c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d63ca:	681a      	ldr	r2, [r3, #0]
   d63cc:	07d2      	lsls	r2, r2, #31
   d63ce:	bf5c      	itt	pl
   d63d0:	2201      	movpl	r2, #1
   d63d2:	601a      	strpl	r2, [r3, #0]
   d63d4:	4b0e      	ldr	r3, [pc, #56]	; (d6410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d63d6:	681a      	ldr	r2, [r3, #0]
   d63d8:	07d0      	lsls	r0, r2, #31
   d63da:	bf5c      	itt	pl
   d63dc:	2201      	movpl	r2, #1
   d63de:	601a      	strpl	r2, [r3, #0]
   d63e0:	4b0c      	ldr	r3, [pc, #48]	; (d6414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d63e2:	681a      	ldr	r2, [r3, #0]
   d63e4:	07d1      	lsls	r1, r2, #31
   d63e6:	bf5c      	itt	pl
   d63e8:	2201      	movpl	r2, #1
   d63ea:	601a      	strpl	r2, [r3, #0]
   d63ec:	4b0a      	ldr	r3, [pc, #40]	; (d6418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d63ee:	681a      	ldr	r2, [r3, #0]
   d63f0:	07d2      	lsls	r2, r2, #31
   d63f2:	bf5c      	itt	pl
   d63f4:	2201      	movpl	r2, #1
   d63f6:	601a      	strpl	r2, [r3, #0]
   d63f8:	4770      	bx	lr
   d63fa:	bf00      	nop
   d63fc:	2003e7bc 	.word	0x2003e7bc
   d6400:	2003e7b8 	.word	0x2003e7b8
   d6404:	2003e7b4 	.word	0x2003e7b4
   d6408:	2003e7b0 	.word	0x2003e7b0
   d640c:	2003e7ac 	.word	0x2003e7ac
   d6410:	2003e7a8 	.word	0x2003e7a8
   d6414:	2003e7a4 	.word	0x2003e7a4
   d6418:	2003e7a0 	.word	0x2003e7a0

000d641c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d641c:	4b24      	ldr	r3, [pc, #144]	; (d64b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d641e:	681a      	ldr	r2, [r3, #0]
   d6420:	07d0      	lsls	r0, r2, #31
   d6422:	bf5c      	itt	pl
   d6424:	2201      	movpl	r2, #1
   d6426:	601a      	strpl	r2, [r3, #0]
   d6428:	4b22      	ldr	r3, [pc, #136]	; (d64b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d642a:	681a      	ldr	r2, [r3, #0]
   d642c:	07d1      	lsls	r1, r2, #31
   d642e:	bf5c      	itt	pl
   d6430:	2201      	movpl	r2, #1
   d6432:	601a      	strpl	r2, [r3, #0]
   d6434:	4b20      	ldr	r3, [pc, #128]	; (d64b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6436:	681a      	ldr	r2, [r3, #0]
   d6438:	07d2      	lsls	r2, r2, #31
   d643a:	bf5c      	itt	pl
   d643c:	2201      	movpl	r2, #1
   d643e:	601a      	strpl	r2, [r3, #0]
   d6440:	4b1e      	ldr	r3, [pc, #120]	; (d64bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6442:	681a      	ldr	r2, [r3, #0]
   d6444:	07d0      	lsls	r0, r2, #31
   d6446:	bf5c      	itt	pl
   d6448:	2201      	movpl	r2, #1
   d644a:	601a      	strpl	r2, [r3, #0]
   d644c:	4b1c      	ldr	r3, [pc, #112]	; (d64c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d644e:	681a      	ldr	r2, [r3, #0]
   d6450:	07d1      	lsls	r1, r2, #31
   d6452:	bf5c      	itt	pl
   d6454:	2201      	movpl	r2, #1
   d6456:	601a      	strpl	r2, [r3, #0]
   d6458:	4b1a      	ldr	r3, [pc, #104]	; (d64c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d645a:	681a      	ldr	r2, [r3, #0]
   d645c:	07d2      	lsls	r2, r2, #31
   d645e:	bf5c      	itt	pl
   d6460:	2201      	movpl	r2, #1
   d6462:	601a      	strpl	r2, [r3, #0]
   d6464:	4b18      	ldr	r3, [pc, #96]	; (d64c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6466:	681a      	ldr	r2, [r3, #0]
   d6468:	07d0      	lsls	r0, r2, #31
   d646a:	bf5c      	itt	pl
   d646c:	2201      	movpl	r2, #1
   d646e:	601a      	strpl	r2, [r3, #0]
   d6470:	4b16      	ldr	r3, [pc, #88]	; (d64cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6472:	681a      	ldr	r2, [r3, #0]
   d6474:	07d1      	lsls	r1, r2, #31
   d6476:	bf5c      	itt	pl
   d6478:	2201      	movpl	r2, #1
   d647a:	601a      	strpl	r2, [r3, #0]
   d647c:	4b14      	ldr	r3, [pc, #80]	; (d64d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d647e:	681a      	ldr	r2, [r3, #0]
   d6480:	07d2      	lsls	r2, r2, #31
   d6482:	bf5c      	itt	pl
   d6484:	2201      	movpl	r2, #1
   d6486:	601a      	strpl	r2, [r3, #0]
   d6488:	4b12      	ldr	r3, [pc, #72]	; (d64d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d648a:	681a      	ldr	r2, [r3, #0]
   d648c:	07d0      	lsls	r0, r2, #31
   d648e:	bf5c      	itt	pl
   d6490:	2201      	movpl	r2, #1
   d6492:	601a      	strpl	r2, [r3, #0]
   d6494:	4b10      	ldr	r3, [pc, #64]	; (d64d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6496:	681a      	ldr	r2, [r3, #0]
   d6498:	07d1      	lsls	r1, r2, #31
   d649a:	bf5c      	itt	pl
   d649c:	2201      	movpl	r2, #1
   d649e:	601a      	strpl	r2, [r3, #0]
   d64a0:	4b0e      	ldr	r3, [pc, #56]	; (d64dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d64a2:	681a      	ldr	r2, [r3, #0]
   d64a4:	07d2      	lsls	r2, r2, #31
   d64a6:	bf5c      	itt	pl
   d64a8:	2201      	movpl	r2, #1
   d64aa:	601a      	strpl	r2, [r3, #0]
   d64ac:	4770      	bx	lr
   d64ae:	bf00      	nop
   d64b0:	2003e7ec 	.word	0x2003e7ec
   d64b4:	2003e7e8 	.word	0x2003e7e8
   d64b8:	2003e7e4 	.word	0x2003e7e4
   d64bc:	2003e7e0 	.word	0x2003e7e0
   d64c0:	2003e7dc 	.word	0x2003e7dc
   d64c4:	2003e7d8 	.word	0x2003e7d8
   d64c8:	2003e7d4 	.word	0x2003e7d4
   d64cc:	2003e7d0 	.word	0x2003e7d0
   d64d0:	2003e7cc 	.word	0x2003e7cc
   d64d4:	2003e7c8 	.word	0x2003e7c8
   d64d8:	2003e7c4 	.word	0x2003e7c4
   d64dc:	2003e7c0 	.word	0x2003e7c0

000d64e0 <__cxa_atexit>:
   d64e0:	b510      	push	{r4, lr}
   d64e2:	4c05      	ldr	r4, [pc, #20]	; (d64f8 <__cxa_atexit+0x18>)
   d64e4:	4613      	mov	r3, r2
   d64e6:	b12c      	cbz	r4, d64f4 <__cxa_atexit+0x14>
   d64e8:	460a      	mov	r2, r1
   d64ea:	4601      	mov	r1, r0
   d64ec:	2002      	movs	r0, #2
   d64ee:	f3af 8000 	nop.w
   d64f2:	bd10      	pop	{r4, pc}
   d64f4:	4620      	mov	r0, r4
   d64f6:	bd10      	pop	{r4, pc}
   d64f8:	00000000 	.word	0x00000000

000d64fc <memcpy>:
   d64fc:	b510      	push	{r4, lr}
   d64fe:	1e43      	subs	r3, r0, #1
   d6500:	440a      	add	r2, r1
   d6502:	4291      	cmp	r1, r2
   d6504:	d004      	beq.n	d6510 <memcpy+0x14>
   d6506:	f811 4b01 	ldrb.w	r4, [r1], #1
   d650a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d650e:	e7f8      	b.n	d6502 <memcpy+0x6>
   d6510:	bd10      	pop	{r4, pc}

000d6512 <memset>:
   d6512:	4402      	add	r2, r0
   d6514:	4603      	mov	r3, r0
   d6516:	4293      	cmp	r3, r2
   d6518:	d002      	beq.n	d6520 <memset+0xe>
   d651a:	f803 1b01 	strb.w	r1, [r3], #1
   d651e:	e7fa      	b.n	d6516 <memset+0x4>
   d6520:	4770      	bx	lr
	...

000d6524 <srand>:
   d6524:	b538      	push	{r3, r4, r5, lr}
   d6526:	4b12      	ldr	r3, [pc, #72]	; (d6570 <srand+0x4c>)
   d6528:	681c      	ldr	r4, [r3, #0]
   d652a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d652c:	4605      	mov	r5, r0
   d652e:	b9d3      	cbnz	r3, d6566 <srand+0x42>
   d6530:	2018      	movs	r0, #24
   d6532:	f7fe ff19 	bl	d5368 <malloc>
   d6536:	f243 330e 	movw	r3, #13070	; 0x330e
   d653a:	63a0      	str	r0, [r4, #56]	; 0x38
   d653c:	8003      	strh	r3, [r0, #0]
   d653e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6542:	8043      	strh	r3, [r0, #2]
   d6544:	f241 2334 	movw	r3, #4660	; 0x1234
   d6548:	8083      	strh	r3, [r0, #4]
   d654a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d654e:	80c3      	strh	r3, [r0, #6]
   d6550:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6554:	8103      	strh	r3, [r0, #8]
   d6556:	2305      	movs	r3, #5
   d6558:	8143      	strh	r3, [r0, #10]
   d655a:	230b      	movs	r3, #11
   d655c:	8183      	strh	r3, [r0, #12]
   d655e:	2201      	movs	r2, #1
   d6560:	2300      	movs	r3, #0
   d6562:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6566:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6568:	2200      	movs	r2, #0
   d656a:	611d      	str	r5, [r3, #16]
   d656c:	615a      	str	r2, [r3, #20]
   d656e:	bd38      	pop	{r3, r4, r5, pc}
   d6570:	2003e344 	.word	0x2003e344

000d6574 <strlen>:
   d6574:	4603      	mov	r3, r0
   d6576:	f813 2b01 	ldrb.w	r2, [r3], #1
   d657a:	2a00      	cmp	r2, #0
   d657c:	d1fb      	bne.n	d6576 <strlen+0x2>
   d657e:	1a18      	subs	r0, r3, r0
   d6580:	3801      	subs	r0, #1
   d6582:	4770      	bx	lr

000d6584 <dynalib_user>:
   d6584:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6594:	0000 0000 7953 7473 6d65 5220 6165 7964     ....System Ready
   d65a4:	2e2e 002e 4c41 5241 0a4d 5953 5453 4d45     ....ALARM.SYSTEM
   d65b4:	520a 4145 5944 4300 444f 2045 4154 454b     .READY.CODE TAKE
   d65c4:	534e 5359 4554 0a4d 4944 4153 4d52 4445     NSYSTEM.DISARMED
   d65d4:	4200 756c 2065 7542 7474 6e6f 000a 4e49     .Blue Button..IN
   d65e4:	4f43 5252 4345 2054 4f43 4544 530a 5359     CORRECT CODE.SYS
   d65f4:	4554 0a4d 4f4c 4b43 4445 5900 6c65 6f6c     TEM.LOCKED.Yello
   d6604:	2077 7562 7474 6e6f 000a 455a 4f52 6920     w button..ZERO i
   d6614:	3d20 2520 2069 7241 6172 2079 6156 756c      = %i Array Valu
   d6624:	3a65 2520 0a69 4f00 454e 2020 2069 203d     e: %i..ONE  i = 
   d6634:	6925 4120 7272 7961 5620 6c61 6575 203a     %i Array Value: 
   d6644:	6925 000a                                   %i..

000d6648 <_ZTV12Adafruit_GFX>:
	...
   d6658:	4729 000d 58cd 000d 40a1 000d 4429 000d     )G...X...@..)D..
   d6668:	4549 000d 4565 000d 44e9 000d 457f 000d     IE..eE...D...E..
   d6678:	45b7 000d 45d3 000d                         .E...E..

000d6680 <_ZL4font>:
   d6680:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d6690:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d66a0:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d66b0:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d66c0:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d66d0:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d66e0:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d66f0:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d6700:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d6710:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d6720:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d6730:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d6740:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d6750:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d6760:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d6770:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d6780:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d6790:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d67a0:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d67b0:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d67c0:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d67d0:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d67e0:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d67f0:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d6800:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d6810:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d6820:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d6830:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d6840:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d6850:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d6860:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d6870:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d6880:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d6890:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d68a0:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d68b0:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d68c0:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d68d0:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d68e0:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d68f0:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d6900:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d6910:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   d6920:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d6930:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d6940:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   d6950:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d6960:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   d6970:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   d6980:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   d6990:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d69a0:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d69b0:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d69c0:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d69d0:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d69e0:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d69f0:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   d6a00:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   d6a10:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   d6a20:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   d6a30:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   d6a40:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   d6a50:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   d6a60:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   d6a70:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   d6a80:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   d6a90:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   d6aa0:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   d6ab0:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   d6ac0:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   d6ad0:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   d6ae0:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   d6af0:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   d6b00:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   d6b10:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   d6b20:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   d6b30:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   d6b40:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   d6b50:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   d6b60:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   d6b70:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000d6b7c <_ZTV16Adafruit_SSD1306>:
	...
   d6b84:	40c5 000d 43b9 000d 4729 000d 58cd 000d     .@...C..)G...X..
   d6b94:	4aa9 000d 4429 000d 4931 000d 47bd 000d     .J..)D..1I...G..
   d6ba4:	44e9 000d 457f 000d 45b7 000d 45d3 000d     .D...E...E...E..

000d6bb4 <_ZTVN5spark13EthernetClassE>:
	...
   d6bbc:	5449 000d 543f 000d 5435 000d 542b 000d     IT..?T..5T..+T..
   d6bcc:	541f 000d 5413 000d 5407 000d 53ff 000d     .T...T...T...S..
   d6bdc:	53f5 000d 53eb 000d 57ed 000d               .S...S...W..

000d6be8 <_ZTV7TwoWire>:
	...
   d6bf0:	5469 000d 54b3 000d 548b 000d 546b 000d     iT...T...T..kT..
   d6c00:	5493 000d 549b 000d 54a3 000d 54ab 000d     .T...T...T...T..

000d6c10 <_ZTV9IPAddress>:
	...
   d6c18:	5525 000d 5515 000d 5517 000d 6162 6475     %U...U...U..baud
   d6c28:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d6c38:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d6c48:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d6c58:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d6c68:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d6c78:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d6c88:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d6c98:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d6ca8:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d6cb8:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d6cc8:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
   d6cd8:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   d6ce8:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d6cf8:	726f 7000 6e61 6369 6100 6c6c 0000 0000     or.panic.all....

000d6d08 <_ZTVN5spark9MeshClassE>:
	...
   d6d10:	5667 000d 565d 000d 5653 000d 5649 000d     gV..]V..SV..IV..
   d6d20:	563d 000d 5631 000d 5625 000d 561d 000d     =V..1V..%V...V..
   d6d30:	5613 000d 5609 000d 57ed 000d               .V...V...W..

000d6d3c <_ZTVN5spark12NetworkClassE>:
	...
   d6d44:	5785 000d 578f 000d 5799 000d 57a3 000d     .W...W...W...W..
   d6d54:	57ad 000d 57b9 000d 57c5 000d 57d1 000d     .W...W...W...W..
   d6d64:	57d9 000d 57e3 000d 57ed 000d               .W...W...W..

000d6d70 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d6d70:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
   d6d80:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d6d90:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d6da0:	0000 0000                                   ....

000d6da4 <_ZTV11USARTSerial>:
	...
   d6dac:	5c6d 000d 5cbd 000d 5ccb 000d 58cd 000d     m\...\...\...X..
   d6dbc:	5c81 000d 5ca3 000d 5c8f 000d 5cb7 000d     .\...\...\...\..
   d6dcc:	5c6f 000d 5c73 000d                         o\..s\..

000d6dd4 <_ZTV9USBSerial>:
	...
   d6ddc:	5d75 000d 5dc5 000d 5dd3 000d 58cd 000d     u]...]...]...X..
   d6dec:	5db1 000d 5d77 000d 5d8d 000d 5dbf 000d     .]..w]...]...]..
   d6dfc:	5da3 000d 5d71 000d                         .]..q]..

000d6e04 <_ZTVN5spark9WiFiClassE>:
	...
   d6e0c:	5edf 000d 5ed5 000d 5ecb 000d 5e81 000d     .^...^...^...^..
   d6e1c:	5ebf 000d 5eb3 000d 5ea7 000d 5e9f 000d     .^...^...^...^..
   d6e2c:	5e95 000d 5e8b 000d 57ed 000d               .^...^...W..

000d6e38 <_ZSt7nothrow>:
   d6e38:	0000 0000                                   ....

000d6e3c <__sf_fake_stdin>:
	...

000d6e5c <__sf_fake_stdout>:
	...

000d6e7c <__sf_fake_stderr>:
	...
   d6e9c:	0043                                        C.

000d6e9e <link_const_variable_data_end>:
	...

000d6ea0 <link_constructors_location>:
   d6ea0:	000d43c9 	.word	0x000d43c9
   d6ea4:	000d47b9 	.word	0x000d47b9
   d6ea8:	000d4ed9 	.word	0x000d4ed9
   d6eac:	000d4edd 	.word	0x000d4edd
   d6eb0:	000d53b1 	.word	0x000d53b1
   d6eb4:	000d5455 	.word	0x000d5455
   d6eb8:	000d55f9 	.word	0x000d55f9
   d6ebc:	000d5735 	.word	0x000d5735
   d6ec0:	000d58b9 	.word	0x000d58b9
   d6ec4:	000d59f9 	.word	0x000d59f9
   d6ec8:	000d5c25 	.word	0x000d5c25
   d6ecc:	000d5c59 	.word	0x000d5c59
   d6ed0:	000d5ee9 	.word	0x000d5ee9
   d6ed4:	000d6251 	.word	0x000d6251
   d6ed8:	000d6315 	.word	0x000d6315
   d6edc:	000d6399 	.word	0x000d6399
   d6ee0:	000d641d 	.word	0x000d641d

000d6ee4 <link_constructors_end>:
	...
