
/Users/christianc/Documents/IoT/Capstone/ReceiverKey/target/1.5.2/argon/ReceiverKey.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000019a4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d59c0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  2003e2fc  000d59c4  0001e2fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000478  2003e378  2003e378  0002e378  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5a40  000d5a40  00025a40  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5a68  000d5a68  00025a68  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000e3631  00000000  00000000  00025a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011884  00000000  00000000  0010909d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001ecd6  00000000  00000000  0011a921  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002410  00000000  00000000  001395f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004518  00000000  00000000  0013ba07  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035706  00000000  00000000  0013ff1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002a659  00000000  00000000  00175625  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00105b7b  00000000  00000000  0019fc7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000cb54  00000000  00000000  002a57fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 faad 	bl	d558c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fab2 	bl	d55a2 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2fc 	.word	0x2003e2fc
   d4048:	000d59c4 	.word	0x000d59c4
   d404c:	2003e378 	.word	0x2003e378
   d4050:	2003e378 	.word	0x2003e378
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 f82f 	bl	d50bc <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d59b4 	.word	0x000d59b4
   d4080:	000d5974 	.word	0x000d5974

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b81c 	b.w	d40c0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f87d 	bl	d4188 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bfd5 	b.w	d5040 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 bb01 	b.w	d469c <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 baff 	b.w	d469c <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40ae:	b510      	push	{r4, lr}
   d40b0:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40b2:	6800      	ldr	r0, [r0, #0]
   d40b4:	b108      	cbz	r0, d40ba <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40b6:	f000 faf1 	bl	d469c <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40ba:	4620      	mov	r0, r4
   d40bc:	bd10      	pop	{r4, pc}
	...

000d40c0 <setup>:
int bitFour;
int n;
bool printState;


void setup() {
   d40c0:	b508      	push	{r3, lr}

  Serial.begin(9600);
   d40c2:	f000 ff3b 	bl	d4f3c <_Z16_fetch_usbserialv>
   d40c6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40ca:	f000 ff2b 	bl	d4f24 <_ZN9USBSerial5beginEl>
  pinMode(anodePin, INPUT);
   d40ce:	2100      	movs	r1, #0
   d40d0:	200e      	movs	r0, #14
   d40d2:	f001 f855 	bl	d5180 <pinMode>

  pinMode(D7, OUTPUT); //for testing only
   d40d6:	2101      	movs	r1, #1
   d40d8:	2007      	movs	r0, #7
   d40da:	f001 f851 	bl	d5180 <pinMode>

  delay(1000); //set up time
   d40de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d40e2:	f000 faeb 	bl	d46bc <delay>
  Serial.printf("System Ready...");
   d40e6:	f000 ff29 	bl	d4f3c <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d40ea:	4a03      	ldr	r2, [pc, #12]	; (d40f8 <setup+0x38>)
   d40ec:	2100      	movs	r1, #0

}
   d40ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d40f2:	f000 bdbe 	b.w	d4c72 <_ZN5Print11printf_implEbPKcz>
   d40f6:	bf00      	nop
   d40f8:	000d5628 	.word	0x000d5628

000d40fc <_Z10displayKeyv>:
    bitThree = array[4];
    bitFour = array[5];

}

void displayKey() {
   d40fc:	b510      	push	{r4, lr}

    if(bitZero == 0 && bitOne == 1 && bitTwo == 0 && bitThree == 1 && bitFour == 1){
   d40fe:	4b1b      	ldr	r3, [pc, #108]	; (d416c <_Z10displayKeyv+0x70>)
   d4100:	681b      	ldr	r3, [r3, #0]
   d4102:	b9b3      	cbnz	r3, d4132 <_Z10displayKeyv+0x36>
   d4104:	4b1a      	ldr	r3, [pc, #104]	; (d4170 <_Z10displayKeyv+0x74>)
   d4106:	681b      	ldr	r3, [r3, #0]
   d4108:	2b01      	cmp	r3, #1
   d410a:	d12d      	bne.n	d4168 <_Z10displayKeyv+0x6c>
   d410c:	4b19      	ldr	r3, [pc, #100]	; (d4174 <_Z10displayKeyv+0x78>)
   d410e:	681c      	ldr	r4, [r3, #0]
   d4110:	bb54      	cbnz	r4, d4168 <_Z10displayKeyv+0x6c>
   d4112:	4b19      	ldr	r3, [pc, #100]	; (d4178 <_Z10displayKeyv+0x7c>)
   d4114:	681b      	ldr	r3, [r3, #0]
   d4116:	2b01      	cmp	r3, #1
   d4118:	d126      	bne.n	d4168 <_Z10displayKeyv+0x6c>
   d411a:	4b18      	ldr	r3, [pc, #96]	; (d417c <_Z10displayKeyv+0x80>)
   d411c:	681b      	ldr	r3, [r3, #0]
   d411e:	2b01      	cmp	r3, #1
   d4120:	d122      	bne.n	d4168 <_Z10displayKeyv+0x6c>
    Serial.printf("Yellow button\n");
   d4122:	f000 ff0b 	bl	d4f3c <_Z16_fetch_usbserialv>
   d4126:	4621      	mov	r1, r4
   d4128:	4a15      	ldr	r2, [pc, #84]	; (d4180 <_Z10displayKeyv+0x84>)
   d412a:	f000 fda2 	bl	d4c72 <_ZN5Print11printf_implEbPKcz>
    analogWrite(D7, 20); //for testing only
   d412e:	2114      	movs	r1, #20
   d4130:	e015      	b.n	d415e <_Z10displayKeyv+0x62>
    
  }
  else if(bitZero == 1 && bitOne == 0 && bitTwo == 1 && bitThree == 0 && bitFour == 0){
   d4132:	2b01      	cmp	r3, #1
   d4134:	d118      	bne.n	d4168 <_Z10displayKeyv+0x6c>
   d4136:	4b0e      	ldr	r3, [pc, #56]	; (d4170 <_Z10displayKeyv+0x74>)
   d4138:	681b      	ldr	r3, [r3, #0]
   d413a:	b9ab      	cbnz	r3, d4168 <_Z10displayKeyv+0x6c>
   d413c:	4b0d      	ldr	r3, [pc, #52]	; (d4174 <_Z10displayKeyv+0x78>)
   d413e:	681b      	ldr	r3, [r3, #0]
   d4140:	2b01      	cmp	r3, #1
   d4142:	d111      	bne.n	d4168 <_Z10displayKeyv+0x6c>
   d4144:	4b0c      	ldr	r3, [pc, #48]	; (d4178 <_Z10displayKeyv+0x7c>)
   d4146:	681b      	ldr	r3, [r3, #0]
   d4148:	b973      	cbnz	r3, d4168 <_Z10displayKeyv+0x6c>
   d414a:	4b0c      	ldr	r3, [pc, #48]	; (d417c <_Z10displayKeyv+0x80>)
   d414c:	681c      	ldr	r4, [r3, #0]
   d414e:	b95c      	cbnz	r4, d4168 <_Z10displayKeyv+0x6c>
    Serial.printf("Blue button\n");
   d4150:	f000 fef4 	bl	d4f3c <_Z16_fetch_usbserialv>
   d4154:	4621      	mov	r1, r4
   d4156:	4a0b      	ldr	r2, [pc, #44]	; (d4184 <_Z10displayKeyv+0x88>)
   d4158:	f000 fd8b 	bl	d4c72 <_ZN5Print11printf_implEbPKcz>
    analogWrite(D7, 255); //for testing only
   d415c:	21ff      	movs	r1, #255	; 0xff
   d415e:	2007      	movs	r0, #7
  }

}
   d4160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    analogWrite(D7, 20); //for testing only
    
  }
  else if(bitZero == 1 && bitOne == 0 && bitTwo == 1 && bitThree == 0 && bitFour == 0){
    Serial.printf("Blue button\n");
    analogWrite(D7, 255); //for testing only
   d4164:	f001 b834 	b.w	d51d0 <_Z11analogWritetm>
   d4168:	bd10      	pop	{r4, pc}
   d416a:	bf00      	nop
   d416c:	2003e3c0 	.word	0x2003e3c0
   d4170:	2003e3a0 	.word	0x2003e3a0
   d4174:	2003e37c 	.word	0x2003e37c
   d4178:	2003e3c8 	.word	0x2003e3c8
   d417c:	2003e380 	.word	0x2003e380
   d4180:	000d5638 	.word	0x000d5638
   d4184:	000d5647 	.word	0x000d5647

000d4188 <loop>:

  delay(1000); //set up time
  Serial.printf("System Ready...");

}
void loop() {
   d4188:	b573      	push	{r0, r1, r4, r5, r6, lr}


  anodeRead = analogRead(anodePin);
  //Serial.printf("Anode: %i\n", anodeRead); //used for testing
  
  if (i == 5){
   d418a:	4c3a      	ldr	r4, [pc, #232]	; (d4274 <loop+0xec>)

}
void loop() {


  anodeRead = analogRead(anodePin);
   d418c:	4d3a      	ldr	r5, [pc, #232]	; (d4278 <loop+0xf0>)
   d418e:	200e      	movs	r0, #14
   d4190:	f001 f807 	bl	d51a2 <analogRead>
  //Serial.printf("Anode: %i\n", anodeRead); //used for testing
  
  if (i == 5){
   d4194:	6823      	ldr	r3, [r4, #0]

}
void loop() {


  anodeRead = analogRead(anodePin);
   d4196:	6028      	str	r0, [r5, #0]
  //Serial.printf("Anode: %i\n", anodeRead); //used for testing
  
  if (i == 5){
   d4198:	2b05      	cmp	r3, #5
   d419a:	d104      	bne.n	d41a6 <loop+0x1e>
    displayKey();
   d419c:	f7ff ffae 	bl	d40fc <_Z10displayKeyv>
    printState = false;
   d41a0:	4b36      	ldr	r3, [pc, #216]	; (d427c <loop+0xf4>)
   d41a2:	2200      	movs	r2, #0
   d41a4:	701a      	strb	r2, [r3, #0]
  }

  if (i > 5){ //do not change
   d41a6:	6823      	ldr	r3, [r4, #0]
   i = 1; //do not change 
  }

  if (!timerState && anodeRead > triggerValue){ //if timer is not running and anode is triggered then run
   d41a8:	4e35      	ldr	r6, [pc, #212]	; (d4280 <loop+0xf8>)
  if (i == 5){
    displayKey();
    printState = false;
  }

  if (i > 5){ //do not change
   d41aa:	2b05      	cmp	r3, #5
   i = 1; //do not change 
   d41ac:	bfc2      	ittt	gt
   d41ae:	4b31      	ldrgt	r3, [pc, #196]	; (d4274 <loop+0xec>)
   d41b0:	2201      	movgt	r2, #1
   d41b2:	601a      	strgt	r2, [r3, #0]
  }

  if (!timerState && anodeRead > triggerValue){ //if timer is not running and anode is triggered then run
   d41b4:	7833      	ldrb	r3, [r6, #0]
   d41b6:	b96b      	cbnz	r3, d41d4 <loop+0x4c>
   d41b8:	4b32      	ldr	r3, [pc, #200]	; (d4284 <loop+0xfc>)
   d41ba:	682a      	ldr	r2, [r5, #0]
   d41bc:	681b      	ldr	r3, [r3, #0]
   d41be:	429a      	cmp	r2, r3
   d41c0:	dd08      	ble.n	d41d4 <loop+0x4c>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d41c2:	f000 f8cf 	bl	d4364 <HAL_Timer_Get_Milli_Seconds>
    startTime = millis();
   d41c6:	4b30      	ldr	r3, [pc, #192]	; (d4288 <loop+0x100>)
   d41c8:	6018      	str	r0, [r3, #0]
    timerState = true;
   d41ca:	2301      	movs	r3, #1
   d41cc:	7033      	strb	r3, [r6, #0]
    i++; //sets i = to 1 right away
   d41ce:	6823      	ldr	r3, [r4, #0]
   d41d0:	3301      	adds	r3, #1
   d41d2:	6023      	str	r3, [r4, #0]
  }

  if (timerState && anodeRead < triggerValue){ // if timer is running and anode is not triggered then run
   d41d4:	7833      	ldrb	r3, [r6, #0]
   d41d6:	4e2d      	ldr	r6, [pc, #180]	; (d428c <loop+0x104>)
   d41d8:	2b00      	cmp	r3, #0
   d41da:	d03a      	beq.n	d4252 <loop+0xca>
   d41dc:	4b29      	ldr	r3, [pc, #164]	; (d4284 <loop+0xfc>)
   d41de:	682a      	ldr	r2, [r5, #0]
   d41e0:	681b      	ldr	r3, [r3, #0]
   d41e2:	429a      	cmp	r2, r3
   d41e4:	da35      	bge.n	d4252 <loop+0xca>
   d41e6:	f000 f8bd 	bl	d4364 <HAL_Timer_Get_Milli_Seconds>
    endTime = millis();
   d41ea:	4b29      	ldr	r3, [pc, #164]	; (d4290 <loop+0x108>)
   d41ec:	6018      	str	r0, [r3, #0]
    timerState = false;
   d41ee:	4b24      	ldr	r3, [pc, #144]	; (d4280 <loop+0xf8>)
   d41f0:	2500      	movs	r5, #0
   d41f2:	701d      	strb	r5, [r3, #0]
    duration = endTime - startTime;
   d41f4:	4b24      	ldr	r3, [pc, #144]	; (d4288 <loop+0x100>)
   d41f6:	681b      	ldr	r3, [r3, #0]
   d41f8:	1ac0      	subs	r0, r0, r3
   d41fa:	4b26      	ldr	r3, [pc, #152]	; (d4294 <loop+0x10c>)
   d41fc:	6018      	str	r0, [r3, #0]

    if(duration > zeroMin && duration < zeroMax){
   d41fe:	4b26      	ldr	r3, [pc, #152]	; (d4298 <loop+0x110>)
   d4200:	681b      	ldr	r3, [r3, #0]
   d4202:	4298      	cmp	r0, r3
   d4204:	d90f      	bls.n	d4226 <loop+0x9e>
   d4206:	4b25      	ldr	r3, [pc, #148]	; (d429c <loop+0x114>)
   d4208:	681b      	ldr	r3, [r3, #0]
   d420a:	4298      	cmp	r0, r3
   d420c:	d20b      	bcs.n	d4226 <loop+0x9e>
      array[i] = 0;
   d420e:	6823      	ldr	r3, [r4, #0]
   d4210:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
      Serial.printf("ZERO i = %i Array Value: %i\n", i, array[i]);
   d4214:	f000 fe92 	bl	d4f3c <_Z16_fetch_usbserialv>
   d4218:	6823      	ldr	r3, [r4, #0]
   d421a:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   d421e:	9200      	str	r2, [sp, #0]
   d4220:	4629      	mov	r1, r5
   d4222:	4a1f      	ldr	r2, [pc, #124]	; (d42a0 <loop+0x118>)
   d4224:	e013      	b.n	d424e <loop+0xc6>
    }
    else if(duration > oneMin && duration < oneMax){
   d4226:	4b1f      	ldr	r3, [pc, #124]	; (d42a4 <loop+0x11c>)
   d4228:	681b      	ldr	r3, [r3, #0]
   d422a:	4298      	cmp	r0, r3
   d422c:	d911      	bls.n	d4252 <loop+0xca>
   d422e:	4b1e      	ldr	r3, [pc, #120]	; (d42a8 <loop+0x120>)
   d4230:	681b      	ldr	r3, [r3, #0]
   d4232:	4298      	cmp	r0, r3
   d4234:	d20d      	bcs.n	d4252 <loop+0xca>
      array[i] = 1;
   d4236:	6823      	ldr	r3, [r4, #0]
   d4238:	2201      	movs	r2, #1
   d423a:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
      Serial.printf("ONE  i = %i Array Value: %i\n", i, array[i]);
   d423e:	f000 fe7d 	bl	d4f3c <_Z16_fetch_usbserialv>
   d4242:	6823      	ldr	r3, [r4, #0]
   d4244:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   d4248:	9200      	str	r2, [sp, #0]
   d424a:	4a18      	ldr	r2, [pc, #96]	; (d42ac <loop+0x124>)
   d424c:	2100      	movs	r1, #0
   d424e:	f000 fd10 	bl	d4c72 <_ZN5Print11printf_implEbPKcz>
    }
  }

    bitZero = array[1];
   d4252:	4b17      	ldr	r3, [pc, #92]	; (d42b0 <loop+0x128>)
   d4254:	6872      	ldr	r2, [r6, #4]
   d4256:	601a      	str	r2, [r3, #0]
    bitOne = array[2];
   d4258:	4b16      	ldr	r3, [pc, #88]	; (d42b4 <loop+0x12c>)
   d425a:	68b2      	ldr	r2, [r6, #8]
   d425c:	601a      	str	r2, [r3, #0]
    bitTwo = array[3];
   d425e:	4b16      	ldr	r3, [pc, #88]	; (d42b8 <loop+0x130>)
   d4260:	68f2      	ldr	r2, [r6, #12]
   d4262:	601a      	str	r2, [r3, #0]
    bitThree = array[4];
   d4264:	4b15      	ldr	r3, [pc, #84]	; (d42bc <loop+0x134>)
   d4266:	6932      	ldr	r2, [r6, #16]
   d4268:	601a      	str	r2, [r3, #0]
    bitFour = array[5];
   d426a:	6972      	ldr	r2, [r6, #20]
   d426c:	4b14      	ldr	r3, [pc, #80]	; (d42c0 <loop+0x138>)
   d426e:	601a      	str	r2, [r3, #0]

}
   d4270:	b002      	add	sp, #8
   d4272:	bd70      	pop	{r4, r5, r6, pc}
   d4274:	2003e3bc 	.word	0x2003e3bc
   d4278:	2003e384 	.word	0x2003e384
   d427c:	2003e3cc 	.word	0x2003e3cc
   d4280:	2003e3c4 	.word	0x2003e3c4
   d4284:	2003e304 	.word	0x2003e304
   d4288:	2003e3b8 	.word	0x2003e3b8
   d428c:	2003e388 	.word	0x2003e388
   d4290:	2003e3b4 	.word	0x2003e3b4
   d4294:	2003e3b0 	.word	0x2003e3b0
   d4298:	2003e30c 	.word	0x2003e30c
   d429c:	2003e300 	.word	0x2003e300
   d42a0:	000d5654 	.word	0x000d5654
   d42a4:	2003e308 	.word	0x2003e308
   d42a8:	2003e2fc 	.word	0x2003e2fc
   d42ac:	000d5671 	.word	0x000d5671
   d42b0:	2003e3c0 	.word	0x2003e3c0
   d42b4:	2003e3a0 	.word	0x2003e3a0
   d42b8:	2003e37c 	.word	0x2003e37c
   d42bc:	2003e3c8 	.word	0x2003e3c8
   d42c0:	2003e380 	.word	0x2003e380

000d42c4 <_GLOBAL__sub_I_SystemMode>:
  else if(bitZero == 1 && bitOne == 0 && bitTwo == 1 && bitThree == 0 && bitFour == 0){
    Serial.printf("Blue button\n");
    analogWrite(D7, 255); //for testing only
  }

}
   d42c4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d42c6:	4c0a      	ldr	r4, [pc, #40]	; (d42f0 <_GLOBAL__sub_I_SystemMode+0x2c>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d42c8:	f000 f854 	bl	d4374 <HAL_Pin_Map>
   d42cc:	2300      	movs	r3, #0
   d42ce:	6023      	str	r3, [r4, #0]
   d42d0:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d42d2:	71a3      	strb	r3, [r4, #6]
   d42d4:	8123      	strh	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d42d6:	2002      	movs	r0, #2
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d42d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d42dc:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d42de:	f000 f959 	bl	d4594 <set_system_mode>
 * Author: Christian Chavez
 * Date: December, 2020
 */


SYSTEM_MODE(SEMI_AUTOMATIC);
   d42e2:	4620      	mov	r0, r4
   d42e4:	4a03      	ldr	r2, [pc, #12]	; (d42f4 <_GLOBAL__sub_I_SystemMode+0x30>)
   d42e6:	4904      	ldr	r1, [pc, #16]	; (d42f8 <_GLOBAL__sub_I_SystemMode+0x34>)
  else if(bitZero == 1 && bitOne == 0 && bitTwo == 1 && bitThree == 0 && bitFour == 0){
    Serial.printf("Blue button\n");
    analogWrite(D7, 255); //for testing only
  }

}
   d42e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * Author: Christian Chavez
 * Date: December, 2020
 */


SYSTEM_MODE(SEMI_AUTOMATIC);
   d42ec:	f000 bfd6 	b.w	d529c <__aeabi_atexit>
   d42f0:	2003e3a4 	.word	0x2003e3a4
   d42f4:	2003e378 	.word	0x2003e378
   d42f8:	000d40af 	.word	0x000d40af

000d42fc <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d42fc:	f000 b83a 	b.w	d4374 <HAL_Pin_Map>

000d4300 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d4300:	f000 b838 	b.w	d4374 <HAL_Pin_Map>

000d4304 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4304:	b508      	push	{r3, lr}
   d4306:	4b02      	ldr	r3, [pc, #8]	; (d4310 <os_thread_is_current+0xc>)
   d4308:	681b      	ldr	r3, [r3, #0]
   d430a:	689b      	ldr	r3, [r3, #8]
   d430c:	9301      	str	r3, [sp, #4]
   d430e:	bd08      	pop	{r3, pc}
   d4310:	00030248 	.word	0x00030248

000d4314 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4314:	b508      	push	{r3, lr}
   d4316:	4b02      	ldr	r3, [pc, #8]	; (d4320 <os_thread_join+0xc>)
   d4318:	681b      	ldr	r3, [r3, #0]
   d431a:	691b      	ldr	r3, [r3, #16]
   d431c:	9301      	str	r3, [sp, #4]
   d431e:	bd08      	pop	{r3, pc}
   d4320:	00030248 	.word	0x00030248

000d4324 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4324:	b508      	push	{r3, lr}
   d4326:	4b02      	ldr	r3, [pc, #8]	; (d4330 <os_thread_cleanup+0xc>)
   d4328:	681b      	ldr	r3, [r3, #0]
   d432a:	695b      	ldr	r3, [r3, #20]
   d432c:	9301      	str	r3, [sp, #4]
   d432e:	bd08      	pop	{r3, pc}
   d4330:	00030248 	.word	0x00030248

000d4334 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4334:	b508      	push	{r3, lr}
   d4336:	4b02      	ldr	r3, [pc, #8]	; (d4340 <os_mutex_recursive_create+0xc>)
   d4338:	681b      	ldr	r3, [r3, #0]
   d433a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d433c:	9301      	str	r3, [sp, #4]
   d433e:	bd08      	pop	{r3, pc}
   d4340:	00030248 	.word	0x00030248

000d4344 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4344:	b508      	push	{r3, lr}
   d4346:	4b02      	ldr	r3, [pc, #8]	; (d4350 <os_mutex_recursive_destroy+0xc>)
   d4348:	681b      	ldr	r3, [r3, #0]
   d434a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d434c:	9301      	str	r3, [sp, #4]
   d434e:	bd08      	pop	{r3, pc}
   d4350:	00030248 	.word	0x00030248

000d4354 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4354:	b508      	push	{r3, lr}
   d4356:	4b02      	ldr	r3, [pc, #8]	; (d4360 <HAL_RNG_GetRandomNumber+0xc>)
   d4358:	681b      	ldr	r3, [r3, #0]
   d435a:	685b      	ldr	r3, [r3, #4]
   d435c:	9301      	str	r3, [sp, #4]
   d435e:	bd08      	pop	{r3, pc}
   d4360:	00030218 	.word	0x00030218

000d4364 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4364:	b508      	push	{r3, lr}
   d4366:	4b02      	ldr	r3, [pc, #8]	; (d4370 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4368:	681b      	ldr	r3, [r3, #0]
   d436a:	695b      	ldr	r3, [r3, #20]
   d436c:	9301      	str	r3, [sp, #4]
   d436e:	bd08      	pop	{r3, pc}
   d4370:	00030218 	.word	0x00030218

000d4374 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4374:	b508      	push	{r3, lr}
   d4376:	4b02      	ldr	r3, [pc, #8]	; (d4380 <HAL_Pin_Map+0xc>)
   d4378:	681b      	ldr	r3, [r3, #0]
   d437a:	681b      	ldr	r3, [r3, #0]
   d437c:	9301      	str	r3, [sp, #4]
   d437e:	bd08      	pop	{r3, pc}
   d4380:	0003022c 	.word	0x0003022c

000d4384 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4384:	b508      	push	{r3, lr}
   d4386:	4b02      	ldr	r3, [pc, #8]	; (d4390 <HAL_Validate_Pin_Function+0xc>)
   d4388:	681b      	ldr	r3, [r3, #0]
   d438a:	685b      	ldr	r3, [r3, #4]
   d438c:	9301      	str	r3, [sp, #4]
   d438e:	bd08      	pop	{r3, pc}
   d4390:	0003022c 	.word	0x0003022c

000d4394 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4394:	b508      	push	{r3, lr}
   d4396:	4b02      	ldr	r3, [pc, #8]	; (d43a0 <HAL_Pin_Mode+0xc>)
   d4398:	681b      	ldr	r3, [r3, #0]
   d439a:	689b      	ldr	r3, [r3, #8]
   d439c:	9301      	str	r3, [sp, #4]
   d439e:	bd08      	pop	{r3, pc}
   d43a0:	0003022c 	.word	0x0003022c

000d43a4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d43a4:	b508      	push	{r3, lr}
   d43a6:	4b02      	ldr	r3, [pc, #8]	; (d43b0 <HAL_Get_Pin_Mode+0xc>)
   d43a8:	681b      	ldr	r3, [r3, #0]
   d43aa:	68db      	ldr	r3, [r3, #12]
   d43ac:	9301      	str	r3, [sp, #4]
   d43ae:	bd08      	pop	{r3, pc}
   d43b0:	0003022c 	.word	0x0003022c

000d43b4 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d43b4:	b508      	push	{r3, lr}
   d43b6:	4b02      	ldr	r3, [pc, #8]	; (d43c0 <HAL_DAC_Write+0xc>)
   d43b8:	681b      	ldr	r3, [r3, #0]
   d43ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d43bc:	9301      	str	r3, [sp, #4]
   d43be:	bd08      	pop	{r3, pc}
   d43c0:	0003022c 	.word	0x0003022c

000d43c4 <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d43c4:	b508      	push	{r3, lr}
   d43c6:	4b02      	ldr	r3, [pc, #8]	; (d43d0 <HAL_ADC_Read+0xc>)
   d43c8:	681b      	ldr	r3, [r3, #0]
   d43ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d43cc:	9301      	str	r3, [sp, #4]
   d43ce:	bd08      	pop	{r3, pc}
   d43d0:	0003022c 	.word	0x0003022c

000d43d4 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
   d43d4:	b508      	push	{r3, lr}
   d43d6:	4b02      	ldr	r3, [pc, #8]	; (d43e0 <HAL_PWM_Write_Ext+0xc>)
   d43d8:	681b      	ldr	r3, [r3, #0]
   d43da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d43dc:	9301      	str	r3, [sp, #4]
   d43de:	bd08      	pop	{r3, pc}
   d43e0:	0003022c 	.word	0x0003022c

000d43e4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d43e4:	b508      	push	{r3, lr}
   d43e6:	4b02      	ldr	r3, [pc, #8]	; (d43f0 <HAL_I2C_Write_Data+0xc>)
   d43e8:	681b      	ldr	r3, [r3, #0]
   d43ea:	6a1b      	ldr	r3, [r3, #32]
   d43ec:	9301      	str	r3, [sp, #4]
   d43ee:	bd08      	pop	{r3, pc}
   d43f0:	00030228 	.word	0x00030228

000d43f4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d43f4:	b508      	push	{r3, lr}
   d43f6:	4b02      	ldr	r3, [pc, #8]	; (d4400 <HAL_I2C_Available_Data+0xc>)
   d43f8:	681b      	ldr	r3, [r3, #0]
   d43fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d43fc:	9301      	str	r3, [sp, #4]
   d43fe:	bd08      	pop	{r3, pc}
   d4400:	00030228 	.word	0x00030228

000d4404 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4404:	b508      	push	{r3, lr}
   d4406:	4b02      	ldr	r3, [pc, #8]	; (d4410 <HAL_I2C_Read_Data+0xc>)
   d4408:	681b      	ldr	r3, [r3, #0]
   d440a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d440c:	9301      	str	r3, [sp, #4]
   d440e:	bd08      	pop	{r3, pc}
   d4410:	00030228 	.word	0x00030228

000d4414 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4414:	b508      	push	{r3, lr}
   d4416:	4b02      	ldr	r3, [pc, #8]	; (d4420 <HAL_I2C_Peek_Data+0xc>)
   d4418:	681b      	ldr	r3, [r3, #0]
   d441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d441c:	9301      	str	r3, [sp, #4]
   d441e:	bd08      	pop	{r3, pc}
   d4420:	00030228 	.word	0x00030228

000d4424 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4424:	b508      	push	{r3, lr}
   d4426:	4b02      	ldr	r3, [pc, #8]	; (d4430 <HAL_I2C_Flush_Data+0xc>)
   d4428:	681b      	ldr	r3, [r3, #0]
   d442a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d442c:	9301      	str	r3, [sp, #4]
   d442e:	bd08      	pop	{r3, pc}
   d4430:	00030228 	.word	0x00030228

000d4434 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4434:	b508      	push	{r3, lr}
   d4436:	4b02      	ldr	r3, [pc, #8]	; (d4440 <HAL_I2C_Is_Enabled+0xc>)
   d4438:	681b      	ldr	r3, [r3, #0]
   d443a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d443c:	9301      	str	r3, [sp, #4]
   d443e:	bd08      	pop	{r3, pc}
   d4440:	00030228 	.word	0x00030228

000d4444 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4444:	b508      	push	{r3, lr}
   d4446:	4b02      	ldr	r3, [pc, #8]	; (d4450 <HAL_I2C_Init+0xc>)
   d4448:	681b      	ldr	r3, [r3, #0]
   d444a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d444c:	9301      	str	r3, [sp, #4]
   d444e:	bd08      	pop	{r3, pc}
   d4450:	00030228 	.word	0x00030228

000d4454 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4454:	b508      	push	{r3, lr}
   d4456:	4b02      	ldr	r3, [pc, #8]	; (d4460 <inet_inet_ntop+0xc>)
   d4458:	681b      	ldr	r3, [r3, #0]
   d445a:	695b      	ldr	r3, [r3, #20]
   d445c:	9301      	str	r3, [sp, #4]
   d445e:	bd08      	pop	{r3, pc}
   d4460:	00030264 	.word	0x00030264

000d4464 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4464:	b508      	push	{r3, lr}
   d4466:	4b02      	ldr	r3, [pc, #8]	; (d4470 <netdb_freeaddrinfo+0xc>)
   d4468:	681b      	ldr	r3, [r3, #0]
   d446a:	689b      	ldr	r3, [r3, #8]
   d446c:	9301      	str	r3, [sp, #4]
   d446e:	bd08      	pop	{r3, pc}
   d4470:	00030268 	.word	0x00030268

000d4474 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4474:	b508      	push	{r3, lr}
   d4476:	4b02      	ldr	r3, [pc, #8]	; (d4480 <netdb_getaddrinfo+0xc>)
   d4478:	681b      	ldr	r3, [r3, #0]
   d447a:	68db      	ldr	r3, [r3, #12]
   d447c:	9301      	str	r3, [sp, #4]
   d447e:	bd08      	pop	{r3, pc}
   d4480:	00030268 	.word	0x00030268

000d4484 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4484:	b508      	push	{r3, lr}
   d4486:	4b02      	ldr	r3, [pc, #8]	; (d4490 <HAL_SPI_Init+0xc>)
   d4488:	681b      	ldr	r3, [r3, #0]
   d448a:	69db      	ldr	r3, [r3, #28]
   d448c:	9301      	str	r3, [sp, #4]
   d448e:	bd08      	pop	{r3, pc}
   d4490:	00030230 	.word	0x00030230

000d4494 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <HAL_SPI_Is_Enabled+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	6a1b      	ldr	r3, [r3, #32]
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	00030230 	.word	0x00030230

000d44a4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <HAL_USART_Init+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	681b      	ldr	r3, [r3, #0]
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	0003023c 	.word	0x0003023c

000d44b4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <HAL_USART_Write_Data+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	68db      	ldr	r3, [r3, #12]
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	0003023c 	.word	0x0003023c

000d44c4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <HAL_USART_Available_Data+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	691b      	ldr	r3, [r3, #16]
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	0003023c 	.word	0x0003023c

000d44d4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <HAL_USART_Read_Data+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	695b      	ldr	r3, [r3, #20]
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	0003023c 	.word	0x0003023c

000d44e4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <HAL_USART_Peek_Data+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	699b      	ldr	r3, [r3, #24]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	0003023c 	.word	0x0003023c

000d44f4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <HAL_USART_Flush_Data+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	69db      	ldr	r3, [r3, #28]
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	0003023c 	.word	0x0003023c

000d4504 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <HAL_USART_Is_Enabled+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	6a1b      	ldr	r3, [r3, #32]
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	0003023c 	.word	0x0003023c

000d4514 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <HAL_USART_Available_Data_For_Write+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	0003023c 	.word	0x0003023c

000d4524 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b02      	ldr	r3, [pc, #8]	; (d4530 <HAL_USB_USART_Init+0xc>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	681b      	ldr	r3, [r3, #0]
   d452c:	9301      	str	r3, [sp, #4]
   d452e:	bd08      	pop	{r3, pc}
   d4530:	0003024c 	.word	0x0003024c

000d4534 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4534:	b508      	push	{r3, lr}
   d4536:	4b02      	ldr	r3, [pc, #8]	; (d4540 <HAL_USB_USART_Begin+0xc>)
   d4538:	681b      	ldr	r3, [r3, #0]
   d453a:	685b      	ldr	r3, [r3, #4]
   d453c:	9301      	str	r3, [sp, #4]
   d453e:	bd08      	pop	{r3, pc}
   d4540:	0003024c 	.word	0x0003024c

000d4544 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b02      	ldr	r3, [pc, #8]	; (d4550 <HAL_USB_USART_Available_Data+0xc>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	691b      	ldr	r3, [r3, #16]
   d454c:	9301      	str	r3, [sp, #4]
   d454e:	bd08      	pop	{r3, pc}
   d4550:	0003024c 	.word	0x0003024c

000d4554 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b02      	ldr	r3, [pc, #8]	; (d4560 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	695b      	ldr	r3, [r3, #20]
   d455c:	9301      	str	r3, [sp, #4]
   d455e:	bd08      	pop	{r3, pc}
   d4560:	0003024c 	.word	0x0003024c

000d4564 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4564:	b508      	push	{r3, lr}
   d4566:	4b02      	ldr	r3, [pc, #8]	; (d4570 <HAL_USB_USART_Receive_Data+0xc>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	699b      	ldr	r3, [r3, #24]
   d456c:	9301      	str	r3, [sp, #4]
   d456e:	bd08      	pop	{r3, pc}
   d4570:	0003024c 	.word	0x0003024c

000d4574 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4574:	b508      	push	{r3, lr}
   d4576:	4b02      	ldr	r3, [pc, #8]	; (d4580 <HAL_USB_USART_Send_Data+0xc>)
   d4578:	681b      	ldr	r3, [r3, #0]
   d457a:	69db      	ldr	r3, [r3, #28]
   d457c:	9301      	str	r3, [sp, #4]
   d457e:	bd08      	pop	{r3, pc}
   d4580:	0003024c 	.word	0x0003024c

000d4584 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4584:	b508      	push	{r3, lr}
   d4586:	4b02      	ldr	r3, [pc, #8]	; (d4590 <HAL_USB_USART_Flush_Data+0xc>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	6a1b      	ldr	r3, [r3, #32]
   d458c:	9301      	str	r3, [sp, #4]
   d458e:	bd08      	pop	{r3, pc}
   d4590:	0003024c 	.word	0x0003024c

000d4594 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4594:	b508      	push	{r3, lr}
   d4596:	4b02      	ldr	r3, [pc, #8]	; (d45a0 <set_system_mode+0xc>)
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	685b      	ldr	r3, [r3, #4]
   d459c:	9301      	str	r3, [sp, #4]
   d459e:	bd08      	pop	{r3, pc}
   d45a0:	00030220 	.word	0x00030220

000d45a4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d45a4:	b508      	push	{r3, lr}
   d45a6:	4b02      	ldr	r3, [pc, #8]	; (d45b0 <system_delay_ms+0xc>)
   d45a8:	681b      	ldr	r3, [r3, #0]
   d45aa:	695b      	ldr	r3, [r3, #20]
   d45ac:	9301      	str	r3, [sp, #4]
   d45ae:	bd08      	pop	{r3, pc}
   d45b0:	00030220 	.word	0x00030220

000d45b4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b03      	ldr	r3, [pc, #12]	; (d45c4 <system_ctrl_set_app_request_handler+0x10>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d45be:	9301      	str	r3, [sp, #4]
   d45c0:	bd08      	pop	{r3, pc}
   d45c2:	0000      	.short	0x0000
   d45c4:	00030220 	.word	0x00030220

000d45c8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d45c8:	b508      	push	{r3, lr}
   d45ca:	4b03      	ldr	r3, [pc, #12]	; (d45d8 <system_ctrl_set_result+0x10>)
   d45cc:	681b      	ldr	r3, [r3, #0]
   d45ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d45d2:	9301      	str	r3, [sp, #4]
   d45d4:	bd08      	pop	{r3, pc}
   d45d6:	0000      	.short	0x0000
   d45d8:	00030220 	.word	0x00030220

000d45dc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d45dc:	b508      	push	{r3, lr}
   d45de:	4b02      	ldr	r3, [pc, #8]	; (d45e8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d45e0:	681b      	ldr	r3, [r3, #0]
   d45e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d45e4:	9301      	str	r3, [sp, #4]
   d45e6:	bd08      	pop	{r3, pc}
   d45e8:	00030244 	.word	0x00030244

000d45ec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d45ec:	b508      	push	{r3, lr}
   d45ee:	4b02      	ldr	r3, [pc, #8]	; (d45f8 <network_connect+0xc>)
   d45f0:	681b      	ldr	r3, [r3, #0]
   d45f2:	685b      	ldr	r3, [r3, #4]
   d45f4:	9301      	str	r3, [sp, #4]
   d45f6:	bd08      	pop	{r3, pc}
   d45f8:	00030240 	.word	0x00030240

000d45fc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d45fc:	b508      	push	{r3, lr}
   d45fe:	4b02      	ldr	r3, [pc, #8]	; (d4608 <network_connecting+0xc>)
   d4600:	681b      	ldr	r3, [r3, #0]
   d4602:	689b      	ldr	r3, [r3, #8]
   d4604:	9301      	str	r3, [sp, #4]
   d4606:	bd08      	pop	{r3, pc}
   d4608:	00030240 	.word	0x00030240

000d460c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d460c:	b508      	push	{r3, lr}
   d460e:	4b02      	ldr	r3, [pc, #8]	; (d4618 <network_disconnect+0xc>)
   d4610:	681b      	ldr	r3, [r3, #0]
   d4612:	68db      	ldr	r3, [r3, #12]
   d4614:	9301      	str	r3, [sp, #4]
   d4616:	bd08      	pop	{r3, pc}
   d4618:	00030240 	.word	0x00030240

000d461c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d461c:	b508      	push	{r3, lr}
   d461e:	4b02      	ldr	r3, [pc, #8]	; (d4628 <network_ready+0xc>)
   d4620:	681b      	ldr	r3, [r3, #0]
   d4622:	691b      	ldr	r3, [r3, #16]
   d4624:	9301      	str	r3, [sp, #4]
   d4626:	bd08      	pop	{r3, pc}
   d4628:	00030240 	.word	0x00030240

000d462c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d462c:	b508      	push	{r3, lr}
   d462e:	4b02      	ldr	r3, [pc, #8]	; (d4638 <network_on+0xc>)
   d4630:	681b      	ldr	r3, [r3, #0]
   d4632:	695b      	ldr	r3, [r3, #20]
   d4634:	9301      	str	r3, [sp, #4]
   d4636:	bd08      	pop	{r3, pc}
   d4638:	00030240 	.word	0x00030240

000d463c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d463c:	b508      	push	{r3, lr}
   d463e:	4b02      	ldr	r3, [pc, #8]	; (d4648 <network_off+0xc>)
   d4640:	681b      	ldr	r3, [r3, #0]
   d4642:	699b      	ldr	r3, [r3, #24]
   d4644:	9301      	str	r3, [sp, #4]
   d4646:	bd08      	pop	{r3, pc}
   d4648:	00030240 	.word	0x00030240

000d464c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d464c:	b508      	push	{r3, lr}
   d464e:	4b02      	ldr	r3, [pc, #8]	; (d4658 <network_listen+0xc>)
   d4650:	681b      	ldr	r3, [r3, #0]
   d4652:	69db      	ldr	r3, [r3, #28]
   d4654:	9301      	str	r3, [sp, #4]
   d4656:	bd08      	pop	{r3, pc}
   d4658:	00030240 	.word	0x00030240

000d465c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d465c:	b508      	push	{r3, lr}
   d465e:	4b02      	ldr	r3, [pc, #8]	; (d4668 <network_listening+0xc>)
   d4660:	681b      	ldr	r3, [r3, #0]
   d4662:	6a1b      	ldr	r3, [r3, #32]
   d4664:	9301      	str	r3, [sp, #4]
   d4666:	bd08      	pop	{r3, pc}
   d4668:	00030240 	.word	0x00030240

000d466c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d466c:	b508      	push	{r3, lr}
   d466e:	4b02      	ldr	r3, [pc, #8]	; (d4678 <network_set_listen_timeout+0xc>)
   d4670:	681b      	ldr	r3, [r3, #0]
   d4672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4674:	9301      	str	r3, [sp, #4]
   d4676:	bd08      	pop	{r3, pc}
   d4678:	00030240 	.word	0x00030240

000d467c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d467c:	b508      	push	{r3, lr}
   d467e:	4b02      	ldr	r3, [pc, #8]	; (d4688 <network_get_listen_timeout+0xc>)
   d4680:	681b      	ldr	r3, [r3, #0]
   d4682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4684:	9301      	str	r3, [sp, #4]
   d4686:	bd08      	pop	{r3, pc}
   d4688:	00030240 	.word	0x00030240

000d468c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d468c:	b508      	push	{r3, lr}
   d468e:	4b02      	ldr	r3, [pc, #8]	; (d4698 <malloc+0xc>)
   d4690:	681b      	ldr	r3, [r3, #0]
   d4692:	681b      	ldr	r3, [r3, #0]
   d4694:	9301      	str	r3, [sp, #4]
   d4696:	bd08      	pop	{r3, pc}
   d4698:	0003021c 	.word	0x0003021c

000d469c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d469c:	b508      	push	{r3, lr}
   d469e:	4b02      	ldr	r3, [pc, #8]	; (d46a8 <free+0xc>)
   d46a0:	681b      	ldr	r3, [r3, #0]
   d46a2:	685b      	ldr	r3, [r3, #4]
   d46a4:	9301      	str	r3, [sp, #4]
   d46a6:	bd08      	pop	{r3, pc}
   d46a8:	0003021c 	.word	0x0003021c

000d46ac <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d46ac:	b508      	push	{r3, lr}
   d46ae:	4b02      	ldr	r3, [pc, #8]	; (d46b8 <vsnprintf+0xc>)
   d46b0:	681b      	ldr	r3, [r3, #0]
   d46b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d46b4:	9301      	str	r3, [sp, #4]
   d46b6:	bd08      	pop	{r3, pc}
   d46b8:	0003021c 	.word	0x0003021c

000d46bc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d46bc:	2100      	movs	r1, #0
   d46be:	f7ff bf71 	b.w	d45a4 <system_delay_ms>

000d46c2 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d46c2:	b510      	push	{r4, lr}
   d46c4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d46c6:	6800      	ldr	r0, [r0, #0]
   d46c8:	b108      	cbz	r0, d46ce <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d46ca:	f7ff fe3b 	bl	d4344 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d46ce:	4620      	mov	r0, r4
   d46d0:	bd10      	pop	{r4, pc}
	...

000d46d4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d46d4:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d46d6:	4c06      	ldr	r4, [pc, #24]	; (d46f0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d46d8:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d46da:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d46dc:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d46de:	f7ff fe29 	bl	d4334 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d46e2:	4620      	mov	r0, r4
   d46e4:	4a03      	ldr	r2, [pc, #12]	; (d46f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d46e6:	4904      	ldr	r1, [pc, #16]	; (d46f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d46e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d46ec:	f000 bdd6 	b.w	d529c <__aeabi_atexit>
   d46f0:	2003e3dc 	.word	0x2003e3dc
   d46f4:	2003e378 	.word	0x2003e378
   d46f8:	000d46c3 	.word	0x000d46c3

000d46fc <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d46fc:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d46fe:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4700:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4702:	b113      	cbz	r3, d470a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4704:	2203      	movs	r2, #3
   d4706:	4601      	mov	r1, r0
   d4708:	4798      	blx	r3
    }
   d470a:	4620      	mov	r0, r4
   d470c:	bd10      	pop	{r4, pc}

000d470e <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d470e:	2200      	movs	r2, #0
   d4710:	4611      	mov	r1, r2
   d4712:	6840      	ldr	r0, [r0, #4]
   d4714:	f7ff bfa2 	b.w	d465c <network_listening>

000d4718 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4718:	2200      	movs	r2, #0
   d471a:	4611      	mov	r1, r2
   d471c:	6840      	ldr	r0, [r0, #4]
   d471e:	f7ff bfad 	b.w	d467c <network_get_listen_timeout>

000d4722 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4722:	2200      	movs	r2, #0
   d4724:	6840      	ldr	r0, [r0, #4]
   d4726:	f7ff bfa1 	b.w	d466c <network_set_listen_timeout>

000d472a <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d472a:	2200      	movs	r2, #0
   d472c:	f081 0101 	eor.w	r1, r1, #1
   d4730:	6840      	ldr	r0, [r0, #4]
   d4732:	f7ff bf8b 	b.w	d464c <network_listen>

000d4736 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4736:	2300      	movs	r3, #0
   d4738:	461a      	mov	r2, r3
   d473a:	4619      	mov	r1, r3
   d473c:	6840      	ldr	r0, [r0, #4]
   d473e:	f7ff bf7d 	b.w	d463c <network_off>

000d4742 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4742:	2300      	movs	r3, #0
   d4744:	461a      	mov	r2, r3
   d4746:	4619      	mov	r1, r3
   d4748:	6840      	ldr	r0, [r0, #4]
   d474a:	f7ff bf6f 	b.w	d462c <network_on>

000d474e <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d474e:	2200      	movs	r2, #0
   d4750:	4611      	mov	r1, r2
   d4752:	6840      	ldr	r0, [r0, #4]
   d4754:	f7ff bf62 	b.w	d461c <network_ready>

000d4758 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4758:	2200      	movs	r2, #0
   d475a:	4611      	mov	r1, r2
   d475c:	6840      	ldr	r0, [r0, #4]
   d475e:	f7ff bf4d 	b.w	d45fc <network_connecting>

000d4762 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4762:	2200      	movs	r2, #0
   d4764:	2102      	movs	r1, #2
   d4766:	6840      	ldr	r0, [r0, #4]
   d4768:	f7ff bf50 	b.w	d460c <network_disconnect>

000d476c <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d476c:	2300      	movs	r3, #0
   d476e:	461a      	mov	r2, r3
   d4770:	6840      	ldr	r0, [r0, #4]
   d4772:	f7ff bf3b 	b.w	d45ec <network_connect>
	...

000d4778 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4778:	4b02      	ldr	r3, [pc, #8]	; (d4784 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d477a:	2203      	movs	r2, #3
   d477c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d477e:	4a02      	ldr	r2, [pc, #8]	; (d4788 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4780:	601a      	str	r2, [r3, #0]
   d4782:	4770      	bx	lr
   d4784:	2003e3e0 	.word	0x2003e3e0
   d4788:	000d5698 	.word	0x000d5698

000d478c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d478c:	4770      	bx	lr

000d478e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d478e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4790:	4606      	mov	r6, r0
   d4792:	4615      	mov	r5, r2
   d4794:	460c      	mov	r4, r1
   d4796:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4798:	42bc      	cmp	r4, r7
   d479a:	d006      	beq.n	d47aa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d479c:	6833      	ldr	r3, [r6, #0]
   d479e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d47a2:	689b      	ldr	r3, [r3, #8]
   d47a4:	4630      	mov	r0, r6
   d47a6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d47a8:	e7f6      	b.n	d4798 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d47aa:	4628      	mov	r0, r5
   d47ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d47ae <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d47ae:	2200      	movs	r2, #0
   d47b0:	7c00      	ldrb	r0, [r0, #16]
   d47b2:	f7ff be17 	b.w	d43e4 <HAL_I2C_Write_Data>

000d47b6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d47b6:	2100      	movs	r1, #0
   d47b8:	7c00      	ldrb	r0, [r0, #16]
   d47ba:	f7ff be1b 	b.w	d43f4 <HAL_I2C_Available_Data>

000d47be <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d47be:	2100      	movs	r1, #0
   d47c0:	7c00      	ldrb	r0, [r0, #16]
   d47c2:	f7ff be1f 	b.w	d4404 <HAL_I2C_Read_Data>

000d47c6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d47c6:	2100      	movs	r1, #0
   d47c8:	7c00      	ldrb	r0, [r0, #16]
   d47ca:	f7ff be23 	b.w	d4414 <HAL_I2C_Peek_Data>

000d47ce <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d47ce:	2100      	movs	r1, #0
   d47d0:	7c00      	ldrb	r0, [r0, #16]
   d47d2:	f7ff be27 	b.w	d4424 <HAL_I2C_Flush_Data>

000d47d6 <_ZN7TwoWireD0Ev>:
   d47d6:	b510      	push	{r4, lr}
   d47d8:	2114      	movs	r1, #20
   d47da:	4604      	mov	r4, r0
   d47dc:	f000 fd63 	bl	d52a6 <_ZdlPvj>
   d47e0:	4620      	mov	r0, r4
   d47e2:	bd10      	pop	{r4, pc}

000d47e4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d47e4:	b510      	push	{r4, lr}
   d47e6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d47e8:	2300      	movs	r3, #0
   d47ea:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d47ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d47f0:	60a3      	str	r3, [r4, #8]
   d47f2:	4b04      	ldr	r3, [pc, #16]	; (d4804 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d47f4:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d47f6:	4608      	mov	r0, r1
   d47f8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d47fa:	4611      	mov	r1, r2
   d47fc:	f7ff fe22 	bl	d4444 <HAL_I2C_Init>
}
   d4800:	4620      	mov	r0, r4
   d4802:	bd10      	pop	{r4, pc}
   d4804:	000d56cc 	.word	0x000d56cc

000d4808 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d4808:	2100      	movs	r1, #0
   d480a:	7c00      	ldrb	r0, [r0, #16]
   d480c:	f7ff be12 	b.w	d4434 <HAL_I2C_Is_Enabled>

000d4810 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4810:	4770      	bx	lr

000d4812 <_ZN9IPAddressD0Ev>:
   d4812:	b510      	push	{r4, lr}
   d4814:	2118      	movs	r1, #24
   d4816:	4604      	mov	r4, r0
   d4818:	f000 fd45 	bl	d52a6 <_ZdlPvj>
   d481c:	4620      	mov	r0, r4
   d481e:	bd10      	pop	{r4, pc}

000d4820 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4820:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4822:	7d03      	ldrb	r3, [r0, #20]
   d4824:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4826:	b08d      	sub	sp, #52	; 0x34
   d4828:	460e      	mov	r6, r1
   d482a:	f100 0704 	add.w	r7, r0, #4
   d482e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4832:	d002      	beq.n	d483a <_ZNK9IPAddress7printToER5Print+0x1a>
   d4834:	f100 0508 	add.w	r5, r0, #8
   d4838:	e018      	b.n	d486c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d483a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d483c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d483e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4842:	232f      	movs	r3, #47	; 0x2f
   d4844:	462a      	mov	r2, r5
   d4846:	200a      	movs	r0, #10
   d4848:	f7ff fe04 	bl	d4454 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d484c:	4628      	mov	r0, r5
   d484e:	f000 fed9 	bl	d5604 <strlen>
   d4852:	6833      	ldr	r3, [r6, #0]
   d4854:	4602      	mov	r2, r0
   d4856:	68db      	ldr	r3, [r3, #12]
   d4858:	4629      	mov	r1, r5
   d485a:	4630      	mov	r0, r6
   d485c:	4798      	blx	r3
   d485e:	e00f      	b.n	d4880 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4860:	b124      	cbz	r4, d486c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4862:	212e      	movs	r1, #46	; 0x2e
   d4864:	4630      	mov	r0, r6
   d4866:	f000 f9d5 	bl	d4c14 <_ZN5Print5printEc>
   d486a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d486c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4870:	220a      	movs	r2, #10
   d4872:	4630      	mov	r0, r6
   d4874:	f000 f9dd 	bl	d4c32 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4878:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d487a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d487c:	d1f0      	bne.n	d4860 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d487e:	4620      	mov	r0, r4
    }
    return n;
}
   d4880:	b00d      	add	sp, #52	; 0x34
   d4882:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4884 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4884:	b510      	push	{r4, lr}
   d4886:	4b05      	ldr	r3, [pc, #20]	; (d489c <_ZN9IPAddressC1Ev+0x18>)
   d4888:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d488a:	2211      	movs	r2, #17
   d488c:	f840 3b04 	str.w	r3, [r0], #4
   d4890:	2100      	movs	r1, #0
   d4892:	f000 fe86 	bl	d55a2 <memset>
{
    clear();
}
   d4896:	4620      	mov	r0, r4
   d4898:	bd10      	pop	{r4, pc}
   d489a:	bf00      	nop
   d489c:	000d56f4 	.word	0x000d56f4

000d48a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d48a0:	4603      	mov	r3, r0
   d48a2:	4a07      	ldr	r2, [pc, #28]	; (d48c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d48a4:	b510      	push	{r4, lr}
   d48a6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d48aa:	f101 0210 	add.w	r2, r1, #16
   d48ae:	f851 4b04 	ldr.w	r4, [r1], #4
   d48b2:	f843 4b04 	str.w	r4, [r3], #4
   d48b6:	4291      	cmp	r1, r2
   d48b8:	d1f9      	bne.n	d48ae <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d48ba:	780a      	ldrb	r2, [r1, #0]
   d48bc:	701a      	strb	r2, [r3, #0]
}
   d48be:	bd10      	pop	{r4, pc}
   d48c0:	000d56f4 	.word	0x000d56f4

000d48c4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d48c4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d48c6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d48ca:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d48ce:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d48d2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d48d6:	2304      	movs	r3, #4
   d48d8:	6041      	str	r1, [r0, #4]
   d48da:	7503      	strb	r3, [r0, #20]
   d48dc:	bd10      	pop	{r4, pc}

000d48de <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d48de:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d48e0:	780d      	ldrb	r5, [r1, #0]
   d48e2:	788b      	ldrb	r3, [r1, #2]
   d48e4:	784a      	ldrb	r2, [r1, #1]
   d48e6:	78c9      	ldrb	r1, [r1, #3]
   d48e8:	9100      	str	r1, [sp, #0]
   d48ea:	4629      	mov	r1, r5
   d48ec:	f7ff ffea 	bl	d48c4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d48f0:	b003      	add	sp, #12
   d48f2:	bd30      	pop	{r4, r5, pc}

000d48f4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d48f4:	4b01      	ldr	r3, [pc, #4]	; (d48fc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d48f6:	4a02      	ldr	r2, [pc, #8]	; (d4900 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d48f8:	601a      	str	r2, [r3, #0]
   d48fa:	4770      	bx	lr
   d48fc:	2003e3e8 	.word	0x2003e3e8
   d4900:	000d5773 	.word	0x000d5773

000d4904 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4904:	2200      	movs	r2, #0
   d4906:	4611      	mov	r1, r2
   d4908:	6840      	ldr	r0, [r0, #4]
   d490a:	f7ff bea7 	b.w	d465c <network_listening>

000d490e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d490e:	2200      	movs	r2, #0
   d4910:	4611      	mov	r1, r2
   d4912:	6840      	ldr	r0, [r0, #4]
   d4914:	f7ff beb2 	b.w	d467c <network_get_listen_timeout>

000d4918 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4918:	2200      	movs	r2, #0
   d491a:	6840      	ldr	r0, [r0, #4]
   d491c:	f7ff bea6 	b.w	d466c <network_set_listen_timeout>

000d4920 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4920:	2200      	movs	r2, #0
   d4922:	f081 0101 	eor.w	r1, r1, #1
   d4926:	6840      	ldr	r0, [r0, #4]
   d4928:	f7ff be90 	b.w	d464c <network_listen>

000d492c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d492c:	2300      	movs	r3, #0
   d492e:	461a      	mov	r2, r3
   d4930:	2101      	movs	r1, #1
   d4932:	6840      	ldr	r0, [r0, #4]
   d4934:	f7ff be82 	b.w	d463c <network_off>

000d4938 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4938:	2300      	movs	r3, #0
   d493a:	461a      	mov	r2, r3
   d493c:	4619      	mov	r1, r3
   d493e:	6840      	ldr	r0, [r0, #4]
   d4940:	f7ff be74 	b.w	d462c <network_on>

000d4944 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4944:	2200      	movs	r2, #0
   d4946:	4611      	mov	r1, r2
   d4948:	6840      	ldr	r0, [r0, #4]
   d494a:	f7ff be67 	b.w	d461c <network_ready>

000d494e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d494e:	2200      	movs	r2, #0
   d4950:	4611      	mov	r1, r2
   d4952:	6840      	ldr	r0, [r0, #4]
   d4954:	f7ff be52 	b.w	d45fc <network_connecting>

000d4958 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4958:	2200      	movs	r2, #0
   d495a:	2102      	movs	r1, #2
   d495c:	6840      	ldr	r0, [r0, #4]
   d495e:	f7ff be55 	b.w	d460c <network_disconnect>

000d4962 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4962:	2300      	movs	r3, #0
   d4964:	461a      	mov	r2, r3
   d4966:	6840      	ldr	r0, [r0, #4]
   d4968:	f7ff be40 	b.w	d45ec <network_connect>

000d496c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d496c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d496e:	4605      	mov	r5, r0
   d4970:	b188      	cbz	r0, d4996 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4972:	6804      	ldr	r4, [r0, #0]
   d4974:	b14c      	cbz	r4, d498a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4976:	68a3      	ldr	r3, [r4, #8]
   d4978:	b11b      	cbz	r3, d4982 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d497a:	2203      	movs	r2, #3
   d497c:	4621      	mov	r1, r4
   d497e:	4620      	mov	r0, r4
   d4980:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4982:	2110      	movs	r1, #16
   d4984:	4620      	mov	r0, r4
   d4986:	f000 fc8e 	bl	d52a6 <_ZdlPvj>
   d498a:	4628      	mov	r0, r5
   d498c:	2114      	movs	r1, #20
      }
   d498e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4992:	f000 bc88 	b.w	d52a6 <_ZdlPvj>
   d4996:	bd38      	pop	{r3, r4, r5, pc}

000d4998 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4998:	b110      	cbz	r0, d49a0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d499a:	6803      	ldr	r3, [r0, #0]
   d499c:	685b      	ldr	r3, [r3, #4]
   d499e:	4718      	bx	r3
   d49a0:	4770      	bx	lr

000d49a2 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d49a2:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d49a4:	6803      	ldr	r3, [r0, #0]
   d49a6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d49a8:	b1bb      	cbz	r3, d49da <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d49aa:	6858      	ldr	r0, [r3, #4]
   d49ac:	f7ff fcaa 	bl	d4304 <os_thread_is_current>
   d49b0:	b978      	cbnz	r0, d49d2 <_ZN6ThreadD1Ev+0x30>
   d49b2:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d49b4:	7c5a      	ldrb	r2, [r3, #17]
   d49b6:	b912      	cbnz	r2, d49be <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d49b8:	6858      	ldr	r0, [r3, #4]
   d49ba:	f7ff fcab 	bl	d4314 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d49be:	6823      	ldr	r3, [r4, #0]
   d49c0:	6858      	ldr	r0, [r3, #4]
   d49c2:	f7ff fcaf 	bl	d4324 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d49c6:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d49c8:	2300      	movs	r3, #0
   d49ca:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d49cc:	b128      	cbz	r0, d49da <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d49ce:	f7ff ffcd 	bl	d496c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d49d2:	6820      	ldr	r0, [r4, #0]
   d49d4:	b108      	cbz	r0, d49da <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d49d6:	f7ff ffc9 	bl	d496c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d49da:	4620      	mov	r0, r4
   d49dc:	bd10      	pop	{r4, pc}

000d49de <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d49de:	b538      	push	{r3, r4, r5, lr}
   d49e0:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d49e2:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d49e6:	b108      	cbz	r0, d49ec <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d49e8:	f7ff fb57 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d49ec:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d49f0:	b108      	cbz	r0, d49f6 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d49f2:	f7ff fca7 	bl	d4344 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d49f6:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d49fa:	b135      	cbz	r5, d4a0a <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d49fc:	4628      	mov	r0, r5
   d49fe:	f7ff ffd0 	bl	d49a2 <_ZN6ThreadD1Ev>
   d4a02:	2104      	movs	r1, #4
   d4a04:	4628      	mov	r0, r5
   d4a06:	f000 fc4e 	bl	d52a6 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4a0a:	6820      	ldr	r0, [r4, #0]
   d4a0c:	b108      	cbz	r0, d4a12 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d4a0e:	f7ff ffc3 	bl	d4998 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4a12:	4620      	mov	r0, r4
   d4a14:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4a18 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4a18:	b510      	push	{r4, lr}
   d4a1a:	4b04      	ldr	r3, [pc, #16]	; (d4a2c <_ZN5spark9MeshClassD1Ev+0x14>)
   d4a1c:	4604      	mov	r4, r0
   d4a1e:	f840 3b08 	str.w	r3, [r0], #8
   d4a22:	f7ff ffdc 	bl	d49de <_ZN5spark11MeshPublishD1Ev>
   d4a26:	4620      	mov	r0, r4
   d4a28:	bd10      	pop	{r4, pc}
   d4a2a:	bf00      	nop
   d4a2c:	000d57ec 	.word	0x000d57ec

000d4a30 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4a30:	b538      	push	{r3, r4, r5, lr}
   d4a32:	4c0e      	ldr	r4, [pc, #56]	; (d4a6c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d4a34:	4b0e      	ldr	r3, [pc, #56]	; (d4a70 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d4a36:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4a38:	2500      	movs	r5, #0
   d4a3a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4a3c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4a40:	6063      	str	r3, [r4, #4]
   d4a42:	60a5      	str	r5, [r4, #8]
   d4a44:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4a48:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4a4c:	f7ff fc72 	bl	d4334 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4a50:	4b08      	ldr	r3, [pc, #32]	; (d4a74 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4a52:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4a56:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4a5a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4a5c:	4620      	mov	r0, r4
   d4a5e:	4a06      	ldr	r2, [pc, #24]	; (d4a78 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4a60:	4906      	ldr	r1, [pc, #24]	; (d4a7c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4a62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4a66:	f000 bc19 	b.w	d529c <__aeabi_atexit>
   d4a6a:	bf00      	nop
   d4a6c:	2003e3ec 	.word	0x2003e3ec
   d4a70:	000d5820 	.word	0x000d5820
   d4a74:	000d57ec 	.word	0x000d57ec
   d4a78:	2003e378 	.word	0x2003e378
   d4a7c:	000d4a19 	.word	0x000d4a19

000d4a80 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4a80:	2300      	movs	r3, #0
   d4a82:	461a      	mov	r2, r3
   d4a84:	6840      	ldr	r0, [r0, #4]
   d4a86:	f7ff bdb1 	b.w	d45ec <network_connect>

000d4a8a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4a8a:	2200      	movs	r2, #0
   d4a8c:	2102      	movs	r1, #2
   d4a8e:	6840      	ldr	r0, [r0, #4]
   d4a90:	f7ff bdbc 	b.w	d460c <network_disconnect>

000d4a94 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4a94:	2200      	movs	r2, #0
   d4a96:	4611      	mov	r1, r2
   d4a98:	6840      	ldr	r0, [r0, #4]
   d4a9a:	f7ff bdaf 	b.w	d45fc <network_connecting>

000d4a9e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4a9e:	2200      	movs	r2, #0
   d4aa0:	4611      	mov	r1, r2
   d4aa2:	6840      	ldr	r0, [r0, #4]
   d4aa4:	f7ff bdba 	b.w	d461c <network_ready>

000d4aa8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4aa8:	2300      	movs	r3, #0
   d4aaa:	461a      	mov	r2, r3
   d4aac:	4619      	mov	r1, r3
   d4aae:	6840      	ldr	r0, [r0, #4]
   d4ab0:	f7ff bdbc 	b.w	d462c <network_on>

000d4ab4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4ab4:	2300      	movs	r3, #0
   d4ab6:	461a      	mov	r2, r3
   d4ab8:	4619      	mov	r1, r3
   d4aba:	6840      	ldr	r0, [r0, #4]
   d4abc:	f7ff bdbe 	b.w	d463c <network_off>

000d4ac0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4ac0:	2200      	movs	r2, #0
   d4ac2:	f081 0101 	eor.w	r1, r1, #1
   d4ac6:	6840      	ldr	r0, [r0, #4]
   d4ac8:	f7ff bdc0 	b.w	d464c <network_listen>

000d4acc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4acc:	2200      	movs	r2, #0
   d4ace:	6840      	ldr	r0, [r0, #4]
   d4ad0:	f7ff bdcc 	b.w	d466c <network_set_listen_timeout>

000d4ad4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4ad4:	2200      	movs	r2, #0
   d4ad6:	4611      	mov	r1, r2
   d4ad8:	6840      	ldr	r0, [r0, #4]
   d4ada:	f7ff bdcf 	b.w	d467c <network_get_listen_timeout>

000d4ade <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4ade:	2200      	movs	r2, #0
   d4ae0:	4611      	mov	r1, r2
   d4ae2:	6840      	ldr	r0, [r0, #4]
   d4ae4:	f7ff bdba 	b.w	d465c <network_listening>

000d4ae8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4ae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4aec:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d4aee:	b095      	sub	sp, #84	; 0x54
   d4af0:	4616      	mov	r6, r2
   d4af2:	460d      	mov	r5, r1
   d4af4:	4607      	mov	r7, r0
    IPAddress addr;
   d4af6:	f7ff fec5 	bl	d4884 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4afa:	4621      	mov	r1, r4
   d4afc:	2220      	movs	r2, #32
   d4afe:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4b00:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4b02:	f000 fd4e 	bl	d55a2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4b06:	2340      	movs	r3, #64	; 0x40
   d4b08:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4b0a:	4621      	mov	r1, r4
   d4b0c:	466b      	mov	r3, sp
   d4b0e:	aa0c      	add	r2, sp, #48	; 0x30
   d4b10:	4630      	mov	r0, r6
   d4b12:	f7ff fcaf 	bl	d4474 <netdb_getaddrinfo>
    if (!r) {
   d4b16:	4604      	mov	r4, r0
   d4b18:	2800      	cmp	r0, #0
   d4b1a:	d144      	bne.n	d4ba6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4b1c:	4602      	mov	r2, r0
   d4b1e:	2101      	movs	r1, #1
   d4b20:	6868      	ldr	r0, [r5, #4]
   d4b22:	f7ff fd7b 	bl	d461c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4b26:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4b28:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4b2a:	4622      	mov	r2, r4
   d4b2c:	6868      	ldr	r0, [r5, #4]
   d4b2e:	f7ff fd75 	bl	d461c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4b32:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4b34:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d4b36:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4b38:	2e00      	cmp	r6, #0
   d4b3a:	d034      	beq.n	d4ba6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d4b3c:	2900      	cmp	r1, #0
   d4b3e:	d132      	bne.n	d4ba6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4b40:	6873      	ldr	r3, [r6, #4]
   d4b42:	2b02      	cmp	r3, #2
   d4b44:	d002      	beq.n	d4b4c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d4b46:	2b0a      	cmp	r3, #10
   d4b48:	d009      	beq.n	d4b5e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d4b4a:	e02a      	b.n	d4ba2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d4b4c:	f1b8 0f00 	cmp.w	r8, #0
   d4b50:	d027      	beq.n	d4ba2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4b52:	6971      	ldr	r1, [r6, #20]
   d4b54:	4638      	mov	r0, r7
   d4b56:	3104      	adds	r1, #4
   d4b58:	f7ff fec1 	bl	d48de <_ZN9IPAddressaSEPKh>
   d4b5c:	e020      	b.n	d4ba0 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4b5e:	f1b9 0f00 	cmp.w	r9, #0
   d4b62:	d01e      	beq.n	d4ba2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4b64:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4b66:	2211      	movs	r2, #17
   d4b68:	a801      	add	r0, sp, #4
   d4b6a:	f000 fd1a 	bl	d55a2 <memset>
                    a.v = 6;
   d4b6e:	2306      	movs	r3, #6
   d4b70:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4b74:	ad01      	add	r5, sp, #4
   d4b76:	f104 0308 	add.w	r3, r4, #8
   d4b7a:	3418      	adds	r4, #24
   d4b7c:	6818      	ldr	r0, [r3, #0]
   d4b7e:	6859      	ldr	r1, [r3, #4]
   d4b80:	462a      	mov	r2, r5
   d4b82:	c203      	stmia	r2!, {r0, r1}
   d4b84:	3308      	adds	r3, #8
   d4b86:	42a3      	cmp	r3, r4
   d4b88:	4615      	mov	r5, r2
   d4b8a:	d1f7      	bne.n	d4b7c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d4b8c:	a901      	add	r1, sp, #4
   d4b8e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4b90:	ad07      	add	r5, sp, #28
   d4b92:	f7ff fe85 	bl	d48a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4b96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4b98:	1d3c      	adds	r4, r7, #4
   d4b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4b9c:	682b      	ldr	r3, [r5, #0]
   d4b9e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d4ba0:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4ba2:	69f6      	ldr	r6, [r6, #28]
   d4ba4:	e7c8      	b.n	d4b38 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4ba6:	9800      	ldr	r0, [sp, #0]
   d4ba8:	f7ff fc5c 	bl	d4464 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4bac:	4638      	mov	r0, r7
   d4bae:	b015      	add	sp, #84	; 0x54
   d4bb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4bb4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4bb4:	4b02      	ldr	r3, [pc, #8]	; (d4bc0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4bb6:	4a03      	ldr	r2, [pc, #12]	; (d4bc4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4bb8:	601a      	str	r2, [r3, #0]
   d4bba:	2200      	movs	r2, #0
   d4bbc:	605a      	str	r2, [r3, #4]
   d4bbe:	4770      	bx	lr
   d4bc0:	2003e5c0 	.word	0x2003e5c0
   d4bc4:	000d5820 	.word	0x000d5820

000d4bc8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4bca:	4606      	mov	r6, r0
   d4bcc:	460d      	mov	r5, r1
   d4bce:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4bd0:	2400      	movs	r4, #0
  while (size--) {
   d4bd2:	42bd      	cmp	r5, r7
   d4bd4:	d00c      	beq.n	d4bf0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4bd6:	6833      	ldr	r3, [r6, #0]
   d4bd8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4bdc:	689b      	ldr	r3, [r3, #8]
   d4bde:	4630      	mov	r0, r6
   d4be0:	4798      	blx	r3
     if (chunk>=0)
   d4be2:	2800      	cmp	r0, #0
   d4be4:	db01      	blt.n	d4bea <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4be6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4be8:	e7f3      	b.n	d4bd2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4bea:	2c00      	cmp	r4, #0
   d4bec:	bf08      	it	eq
   d4bee:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4bf0:	4620      	mov	r0, r4
   d4bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4bf4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4bf4:	b570      	push	{r4, r5, r6, lr}
   d4bf6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4bf8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4bfa:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4bfc:	b149      	cbz	r1, d4c12 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4bfe:	f000 fd01 	bl	d5604 <strlen>
   d4c02:	682b      	ldr	r3, [r5, #0]
   d4c04:	4602      	mov	r2, r0
   d4c06:	4621      	mov	r1, r4
   d4c08:	4628      	mov	r0, r5
   d4c0a:	68db      	ldr	r3, [r3, #12]
    }
   d4c0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4c10:	4718      	bx	r3
    }
   d4c12:	bd70      	pop	{r4, r5, r6, pc}

000d4c14 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4c14:	6803      	ldr	r3, [r0, #0]
   d4c16:	689b      	ldr	r3, [r3, #8]
   d4c18:	4718      	bx	r3

000d4c1a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4c1a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4c1c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4c1e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4c20:	f7ff fff8 	bl	d4c14 <_ZN5Print5printEc>
  n += print('\n');
   d4c24:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4c26:	4604      	mov	r4, r0
  n += print('\n');
   d4c28:	4628      	mov	r0, r5
   d4c2a:	f7ff fff3 	bl	d4c14 <_ZN5Print5printEc>
  return n;
}
   d4c2e:	4420      	add	r0, r4
   d4c30:	bd38      	pop	{r3, r4, r5, pc}

000d4c32 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4c32:	b530      	push	{r4, r5, lr}
   d4c34:	b08b      	sub	sp, #44	; 0x2c
   d4c36:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4c38:	2100      	movs	r1, #0
   d4c3a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4c3e:	2a01      	cmp	r2, #1
   d4c40:	bf98      	it	ls
   d4c42:	220a      	movls	r2, #10
   d4c44:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4c48:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4c4c:	fb05 3312 	mls	r3, r5, r2, r3
   d4c50:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4c54:	2b09      	cmp	r3, #9
   d4c56:	bf94      	ite	ls
   d4c58:	3330      	addls	r3, #48	; 0x30
   d4c5a:	3337      	addhi	r3, #55	; 0x37
   d4c5c:	b2db      	uxtb	r3, r3
   d4c5e:	4621      	mov	r1, r4
   d4c60:	f804 3901 	strb.w	r3, [r4], #-1
   d4c64:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4c66:	2d00      	cmp	r5, #0
   d4c68:	d1ee      	bne.n	d4c48 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4c6a:	f7ff ffc3 	bl	d4bf4 <_ZN5Print5writeEPKc>
}
   d4c6e:	b00b      	add	sp, #44	; 0x2c
   d4c70:	bd30      	pop	{r4, r5, pc}

000d4c72 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4c72:	b40c      	push	{r2, r3}
   d4c74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4c78:	b087      	sub	sp, #28
   d4c7a:	af00      	add	r7, sp, #0
   d4c7c:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d4c80:	4605      	mov	r5, r0
   d4c82:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d4c86:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4c88:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d4c8a:	4623      	mov	r3, r4
   d4c8c:	464a      	mov	r2, r9
   d4c8e:	2114      	movs	r1, #20
   d4c90:	1d38      	adds	r0, r7, #4
   d4c92:	f7ff fd0b 	bl	d46ac <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d4c96:	2813      	cmp	r0, #19
   d4c98:	d805      	bhi.n	d4ca6 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4c9a:	1d39      	adds	r1, r7, #4
   d4c9c:	4628      	mov	r0, r5
   d4c9e:	f7ff ffa9 	bl	d4bf4 <_ZN5Print5writeEPKc>
   d4ca2:	4604      	mov	r4, r0
   d4ca4:	e013      	b.n	d4cce <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4ca6:	f100 0308 	add.w	r3, r0, #8
   d4caa:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d4cae:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4cb0:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d4cb4:	1c41      	adds	r1, r0, #1
   d4cb6:	4623      	mov	r3, r4
   d4cb8:	464a      	mov	r2, r9
   d4cba:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d4cbc:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d4cbe:	f7ff fcf5 	bl	d46ac <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4cc2:	4669      	mov	r1, sp
   d4cc4:	4628      	mov	r0, r5
   d4cc6:	f7ff ff95 	bl	d4bf4 <_ZN5Print5writeEPKc>
   d4cca:	4604      	mov	r4, r0
   d4ccc:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d4cce:	b11e      	cbz	r6, d4cd8 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d4cd0:	4628      	mov	r0, r5
   d4cd2:	f7ff ffa2 	bl	d4c1a <_ZN5Print7printlnEv>
   d4cd6:	4404      	add	r4, r0
    return n;
}
   d4cd8:	4620      	mov	r0, r4
   d4cda:	371c      	adds	r7, #28
   d4cdc:	46bd      	mov	sp, r7
   d4cde:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4ce2:	b002      	add	sp, #8
   d4ce4:	4770      	bx	lr

000d4ce6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4ce6:	b510      	push	{r4, lr}
   d4ce8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4cea:	f7ff fd07 	bl	d46fc <_ZNSt14_Function_baseD1Ev>
   d4cee:	4620      	mov	r0, r4
   d4cf0:	bd10      	pop	{r4, pc}
	...

000d4cf4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4cf4:	4803      	ldr	r0, [pc, #12]	; (d4d04 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4cf6:	4a04      	ldr	r2, [pc, #16]	; (d4d08 <_GLOBAL__sub_I_RGB+0x14>)
   d4cf8:	4904      	ldr	r1, [pc, #16]	; (d4d0c <_GLOBAL__sub_I_RGB+0x18>)
   d4cfa:	2300      	movs	r3, #0
   d4cfc:	6083      	str	r3, [r0, #8]
   d4cfe:	f000 bacd 	b.w	d529c <__aeabi_atexit>
   d4d02:	bf00      	nop
   d4d04:	2003e5c8 	.word	0x2003e5c8
   d4d08:	2003e378 	.word	0x2003e378
   d4d0c:	000d4ce7 	.word	0x000d4ce7

000d4d10 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4d10:	b510      	push	{r4, lr}
   d4d12:	4604      	mov	r4, r0
{
    _spi = spi;
   d4d14:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d4d16:	4608      	mov	r0, r1
   d4d18:	f7ff fbb4 	bl	d4484 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4d1c:	2300      	movs	r3, #0
   d4d1e:	6063      	str	r3, [r4, #4]
}
   d4d20:	4620      	mov	r0, r4
   d4d22:	bd10      	pop	{r4, pc}

000d4d24 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d4d24:	7800      	ldrb	r0, [r0, #0]
   d4d26:	f7ff bbb5 	b.w	d4494 <HAL_SPI_Is_Enabled>
	...

000d4d2c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4d2c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4d2e:	4c09      	ldr	r4, [pc, #36]	; (d4d54 <_GLOBAL__sub_I_System+0x28>)
   d4d30:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4d32:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4d36:	6020      	str	r0, [r4, #0]
   d4d38:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4d3a:	71a0      	strb	r0, [r4, #6]
   d4d3c:	8120      	strh	r0, [r4, #8]
   d4d3e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4d40:	f7ff fc28 	bl	d4594 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4d44:	4620      	mov	r0, r4
   d4d46:	4a04      	ldr	r2, [pc, #16]	; (d4d58 <_GLOBAL__sub_I_System+0x2c>)
   d4d48:	4904      	ldr	r1, [pc, #16]	; (d4d5c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4d4e:	f000 baa5 	b.w	d529c <__aeabi_atexit>
   d4d52:	bf00      	nop
   d4d54:	2003e5d8 	.word	0x2003e5d8
   d4d58:	2003e378 	.word	0x2003e378
   d4d5c:	000d40af 	.word	0x000d40af

000d4d60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4d60:	4b02      	ldr	r3, [pc, #8]	; (d4d6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4d62:	681a      	ldr	r2, [r3, #0]
   d4d64:	4b02      	ldr	r3, [pc, #8]	; (d4d70 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4d66:	601a      	str	r2, [r3, #0]
   d4d68:	4770      	bx	lr
   d4d6a:	bf00      	nop
   d4d6c:	2003e310 	.word	0x2003e310
   d4d70:	2003e5e4 	.word	0x2003e5e4

000d4d74 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4d74:	4770      	bx	lr

000d4d76 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4d76:	7441      	strb	r1, [r0, #17]
   d4d78:	4770      	bx	lr

000d4d7a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4d7a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4d7c:	7c00      	ldrb	r0, [r0, #16]
   d4d7e:	f7ff fbc9 	bl	d4514 <HAL_USART_Available_Data_For_Write>
}
   d4d82:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4d86:	bd08      	pop	{r3, pc}

000d4d88 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4d88:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4d8a:	7c00      	ldrb	r0, [r0, #16]
   d4d8c:	f7ff fb9a 	bl	d44c4 <HAL_USART_Available_Data>
}
   d4d90:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4d94:	bd08      	pop	{r3, pc}

000d4d96 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4d96:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4d98:	7c00      	ldrb	r0, [r0, #16]
   d4d9a:	f7ff fba3 	bl	d44e4 <HAL_USART_Peek_Data>
}
   d4d9e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4da2:	bf28      	it	cs
   d4da4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d4da8:	bd08      	pop	{r3, pc}

000d4daa <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4daa:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4dac:	7c00      	ldrb	r0, [r0, #16]
   d4dae:	f7ff fb91 	bl	d44d4 <HAL_USART_Read_Data>
}
   d4db2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4db6:	bf28      	it	cs
   d4db8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d4dbc:	bd08      	pop	{r3, pc}

000d4dbe <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4dbe:	7c00      	ldrb	r0, [r0, #16]
   d4dc0:	f7ff bb98 	b.w	d44f4 <HAL_USART_Flush_Data>

000d4dc4 <_ZN11USARTSerialD0Ev>:
   d4dc4:	b510      	push	{r4, lr}
   d4dc6:	2114      	movs	r1, #20
   d4dc8:	4604      	mov	r4, r0
   d4dca:	f000 fa6c 	bl	d52a6 <_ZdlPvj>
   d4dce:	4620      	mov	r0, r4
   d4dd0:	bd10      	pop	{r4, pc}

000d4dd2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4dd2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4dd4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4dd6:	4604      	mov	r4, r0
   d4dd8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4dda:	b925      	cbnz	r5, d4de6 <_ZN11USARTSerial5writeEh+0x14>
   d4ddc:	7c00      	ldrb	r0, [r0, #16]
   d4dde:	f7ff fb99 	bl	d4514 <HAL_USART_Available_Data_For_Write>
   d4de2:	2800      	cmp	r0, #0
   d4de4:	dd05      	ble.n	d4df2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4de6:	4631      	mov	r1, r6
   d4de8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4dea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4dee:	f7ff bb61 	b.w	d44b4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d4df2:	4628      	mov	r0, r5
   d4df4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4df8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4df8:	b510      	push	{r4, lr}
   d4dfa:	4604      	mov	r4, r0
   d4dfc:	4608      	mov	r0, r1
   d4dfe:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4e00:	2200      	movs	r2, #0
   d4e02:	6062      	str	r2, [r4, #4]
   d4e04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4e08:	60a2      	str	r2, [r4, #8]
   d4e0a:	4a05      	ldr	r2, [pc, #20]	; (d4e20 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4e0c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4e0e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4e10:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4e12:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4e14:	461a      	mov	r2, r3
   d4e16:	f7ff fb45 	bl	d44a4 <HAL_USART_Init>
}
   d4e1a:	4620      	mov	r0, r4
   d4e1c:	bd10      	pop	{r4, pc}
   d4e1e:	bf00      	nop
   d4e20:	000d5880 	.word	0x000d5880

000d4e24 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d4e24:	7c00      	ldrb	r0, [r0, #16]
   d4e26:	f7ff bb6d 	b.w	d4504 <HAL_USART_Is_Enabled>
	...

000d4e2c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4e2c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4e2e:	4d0c      	ldr	r5, [pc, #48]	; (d4e60 <_Z22__fetch_global_Serial1v+0x34>)
   d4e30:	6829      	ldr	r1, [r5, #0]
   d4e32:	f011 0401 	ands.w	r4, r1, #1
   d4e36:	d111      	bne.n	d4e5c <_Z22__fetch_global_Serial1v+0x30>
   d4e38:	4628      	mov	r0, r5
   d4e3a:	f7ff f930 	bl	d409e <__cxa_guard_acquire>
   d4e3e:	b168      	cbz	r0, d4e5c <_Z22__fetch_global_Serial1v+0x30>
   d4e40:	4a08      	ldr	r2, [pc, #32]	; (d4e64 <_Z22__fetch_global_Serial1v+0x38>)
   d4e42:	4b09      	ldr	r3, [pc, #36]	; (d4e68 <_Z22__fetch_global_Serial1v+0x3c>)
   d4e44:	4809      	ldr	r0, [pc, #36]	; (d4e6c <_Z22__fetch_global_Serial1v+0x40>)
   d4e46:	4621      	mov	r1, r4
   d4e48:	f7ff ffd6 	bl	d4df8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4e4c:	4628      	mov	r0, r5
   d4e4e:	f7ff f92b 	bl	d40a8 <__cxa_guard_release>
   d4e52:	4a07      	ldr	r2, [pc, #28]	; (d4e70 <_Z22__fetch_global_Serial1v+0x44>)
   d4e54:	4907      	ldr	r1, [pc, #28]	; (d4e74 <_Z22__fetch_global_Serial1v+0x48>)
   d4e56:	4805      	ldr	r0, [pc, #20]	; (d4e6c <_Z22__fetch_global_Serial1v+0x40>)
   d4e58:	f000 fa20 	bl	d529c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4e5c:	4803      	ldr	r0, [pc, #12]	; (d4e6c <_Z22__fetch_global_Serial1v+0x40>)
   d4e5e:	bd38      	pop	{r3, r4, r5, pc}
   d4e60:	2003e680 	.word	0x2003e680
   d4e64:	2003e684 	.word	0x2003e684
   d4e68:	2003e5fc 	.word	0x2003e5fc
   d4e6c:	2003e5e8 	.word	0x2003e5e8
   d4e70:	2003e378 	.word	0x2003e378
   d4e74:	000d4d75 	.word	0x000d4d75

000d4e78 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4e78:	7441      	strb	r1, [r0, #17]
   d4e7a:	4770      	bx	lr

000d4e7c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4e7c:	4770      	bx	lr

000d4e7e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4e7e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4e80:	2100      	movs	r1, #0
   d4e82:	7c00      	ldrb	r0, [r0, #16]
   d4e84:	f7ff fb6e 	bl	d4564 <HAL_USB_USART_Receive_Data>
}
   d4e88:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4e8c:	bf28      	it	cs
   d4e8e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d4e92:	bd08      	pop	{r3, pc}

000d4e94 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4e94:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4e96:	2101      	movs	r1, #1
   d4e98:	7c00      	ldrb	r0, [r0, #16]
   d4e9a:	f7ff fb63 	bl	d4564 <HAL_USB_USART_Receive_Data>
}
   d4e9e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4ea2:	bf28      	it	cs
   d4ea4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d4ea8:	bd08      	pop	{r3, pc}

000d4eaa <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4eaa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4eac:	7c00      	ldrb	r0, [r0, #16]
   d4eae:	f7ff fb51 	bl	d4554 <HAL_USB_USART_Available_Data_For_Write>
}
   d4eb2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4eb6:	bd08      	pop	{r3, pc}

000d4eb8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4eb8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4eba:	7c00      	ldrb	r0, [r0, #16]
   d4ebc:	f7ff fb42 	bl	d4544 <HAL_USB_USART_Available_Data>
}
   d4ec0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4ec4:	bd08      	pop	{r3, pc}

000d4ec6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4ec6:	7c00      	ldrb	r0, [r0, #16]
   d4ec8:	f7ff bb5c 	b.w	d4584 <HAL_USB_USART_Flush_Data>

000d4ecc <_ZN9USBSerialD0Ev>:
   d4ecc:	b510      	push	{r4, lr}
   d4ece:	2114      	movs	r1, #20
   d4ed0:	4604      	mov	r4, r0
   d4ed2:	f000 f9e8 	bl	d52a6 <_ZdlPvj>
   d4ed6:	4620      	mov	r0, r4
   d4ed8:	bd10      	pop	{r4, pc}

000d4eda <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4eda:	b538      	push	{r3, r4, r5, lr}
   d4edc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4ede:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4ee0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4ee2:	f7ff fb37 	bl	d4554 <HAL_USB_USART_Available_Data_For_Write>
   d4ee6:	2800      	cmp	r0, #0
   d4ee8:	dc01      	bgt.n	d4eee <_ZN9USBSerial5writeEh+0x14>
   d4eea:	7c60      	ldrb	r0, [r4, #17]
   d4eec:	b128      	cbz	r0, d4efa <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4eee:	4629      	mov	r1, r5
   d4ef0:	7c20      	ldrb	r0, [r4, #16]
   d4ef2:	f7ff fb3f 	bl	d4574 <HAL_USB_USART_Send_Data>
   d4ef6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4efa:	bd38      	pop	{r3, r4, r5, pc}

000d4efc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4efc:	b510      	push	{r4, lr}
   d4efe:	4604      	mov	r4, r0
   d4f00:	2300      	movs	r3, #0
   d4f02:	6063      	str	r3, [r4, #4]
   d4f04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4f08:	60a3      	str	r3, [r4, #8]
   d4f0a:	4b05      	ldr	r3, [pc, #20]	; (d4f20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4f0c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4f0e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4f10:	4608      	mov	r0, r1
{
  _serial = serial;
   d4f12:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4f14:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4f16:	4611      	mov	r1, r2
   d4f18:	f7ff fb04 	bl	d4524 <HAL_USB_USART_Init>
}
   d4f1c:	4620      	mov	r0, r4
   d4f1e:	bd10      	pop	{r4, pc}
   d4f20:	000d58b0 	.word	0x000d58b0

000d4f24 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4f24:	2200      	movs	r2, #0
   d4f26:	7c00      	ldrb	r0, [r0, #16]
   d4f28:	f7ff bb04 	b.w	d4534 <HAL_USB_USART_Begin>

000d4f2c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4f2c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4f2e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4f30:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4f32:	2100      	movs	r1, #0
   d4f34:	f000 fb35 	bl	d55a2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4f38:	4620      	mov	r0, r4
   d4f3a:	bd10      	pop	{r4, pc}

000d4f3c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4f3c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4f3e:	4d0e      	ldr	r5, [pc, #56]	; (d4f78 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4f40:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4f42:	a801      	add	r0, sp, #4
   d4f44:	f7ff fff2 	bl	d4f2c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4f48:	6829      	ldr	r1, [r5, #0]
   d4f4a:	f011 0401 	ands.w	r4, r1, #1
   d4f4e:	d110      	bne.n	d4f72 <_Z16_fetch_usbserialv+0x36>
   d4f50:	4628      	mov	r0, r5
   d4f52:	f7ff f8a4 	bl	d409e <__cxa_guard_acquire>
   d4f56:	b160      	cbz	r0, d4f72 <_Z16_fetch_usbserialv+0x36>
   d4f58:	aa01      	add	r2, sp, #4
   d4f5a:	4621      	mov	r1, r4
   d4f5c:	4807      	ldr	r0, [pc, #28]	; (d4f7c <_Z16_fetch_usbserialv+0x40>)
   d4f5e:	f7ff ffcd 	bl	d4efc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4f62:	4628      	mov	r0, r5
   d4f64:	f7ff f8a0 	bl	d40a8 <__cxa_guard_release>
   d4f68:	4a05      	ldr	r2, [pc, #20]	; (d4f80 <_Z16_fetch_usbserialv+0x44>)
   d4f6a:	4906      	ldr	r1, [pc, #24]	; (d4f84 <_Z16_fetch_usbserialv+0x48>)
   d4f6c:	4803      	ldr	r0, [pc, #12]	; (d4f7c <_Z16_fetch_usbserialv+0x40>)
   d4f6e:	f000 f995 	bl	d529c <__aeabi_atexit>
	return _usbserial;
}
   d4f72:	4802      	ldr	r0, [pc, #8]	; (d4f7c <_Z16_fetch_usbserialv+0x40>)
   d4f74:	b007      	add	sp, #28
   d4f76:	bd30      	pop	{r4, r5, pc}
   d4f78:	2003e708 	.word	0x2003e708
   d4f7c:	2003e70c 	.word	0x2003e70c
   d4f80:	2003e378 	.word	0x2003e378
   d4f84:	000d4e7d 	.word	0x000d4e7d

000d4f88 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4f88:	2200      	movs	r2, #0
   d4f8a:	4611      	mov	r1, r2
   d4f8c:	6840      	ldr	r0, [r0, #4]
   d4f8e:	f7ff bb45 	b.w	d461c <network_ready>

000d4f92 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4f92:	2200      	movs	r2, #0
   d4f94:	4611      	mov	r1, r2
   d4f96:	6840      	ldr	r0, [r0, #4]
   d4f98:	f7ff bb60 	b.w	d465c <network_listening>

000d4f9c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4f9c:	2200      	movs	r2, #0
   d4f9e:	4611      	mov	r1, r2
   d4fa0:	6840      	ldr	r0, [r0, #4]
   d4fa2:	f7ff bb6b 	b.w	d467c <network_get_listen_timeout>

000d4fa6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4fa6:	2200      	movs	r2, #0
   d4fa8:	6840      	ldr	r0, [r0, #4]
   d4faa:	f7ff bb5f 	b.w	d466c <network_set_listen_timeout>

000d4fae <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4fae:	2200      	movs	r2, #0
   d4fb0:	f081 0101 	eor.w	r1, r1, #1
   d4fb4:	6840      	ldr	r0, [r0, #4]
   d4fb6:	f7ff bb49 	b.w	d464c <network_listen>

000d4fba <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d4fba:	2300      	movs	r3, #0
   d4fbc:	461a      	mov	r2, r3
   d4fbe:	4619      	mov	r1, r3
   d4fc0:	6840      	ldr	r0, [r0, #4]
   d4fc2:	f7ff bb3b 	b.w	d463c <network_off>

000d4fc6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d4fc6:	2300      	movs	r3, #0
   d4fc8:	461a      	mov	r2, r3
   d4fca:	4619      	mov	r1, r3
   d4fcc:	6840      	ldr	r0, [r0, #4]
   d4fce:	f7ff bb2d 	b.w	d462c <network_on>

000d4fd2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4fd2:	2200      	movs	r2, #0
   d4fd4:	4611      	mov	r1, r2
   d4fd6:	6840      	ldr	r0, [r0, #4]
   d4fd8:	f7ff bb10 	b.w	d45fc <network_connecting>

000d4fdc <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4fdc:	2200      	movs	r2, #0
   d4fde:	2102      	movs	r1, #2
   d4fe0:	6840      	ldr	r0, [r0, #4]
   d4fe2:	f7ff bb13 	b.w	d460c <network_disconnect>

000d4fe6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4fe6:	2300      	movs	r3, #0
   d4fe8:	461a      	mov	r2, r3
   d4fea:	6840      	ldr	r0, [r0, #4]
   d4fec:	f7ff bafe 	b.w	d45ec <network_connect>

000d4ff0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d4ff0:	4b02      	ldr	r3, [pc, #8]	; (d4ffc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d4ff2:	2204      	movs	r2, #4
   d4ff4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d4ff6:	4a02      	ldr	r2, [pc, #8]	; (d5000 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d4ff8:	601a      	str	r2, [r3, #0]
   d4ffa:	4770      	bx	lr
   d4ffc:	2003e720 	.word	0x2003e720
   d5000:	000d58e0 	.word	0x000d58e0

000d5004 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5004:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5006:	4b0c      	ldr	r3, [pc, #48]	; (d5038 <serialEventRun+0x34>)
   d5008:	b133      	cbz	r3, d5018 <serialEventRun+0x14>
   d500a:	f7ff ff97 	bl	d4f3c <_Z16_fetch_usbserialv>
   d500e:	6803      	ldr	r3, [r0, #0]
   d5010:	691b      	ldr	r3, [r3, #16]
   d5012:	4798      	blx	r3
   d5014:	2800      	cmp	r0, #0
   d5016:	dc09      	bgt.n	d502c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5018:	4b08      	ldr	r3, [pc, #32]	; (d503c <serialEventRun+0x38>)
   d501a:	b163      	cbz	r3, d5036 <serialEventRun+0x32>
   d501c:	f7ff ff06 	bl	d4e2c <_Z22__fetch_global_Serial1v>
   d5020:	6803      	ldr	r3, [r0, #0]
   d5022:	691b      	ldr	r3, [r3, #16]
   d5024:	4798      	blx	r3
   d5026:	2800      	cmp	r0, #0
   d5028:	dc03      	bgt.n	d5032 <serialEventRun+0x2e>
   d502a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d502c:	f3af 8000 	nop.w
   d5030:	e7f2      	b.n	d5018 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5032:	f3af 8000 	nop.w
   d5036:	bd08      	pop	{r3, pc}
	...

000d5040 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5040:	b508      	push	{r3, lr}
	serialEventRun();
   d5042:	f7ff ffdf 	bl	d5004 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5046:	f7ff f98d 	bl	d4364 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d504a:	4b01      	ldr	r3, [pc, #4]	; (d5050 <_post_loop+0x10>)
   d504c:	6018      	str	r0, [r3, #0]
   d504e:	bd08      	pop	{r3, pc}
   d5050:	2003e730 	.word	0x2003e730

000d5054 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5054:	4802      	ldr	r0, [pc, #8]	; (d5060 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5056:	4a03      	ldr	r2, [pc, #12]	; (d5064 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5058:	4903      	ldr	r1, [pc, #12]	; (d5068 <_Z33system_initialize_user_backup_ramv+0x14>)
   d505a:	1a12      	subs	r2, r2, r0
   d505c:	f000 ba96 	b.w	d558c <memcpy>
   d5060:	2003f400 	.word	0x2003f400
   d5064:	2003f404 	.word	0x2003f404
   d5068:	000d59c0 	.word	0x000d59c0

000d506c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d506c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d506e:	2300      	movs	r3, #0
   d5070:	9300      	str	r3, [sp, #0]
   d5072:	461a      	mov	r2, r3
   d5074:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5078:	f7ff faa6 	bl	d45c8 <system_ctrl_set_result>
}
   d507c:	b003      	add	sp, #12
   d507e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5084 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5084:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5086:	8843      	ldrh	r3, [r0, #2]
   d5088:	2b0a      	cmp	r3, #10
   d508a:	d008      	beq.n	d509e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d508c:	2b50      	cmp	r3, #80	; 0x50
   d508e:	d109      	bne.n	d50a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5090:	4b09      	ldr	r3, [pc, #36]	; (d50b8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5092:	681b      	ldr	r3, [r3, #0]
   d5094:	b13b      	cbz	r3, d50a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5096:	b003      	add	sp, #12
   d5098:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d509c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d509e:	f7ff ffe5 	bl	d506c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d50a2:	e006      	b.n	d50b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d50a4:	2300      	movs	r3, #0
   d50a6:	9300      	str	r3, [sp, #0]
   d50a8:	461a      	mov	r2, r3
   d50aa:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d50ae:	f7ff fa8b 	bl	d45c8 <system_ctrl_set_result>
        break;
    }
}
   d50b2:	b003      	add	sp, #12
   d50b4:	f85d fb04 	ldr.w	pc, [sp], #4
   d50b8:	2003e728 	.word	0x2003e728

000d50bc <module_user_init_hook>:

void module_user_init_hook()
{
   d50bc:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d50be:	4c10      	ldr	r4, [pc, #64]	; (d5100 <module_user_init_hook+0x44>)
   d50c0:	4d10      	ldr	r5, [pc, #64]	; (d5104 <module_user_init_hook+0x48>)
   d50c2:	6823      	ldr	r3, [r4, #0]
   d50c4:	42ab      	cmp	r3, r5
   d50c6:	4b10      	ldr	r3, [pc, #64]	; (d5108 <module_user_init_hook+0x4c>)
   d50c8:	bf0c      	ite	eq
   d50ca:	2201      	moveq	r2, #1
   d50cc:	2200      	movne	r2, #0
   d50ce:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d50d0:	d002      	beq.n	d50d8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d50d2:	f7ff ffbf 	bl	d5054 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d50d6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d50d8:	f7ff f93c 	bl	d4354 <HAL_RNG_GetRandomNumber>
   d50dc:	4604      	mov	r4, r0
    srand(seed);
   d50de:	f000 fa69 	bl	d55b4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d50e2:	4b0a      	ldr	r3, [pc, #40]	; (d510c <module_user_init_hook+0x50>)
   d50e4:	b113      	cbz	r3, d50ec <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d50e6:	4620      	mov	r0, r4
   d50e8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d50ec:	2100      	movs	r1, #0
   d50ee:	4807      	ldr	r0, [pc, #28]	; (d510c <module_user_init_hook+0x50>)
   d50f0:	f7ff fa74 	bl	d45dc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d50f4:	2100      	movs	r1, #0
   d50f6:	4806      	ldr	r0, [pc, #24]	; (d5110 <module_user_init_hook+0x54>)
}
   d50f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d50fc:	f7ff ba5a 	b.w	d45b4 <system_ctrl_set_app_request_handler>
   d5100:	2003f400 	.word	0x2003f400
   d5104:	9a271c1e 	.word	0x9a271c1e
   d5108:	2003e72c 	.word	0x2003e72c
   d510c:	00000000 	.word	0x00000000
   d5110:	000d5085 	.word	0x000d5085

000d5114 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5114:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5116:	4e18      	ldr	r6, [pc, #96]	; (d5178 <pinAvailable+0x64>)
   d5118:	6831      	ldr	r1, [r6, #0]
   d511a:	f011 0501 	ands.w	r5, r1, #1
   d511e:	4604      	mov	r4, r0
   d5120:	d10a      	bne.n	d5138 <pinAvailable+0x24>
   d5122:	4630      	mov	r0, r6
   d5124:	f7fe ffbb 	bl	d409e <__cxa_guard_acquire>
   d5128:	b130      	cbz	r0, d5138 <pinAvailable+0x24>
   d512a:	4629      	mov	r1, r5
   d512c:	4813      	ldr	r0, [pc, #76]	; (d517c <pinAvailable+0x68>)
   d512e:	f7ff fdef 	bl	d4d10 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5132:	4630      	mov	r0, r6
   d5134:	f7fe ffb8 	bl	d40a8 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d5138:	4810      	ldr	r0, [pc, #64]	; (d517c <pinAvailable+0x68>)
   d513a:	f7ff fdf3 	bl	d4d24 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d513e:	b128      	cbz	r0, d514c <pinAvailable+0x38>
   d5140:	f1a4 030b 	sub.w	r3, r4, #11
   d5144:	2b02      	cmp	r3, #2
   d5146:	d801      	bhi.n	d514c <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d5148:	2000      	movs	r0, #0
   d514a:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d514c:	f000 f880 	bl	d5250 <_Z19__fetch_global_Wirev>
   d5150:	f7ff fb5a 	bl	d4808 <_ZN7TwoWire9isEnabledEv>
   d5154:	b108      	cbz	r0, d515a <pinAvailable+0x46>
   d5156:	2c01      	cmp	r4, #1
   d5158:	d9f6      	bls.n	d5148 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d515a:	f7ff fe67 	bl	d4e2c <_Z22__fetch_global_Serial1v>
   d515e:	f7ff fe61 	bl	d4e24 <_ZN11USARTSerial9isEnabledEv>
   d5162:	b118      	cbz	r0, d516c <pinAvailable+0x58>
   d5164:	f1a4 0309 	sub.w	r3, r4, #9
   d5168:	2b01      	cmp	r3, #1
   d516a:	d9ed      	bls.n	d5148 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d516c:	2c23      	cmp	r4, #35	; 0x23
   d516e:	bf8c      	ite	hi
   d5170:	2000      	movhi	r0, #0
   d5172:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5174:	bd70      	pop	{r4, r5, r6, pc}
   d5176:	bf00      	nop
   d5178:	2003e3d0 	.word	0x2003e3d0
   d517c:	2003e3d4 	.word	0x2003e3d4

000d5180 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5180:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5182:	b538      	push	{r3, r4, r5, lr}
   d5184:	4604      	mov	r4, r0
   d5186:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5188:	d80a      	bhi.n	d51a0 <pinMode+0x20>
   d518a:	29ff      	cmp	r1, #255	; 0xff
   d518c:	d008      	beq.n	d51a0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d518e:	f7ff ffc1 	bl	d5114 <pinAvailable>
   d5192:	b128      	cbz	r0, d51a0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5194:	4629      	mov	r1, r5
   d5196:	4620      	mov	r0, r4
}
   d5198:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d519c:	f7ff b8fa 	b.w	d4394 <HAL_Pin_Mode>
   d51a0:	bd38      	pop	{r3, r4, r5, pc}

000d51a2 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d51a2:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d51a4:	b510      	push	{r4, lr}
   d51a6:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d51a8:	bf9c      	itt	ls
   d51aa:	340e      	addls	r4, #14
   d51ac:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d51ae:	4620      	mov	r0, r4
   d51b0:	f7ff ffb0 	bl	d5114 <pinAvailable>
   d51b4:	b150      	cbz	r0, d51cc <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d51b6:	2103      	movs	r1, #3
   d51b8:	4620      	mov	r0, r4
   d51ba:	f7ff f8e3 	bl	d4384 <HAL_Validate_Pin_Function>
   d51be:	2803      	cmp	r0, #3
   d51c0:	d104      	bne.n	d51cc <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d51c2:	4620      	mov	r0, r4
}
   d51c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d51c8:	f7ff b8fc 	b.w	d43c4 <HAL_ADC_Read>
}
   d51cc:	2000      	movs	r0, #0
   d51ce:	bd10      	pop	{r4, pc}

000d51d0 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d51d0:	b538      	push	{r3, r4, r5, lr}
   d51d2:	4604      	mov	r4, r0
   d51d4:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d51d6:	f7ff ff9d 	bl	d5114 <pinAvailable>
   d51da:	b1f0      	cbz	r0, d521a <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d51dc:	2104      	movs	r1, #4
   d51de:	4620      	mov	r0, r4
   d51e0:	f7ff f8d0 	bl	d4384 <HAL_Validate_Pin_Function>
   d51e4:	2804      	cmp	r0, #4
   d51e6:	d105      	bne.n	d51f4 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d51e8:	b2a9      	uxth	r1, r5
   d51ea:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
   d51ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
   d51f0:	f7ff b8e0 	b.w	d43b4 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d51f4:	2102      	movs	r1, #2
   d51f6:	4620      	mov	r0, r4
   d51f8:	f7ff f8c4 	bl	d4384 <HAL_Validate_Pin_Function>
   d51fc:	2802      	cmp	r0, #2
   d51fe:	d10c      	bne.n	d521a <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d5200:	4620      	mov	r0, r4
   d5202:	f7ff f8cf 	bl	d43a4 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d5206:	2801      	cmp	r0, #1
   d5208:	d001      	beq.n	d520e <_Z11analogWritetm+0x3e>
   d520a:	2804      	cmp	r0, #4
   d520c:	d105      	bne.n	d521a <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d520e:	4629      	mov	r1, r5
   d5210:	4620      	mov	r0, r4
    }
}
   d5212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d5216:	f7ff b8dd 	b.w	d43d4 <HAL_PWM_Write_Ext>
   d521a:	bd38      	pop	{r3, r4, r5, pc}

000d521c <_Z17acquireWireBufferv>:
   d521c:	b570      	push	{r4, r5, r6, lr}
   d521e:	4604      	mov	r4, r0
   d5220:	2514      	movs	r5, #20
   d5222:	462a      	mov	r2, r5
   d5224:	4e09      	ldr	r6, [pc, #36]	; (d524c <_Z17acquireWireBufferv+0x30>)
   d5226:	2100      	movs	r1, #0
   d5228:	f000 f9bb 	bl	d55a2 <memset>
   d522c:	8025      	strh	r5, [r4, #0]
   d522e:	2520      	movs	r5, #32
   d5230:	4631      	mov	r1, r6
   d5232:	60a5      	str	r5, [r4, #8]
   d5234:	6125      	str	r5, [r4, #16]
   d5236:	4628      	mov	r0, r5
   d5238:	f000 f84f 	bl	d52da <_ZnajRKSt9nothrow_t>
   d523c:	4631      	mov	r1, r6
   d523e:	6060      	str	r0, [r4, #4]
   d5240:	4628      	mov	r0, r5
   d5242:	f000 f84a 	bl	d52da <_ZnajRKSt9nothrow_t>
   d5246:	60e0      	str	r0, [r4, #12]
   d5248:	4620      	mov	r0, r4
   d524a:	bd70      	pop	{r4, r5, r6, pc}
   d524c:	000d590c 	.word	0x000d590c

000d5250 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5250:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5252:	4d0e      	ldr	r5, [pc, #56]	; (d528c <_Z19__fetch_global_Wirev+0x3c>)
   d5254:	6829      	ldr	r1, [r5, #0]
   d5256:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d525a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d525c:	d113      	bne.n	d5286 <_Z19__fetch_global_Wirev+0x36>
   d525e:	4628      	mov	r0, r5
   d5260:	f7fe ff1d 	bl	d409e <__cxa_guard_acquire>
   d5264:	b178      	cbz	r0, d5286 <_Z19__fetch_global_Wirev+0x36>
   d5266:	a801      	add	r0, sp, #4
   d5268:	f7ff ffd8 	bl	d521c <_Z17acquireWireBufferv>
   d526c:	aa01      	add	r2, sp, #4
   d526e:	4621      	mov	r1, r4
   d5270:	4807      	ldr	r0, [pc, #28]	; (d5290 <_Z19__fetch_global_Wirev+0x40>)
   d5272:	f7ff fab7 	bl	d47e4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d5276:	4628      	mov	r0, r5
   d5278:	f7fe ff16 	bl	d40a8 <__cxa_guard_release>
   d527c:	4a05      	ldr	r2, [pc, #20]	; (d5294 <_Z19__fetch_global_Wirev+0x44>)
   d527e:	4906      	ldr	r1, [pc, #24]	; (d5298 <_Z19__fetch_global_Wirev+0x48>)
   d5280:	4803      	ldr	r0, [pc, #12]	; (d5290 <_Z19__fetch_global_Wirev+0x40>)
   d5282:	f000 f80b 	bl	d529c <__aeabi_atexit>
	return wire;
}
   d5286:	4802      	ldr	r0, [pc, #8]	; (d5290 <_Z19__fetch_global_Wirev+0x40>)
   d5288:	b007      	add	sp, #28
   d528a:	bd30      	pop	{r4, r5, pc}
   d528c:	2003e734 	.word	0x2003e734
   d5290:	2003e738 	.word	0x2003e738
   d5294:	2003e378 	.word	0x2003e378
   d5298:	000d478d 	.word	0x000d478d

000d529c <__aeabi_atexit>:
   d529c:	460b      	mov	r3, r1
   d529e:	4601      	mov	r1, r0
   d52a0:	4618      	mov	r0, r3
   d52a2:	f000 b965 	b.w	d5570 <__cxa_atexit>

000d52a6 <_ZdlPvj>:
   d52a6:	f7fe bef6 	b.w	d4096 <_ZdlPv>
	...

000d52ac <_ZSt15get_new_handlerv>:
   d52ac:	4b02      	ldr	r3, [pc, #8]	; (d52b8 <_ZSt15get_new_handlerv+0xc>)
   d52ae:	6818      	ldr	r0, [r3, #0]
   d52b0:	f3bf 8f5f 	dmb	sy
   d52b4:	4770      	bx	lr
   d52b6:	bf00      	nop
   d52b8:	2003e74c 	.word	0x2003e74c

000d52bc <_ZnwjRKSt9nothrow_t>:
   d52bc:	b510      	push	{r4, lr}
   d52be:	2800      	cmp	r0, #0
   d52c0:	bf14      	ite	ne
   d52c2:	4604      	movne	r4, r0
   d52c4:	2401      	moveq	r4, #1
   d52c6:	4620      	mov	r0, r4
   d52c8:	f7ff f9e0 	bl	d468c <malloc>
   d52cc:	b920      	cbnz	r0, d52d8 <_ZnwjRKSt9nothrow_t+0x1c>
   d52ce:	f7ff ffed 	bl	d52ac <_ZSt15get_new_handlerv>
   d52d2:	b108      	cbz	r0, d52d8 <_ZnwjRKSt9nothrow_t+0x1c>
   d52d4:	4780      	blx	r0
   d52d6:	e7f6      	b.n	d52c6 <_ZnwjRKSt9nothrow_t+0xa>
   d52d8:	bd10      	pop	{r4, pc}

000d52da <_ZnajRKSt9nothrow_t>:
   d52da:	f7ff bfef 	b.w	d52bc <_ZnwjRKSt9nothrow_t>
	...

000d52e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d52e0:	4b24      	ldr	r3, [pc, #144]	; (d5374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d52e2:	681a      	ldr	r2, [r3, #0]
   d52e4:	07d0      	lsls	r0, r2, #31
   d52e6:	bf5c      	itt	pl
   d52e8:	2201      	movpl	r2, #1
   d52ea:	601a      	strpl	r2, [r3, #0]
   d52ec:	4b22      	ldr	r3, [pc, #136]	; (d5378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d52ee:	681a      	ldr	r2, [r3, #0]
   d52f0:	07d1      	lsls	r1, r2, #31
   d52f2:	bf5c      	itt	pl
   d52f4:	2201      	movpl	r2, #1
   d52f6:	601a      	strpl	r2, [r3, #0]
   d52f8:	4b20      	ldr	r3, [pc, #128]	; (d537c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d52fa:	681a      	ldr	r2, [r3, #0]
   d52fc:	07d2      	lsls	r2, r2, #31
   d52fe:	bf5c      	itt	pl
   d5300:	2201      	movpl	r2, #1
   d5302:	601a      	strpl	r2, [r3, #0]
   d5304:	4b1e      	ldr	r3, [pc, #120]	; (d5380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5306:	681a      	ldr	r2, [r3, #0]
   d5308:	07d0      	lsls	r0, r2, #31
   d530a:	bf5c      	itt	pl
   d530c:	2201      	movpl	r2, #1
   d530e:	601a      	strpl	r2, [r3, #0]
   d5310:	4b1c      	ldr	r3, [pc, #112]	; (d5384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5312:	681a      	ldr	r2, [r3, #0]
   d5314:	07d1      	lsls	r1, r2, #31
   d5316:	bf5c      	itt	pl
   d5318:	2201      	movpl	r2, #1
   d531a:	601a      	strpl	r2, [r3, #0]
   d531c:	4b1a      	ldr	r3, [pc, #104]	; (d5388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d531e:	681a      	ldr	r2, [r3, #0]
   d5320:	07d2      	lsls	r2, r2, #31
   d5322:	bf5c      	itt	pl
   d5324:	2201      	movpl	r2, #1
   d5326:	601a      	strpl	r2, [r3, #0]
   d5328:	4b18      	ldr	r3, [pc, #96]	; (d538c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d532a:	681a      	ldr	r2, [r3, #0]
   d532c:	07d0      	lsls	r0, r2, #31
   d532e:	bf5c      	itt	pl
   d5330:	2201      	movpl	r2, #1
   d5332:	601a      	strpl	r2, [r3, #0]
   d5334:	4b16      	ldr	r3, [pc, #88]	; (d5390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5336:	681a      	ldr	r2, [r3, #0]
   d5338:	07d1      	lsls	r1, r2, #31
   d533a:	bf5c      	itt	pl
   d533c:	2201      	movpl	r2, #1
   d533e:	601a      	strpl	r2, [r3, #0]
   d5340:	4b14      	ldr	r3, [pc, #80]	; (d5394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5342:	681a      	ldr	r2, [r3, #0]
   d5344:	07d2      	lsls	r2, r2, #31
   d5346:	bf5c      	itt	pl
   d5348:	2201      	movpl	r2, #1
   d534a:	601a      	strpl	r2, [r3, #0]
   d534c:	4b12      	ldr	r3, [pc, #72]	; (d5398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d534e:	681a      	ldr	r2, [r3, #0]
   d5350:	07d0      	lsls	r0, r2, #31
   d5352:	bf5c      	itt	pl
   d5354:	2201      	movpl	r2, #1
   d5356:	601a      	strpl	r2, [r3, #0]
   d5358:	4b10      	ldr	r3, [pc, #64]	; (d539c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d535a:	681a      	ldr	r2, [r3, #0]
   d535c:	07d1      	lsls	r1, r2, #31
   d535e:	bf5c      	itt	pl
   d5360:	2201      	movpl	r2, #1
   d5362:	601a      	strpl	r2, [r3, #0]
   d5364:	4b0e      	ldr	r3, [pc, #56]	; (d53a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5366:	681a      	ldr	r2, [r3, #0]
   d5368:	07d2      	lsls	r2, r2, #31
   d536a:	bf5c      	itt	pl
   d536c:	2201      	movpl	r2, #1
   d536e:	601a      	strpl	r2, [r3, #0]
   d5370:	4770      	bx	lr
   d5372:	bf00      	nop
   d5374:	2003e77c 	.word	0x2003e77c
   d5378:	2003e778 	.word	0x2003e778
   d537c:	2003e774 	.word	0x2003e774
   d5380:	2003e770 	.word	0x2003e770
   d5384:	2003e76c 	.word	0x2003e76c
   d5388:	2003e768 	.word	0x2003e768
   d538c:	2003e764 	.word	0x2003e764
   d5390:	2003e760 	.word	0x2003e760
   d5394:	2003e75c 	.word	0x2003e75c
   d5398:	2003e758 	.word	0x2003e758
   d539c:	2003e754 	.word	0x2003e754
   d53a0:	2003e750 	.word	0x2003e750

000d53a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d53a4:	4b18      	ldr	r3, [pc, #96]	; (d5408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d53a6:	681a      	ldr	r2, [r3, #0]
   d53a8:	07d1      	lsls	r1, r2, #31
   d53aa:	bf5c      	itt	pl
   d53ac:	2201      	movpl	r2, #1
   d53ae:	601a      	strpl	r2, [r3, #0]
   d53b0:	4b16      	ldr	r3, [pc, #88]	; (d540c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d53b2:	681a      	ldr	r2, [r3, #0]
   d53b4:	07d2      	lsls	r2, r2, #31
   d53b6:	bf5c      	itt	pl
   d53b8:	2201      	movpl	r2, #1
   d53ba:	601a      	strpl	r2, [r3, #0]
   d53bc:	4b14      	ldr	r3, [pc, #80]	; (d5410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d53be:	681a      	ldr	r2, [r3, #0]
   d53c0:	07d0      	lsls	r0, r2, #31
   d53c2:	bf5c      	itt	pl
   d53c4:	2201      	movpl	r2, #1
   d53c6:	601a      	strpl	r2, [r3, #0]
   d53c8:	4b12      	ldr	r3, [pc, #72]	; (d5414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d53ca:	681a      	ldr	r2, [r3, #0]
   d53cc:	07d1      	lsls	r1, r2, #31
   d53ce:	bf5c      	itt	pl
   d53d0:	2201      	movpl	r2, #1
   d53d2:	601a      	strpl	r2, [r3, #0]
   d53d4:	4b10      	ldr	r3, [pc, #64]	; (d5418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d53d6:	681a      	ldr	r2, [r3, #0]
   d53d8:	07d2      	lsls	r2, r2, #31
   d53da:	bf5c      	itt	pl
   d53dc:	2201      	movpl	r2, #1
   d53de:	601a      	strpl	r2, [r3, #0]
   d53e0:	4b0e      	ldr	r3, [pc, #56]	; (d541c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d53e2:	681a      	ldr	r2, [r3, #0]
   d53e4:	07d0      	lsls	r0, r2, #31
   d53e6:	bf5c      	itt	pl
   d53e8:	2201      	movpl	r2, #1
   d53ea:	601a      	strpl	r2, [r3, #0]
   d53ec:	4b0c      	ldr	r3, [pc, #48]	; (d5420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d53ee:	681a      	ldr	r2, [r3, #0]
   d53f0:	07d1      	lsls	r1, r2, #31
   d53f2:	bf5c      	itt	pl
   d53f4:	2201      	movpl	r2, #1
   d53f6:	601a      	strpl	r2, [r3, #0]
   d53f8:	4b0a      	ldr	r3, [pc, #40]	; (d5424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d53fa:	681a      	ldr	r2, [r3, #0]
   d53fc:	07d2      	lsls	r2, r2, #31
   d53fe:	bf5c      	itt	pl
   d5400:	2201      	movpl	r2, #1
   d5402:	601a      	strpl	r2, [r3, #0]
   d5404:	4770      	bx	lr
   d5406:	bf00      	nop
   d5408:	2003e79c 	.word	0x2003e79c
   d540c:	2003e798 	.word	0x2003e798
   d5410:	2003e794 	.word	0x2003e794
   d5414:	2003e790 	.word	0x2003e790
   d5418:	2003e78c 	.word	0x2003e78c
   d541c:	2003e788 	.word	0x2003e788
   d5420:	2003e784 	.word	0x2003e784
   d5424:	2003e780 	.word	0x2003e780

000d5428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5428:	4b18      	ldr	r3, [pc, #96]	; (d548c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d542a:	681a      	ldr	r2, [r3, #0]
   d542c:	07d1      	lsls	r1, r2, #31
   d542e:	bf5c      	itt	pl
   d5430:	2201      	movpl	r2, #1
   d5432:	601a      	strpl	r2, [r3, #0]
   d5434:	4b16      	ldr	r3, [pc, #88]	; (d5490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5436:	681a      	ldr	r2, [r3, #0]
   d5438:	07d2      	lsls	r2, r2, #31
   d543a:	bf5c      	itt	pl
   d543c:	2201      	movpl	r2, #1
   d543e:	601a      	strpl	r2, [r3, #0]
   d5440:	4b14      	ldr	r3, [pc, #80]	; (d5494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5442:	681a      	ldr	r2, [r3, #0]
   d5444:	07d0      	lsls	r0, r2, #31
   d5446:	bf5c      	itt	pl
   d5448:	2201      	movpl	r2, #1
   d544a:	601a      	strpl	r2, [r3, #0]
   d544c:	4b12      	ldr	r3, [pc, #72]	; (d5498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d544e:	681a      	ldr	r2, [r3, #0]
   d5450:	07d1      	lsls	r1, r2, #31
   d5452:	bf5c      	itt	pl
   d5454:	2201      	movpl	r2, #1
   d5456:	601a      	strpl	r2, [r3, #0]
   d5458:	4b10      	ldr	r3, [pc, #64]	; (d549c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d545a:	681a      	ldr	r2, [r3, #0]
   d545c:	07d2      	lsls	r2, r2, #31
   d545e:	bf5c      	itt	pl
   d5460:	2201      	movpl	r2, #1
   d5462:	601a      	strpl	r2, [r3, #0]
   d5464:	4b0e      	ldr	r3, [pc, #56]	; (d54a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5466:	681a      	ldr	r2, [r3, #0]
   d5468:	07d0      	lsls	r0, r2, #31
   d546a:	bf5c      	itt	pl
   d546c:	2201      	movpl	r2, #1
   d546e:	601a      	strpl	r2, [r3, #0]
   d5470:	4b0c      	ldr	r3, [pc, #48]	; (d54a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5472:	681a      	ldr	r2, [r3, #0]
   d5474:	07d1      	lsls	r1, r2, #31
   d5476:	bf5c      	itt	pl
   d5478:	2201      	movpl	r2, #1
   d547a:	601a      	strpl	r2, [r3, #0]
   d547c:	4b0a      	ldr	r3, [pc, #40]	; (d54a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d547e:	681a      	ldr	r2, [r3, #0]
   d5480:	07d2      	lsls	r2, r2, #31
   d5482:	bf5c      	itt	pl
   d5484:	2201      	movpl	r2, #1
   d5486:	601a      	strpl	r2, [r3, #0]
   d5488:	4770      	bx	lr
   d548a:	bf00      	nop
   d548c:	2003e7bc 	.word	0x2003e7bc
   d5490:	2003e7b8 	.word	0x2003e7b8
   d5494:	2003e7b4 	.word	0x2003e7b4
   d5498:	2003e7b0 	.word	0x2003e7b0
   d549c:	2003e7ac 	.word	0x2003e7ac
   d54a0:	2003e7a8 	.word	0x2003e7a8
   d54a4:	2003e7a4 	.word	0x2003e7a4
   d54a8:	2003e7a0 	.word	0x2003e7a0

000d54ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d54ac:	4b24      	ldr	r3, [pc, #144]	; (d5540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d54ae:	681a      	ldr	r2, [r3, #0]
   d54b0:	07d0      	lsls	r0, r2, #31
   d54b2:	bf5c      	itt	pl
   d54b4:	2201      	movpl	r2, #1
   d54b6:	601a      	strpl	r2, [r3, #0]
   d54b8:	4b22      	ldr	r3, [pc, #136]	; (d5544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d54ba:	681a      	ldr	r2, [r3, #0]
   d54bc:	07d1      	lsls	r1, r2, #31
   d54be:	bf5c      	itt	pl
   d54c0:	2201      	movpl	r2, #1
   d54c2:	601a      	strpl	r2, [r3, #0]
   d54c4:	4b20      	ldr	r3, [pc, #128]	; (d5548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d54c6:	681a      	ldr	r2, [r3, #0]
   d54c8:	07d2      	lsls	r2, r2, #31
   d54ca:	bf5c      	itt	pl
   d54cc:	2201      	movpl	r2, #1
   d54ce:	601a      	strpl	r2, [r3, #0]
   d54d0:	4b1e      	ldr	r3, [pc, #120]	; (d554c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d54d2:	681a      	ldr	r2, [r3, #0]
   d54d4:	07d0      	lsls	r0, r2, #31
   d54d6:	bf5c      	itt	pl
   d54d8:	2201      	movpl	r2, #1
   d54da:	601a      	strpl	r2, [r3, #0]
   d54dc:	4b1c      	ldr	r3, [pc, #112]	; (d5550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d54de:	681a      	ldr	r2, [r3, #0]
   d54e0:	07d1      	lsls	r1, r2, #31
   d54e2:	bf5c      	itt	pl
   d54e4:	2201      	movpl	r2, #1
   d54e6:	601a      	strpl	r2, [r3, #0]
   d54e8:	4b1a      	ldr	r3, [pc, #104]	; (d5554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d54ea:	681a      	ldr	r2, [r3, #0]
   d54ec:	07d2      	lsls	r2, r2, #31
   d54ee:	bf5c      	itt	pl
   d54f0:	2201      	movpl	r2, #1
   d54f2:	601a      	strpl	r2, [r3, #0]
   d54f4:	4b18      	ldr	r3, [pc, #96]	; (d5558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d54f6:	681a      	ldr	r2, [r3, #0]
   d54f8:	07d0      	lsls	r0, r2, #31
   d54fa:	bf5c      	itt	pl
   d54fc:	2201      	movpl	r2, #1
   d54fe:	601a      	strpl	r2, [r3, #0]
   d5500:	4b16      	ldr	r3, [pc, #88]	; (d555c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5502:	681a      	ldr	r2, [r3, #0]
   d5504:	07d1      	lsls	r1, r2, #31
   d5506:	bf5c      	itt	pl
   d5508:	2201      	movpl	r2, #1
   d550a:	601a      	strpl	r2, [r3, #0]
   d550c:	4b14      	ldr	r3, [pc, #80]	; (d5560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d550e:	681a      	ldr	r2, [r3, #0]
   d5510:	07d2      	lsls	r2, r2, #31
   d5512:	bf5c      	itt	pl
   d5514:	2201      	movpl	r2, #1
   d5516:	601a      	strpl	r2, [r3, #0]
   d5518:	4b12      	ldr	r3, [pc, #72]	; (d5564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d551a:	681a      	ldr	r2, [r3, #0]
   d551c:	07d0      	lsls	r0, r2, #31
   d551e:	bf5c      	itt	pl
   d5520:	2201      	movpl	r2, #1
   d5522:	601a      	strpl	r2, [r3, #0]
   d5524:	4b10      	ldr	r3, [pc, #64]	; (d5568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5526:	681a      	ldr	r2, [r3, #0]
   d5528:	07d1      	lsls	r1, r2, #31
   d552a:	bf5c      	itt	pl
   d552c:	2201      	movpl	r2, #1
   d552e:	601a      	strpl	r2, [r3, #0]
   d5530:	4b0e      	ldr	r3, [pc, #56]	; (d556c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5532:	681a      	ldr	r2, [r3, #0]
   d5534:	07d2      	lsls	r2, r2, #31
   d5536:	bf5c      	itt	pl
   d5538:	2201      	movpl	r2, #1
   d553a:	601a      	strpl	r2, [r3, #0]
   d553c:	4770      	bx	lr
   d553e:	bf00      	nop
   d5540:	2003e7ec 	.word	0x2003e7ec
   d5544:	2003e7e8 	.word	0x2003e7e8
   d5548:	2003e7e4 	.word	0x2003e7e4
   d554c:	2003e7e0 	.word	0x2003e7e0
   d5550:	2003e7dc 	.word	0x2003e7dc
   d5554:	2003e7d8 	.word	0x2003e7d8
   d5558:	2003e7d4 	.word	0x2003e7d4
   d555c:	2003e7d0 	.word	0x2003e7d0
   d5560:	2003e7cc 	.word	0x2003e7cc
   d5564:	2003e7c8 	.word	0x2003e7c8
   d5568:	2003e7c4 	.word	0x2003e7c4
   d556c:	2003e7c0 	.word	0x2003e7c0

000d5570 <__cxa_atexit>:
   d5570:	b510      	push	{r4, lr}
   d5572:	4c05      	ldr	r4, [pc, #20]	; (d5588 <__cxa_atexit+0x18>)
   d5574:	4613      	mov	r3, r2
   d5576:	b12c      	cbz	r4, d5584 <__cxa_atexit+0x14>
   d5578:	460a      	mov	r2, r1
   d557a:	4601      	mov	r1, r0
   d557c:	2002      	movs	r0, #2
   d557e:	f3af 8000 	nop.w
   d5582:	bd10      	pop	{r4, pc}
   d5584:	4620      	mov	r0, r4
   d5586:	bd10      	pop	{r4, pc}
   d5588:	00000000 	.word	0x00000000

000d558c <memcpy>:
   d558c:	b510      	push	{r4, lr}
   d558e:	1e43      	subs	r3, r0, #1
   d5590:	440a      	add	r2, r1
   d5592:	4291      	cmp	r1, r2
   d5594:	d004      	beq.n	d55a0 <memcpy+0x14>
   d5596:	f811 4b01 	ldrb.w	r4, [r1], #1
   d559a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d559e:	e7f8      	b.n	d5592 <memcpy+0x6>
   d55a0:	bd10      	pop	{r4, pc}

000d55a2 <memset>:
   d55a2:	4402      	add	r2, r0
   d55a4:	4603      	mov	r3, r0
   d55a6:	4293      	cmp	r3, r2
   d55a8:	d002      	beq.n	d55b0 <memset+0xe>
   d55aa:	f803 1b01 	strb.w	r1, [r3], #1
   d55ae:	e7fa      	b.n	d55a6 <memset+0x4>
   d55b0:	4770      	bx	lr
	...

000d55b4 <srand>:
   d55b4:	b538      	push	{r3, r4, r5, lr}
   d55b6:	4b12      	ldr	r3, [pc, #72]	; (d5600 <srand+0x4c>)
   d55b8:	681c      	ldr	r4, [r3, #0]
   d55ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d55bc:	4605      	mov	r5, r0
   d55be:	b9d3      	cbnz	r3, d55f6 <srand+0x42>
   d55c0:	2018      	movs	r0, #24
   d55c2:	f7ff f863 	bl	d468c <malloc>
   d55c6:	f243 330e 	movw	r3, #13070	; 0x330e
   d55ca:	63a0      	str	r0, [r4, #56]	; 0x38
   d55cc:	8003      	strh	r3, [r0, #0]
   d55ce:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d55d2:	8043      	strh	r3, [r0, #2]
   d55d4:	f241 2334 	movw	r3, #4660	; 0x1234
   d55d8:	8083      	strh	r3, [r0, #4]
   d55da:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d55de:	80c3      	strh	r3, [r0, #6]
   d55e0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d55e4:	8103      	strh	r3, [r0, #8]
   d55e6:	2305      	movs	r3, #5
   d55e8:	8143      	strh	r3, [r0, #10]
   d55ea:	230b      	movs	r3, #11
   d55ec:	8183      	strh	r3, [r0, #12]
   d55ee:	2201      	movs	r2, #1
   d55f0:	2300      	movs	r3, #0
   d55f2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d55f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d55f8:	2200      	movs	r2, #0
   d55fa:	611d      	str	r5, [r3, #16]
   d55fc:	615a      	str	r2, [r3, #20]
   d55fe:	bd38      	pop	{r3, r4, r5, pc}
   d5600:	2003e374 	.word	0x2003e374

000d5604 <strlen>:
   d5604:	4603      	mov	r3, r0
   d5606:	f813 2b01 	ldrb.w	r2, [r3], #1
   d560a:	2a00      	cmp	r2, #0
   d560c:	d1fb      	bne.n	d5606 <strlen+0x2>
   d560e:	1a18      	subs	r0, r3, r0
   d5610:	3801      	subs	r0, #1
   d5612:	4770      	bx	lr

000d5614 <dynalib_user>:
   d5614:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5624:	0000 0000 7953 7473 6d65 5220 6165 7964     ....System Ready
   d5634:	2e2e 002e 6559 6c6c 776f 6220 7475 6f74     ....Yellow butto
   d5644:	0a6e 4200 756c 2065 7562 7474 6e6f 000a     n..Blue button..
   d5654:	455a 4f52 6920 3d20 2520 2069 7241 6172     ZERO i = %i Arra
   d5664:	2079 6156 756c 3a65 2520 0a69 4f00 454e     y Value: %i..ONE
   d5674:	2020 2069 203d 6925 4120 7272 7961 5620       i = %i Array V
   d5684:	6c61 6575 203a 6925 000a 0000               alue: %i....

000d5690 <_ZTVN5spark13EthernetClassE>:
	...
   d5698:	476d 000d 4763 000d 4759 000d 474f 000d     mG..cG..YG..OG..
   d56a8:	4743 000d 4737 000d 472b 000d 4723 000d     CG..7G..+G..#G..
   d56b8:	4719 000d 470f 000d 4ae9 000d               .G...G...J..

000d56c4 <_ZTV7TwoWire>:
	...
   d56cc:	478d 000d 47d7 000d 47af 000d 478f 000d     .G...G...G...G..
   d56dc:	47b7 000d 47bf 000d 47c7 000d 47cf 000d     .G...G...G...G..

000d56ec <_ZTV9IPAddress>:
	...
   d56f4:	4821 000d 4811 000d 4813 000d 6162 6475     !H...H...H..baud
   d5704:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d5714:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d5724:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d5734:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d5744:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d5754:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d5764:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d5774:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d5784:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d5794:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d57a4:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
   d57b4:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   d57c4:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d57d4:	726f 7000 6e61 6369 6100 6c6c 0000 0000     or.panic.all....

000d57e4 <_ZTVN5spark9MeshClassE>:
	...
   d57ec:	4963 000d 4959 000d 494f 000d 4945 000d     cI..YI..OI..EI..
   d57fc:	4939 000d 492d 000d 4921 000d 4919 000d     9I..-I..!I...I..
   d580c:	490f 000d 4905 000d 4ae9 000d               .I...I...J..

000d5818 <_ZTVN5spark12NetworkClassE>:
	...
   d5820:	4a81 000d 4a8b 000d 4a95 000d 4a9f 000d     .J...J...J...J..
   d5830:	4aa9 000d 4ab5 000d 4ac1 000d 4acd 000d     .J...J...J...J..
   d5840:	4ad5 000d 4adf 000d 4ae9 000d 005a 2b25     .J...J...J..Z.%+
   d5850:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   d5860:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   d5870:	6974 656d 0000 0000                         time....

000d5878 <_ZTV11USARTSerial>:
	...
   d5880:	4d75 000d 4dc5 000d 4dd3 000d 4bc9 000d     uM...M...M...K..
   d5890:	4d89 000d 4dab 000d 4d97 000d 4dbf 000d     .M...M...M...M..
   d58a0:	4d77 000d 4d7b 000d                         wM..{M..

000d58a8 <_ZTV9USBSerial>:
	...
   d58b0:	4e7d 000d 4ecd 000d 4edb 000d 4bc9 000d     }N...N...N...K..
   d58c0:	4eb9 000d 4e7f 000d 4e95 000d 4ec7 000d     .N...N...N...N..
   d58d0:	4eab 000d 4e79 000d                         .N..yN..

000d58d8 <_ZTVN5spark9WiFiClassE>:
	...
   d58e0:	4fe7 000d 4fdd 000d 4fd3 000d 4f89 000d     .O...O...O...O..
   d58f0:	4fc7 000d 4fbb 000d 4faf 000d 4fa7 000d     .O...O...O...O..
   d5900:	4f9d 000d 4f93 000d 4ae9 000d               .O...O...J..

000d590c <_ZSt7nothrow>:
   d590c:	0000 0000                                   ....

000d5910 <__sf_fake_stdin>:
	...

000d5930 <__sf_fake_stdout>:
	...

000d5950 <__sf_fake_stderr>:
	...
   d5970:	0043                                        C.

000d5972 <link_const_variable_data_end>:
	...

000d5974 <link_constructors_location>:
   d5974:	000d42c5 	.word	0x000d42c5
   d5978:	000d42fd 	.word	0x000d42fd
   d597c:	000d4301 	.word	0x000d4301
   d5980:	000d46d5 	.word	0x000d46d5
   d5984:	000d4779 	.word	0x000d4779
   d5988:	000d48f5 	.word	0x000d48f5
   d598c:	000d4a31 	.word	0x000d4a31
   d5990:	000d4bb5 	.word	0x000d4bb5
   d5994:	000d4cf5 	.word	0x000d4cf5
   d5998:	000d4d2d 	.word	0x000d4d2d
   d599c:	000d4d61 	.word	0x000d4d61
   d59a0:	000d4ff1 	.word	0x000d4ff1
   d59a4:	000d52e1 	.word	0x000d52e1
   d59a8:	000d53a5 	.word	0x000d53a5
   d59ac:	000d5429 	.word	0x000d5429
   d59b0:	000d54ad 	.word	0x000d54ad

000d59b4 <link_constructors_end>:
	...
