
/Users/christianc/Documents/IoT/Capstone/ReceiveTest/target/1.5.2/argon/ReceiveTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001a44  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5a60  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e128  000d5a64  0001e128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000065c  2003e194  2003e194  0002e194  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5ad0  000d5ad0  00025ad0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5af8  000d5af8  00025af8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000dc076  00000000  00000000  00025afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00010da6  00000000  00000000  00101b72  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001d2e1  00000000  00000000  00112918  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000023c8  00000000  00000000  0012fbf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000045d0  00000000  00000000  00131fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035923  00000000  00000000  00136591  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00028c23  00000000  00000000  0016beb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001088b0  00000000  00000000  00194ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c90c  00000000  00000000  0029d388  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fb0f 	bl	d5650 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fb14 	bl	d5666 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e128 	.word	0x2003e128
   d4048:	000d5a64 	.word	0x000d5a64
   d404c:	2003e194 	.word	0x2003e194
   d4050:	2003e194 	.word	0x2003e194
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 f8a3 	bl	d51a4 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d5a5c 	.word	0x000d5a5c
   d4080:	000d5a1c 	.word	0x000d5a1c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b830 	b.w	d40e8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f84b 	bl	d4124 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 b849 	b.w	d5128 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 bb79 	b.w	d478c <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 bb77 	b.w	d478c <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <_Z12receiveClickv>:
      //  Serial.printf("Blue button\n");
    }

}

void receiveClick() {
   d40b0:	b510      	push	{r4, lr}

  buttonState = !buttonState;
   d40b2:	4c07      	ldr	r4, [pc, #28]	; (d40d0 <_Z12receiveClickv+0x20>)
   d40b4:	7823      	ldrb	r3, [r4, #0]
   d40b6:	f083 0301 	eor.w	r3, r3, #1
   d40ba:	7023      	strb	r3, [r4, #0]
  Serial.printf("Button State: %i\n", buttonState);
   d40bc:	f000 ffb2 	bl	d5024 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d40c0:	7823      	ldrb	r3, [r4, #0]
   d40c2:	4a04      	ldr	r2, [pc, #16]	; (d40d4 <_Z12receiveClickv+0x24>)
   d40c4:	2100      	movs	r1, #0

}
   d40c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d40ca:	f000 be46 	b.w	d4d5a <_ZN5Print11printf_implEbPKcz>
   d40ce:	bf00      	nop
   d40d0:	2003e3c0 	.word	0x2003e3c0
   d40d4:	000d56ec 	.word	0x000d56ec

000d40d8 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40d8:	b510      	push	{r4, lr}
   d40da:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40dc:	6800      	ldr	r0, [r0, #0]
   d40de:	b108      	cbz	r0, d40e4 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40e0:	f000 fb54 	bl	d478c <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40e4:	4620      	mov	r0, r4
   d40e6:	bd10      	pop	{r4, pc}

000d40e8 <setup>:
int n;

bool buttonState;
bool printState;

void setup() {
   d40e8:	b510      	push	{r4, lr}

  Serial.begin(9600);
   d40ea:	f000 ff9b 	bl	d5024 <_Z16_fetch_usbserialv>
   d40ee:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40f2:	f000 ff8b 	bl	d500c <_ZN9USBSerial5beginEl>
  pinMode(anodePin, INPUT);
  pinMode(buttonPin, INPUT_PULLDOWN);

  receiveButton.attachClick(receiveClick);
   d40f6:	4c09      	ldr	r4, [pc, #36]	; (d411c <setup+0x34>)
bool printState;

void setup() {

  Serial.begin(9600);
  pinMode(anodePin, INPUT);
   d40f8:	2100      	movs	r1, #0
   d40fa:	2012      	movs	r0, #18
   d40fc:	f001 f8b4 	bl	d5268 <pinMode>
  pinMode(buttonPin, INPUT_PULLDOWN);
   d4100:	2103      	movs	r1, #3
   d4102:	2005      	movs	r0, #5
   d4104:	f001 f8b0 	bl	d5268 <pinMode>

  receiveButton.attachClick(receiveClick);
   d4108:	4620      	mov	r0, r4
   d410a:	4905      	ldr	r1, [pc, #20]	; (d4120 <setup+0x38>)
   d410c:	f000 f8df 	bl	d42ce <_ZN9OneButton11attachClickEPFvvE>
  receiveButton.setClickTicks(250);
   d4110:	4620      	mov	r0, r4
   d4112:	21fa      	movs	r1, #250	; 0xfa


}
   d4114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial.begin(9600);
  pinMode(anodePin, INPUT);
  pinMode(buttonPin, INPUT_PULLDOWN);

  receiveButton.attachClick(receiveClick);
  receiveButton.setClickTicks(250);
   d4118:	f000 b8d7 	b.w	d42ca <_ZN9OneButton13setClickTicksEi>
   d411c:	2003e348 	.word	0x2003e348
   d4120:	000d40b1 	.word	0x000d40b1

000d4124 <loop>:


}

void loop() {
   d4124:	b573      	push	{r0, r1, r4, r5, r6, lr}

  receiveButton.tick();
   d4126:	4830      	ldr	r0, [pc, #192]	; (d41e8 <loop+0xc4>)
  
  anodeRead = analogRead(anodePin);
  //Serial.printf("Anode: %i\n", anodeRead); //used for testing

  if (!timerState && anodeRead > triggerValue){ //if timer is not running and anode is triggered then run
   d4128:	4c30      	ldr	r4, [pc, #192]	; (d41ec <loop+0xc8>)

}

void loop() {

  receiveButton.tick();
   d412a:	f000 f954 	bl	d43d6 <_ZN9OneButton4tickEv>
  
  anodeRead = analogRead(anodePin);
   d412e:	2012      	movs	r0, #18
   d4130:	f001 f8be 	bl	d52b0 <analogRead>
   d4134:	4b2e      	ldr	r3, [pc, #184]	; (d41f0 <loop+0xcc>)
  //Serial.printf("Anode: %i\n", anodeRead); //used for testing

  if (!timerState && anodeRead > triggerValue){ //if timer is not running and anode is triggered then run
   d4136:	7822      	ldrb	r2, [r4, #0]

void loop() {

  receiveButton.tick();
  
  anodeRead = analogRead(anodePin);
   d4138:	6018      	str	r0, [r3, #0]
   d413a:	461d      	mov	r5, r3
  //Serial.printf("Anode: %i\n", anodeRead); //used for testing

  if (!timerState && anodeRead > triggerValue){ //if timer is not running and anode is triggered then run
   d413c:	b96a      	cbnz	r2, d415a <loop+0x36>
   d413e:	4b2d      	ldr	r3, [pc, #180]	; (d41f4 <loop+0xd0>)
   d4140:	681b      	ldr	r3, [r3, #0]
   d4142:	4298      	cmp	r0, r3
   d4144:	dd09      	ble.n	d415a <loop+0x36>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4146:	f000 f995 	bl	d4474 <HAL_Timer_Get_Milli_Seconds>
    startTime = millis();
   d414a:	4b2b      	ldr	r3, [pc, #172]	; (d41f8 <loop+0xd4>)
    timerState = true;
    i++; //sets i = to 1 right away
   d414c:	4a2b      	ldr	r2, [pc, #172]	; (d41fc <loop+0xd8>)
  
  anodeRead = analogRead(anodePin);
  //Serial.printf("Anode: %i\n", anodeRead); //used for testing

  if (!timerState && anodeRead > triggerValue){ //if timer is not running and anode is triggered then run
    startTime = millis();
   d414e:	6018      	str	r0, [r3, #0]
    timerState = true;
   d4150:	2301      	movs	r3, #1
   d4152:	7023      	strb	r3, [r4, #0]
    i++; //sets i = to 1 right away
   d4154:	6813      	ldr	r3, [r2, #0]
   d4156:	3301      	adds	r3, #1
   d4158:	6013      	str	r3, [r2, #0]
  }

  if (timerState && anodeRead < triggerValue){ // if timer is running and anode is not triggered then run
   d415a:	7823      	ldrb	r3, [r4, #0]
   d415c:	4c28      	ldr	r4, [pc, #160]	; (d4200 <loop+0xdc>)
   d415e:	2b00      	cmp	r3, #0
   d4160:	d031      	beq.n	d41c6 <loop+0xa2>
   d4162:	4b24      	ldr	r3, [pc, #144]	; (d41f4 <loop+0xd0>)
   d4164:	682a      	ldr	r2, [r5, #0]
   d4166:	681b      	ldr	r3, [r3, #0]
   d4168:	429a      	cmp	r2, r3
   d416a:	da2c      	bge.n	d41c6 <loop+0xa2>
   d416c:	f000 f982 	bl	d4474 <HAL_Timer_Get_Milli_Seconds>
   
    endTime = millis();
   d4170:	4b24      	ldr	r3, [pc, #144]	; (d4204 <loop+0xe0>)
   d4172:	6018      	str	r0, [r3, #0]
    timerState = false;
   d4174:	4b1d      	ldr	r3, [pc, #116]	; (d41ec <loop+0xc8>)
   d4176:	2500      	movs	r5, #0
   d4178:	701d      	strb	r5, [r3, #0]
    duration = endTime - startTime;
   d417a:	4b1f      	ldr	r3, [pc, #124]	; (d41f8 <loop+0xd4>)
   d417c:	681b      	ldr	r3, [r3, #0]
   d417e:	1ac0      	subs	r0, r0, r3
   d4180:	4b21      	ldr	r3, [pc, #132]	; (d4208 <loop+0xe4>)
   d4182:	6018      	str	r0, [r3, #0]

    if(duration > 3 && duration < 7){
   d4184:	1f03      	subs	r3, r0, #4
   d4186:	2b02      	cmp	r3, #2
   d4188:	d80b      	bhi.n	d41a2 <loop+0x7e>

      array[i] = 0;
   d418a:	4e1c      	ldr	r6, [pc, #112]	; (d41fc <loop+0xd8>)
   d418c:	6833      	ldr	r3, [r6, #0]
   d418e:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
      Serial.printf("ZERO i = %i Array Value: %i\n", i, array[i]);
   d4192:	f000 ff47 	bl	d5024 <_Z16_fetch_usbserialv>
   d4196:	6833      	ldr	r3, [r6, #0]
   d4198:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   d419c:	9200      	str	r2, [sp, #0]
   d419e:	4a1b      	ldr	r2, [pc, #108]	; (d420c <loop+0xe8>)
   d41a0:	e00e      	b.n	d41c0 <loop+0x9c>

    }
    else if(duration > 8 && duration < 12){
   d41a2:	3809      	subs	r0, #9
   d41a4:	2802      	cmp	r0, #2
   d41a6:	d80e      	bhi.n	d41c6 <loop+0xa2>

      array[i] = 1;
   d41a8:	4e14      	ldr	r6, [pc, #80]	; (d41fc <loop+0xd8>)
   d41aa:	6833      	ldr	r3, [r6, #0]
   d41ac:	2201      	movs	r2, #1
   d41ae:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
      Serial.printf("ONE  i = %i Array Value: %i\n", i, array[i]);
   d41b2:	f000 ff37 	bl	d5024 <_Z16_fetch_usbserialv>
   d41b6:	6833      	ldr	r3, [r6, #0]
   d41b8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   d41bc:	9200      	str	r2, [sp, #0]
   d41be:	4a14      	ldr	r2, [pc, #80]	; (d4210 <loop+0xec>)
   d41c0:	4629      	mov	r1, r5
   d41c2:	f000 fdca 	bl	d4d5a <_ZN5Print11printf_implEbPKcz>
    }
  }

    bitZero = array[1];
   d41c6:	4b13      	ldr	r3, [pc, #76]	; (d4214 <loop+0xf0>)
   d41c8:	6862      	ldr	r2, [r4, #4]
   d41ca:	601a      	str	r2, [r3, #0]
    bitOne = array[2];
   d41cc:	4b12      	ldr	r3, [pc, #72]	; (d4218 <loop+0xf4>)
   d41ce:	68a2      	ldr	r2, [r4, #8]
   d41d0:	601a      	str	r2, [r3, #0]
    bitTwo = array[3];
   d41d2:	4b12      	ldr	r3, [pc, #72]	; (d421c <loop+0xf8>)
   d41d4:	68e2      	ldr	r2, [r4, #12]
   d41d6:	601a      	str	r2, [r3, #0]
    bitThree = array[4];
   d41d8:	4b11      	ldr	r3, [pc, #68]	; (d4220 <loop+0xfc>)
   d41da:	6922      	ldr	r2, [r4, #16]
   d41dc:	601a      	str	r2, [r3, #0]
    bitFour = array[5];
   d41de:	6962      	ldr	r2, [r4, #20]
   d41e0:	4b10      	ldr	r3, [pc, #64]	; (d4224 <loop+0x100>)
   d41e2:	601a      	str	r2, [r3, #0]
    }
    else if(bitZero == 1 && bitOne == 0 && bitTwo == 1 && bitThree == 0 && bitFour == 0){
      //  Serial.printf("Blue button\n");
    }

}
   d41e4:	b002      	add	sp, #8
   d41e6:	bd70      	pop	{r4, r5, r6, pc}
   d41e8:	2003e348 	.word	0x2003e348
   d41ec:	2003e3b8 	.word	0x2003e3b8
   d41f0:	2003e19c 	.word	0x2003e19c
   d41f4:	2003e128 	.word	0x2003e128
   d41f8:	2003e3c8 	.word	0x2003e3c8
   d41fc:	2003e3b0 	.word	0x2003e3b0
   d4200:	2003e1a0 	.word	0x2003e1a0
   d4204:	2003e344 	.word	0x2003e344
   d4208:	2003e340 	.word	0x2003e340
   d420c:	000d56fe 	.word	0x000d56fe
   d4210:	000d571b 	.word	0x000d571b
   d4214:	2003e3c4 	.word	0x2003e3c4
   d4218:	2003e330 	.word	0x2003e330
   d421c:	2003e3b4 	.word	0x2003e3b4
   d4220:	2003e3bc 	.word	0x2003e3bc
   d4224:	2003e198 	.word	0x2003e198

000d4228 <_GLOBAL__sub_I_SystemMode>:
void receiveClick() {

  buttonState = !buttonState;
  Serial.printf("Button State: %i\n", buttonState);

}
   d4228:	b570      	push	{r4, r5, r6, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d422a:	4c0d      	ldr	r4, [pc, #52]	; (d4260 <_GLOBAL__sub_I_SystemMode+0x38>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d422c:	f000 f92a 	bl	d4484 <HAL_Pin_Map>
   d4230:	2500      	movs	r5, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4232:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4236:	2002      	movs	r0, #2
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4238:	8163      	strh	r3, [r4, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d423a:	6025      	str	r5, [r4, #0]
   d423c:	80a5      	strh	r5, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d423e:	71a5      	strb	r5, [r4, #6]
   d4240:	8125      	strh	r5, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4242:	f000 fa27 	bl	d4694 <set_system_mode>
 * Description: LiFi Receiver
 * Author: Christian Chavez
 * Date:
 */

SYSTEM_MODE(SEMI_AUTOMATIC);
   d4246:	4a07      	ldr	r2, [pc, #28]	; (d4264 <_GLOBAL__sub_I_SystemMode+0x3c>)
   d4248:	4907      	ldr	r1, [pc, #28]	; (d4268 <_GLOBAL__sub_I_SystemMode+0x40>)
   d424a:	4620      	mov	r0, r4
   d424c:	f001 f888 	bl	d5360 <__aeabi_atexit>


const int anodePin = A1;
const int buttonPin = D5;

OneButton receiveButton(buttonPin, false, false);
   d4250:	462b      	mov	r3, r5
   d4252:	462a      	mov	r2, r5
   d4254:	2105      	movs	r1, #5
   d4256:	4805      	ldr	r0, [pc, #20]	; (d426c <_GLOBAL__sub_I_SystemMode+0x44>)
void receiveClick() {

  buttonState = !buttonState;
  Serial.printf("Button State: %i\n", buttonState);

}
   d4258:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}


const int anodePin = A1;
const int buttonPin = D5;

OneButton receiveButton(buttonPin, false, false);
   d425c:	f000 b808 	b.w	d4270 <_ZN9OneButtonC1Eibb>
   d4260:	2003e334 	.word	0x2003e334
   d4264:	2003e194 	.word	0x2003e194
   d4268:	000d40d9 	.word	0x000d40d9
   d426c:	2003e348 	.word	0x2003e348

000d4270 <_ZN9OneButtonC1Eibb>:
 * Initialize the OneButton library.
 * @param pin The pin to be used for input from a momentary button.
 * @param activeLow Set to true when the input level is LOW when the button is pressed, Default is true.
 * @param pullupActive Activate the internal pullup when available. Default is true.
 */
OneButton::OneButton(int pin, boolean activeLow, bool pullupActive)
   d4270:	b538      	push	{r3, r4, r5, lr}
   d4272:	4604      	mov	r4, r0
   d4274:	4608      	mov	r0, r1
   d4276:	2132      	movs	r1, #50	; 0x32
   d4278:	6061      	str	r1, [r4, #4]
   d427a:	f44f 7116 	mov.w	r1, #600	; 0x258
   d427e:	2500      	movs	r5, #0
   d4280:	60a1      	str	r1, [r4, #8]
   d4282:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4286:	60e1      	str	r1, [r4, #12]
   d4288:	7525      	strb	r5, [r4, #20]
   d428a:	61a5      	str	r5, [r4, #24]
   d428c:	61e5      	str	r5, [r4, #28]
   d428e:	6225      	str	r5, [r4, #32]
   d4290:	6265      	str	r5, [r4, #36]	; 0x24
   d4292:	62a5      	str	r5, [r4, #40]	; 0x28
   d4294:	62e5      	str	r5, [r4, #44]	; 0x2c
   d4296:	6325      	str	r5, [r4, #48]	; 0x30
   d4298:	6365      	str	r5, [r4, #52]	; 0x34
   d429a:	63a5      	str	r5, [r4, #56]	; 0x38
   d429c:	63e5      	str	r5, [r4, #60]	; 0x3c
   d429e:	6425      	str	r5, [r4, #64]	; 0x40
   d42a0:	6465      	str	r5, [r4, #68]	; 0x44
   d42a2:	64a5      	str	r5, [r4, #72]	; 0x48
   d42a4:	6525      	str	r5, [r4, #80]	; 0x50
   d42a6:	6565      	str	r5, [r4, #84]	; 0x54
   d42a8:	65a5      	str	r5, [r4, #88]	; 0x58
   d42aa:	65e5      	str	r5, [r4, #92]	; 0x5c
{
  // OneButton();
  _pin = pin;
   d42ac:	6020      	str	r0, [r4, #0]

  if (activeLow) {
   d42ae:	b10a      	cbz	r2, d42b4 <_ZN9OneButtonC1Eibb+0x44>
    // the button connects the input pin to GND when pressed.
    _buttonPressed = LOW;
   d42b0:	6125      	str	r5, [r4, #16]
   d42b2:	e001      	b.n	d42b8 <_ZN9OneButtonC1Eibb+0x48>

  } else {
    // the button connects the input pin to VCC when pressed.
    _buttonPressed = HIGH;
   d42b4:	2201      	movs	r2, #1
   d42b6:	6122      	str	r2, [r4, #16]
   d42b8:	b280      	uxth	r0, r0
  } // if

  if (pullupActive) {
   d42ba:	b10b      	cbz	r3, d42c0 <_ZN9OneButtonC1Eibb+0x50>
    // use the given pin as input and activate internal PULLUP resistor.
    pinMode(pin, INPUT_PULLUP);
   d42bc:	2102      	movs	r1, #2
   d42be:	e000      	b.n	d42c2 <_ZN9OneButtonC1Eibb+0x52>
  } else {
    // use the given pin as input
    pinMode(pin, INPUT);
   d42c0:	4619      	mov	r1, r3
   d42c2:	f000 ffd1 	bl	d5268 <pinMode>
  } // if
} // OneButton
   d42c6:	4620      	mov	r0, r4
   d42c8:	bd38      	pop	{r3, r4, r5, pc}

000d42ca <_ZN9OneButton13setClickTicksEi>:

// explicitly set the number of millisec that have to pass by before a click is
// detected.
void OneButton::setClickTicks(int ticks)
{
  _clickTicks = ticks;
   d42ca:	6081      	str	r1, [r0, #8]
   d42cc:	4770      	bx	lr

000d42ce <_ZN9OneButton11attachClickEPFvvE>:


// save function for click event
void OneButton::attachClick(callbackFunction newFunction)
{
  _clickFunc = newFunction;
   d42ce:	6181      	str	r1, [r0, #24]
   d42d0:	4770      	bx	lr

000d42d2 <_ZN9OneButton4tickEb>:

/**
 * @brief Advance the finite state machine (FSM) using the given level.
 */
void OneButton::tick(bool activeLevel)
{
   d42d2:	b570      	push	{r4, r5, r6, lr}
   d42d4:	4604      	mov	r4, r0
   d42d6:	460d      	mov	r5, r1
   d42d8:	f000 f8cc 	bl	d4474 <HAL_Timer_Get_Milli_Seconds>
  unsigned long now = millis(); // current (relative) time in msecs.

  // Implementation of the state machine

  if (_state == 0) { // waiting for menu pin being pressed.
   d42dc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   d42de:	b91b      	cbnz	r3, d42e8 <_ZN9OneButton4tickEb+0x16>
    if (activeLevel) {
   d42e0:	2d00      	cmp	r5, #0
   d42e2:	d077      	beq.n	d43d4 <_ZN9OneButton4tickEb+0x102>
      _state = 1; // step to state 1
   d42e4:	2301      	movs	r3, #1
   d42e6:	e047      	b.n	d4378 <_ZN9OneButton4tickEb+0xa6>
      _startTime = now; // remember starting time
    } // if

  } else if (_state == 1) { // waiting for menu pin being released.
   d42e8:	2b01      	cmp	r3, #1
   d42ea:	d12a      	bne.n	d4342 <_ZN9OneButton4tickEb+0x70>
   d42ec:	6e22      	ldr	r2, [r4, #96]	; 0x60

    if ((!activeLevel) &&
   d42ee:	1a82      	subs	r2, r0, r2
   d42f0:	b945      	cbnz	r5, d4304 <_ZN9OneButton4tickEb+0x32>
   d42f2:	6863      	ldr	r3, [r4, #4]
   d42f4:	429a      	cmp	r2, r3
   d42f6:	d201      	bcs.n	d42fc <_ZN9OneButton4tickEb+0x2a>
        ((unsigned long)(now - _startTime) < _debounceTicks)) {
      // button was released to quickly so I assume some debouncing.
      // go back to state 0 without calling a function.
      _state = 0;
   d42f8:	2300      	movs	r3, #0
   d42fa:	e01a      	b.n	d4332 <_ZN9OneButton4tickEb+0x60>

    } else if (!activeLevel) {
      _state = 2; // step to state 2
   d42fc:	2302      	movs	r3, #2
   d42fe:	65e3      	str	r3, [r4, #92]	; 0x5c
      _stopTime = now; // remember stopping time
   d4300:	6660      	str	r0, [r4, #100]	; 0x64
   d4302:	bd70      	pop	{r4, r5, r6, pc}

    } else if ((activeLevel) &&
   d4304:	68e1      	ldr	r1, [r4, #12]
   d4306:	428a      	cmp	r2, r1
   d4308:	d915      	bls.n	d4336 <_ZN9OneButton4tickEb+0x64>
               ((unsigned long)(now - _startTime) > _pressTicks)) {
      _stopTime = now; // remember stopping time
      _isLongPressed = true; // Keep track of long press state
   d430a:	7523      	strb	r3, [r4, #20]
      if (_pressFunc)
   d430c:	6b23      	ldr	r3, [r4, #48]	; 0x30
      _state = 2; // step to state 2
      _stopTime = now; // remember stopping time

    } else if ((activeLevel) &&
               ((unsigned long)(now - _startTime) > _pressTicks)) {
      _stopTime = now; // remember stopping time
   d430e:	6660      	str	r0, [r4, #100]	; 0x64
      _isLongPressed = true; // Keep track of long press state
      if (_pressFunc)
   d4310:	b103      	cbz	r3, d4314 <_ZN9OneButton4tickEb+0x42>
        _pressFunc();
   d4312:	4798      	blx	r3
      if (_longPressStartFunc)
   d4314:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d4316:	b103      	cbz	r3, d431a <_ZN9OneButton4tickEb+0x48>
        _longPressStartFunc();
   d4318:	4798      	blx	r3
      if (_paramLongPressStartFunc)
   d431a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d431c:	b10b      	cbz	r3, d4322 <_ZN9OneButton4tickEb+0x50>
        _paramLongPressStartFunc(_longPressStartFuncParam);
   d431e:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d4320:	4798      	blx	r3
      if (_duringLongPressFunc)
   d4322:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d4324:	b103      	cbz	r3, d4328 <_ZN9OneButton4tickEb+0x56>
        _duringLongPressFunc();
   d4326:	4798      	blx	r3
      if (_paramDuringLongPressFunc)
   d4328:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d432a:	b10b      	cbz	r3, d4330 <_ZN9OneButton4tickEb+0x5e>
        _paramDuringLongPressFunc(_duringLongPressFuncParam);
   d432c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   d432e:	4798      	blx	r3
      _state = 6; // step to state 6
   d4330:	2306      	movs	r3, #6
   d4332:	65e3      	str	r3, [r4, #92]	; 0x5c
   d4334:	bd70      	pop	{r4, r5, r6, pc}
    } else {
      // Button was pressed down. wait. Stay in this state.
      // if a pressStart event is registered, call it:
      if (_pressStartFunc)
   d4336:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d4338:	2b00      	cmp	r3, #0
   d433a:	d04b      	beq.n	d43d4 <_ZN9OneButton4tickEb+0x102>
      if (_paramDuringLongPressFunc)
        _paramDuringLongPressFunc(_duringLongPressFuncParam);
    } // if

  } // if
} // OneButton.tick()
   d433c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      _state = 6; // step to state 6
    } else {
      // Button was pressed down. wait. Stay in this state.
      // if a pressStart event is registered, call it:
      if (_pressStartFunc)
        _pressStartFunc();
   d4340:	4718      	bx	r3
    } // if

  } else if (_state == 2) {
   d4342:	2b02      	cmp	r3, #2
   d4344:	d11b      	bne.n	d437e <_ZN9OneButton4tickEb+0xac>
    // waiting for menu pin being pressed the second time or timeout.
    if ((_doubleClickFunc == NULL && _paramDoubleClickFunc == NULL) ||
   d4346:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d4348:	b90b      	cbnz	r3, d434e <_ZN9OneButton4tickEb+0x7c>
   d434a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d434c:	b123      	cbz	r3, d4358 <_ZN9OneButton4tickEb+0x86>
   d434e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   d4350:	68a2      	ldr	r2, [r4, #8]
   d4352:	1ac3      	subs	r3, r0, r3
   d4354:	4293      	cmp	r3, r2
   d4356:	d907      	bls.n	d4368 <_ZN9OneButton4tickEb+0x96>
        (unsigned long)(now - _startTime) > _clickTicks) {
      // this was only a single short click
      if (_clickFunc)
   d4358:	69a3      	ldr	r3, [r4, #24]
   d435a:	b103      	cbz	r3, d435e <_ZN9OneButton4tickEb+0x8c>
        _clickFunc();
   d435c:	4798      	blx	r3
      if (_paramClickFunc)
   d435e:	69e3      	ldr	r3, [r4, #28]
   d4360:	2b00      	cmp	r3, #0
   d4362:	d0c9      	beq.n	d42f8 <_ZN9OneButton4tickEb+0x26>
        _paramClickFunc(_clickFuncParam);
   d4364:	6a20      	ldr	r0, [r4, #32]
   d4366:	e01a      	b.n	d439e <_ZN9OneButton4tickEb+0xcc>
      _state = 0; // restart.

    } else if ((activeLevel) &&
   d4368:	2d00      	cmp	r5, #0
   d436a:	d033      	beq.n	d43d4 <_ZN9OneButton4tickEb+0x102>
   d436c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   d436e:	6862      	ldr	r2, [r4, #4]
   d4370:	1ac3      	subs	r3, r0, r3
   d4372:	4293      	cmp	r3, r2
   d4374:	d92e      	bls.n	d43d4 <_ZN9OneButton4tickEb+0x102>
               ((unsigned long)(now - _stopTime) > _debounceTicks)) {
      _state = 3; // step to state 3
   d4376:	2303      	movs	r3, #3
   d4378:	65e3      	str	r3, [r4, #92]	; 0x5c
      _startTime = now; // remember starting time
   d437a:	6620      	str	r0, [r4, #96]	; 0x60
   d437c:	bd70      	pop	{r4, r5, r6, pc}
    } // if

  } else if (_state == 3) { // waiting for menu pin being released finally.
   d437e:	2b03      	cmp	r3, #3
   d4380:	d10f      	bne.n	d43a2 <_ZN9OneButton4tickEb+0xd0>
    // Stay here for at least _debounceTicks because else we might end up in
    // state 1 if the button bounces for too long.
    if ((!activeLevel) &&
   d4382:	bb3d      	cbnz	r5, d43d4 <_ZN9OneButton4tickEb+0x102>
   d4384:	6e23      	ldr	r3, [r4, #96]	; 0x60
   d4386:	6862      	ldr	r2, [r4, #4]
   d4388:	1ac3      	subs	r3, r0, r3
   d438a:	4293      	cmp	r3, r2
   d438c:	d922      	bls.n	d43d4 <_ZN9OneButton4tickEb+0x102>
        ((unsigned long)(now - _startTime) > _debounceTicks)) {
      _stopTime = now; // remember stopping time
      // this was a 2 click sequence.
      if (_doubleClickFunc)
   d438e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  } else if (_state == 3) { // waiting for menu pin being released finally.
    // Stay here for at least _debounceTicks because else we might end up in
    // state 1 if the button bounces for too long.
    if ((!activeLevel) &&
        ((unsigned long)(now - _startTime) > _debounceTicks)) {
      _stopTime = now; // remember stopping time
   d4390:	6660      	str	r0, [r4, #100]	; 0x64
      // this was a 2 click sequence.
      if (_doubleClickFunc)
   d4392:	b103      	cbz	r3, d4396 <_ZN9OneButton4tickEb+0xc4>
        _doubleClickFunc();
   d4394:	4798      	blx	r3
      if (_paramDoubleClickFunc)
   d4396:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d4398:	2b00      	cmp	r3, #0
   d439a:	d0ad      	beq.n	d42f8 <_ZN9OneButton4tickEb+0x26>
        _paramDoubleClickFunc(_doubleClickFuncParam);
   d439c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   d439e:	4798      	blx	r3
   d43a0:	e7aa      	b.n	d42f8 <_ZN9OneButton4tickEb+0x26>
      _state = 0; // restart.
    } // if

  } else if (_state == 6) {
   d43a2:	2b06      	cmp	r3, #6
   d43a4:	d116      	bne.n	d43d4 <_ZN9OneButton4tickEb+0x102>
    // waiting for menu pin being release after long press.
    if (!activeLevel) {
   d43a6:	b94d      	cbnz	r5, d43bc <_ZN9OneButton4tickEb+0xea>
      _isLongPressed = false; // Keep track of long press state
      _stopTime = now; // remember stopping time
      if (_longPressStopFunc)
   d43a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    } // if

  } else if (_state == 6) {
    // waiting for menu pin being release after long press.
    if (!activeLevel) {
      _isLongPressed = false; // Keep track of long press state
   d43aa:	7525      	strb	r5, [r4, #20]
      _stopTime = now; // remember stopping time
   d43ac:	6660      	str	r0, [r4, #100]	; 0x64
      if (_longPressStopFunc)
   d43ae:	b103      	cbz	r3, d43b2 <_ZN9OneButton4tickEb+0xe0>
        _longPressStopFunc();
   d43b0:	4798      	blx	r3
      if (_paramLongPressStopFunc)
   d43b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   d43b4:	2b00      	cmp	r3, #0
   d43b6:	d09f      	beq.n	d42f8 <_ZN9OneButton4tickEb+0x26>
        _paramLongPressStopFunc(_longPressStopFuncParam);
   d43b8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d43ba:	e7f0      	b.n	d439e <_ZN9OneButton4tickEb+0xcc>
      _state = 0; // restart.
    } else {
      // button is being long pressed
      _stopTime = now; // remember stopping time
      _isLongPressed = true; // Keep track of long press state
   d43bc:	2301      	movs	r3, #1
   d43be:	7523      	strb	r3, [r4, #20]
      if (_duringLongPressFunc)
   d43c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
      if (_paramLongPressStopFunc)
        _paramLongPressStopFunc(_longPressStopFuncParam);
      _state = 0; // restart.
    } else {
      // button is being long pressed
      _stopTime = now; // remember stopping time
   d43c2:	6660      	str	r0, [r4, #100]	; 0x64
      _isLongPressed = true; // Keep track of long press state
      if (_duringLongPressFunc)
   d43c4:	b103      	cbz	r3, d43c8 <_ZN9OneButton4tickEb+0xf6>
        _duringLongPressFunc();
   d43c6:	4798      	blx	r3
      if (_paramDuringLongPressFunc)
   d43c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d43ca:	b11b      	cbz	r3, d43d4 <_ZN9OneButton4tickEb+0x102>
        _paramDuringLongPressFunc(_duringLongPressFuncParam);
   d43cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    } // if

  } // if
} // OneButton.tick()
   d43ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      _stopTime = now; // remember stopping time
      _isLongPressed = true; // Keep track of long press state
      if (_duringLongPressFunc)
        _duringLongPressFunc();
      if (_paramDuringLongPressFunc)
        _paramDuringLongPressFunc(_duringLongPressFuncParam);
   d43d2:	4718      	bx	r3
   d43d4:	bd70      	pop	{r4, r5, r6, pc}

000d43d6 <_ZN9OneButton4tickEv>:
/**
 * @brief Check input of the configured pin and then advance the finite state
 * machine (FSM).
 */
void OneButton::tick(void)
{
   d43d6:	b510      	push	{r4, lr}
   d43d8:	4604      	mov	r4, r0
  if (_pin >= 0) {
   d43da:	6800      	ldr	r0, [r0, #0]
   d43dc:	2800      	cmp	r0, #0
   d43de:	db0b      	blt.n	d43f8 <_ZN9OneButton4tickEv+0x22>
    tick(digitalRead(_pin) == _buttonPressed);
   d43e0:	b280      	uxth	r0, r0
   d43e2:	f000 ff52 	bl	d528a <digitalRead>
   d43e6:	6921      	ldr	r1, [r4, #16]
   d43e8:	1a0b      	subs	r3, r1, r0
   d43ea:	4259      	negs	r1, r3
   d43ec:	4620      	mov	r0, r4
   d43ee:	4159      	adcs	r1, r3
  }
}
   d43f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * machine (FSM).
 */
void OneButton::tick(void)
{
  if (_pin >= 0) {
    tick(digitalRead(_pin) == _buttonPressed);
   d43f4:	f7ff bf6d 	b.w	d42d2 <_ZN9OneButton4tickEb>
   d43f8:	bd10      	pop	{r4, pc}

000d43fa <_GLOBAL__sub_I__ZN9OneButtonC2Ev>:
   d43fa:	f000 b843 	b.w	d4484 <HAL_Pin_Map>
	...

000d4400 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   d4400:	b508      	push	{r3, lr}
   d4402:	f000 f83f 	bl	d4484 <HAL_Pin_Map>
  #define pinHI(_pin) (PIN_MAP2[_pin].gpio_peripheral->BSRRL = PIN_MAP2[_pin].gpio_pin)
#elif (PLATFORM_ID == 12) || (PLATFORM_ID == 13) || (PLATFORM_ID == 14) // Argon (12), Boron (13), Xenon (14)
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "pinmap_impl.h"
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d4406:	f000 f83d 	bl	d4484 <HAL_Pin_Map>
   d440a:	4b01      	ldr	r3, [pc, #4]	; (d4410 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
   d440c:	6018      	str	r0, [r3, #0]
   d440e:	bd08      	pop	{r3, pc}
   d4410:	2003e3cc 	.word	0x2003e3cc

000d4414 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4414:	b508      	push	{r3, lr}
   d4416:	4b02      	ldr	r3, [pc, #8]	; (d4420 <os_thread_is_current+0xc>)
   d4418:	681b      	ldr	r3, [r3, #0]
   d441a:	689b      	ldr	r3, [r3, #8]
   d441c:	9301      	str	r3, [sp, #4]
   d441e:	bd08      	pop	{r3, pc}
   d4420:	00030248 	.word	0x00030248

000d4424 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4424:	b508      	push	{r3, lr}
   d4426:	4b02      	ldr	r3, [pc, #8]	; (d4430 <os_thread_join+0xc>)
   d4428:	681b      	ldr	r3, [r3, #0]
   d442a:	691b      	ldr	r3, [r3, #16]
   d442c:	9301      	str	r3, [sp, #4]
   d442e:	bd08      	pop	{r3, pc}
   d4430:	00030248 	.word	0x00030248

000d4434 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4434:	b508      	push	{r3, lr}
   d4436:	4b02      	ldr	r3, [pc, #8]	; (d4440 <os_thread_cleanup+0xc>)
   d4438:	681b      	ldr	r3, [r3, #0]
   d443a:	695b      	ldr	r3, [r3, #20]
   d443c:	9301      	str	r3, [sp, #4]
   d443e:	bd08      	pop	{r3, pc}
   d4440:	00030248 	.word	0x00030248

000d4444 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4444:	b508      	push	{r3, lr}
   d4446:	4b02      	ldr	r3, [pc, #8]	; (d4450 <os_mutex_recursive_create+0xc>)
   d4448:	681b      	ldr	r3, [r3, #0]
   d444a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d444c:	9301      	str	r3, [sp, #4]
   d444e:	bd08      	pop	{r3, pc}
   d4450:	00030248 	.word	0x00030248

000d4454 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4454:	b508      	push	{r3, lr}
   d4456:	4b02      	ldr	r3, [pc, #8]	; (d4460 <os_mutex_recursive_destroy+0xc>)
   d4458:	681b      	ldr	r3, [r3, #0]
   d445a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d445c:	9301      	str	r3, [sp, #4]
   d445e:	bd08      	pop	{r3, pc}
   d4460:	00030248 	.word	0x00030248

000d4464 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4464:	b508      	push	{r3, lr}
   d4466:	4b02      	ldr	r3, [pc, #8]	; (d4470 <HAL_RNG_GetRandomNumber+0xc>)
   d4468:	681b      	ldr	r3, [r3, #0]
   d446a:	685b      	ldr	r3, [r3, #4]
   d446c:	9301      	str	r3, [sp, #4]
   d446e:	bd08      	pop	{r3, pc}
   d4470:	00030218 	.word	0x00030218

000d4474 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4474:	b508      	push	{r3, lr}
   d4476:	4b02      	ldr	r3, [pc, #8]	; (d4480 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4478:	681b      	ldr	r3, [r3, #0]
   d447a:	695b      	ldr	r3, [r3, #20]
   d447c:	9301      	str	r3, [sp, #4]
   d447e:	bd08      	pop	{r3, pc}
   d4480:	00030218 	.word	0x00030218

000d4484 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4484:	b508      	push	{r3, lr}
   d4486:	4b02      	ldr	r3, [pc, #8]	; (d4490 <HAL_Pin_Map+0xc>)
   d4488:	681b      	ldr	r3, [r3, #0]
   d448a:	681b      	ldr	r3, [r3, #0]
   d448c:	9301      	str	r3, [sp, #4]
   d448e:	bd08      	pop	{r3, pc}
   d4490:	0003022c 	.word	0x0003022c

000d4494 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <HAL_Validate_Pin_Function+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	685b      	ldr	r3, [r3, #4]
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	0003022c 	.word	0x0003022c

000d44a4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <HAL_Pin_Mode+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	689b      	ldr	r3, [r3, #8]
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	0003022c 	.word	0x0003022c

000d44b4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <HAL_Get_Pin_Mode+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	68db      	ldr	r3, [r3, #12]
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	0003022c 	.word	0x0003022c

000d44c4 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <HAL_GPIO_Read+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	695b      	ldr	r3, [r3, #20]
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	0003022c 	.word	0x0003022c

000d44d4 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <HAL_ADC_Read+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	0003022c 	.word	0x0003022c

000d44e4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <HAL_I2C_Write_Data+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	6a1b      	ldr	r3, [r3, #32]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	00030228 	.word	0x00030228

000d44f4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <HAL_I2C_Available_Data+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	00030228 	.word	0x00030228

000d4504 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <HAL_I2C_Read_Data+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	00030228 	.word	0x00030228

000d4514 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <HAL_I2C_Peek_Data+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	00030228 	.word	0x00030228

000d4524 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b02      	ldr	r3, [pc, #8]	; (d4530 <HAL_I2C_Flush_Data+0xc>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d452c:	9301      	str	r3, [sp, #4]
   d452e:	bd08      	pop	{r3, pc}
   d4530:	00030228 	.word	0x00030228

000d4534 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4534:	b508      	push	{r3, lr}
   d4536:	4b02      	ldr	r3, [pc, #8]	; (d4540 <HAL_I2C_Is_Enabled+0xc>)
   d4538:	681b      	ldr	r3, [r3, #0]
   d453a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d453c:	9301      	str	r3, [sp, #4]
   d453e:	bd08      	pop	{r3, pc}
   d4540:	00030228 	.word	0x00030228

000d4544 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b02      	ldr	r3, [pc, #8]	; (d4550 <HAL_I2C_Init+0xc>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d454c:	9301      	str	r3, [sp, #4]
   d454e:	bd08      	pop	{r3, pc}
   d4550:	00030228 	.word	0x00030228

000d4554 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b02      	ldr	r3, [pc, #8]	; (d4560 <inet_inet_ntop+0xc>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	695b      	ldr	r3, [r3, #20]
   d455c:	9301      	str	r3, [sp, #4]
   d455e:	bd08      	pop	{r3, pc}
   d4560:	00030264 	.word	0x00030264

000d4564 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4564:	b508      	push	{r3, lr}
   d4566:	4b02      	ldr	r3, [pc, #8]	; (d4570 <netdb_freeaddrinfo+0xc>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	689b      	ldr	r3, [r3, #8]
   d456c:	9301      	str	r3, [sp, #4]
   d456e:	bd08      	pop	{r3, pc}
   d4570:	00030268 	.word	0x00030268

000d4574 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4574:	b508      	push	{r3, lr}
   d4576:	4b02      	ldr	r3, [pc, #8]	; (d4580 <netdb_getaddrinfo+0xc>)
   d4578:	681b      	ldr	r3, [r3, #0]
   d457a:	68db      	ldr	r3, [r3, #12]
   d457c:	9301      	str	r3, [sp, #4]
   d457e:	bd08      	pop	{r3, pc}
   d4580:	00030268 	.word	0x00030268

000d4584 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4584:	b508      	push	{r3, lr}
   d4586:	4b02      	ldr	r3, [pc, #8]	; (d4590 <HAL_SPI_Init+0xc>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	69db      	ldr	r3, [r3, #28]
   d458c:	9301      	str	r3, [sp, #4]
   d458e:	bd08      	pop	{r3, pc}
   d4590:	00030230 	.word	0x00030230

000d4594 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4594:	b508      	push	{r3, lr}
   d4596:	4b02      	ldr	r3, [pc, #8]	; (d45a0 <HAL_SPI_Is_Enabled+0xc>)
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	6a1b      	ldr	r3, [r3, #32]
   d459c:	9301      	str	r3, [sp, #4]
   d459e:	bd08      	pop	{r3, pc}
   d45a0:	00030230 	.word	0x00030230

000d45a4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d45a4:	b508      	push	{r3, lr}
   d45a6:	4b02      	ldr	r3, [pc, #8]	; (d45b0 <HAL_USART_Init+0xc>)
   d45a8:	681b      	ldr	r3, [r3, #0]
   d45aa:	681b      	ldr	r3, [r3, #0]
   d45ac:	9301      	str	r3, [sp, #4]
   d45ae:	bd08      	pop	{r3, pc}
   d45b0:	0003023c 	.word	0x0003023c

000d45b4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b02      	ldr	r3, [pc, #8]	; (d45c0 <HAL_USART_Write_Data+0xc>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	68db      	ldr	r3, [r3, #12]
   d45bc:	9301      	str	r3, [sp, #4]
   d45be:	bd08      	pop	{r3, pc}
   d45c0:	0003023c 	.word	0x0003023c

000d45c4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d45c4:	b508      	push	{r3, lr}
   d45c6:	4b02      	ldr	r3, [pc, #8]	; (d45d0 <HAL_USART_Available_Data+0xc>)
   d45c8:	681b      	ldr	r3, [r3, #0]
   d45ca:	691b      	ldr	r3, [r3, #16]
   d45cc:	9301      	str	r3, [sp, #4]
   d45ce:	bd08      	pop	{r3, pc}
   d45d0:	0003023c 	.word	0x0003023c

000d45d4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d45d4:	b508      	push	{r3, lr}
   d45d6:	4b02      	ldr	r3, [pc, #8]	; (d45e0 <HAL_USART_Read_Data+0xc>)
   d45d8:	681b      	ldr	r3, [r3, #0]
   d45da:	695b      	ldr	r3, [r3, #20]
   d45dc:	9301      	str	r3, [sp, #4]
   d45de:	bd08      	pop	{r3, pc}
   d45e0:	0003023c 	.word	0x0003023c

000d45e4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <HAL_USART_Peek_Data+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	699b      	ldr	r3, [r3, #24]
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	0003023c 	.word	0x0003023c

000d45f4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <HAL_USART_Flush_Data+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	69db      	ldr	r3, [r3, #28]
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	0003023c 	.word	0x0003023c

000d4604 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <HAL_USART_Is_Enabled+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	6a1b      	ldr	r3, [r3, #32]
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	0003023c 	.word	0x0003023c

000d4614 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <HAL_USART_Available_Data_For_Write+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	0003023c 	.word	0x0003023c

000d4624 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <HAL_USB_USART_Init+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	681b      	ldr	r3, [r3, #0]
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	0003024c 	.word	0x0003024c

000d4634 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <HAL_USB_USART_Begin+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	685b      	ldr	r3, [r3, #4]
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	0003024c 	.word	0x0003024c

000d4644 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <HAL_USB_USART_Available_Data+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	691b      	ldr	r3, [r3, #16]
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	0003024c 	.word	0x0003024c

000d4654 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	695b      	ldr	r3, [r3, #20]
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	0003024c 	.word	0x0003024c

000d4664 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <HAL_USB_USART_Receive_Data+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	699b      	ldr	r3, [r3, #24]
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	0003024c 	.word	0x0003024c

000d4674 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <HAL_USB_USART_Send_Data+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	69db      	ldr	r3, [r3, #28]
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	0003024c 	.word	0x0003024c

000d4684 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <HAL_USB_USART_Flush_Data+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	6a1b      	ldr	r3, [r3, #32]
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	0003024c 	.word	0x0003024c

000d4694 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <set_system_mode+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	685b      	ldr	r3, [r3, #4]
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	00030220 	.word	0x00030220

000d46a4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b03      	ldr	r3, [pc, #12]	; (d46b4 <system_ctrl_set_app_request_handler+0x10>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d46ae:	9301      	str	r3, [sp, #4]
   d46b0:	bd08      	pop	{r3, pc}
   d46b2:	0000      	.short	0x0000
   d46b4:	00030220 	.word	0x00030220

000d46b8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d46b8:	b508      	push	{r3, lr}
   d46ba:	4b03      	ldr	r3, [pc, #12]	; (d46c8 <system_ctrl_set_result+0x10>)
   d46bc:	681b      	ldr	r3, [r3, #0]
   d46be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d46c2:	9301      	str	r3, [sp, #4]
   d46c4:	bd08      	pop	{r3, pc}
   d46c6:	0000      	.short	0x0000
   d46c8:	00030220 	.word	0x00030220

000d46cc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d46cc:	b508      	push	{r3, lr}
   d46ce:	4b02      	ldr	r3, [pc, #8]	; (d46d8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d46d0:	681b      	ldr	r3, [r3, #0]
   d46d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d46d4:	9301      	str	r3, [sp, #4]
   d46d6:	bd08      	pop	{r3, pc}
   d46d8:	00030244 	.word	0x00030244

000d46dc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d46dc:	b508      	push	{r3, lr}
   d46de:	4b02      	ldr	r3, [pc, #8]	; (d46e8 <network_connect+0xc>)
   d46e0:	681b      	ldr	r3, [r3, #0]
   d46e2:	685b      	ldr	r3, [r3, #4]
   d46e4:	9301      	str	r3, [sp, #4]
   d46e6:	bd08      	pop	{r3, pc}
   d46e8:	00030240 	.word	0x00030240

000d46ec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d46ec:	b508      	push	{r3, lr}
   d46ee:	4b02      	ldr	r3, [pc, #8]	; (d46f8 <network_connecting+0xc>)
   d46f0:	681b      	ldr	r3, [r3, #0]
   d46f2:	689b      	ldr	r3, [r3, #8]
   d46f4:	9301      	str	r3, [sp, #4]
   d46f6:	bd08      	pop	{r3, pc}
   d46f8:	00030240 	.word	0x00030240

000d46fc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d46fc:	b508      	push	{r3, lr}
   d46fe:	4b02      	ldr	r3, [pc, #8]	; (d4708 <network_disconnect+0xc>)
   d4700:	681b      	ldr	r3, [r3, #0]
   d4702:	68db      	ldr	r3, [r3, #12]
   d4704:	9301      	str	r3, [sp, #4]
   d4706:	bd08      	pop	{r3, pc}
   d4708:	00030240 	.word	0x00030240

000d470c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d470c:	b508      	push	{r3, lr}
   d470e:	4b02      	ldr	r3, [pc, #8]	; (d4718 <network_ready+0xc>)
   d4710:	681b      	ldr	r3, [r3, #0]
   d4712:	691b      	ldr	r3, [r3, #16]
   d4714:	9301      	str	r3, [sp, #4]
   d4716:	bd08      	pop	{r3, pc}
   d4718:	00030240 	.word	0x00030240

000d471c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d471c:	b508      	push	{r3, lr}
   d471e:	4b02      	ldr	r3, [pc, #8]	; (d4728 <network_on+0xc>)
   d4720:	681b      	ldr	r3, [r3, #0]
   d4722:	695b      	ldr	r3, [r3, #20]
   d4724:	9301      	str	r3, [sp, #4]
   d4726:	bd08      	pop	{r3, pc}
   d4728:	00030240 	.word	0x00030240

000d472c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d472c:	b508      	push	{r3, lr}
   d472e:	4b02      	ldr	r3, [pc, #8]	; (d4738 <network_off+0xc>)
   d4730:	681b      	ldr	r3, [r3, #0]
   d4732:	699b      	ldr	r3, [r3, #24]
   d4734:	9301      	str	r3, [sp, #4]
   d4736:	bd08      	pop	{r3, pc}
   d4738:	00030240 	.word	0x00030240

000d473c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d473c:	b508      	push	{r3, lr}
   d473e:	4b02      	ldr	r3, [pc, #8]	; (d4748 <network_listen+0xc>)
   d4740:	681b      	ldr	r3, [r3, #0]
   d4742:	69db      	ldr	r3, [r3, #28]
   d4744:	9301      	str	r3, [sp, #4]
   d4746:	bd08      	pop	{r3, pc}
   d4748:	00030240 	.word	0x00030240

000d474c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d474c:	b508      	push	{r3, lr}
   d474e:	4b02      	ldr	r3, [pc, #8]	; (d4758 <network_listening+0xc>)
   d4750:	681b      	ldr	r3, [r3, #0]
   d4752:	6a1b      	ldr	r3, [r3, #32]
   d4754:	9301      	str	r3, [sp, #4]
   d4756:	bd08      	pop	{r3, pc}
   d4758:	00030240 	.word	0x00030240

000d475c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d475c:	b508      	push	{r3, lr}
   d475e:	4b02      	ldr	r3, [pc, #8]	; (d4768 <network_set_listen_timeout+0xc>)
   d4760:	681b      	ldr	r3, [r3, #0]
   d4762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4764:	9301      	str	r3, [sp, #4]
   d4766:	bd08      	pop	{r3, pc}
   d4768:	00030240 	.word	0x00030240

000d476c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d476c:	b508      	push	{r3, lr}
   d476e:	4b02      	ldr	r3, [pc, #8]	; (d4778 <network_get_listen_timeout+0xc>)
   d4770:	681b      	ldr	r3, [r3, #0]
   d4772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4774:	9301      	str	r3, [sp, #4]
   d4776:	bd08      	pop	{r3, pc}
   d4778:	00030240 	.word	0x00030240

000d477c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d477c:	b508      	push	{r3, lr}
   d477e:	4b02      	ldr	r3, [pc, #8]	; (d4788 <malloc+0xc>)
   d4780:	681b      	ldr	r3, [r3, #0]
   d4782:	681b      	ldr	r3, [r3, #0]
   d4784:	9301      	str	r3, [sp, #4]
   d4786:	bd08      	pop	{r3, pc}
   d4788:	0003021c 	.word	0x0003021c

000d478c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d478c:	b508      	push	{r3, lr}
   d478e:	4b02      	ldr	r3, [pc, #8]	; (d4798 <free+0xc>)
   d4790:	681b      	ldr	r3, [r3, #0]
   d4792:	685b      	ldr	r3, [r3, #4]
   d4794:	9301      	str	r3, [sp, #4]
   d4796:	bd08      	pop	{r3, pc}
   d4798:	0003021c 	.word	0x0003021c

000d479c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d479c:	b508      	push	{r3, lr}
   d479e:	4b02      	ldr	r3, [pc, #8]	; (d47a8 <vsnprintf+0xc>)
   d47a0:	681b      	ldr	r3, [r3, #0]
   d47a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d47a4:	9301      	str	r3, [sp, #4]
   d47a6:	bd08      	pop	{r3, pc}
   d47a8:	0003021c 	.word	0x0003021c

000d47ac <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d47ac:	b510      	push	{r4, lr}
   d47ae:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d47b0:	6800      	ldr	r0, [r0, #0]
   d47b2:	b108      	cbz	r0, d47b8 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d47b4:	f7ff fe4e 	bl	d4454 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d47b8:	4620      	mov	r0, r4
   d47ba:	bd10      	pop	{r4, pc}

000d47bc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d47bc:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d47be:	4c06      	ldr	r4, [pc, #24]	; (d47d8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d47c0:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d47c2:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d47c4:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d47c6:	f7ff fe3d 	bl	d4444 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d47ca:	4620      	mov	r0, r4
   d47cc:	4a03      	ldr	r2, [pc, #12]	; (d47dc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d47ce:	4904      	ldr	r1, [pc, #16]	; (d47e0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d47d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d47d4:	f000 bdc4 	b.w	d5360 <__aeabi_atexit>
   d47d8:	2003e3d0 	.word	0x2003e3d0
   d47dc:	2003e194 	.word	0x2003e194
   d47e0:	000d47ad 	.word	0x000d47ad

000d47e4 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d47e4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d47e6:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d47e8:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d47ea:	b113      	cbz	r3, d47f2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d47ec:	2203      	movs	r2, #3
   d47ee:	4601      	mov	r1, r0
   d47f0:	4798      	blx	r3
    }
   d47f2:	4620      	mov	r0, r4
   d47f4:	bd10      	pop	{r4, pc}

000d47f6 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d47f6:	2200      	movs	r2, #0
   d47f8:	4611      	mov	r1, r2
   d47fa:	6840      	ldr	r0, [r0, #4]
   d47fc:	f7ff bfa6 	b.w	d474c <network_listening>

000d4800 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4800:	2200      	movs	r2, #0
   d4802:	4611      	mov	r1, r2
   d4804:	6840      	ldr	r0, [r0, #4]
   d4806:	f7ff bfb1 	b.w	d476c <network_get_listen_timeout>

000d480a <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d480a:	2200      	movs	r2, #0
   d480c:	6840      	ldr	r0, [r0, #4]
   d480e:	f7ff bfa5 	b.w	d475c <network_set_listen_timeout>

000d4812 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4812:	2200      	movs	r2, #0
   d4814:	f081 0101 	eor.w	r1, r1, #1
   d4818:	6840      	ldr	r0, [r0, #4]
   d481a:	f7ff bf8f 	b.w	d473c <network_listen>

000d481e <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d481e:	2300      	movs	r3, #0
   d4820:	461a      	mov	r2, r3
   d4822:	4619      	mov	r1, r3
   d4824:	6840      	ldr	r0, [r0, #4]
   d4826:	f7ff bf81 	b.w	d472c <network_off>

000d482a <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d482a:	2300      	movs	r3, #0
   d482c:	461a      	mov	r2, r3
   d482e:	4619      	mov	r1, r3
   d4830:	6840      	ldr	r0, [r0, #4]
   d4832:	f7ff bf73 	b.w	d471c <network_on>

000d4836 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4836:	2200      	movs	r2, #0
   d4838:	4611      	mov	r1, r2
   d483a:	6840      	ldr	r0, [r0, #4]
   d483c:	f7ff bf66 	b.w	d470c <network_ready>

000d4840 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4840:	2200      	movs	r2, #0
   d4842:	4611      	mov	r1, r2
   d4844:	6840      	ldr	r0, [r0, #4]
   d4846:	f7ff bf51 	b.w	d46ec <network_connecting>

000d484a <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d484a:	2200      	movs	r2, #0
   d484c:	2102      	movs	r1, #2
   d484e:	6840      	ldr	r0, [r0, #4]
   d4850:	f7ff bf54 	b.w	d46fc <network_disconnect>

000d4854 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4854:	2300      	movs	r3, #0
   d4856:	461a      	mov	r2, r3
   d4858:	6840      	ldr	r0, [r0, #4]
   d485a:	f7ff bf3f 	b.w	d46dc <network_connect>
	...

000d4860 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4860:	4b02      	ldr	r3, [pc, #8]	; (d486c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4862:	2203      	movs	r2, #3
   d4864:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4866:	4a02      	ldr	r2, [pc, #8]	; (d4870 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4868:	601a      	str	r2, [r3, #0]
   d486a:	4770      	bx	lr
   d486c:	2003e3d4 	.word	0x2003e3d4
   d4870:	000d5740 	.word	0x000d5740

000d4874 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d4874:	4770      	bx	lr

000d4876 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4878:	4606      	mov	r6, r0
   d487a:	4615      	mov	r5, r2
   d487c:	460c      	mov	r4, r1
   d487e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4880:	42bc      	cmp	r4, r7
   d4882:	d006      	beq.n	d4892 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4884:	6833      	ldr	r3, [r6, #0]
   d4886:	f814 1b01 	ldrb.w	r1, [r4], #1
   d488a:	689b      	ldr	r3, [r3, #8]
   d488c:	4630      	mov	r0, r6
   d488e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4890:	e7f6      	b.n	d4880 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4892:	4628      	mov	r0, r5
   d4894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4896 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4896:	2200      	movs	r2, #0
   d4898:	7c00      	ldrb	r0, [r0, #16]
   d489a:	f7ff be23 	b.w	d44e4 <HAL_I2C_Write_Data>

000d489e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d489e:	2100      	movs	r1, #0
   d48a0:	7c00      	ldrb	r0, [r0, #16]
   d48a2:	f7ff be27 	b.w	d44f4 <HAL_I2C_Available_Data>

000d48a6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d48a6:	2100      	movs	r1, #0
   d48a8:	7c00      	ldrb	r0, [r0, #16]
   d48aa:	f7ff be2b 	b.w	d4504 <HAL_I2C_Read_Data>

000d48ae <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d48ae:	2100      	movs	r1, #0
   d48b0:	7c00      	ldrb	r0, [r0, #16]
   d48b2:	f7ff be2f 	b.w	d4514 <HAL_I2C_Peek_Data>

000d48b6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d48b6:	2100      	movs	r1, #0
   d48b8:	7c00      	ldrb	r0, [r0, #16]
   d48ba:	f7ff be33 	b.w	d4524 <HAL_I2C_Flush_Data>

000d48be <_ZN7TwoWireD0Ev>:
   d48be:	b510      	push	{r4, lr}
   d48c0:	2114      	movs	r1, #20
   d48c2:	4604      	mov	r4, r0
   d48c4:	f000 fd51 	bl	d536a <_ZdlPvj>
   d48c8:	4620      	mov	r0, r4
   d48ca:	bd10      	pop	{r4, pc}

000d48cc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d48cc:	b510      	push	{r4, lr}
   d48ce:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d48d0:	2300      	movs	r3, #0
   d48d2:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d48d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d48d8:	60a3      	str	r3, [r4, #8]
   d48da:	4b04      	ldr	r3, [pc, #16]	; (d48ec <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d48dc:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d48de:	4608      	mov	r0, r1
   d48e0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d48e2:	4611      	mov	r1, r2
   d48e4:	f7ff fe2e 	bl	d4544 <HAL_I2C_Init>
}
   d48e8:	4620      	mov	r0, r4
   d48ea:	bd10      	pop	{r4, pc}
   d48ec:	000d5774 	.word	0x000d5774

000d48f0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d48f0:	2100      	movs	r1, #0
   d48f2:	7c00      	ldrb	r0, [r0, #16]
   d48f4:	f7ff be1e 	b.w	d4534 <HAL_I2C_Is_Enabled>

000d48f8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d48f8:	4770      	bx	lr

000d48fa <_ZN9IPAddressD0Ev>:
   d48fa:	b510      	push	{r4, lr}
   d48fc:	2118      	movs	r1, #24
   d48fe:	4604      	mov	r4, r0
   d4900:	f000 fd33 	bl	d536a <_ZdlPvj>
   d4904:	4620      	mov	r0, r4
   d4906:	bd10      	pop	{r4, pc}

000d4908 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4908:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d490a:	7d03      	ldrb	r3, [r0, #20]
   d490c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d490e:	b08d      	sub	sp, #52	; 0x34
   d4910:	460e      	mov	r6, r1
   d4912:	f100 0704 	add.w	r7, r0, #4
   d4916:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d491a:	d002      	beq.n	d4922 <_ZNK9IPAddress7printToER5Print+0x1a>
   d491c:	f100 0508 	add.w	r5, r0, #8
   d4920:	e018      	b.n	d4954 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4922:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4924:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4926:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d492a:	232f      	movs	r3, #47	; 0x2f
   d492c:	462a      	mov	r2, r5
   d492e:	200a      	movs	r0, #10
   d4930:	f7ff fe10 	bl	d4554 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4934:	4628      	mov	r0, r5
   d4936:	f000 fec7 	bl	d56c8 <strlen>
   d493a:	6833      	ldr	r3, [r6, #0]
   d493c:	4602      	mov	r2, r0
   d493e:	68db      	ldr	r3, [r3, #12]
   d4940:	4629      	mov	r1, r5
   d4942:	4630      	mov	r0, r6
   d4944:	4798      	blx	r3
   d4946:	e00f      	b.n	d4968 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4948:	b124      	cbz	r4, d4954 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d494a:	212e      	movs	r1, #46	; 0x2e
   d494c:	4630      	mov	r0, r6
   d494e:	f000 f9d5 	bl	d4cfc <_ZN5Print5printEc>
   d4952:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4954:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4958:	220a      	movs	r2, #10
   d495a:	4630      	mov	r0, r6
   d495c:	f000 f9dd 	bl	d4d1a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4960:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4962:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4964:	d1f0      	bne.n	d4948 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4966:	4620      	mov	r0, r4
    }
    return n;
}
   d4968:	b00d      	add	sp, #52	; 0x34
   d496a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d496c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d496c:	b510      	push	{r4, lr}
   d496e:	4b05      	ldr	r3, [pc, #20]	; (d4984 <_ZN9IPAddressC1Ev+0x18>)
   d4970:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4972:	2211      	movs	r2, #17
   d4974:	f840 3b04 	str.w	r3, [r0], #4
   d4978:	2100      	movs	r1, #0
   d497a:	f000 fe74 	bl	d5666 <memset>
{
    clear();
}
   d497e:	4620      	mov	r0, r4
   d4980:	bd10      	pop	{r4, pc}
   d4982:	bf00      	nop
   d4984:	000d579c 	.word	0x000d579c

000d4988 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4988:	4603      	mov	r3, r0
   d498a:	4a07      	ldr	r2, [pc, #28]	; (d49a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d498c:	b510      	push	{r4, lr}
   d498e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4992:	f101 0210 	add.w	r2, r1, #16
   d4996:	f851 4b04 	ldr.w	r4, [r1], #4
   d499a:	f843 4b04 	str.w	r4, [r3], #4
   d499e:	4291      	cmp	r1, r2
   d49a0:	d1f9      	bne.n	d4996 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d49a2:	780a      	ldrb	r2, [r1, #0]
   d49a4:	701a      	strb	r2, [r3, #0]
}
   d49a6:	bd10      	pop	{r4, pc}
   d49a8:	000d579c 	.word	0x000d579c

000d49ac <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d49ac:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d49ae:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d49b2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d49b6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d49ba:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d49be:	2304      	movs	r3, #4
   d49c0:	6041      	str	r1, [r0, #4]
   d49c2:	7503      	strb	r3, [r0, #20]
   d49c4:	bd10      	pop	{r4, pc}

000d49c6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d49c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d49c8:	780d      	ldrb	r5, [r1, #0]
   d49ca:	788b      	ldrb	r3, [r1, #2]
   d49cc:	784a      	ldrb	r2, [r1, #1]
   d49ce:	78c9      	ldrb	r1, [r1, #3]
   d49d0:	9100      	str	r1, [sp, #0]
   d49d2:	4629      	mov	r1, r5
   d49d4:	f7ff ffea 	bl	d49ac <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d49d8:	b003      	add	sp, #12
   d49da:	bd30      	pop	{r4, r5, pc}

000d49dc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d49dc:	4b01      	ldr	r3, [pc, #4]	; (d49e4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d49de:	4a02      	ldr	r2, [pc, #8]	; (d49e8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d49e0:	601a      	str	r2, [r3, #0]
   d49e2:	4770      	bx	lr
   d49e4:	2003e3dc 	.word	0x2003e3dc
   d49e8:	000d581b 	.word	0x000d581b

000d49ec <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d49ec:	2200      	movs	r2, #0
   d49ee:	4611      	mov	r1, r2
   d49f0:	6840      	ldr	r0, [r0, #4]
   d49f2:	f7ff beab 	b.w	d474c <network_listening>

000d49f6 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d49f6:	2200      	movs	r2, #0
   d49f8:	4611      	mov	r1, r2
   d49fa:	6840      	ldr	r0, [r0, #4]
   d49fc:	f7ff beb6 	b.w	d476c <network_get_listen_timeout>

000d4a00 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4a00:	2200      	movs	r2, #0
   d4a02:	6840      	ldr	r0, [r0, #4]
   d4a04:	f7ff beaa 	b.w	d475c <network_set_listen_timeout>

000d4a08 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4a08:	2200      	movs	r2, #0
   d4a0a:	f081 0101 	eor.w	r1, r1, #1
   d4a0e:	6840      	ldr	r0, [r0, #4]
   d4a10:	f7ff be94 	b.w	d473c <network_listen>

000d4a14 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4a14:	2300      	movs	r3, #0
   d4a16:	461a      	mov	r2, r3
   d4a18:	2101      	movs	r1, #1
   d4a1a:	6840      	ldr	r0, [r0, #4]
   d4a1c:	f7ff be86 	b.w	d472c <network_off>

000d4a20 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4a20:	2300      	movs	r3, #0
   d4a22:	461a      	mov	r2, r3
   d4a24:	4619      	mov	r1, r3
   d4a26:	6840      	ldr	r0, [r0, #4]
   d4a28:	f7ff be78 	b.w	d471c <network_on>

000d4a2c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4a2c:	2200      	movs	r2, #0
   d4a2e:	4611      	mov	r1, r2
   d4a30:	6840      	ldr	r0, [r0, #4]
   d4a32:	f7ff be6b 	b.w	d470c <network_ready>

000d4a36 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4a36:	2200      	movs	r2, #0
   d4a38:	4611      	mov	r1, r2
   d4a3a:	6840      	ldr	r0, [r0, #4]
   d4a3c:	f7ff be56 	b.w	d46ec <network_connecting>

000d4a40 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4a40:	2200      	movs	r2, #0
   d4a42:	2102      	movs	r1, #2
   d4a44:	6840      	ldr	r0, [r0, #4]
   d4a46:	f7ff be59 	b.w	d46fc <network_disconnect>

000d4a4a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4a4a:	2300      	movs	r3, #0
   d4a4c:	461a      	mov	r2, r3
   d4a4e:	6840      	ldr	r0, [r0, #4]
   d4a50:	f7ff be44 	b.w	d46dc <network_connect>

000d4a54 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4a54:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4a56:	4605      	mov	r5, r0
   d4a58:	b188      	cbz	r0, d4a7e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4a5a:	6804      	ldr	r4, [r0, #0]
   d4a5c:	b14c      	cbz	r4, d4a72 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4a5e:	68a3      	ldr	r3, [r4, #8]
   d4a60:	b11b      	cbz	r3, d4a6a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4a62:	2203      	movs	r2, #3
   d4a64:	4621      	mov	r1, r4
   d4a66:	4620      	mov	r0, r4
   d4a68:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4a6a:	2110      	movs	r1, #16
   d4a6c:	4620      	mov	r0, r4
   d4a6e:	f000 fc7c 	bl	d536a <_ZdlPvj>
   d4a72:	4628      	mov	r0, r5
   d4a74:	2114      	movs	r1, #20
      }
   d4a76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4a7a:	f000 bc76 	b.w	d536a <_ZdlPvj>
   d4a7e:	bd38      	pop	{r3, r4, r5, pc}

000d4a80 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4a80:	b110      	cbz	r0, d4a88 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4a82:	6803      	ldr	r3, [r0, #0]
   d4a84:	685b      	ldr	r3, [r3, #4]
   d4a86:	4718      	bx	r3
   d4a88:	4770      	bx	lr

000d4a8a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4a8a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4a8c:	6803      	ldr	r3, [r0, #0]
   d4a8e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4a90:	b1bb      	cbz	r3, d4ac2 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4a92:	6858      	ldr	r0, [r3, #4]
   d4a94:	f7ff fcbe 	bl	d4414 <os_thread_is_current>
   d4a98:	b978      	cbnz	r0, d4aba <_ZN6ThreadD1Ev+0x30>
   d4a9a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4a9c:	7c5a      	ldrb	r2, [r3, #17]
   d4a9e:	b912      	cbnz	r2, d4aa6 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4aa0:	6858      	ldr	r0, [r3, #4]
   d4aa2:	f7ff fcbf 	bl	d4424 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4aa6:	6823      	ldr	r3, [r4, #0]
   d4aa8:	6858      	ldr	r0, [r3, #4]
   d4aaa:	f7ff fcc3 	bl	d4434 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4aae:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4ab0:	2300      	movs	r3, #0
   d4ab2:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4ab4:	b128      	cbz	r0, d4ac2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4ab6:	f7ff ffcd 	bl	d4a54 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4aba:	6820      	ldr	r0, [r4, #0]
   d4abc:	b108      	cbz	r0, d4ac2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4abe:	f7ff ffc9 	bl	d4a54 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4ac2:	4620      	mov	r0, r4
   d4ac4:	bd10      	pop	{r4, pc}

000d4ac6 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d4ac6:	b538      	push	{r3, r4, r5, lr}
   d4ac8:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4aca:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d4ace:	b108      	cbz	r0, d4ad4 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4ad0:	f7ff fae3 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4ad4:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d4ad8:	b108      	cbz	r0, d4ade <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d4ada:	f7ff fcbb 	bl	d4454 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4ade:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d4ae2:	b135      	cbz	r5, d4af2 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4ae4:	4628      	mov	r0, r5
   d4ae6:	f7ff ffd0 	bl	d4a8a <_ZN6ThreadD1Ev>
   d4aea:	2104      	movs	r1, #4
   d4aec:	4628      	mov	r0, r5
   d4aee:	f000 fc3c 	bl	d536a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4af2:	6820      	ldr	r0, [r4, #0]
   d4af4:	b108      	cbz	r0, d4afa <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d4af6:	f7ff ffc3 	bl	d4a80 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4afa:	4620      	mov	r0, r4
   d4afc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4b00 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4b00:	b510      	push	{r4, lr}
   d4b02:	4b04      	ldr	r3, [pc, #16]	; (d4b14 <_ZN5spark9MeshClassD1Ev+0x14>)
   d4b04:	4604      	mov	r4, r0
   d4b06:	f840 3b08 	str.w	r3, [r0], #8
   d4b0a:	f7ff ffdc 	bl	d4ac6 <_ZN5spark11MeshPublishD1Ev>
   d4b0e:	4620      	mov	r0, r4
   d4b10:	bd10      	pop	{r4, pc}
   d4b12:	bf00      	nop
   d4b14:	000d5894 	.word	0x000d5894

000d4b18 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4b18:	b538      	push	{r3, r4, r5, lr}
   d4b1a:	4c0e      	ldr	r4, [pc, #56]	; (d4b54 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d4b1c:	4b0e      	ldr	r3, [pc, #56]	; (d4b58 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d4b1e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4b20:	2500      	movs	r5, #0
   d4b22:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4b24:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4b28:	6063      	str	r3, [r4, #4]
   d4b2a:	60a5      	str	r5, [r4, #8]
   d4b2c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4b30:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4b34:	f7ff fc86 	bl	d4444 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4b38:	4b08      	ldr	r3, [pc, #32]	; (d4b5c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4b3a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4b3e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4b42:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4b44:	4620      	mov	r0, r4
   d4b46:	4a06      	ldr	r2, [pc, #24]	; (d4b60 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4b48:	4906      	ldr	r1, [pc, #24]	; (d4b64 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4b4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4b4e:	f000 bc07 	b.w	d5360 <__aeabi_atexit>
   d4b52:	bf00      	nop
   d4b54:	2003e3e0 	.word	0x2003e3e0
   d4b58:	000d58c8 	.word	0x000d58c8
   d4b5c:	000d5894 	.word	0x000d5894
   d4b60:	2003e194 	.word	0x2003e194
   d4b64:	000d4b01 	.word	0x000d4b01

000d4b68 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4b68:	2300      	movs	r3, #0
   d4b6a:	461a      	mov	r2, r3
   d4b6c:	6840      	ldr	r0, [r0, #4]
   d4b6e:	f7ff bdb5 	b.w	d46dc <network_connect>

000d4b72 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4b72:	2200      	movs	r2, #0
   d4b74:	2102      	movs	r1, #2
   d4b76:	6840      	ldr	r0, [r0, #4]
   d4b78:	f7ff bdc0 	b.w	d46fc <network_disconnect>

000d4b7c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4b7c:	2200      	movs	r2, #0
   d4b7e:	4611      	mov	r1, r2
   d4b80:	6840      	ldr	r0, [r0, #4]
   d4b82:	f7ff bdb3 	b.w	d46ec <network_connecting>

000d4b86 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4b86:	2200      	movs	r2, #0
   d4b88:	4611      	mov	r1, r2
   d4b8a:	6840      	ldr	r0, [r0, #4]
   d4b8c:	f7ff bdbe 	b.w	d470c <network_ready>

000d4b90 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4b90:	2300      	movs	r3, #0
   d4b92:	461a      	mov	r2, r3
   d4b94:	4619      	mov	r1, r3
   d4b96:	6840      	ldr	r0, [r0, #4]
   d4b98:	f7ff bdc0 	b.w	d471c <network_on>

000d4b9c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4b9c:	2300      	movs	r3, #0
   d4b9e:	461a      	mov	r2, r3
   d4ba0:	4619      	mov	r1, r3
   d4ba2:	6840      	ldr	r0, [r0, #4]
   d4ba4:	f7ff bdc2 	b.w	d472c <network_off>

000d4ba8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4ba8:	2200      	movs	r2, #0
   d4baa:	f081 0101 	eor.w	r1, r1, #1
   d4bae:	6840      	ldr	r0, [r0, #4]
   d4bb0:	f7ff bdc4 	b.w	d473c <network_listen>

000d4bb4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4bb4:	2200      	movs	r2, #0
   d4bb6:	6840      	ldr	r0, [r0, #4]
   d4bb8:	f7ff bdd0 	b.w	d475c <network_set_listen_timeout>

000d4bbc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4bbc:	2200      	movs	r2, #0
   d4bbe:	4611      	mov	r1, r2
   d4bc0:	6840      	ldr	r0, [r0, #4]
   d4bc2:	f7ff bdd3 	b.w	d476c <network_get_listen_timeout>

000d4bc6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4bc6:	2200      	movs	r2, #0
   d4bc8:	4611      	mov	r1, r2
   d4bca:	6840      	ldr	r0, [r0, #4]
   d4bcc:	f7ff bdbe 	b.w	d474c <network_listening>

000d4bd0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4bd4:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d4bd6:	b095      	sub	sp, #84	; 0x54
   d4bd8:	4616      	mov	r6, r2
   d4bda:	460d      	mov	r5, r1
   d4bdc:	4607      	mov	r7, r0
    IPAddress addr;
   d4bde:	f7ff fec5 	bl	d496c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4be2:	4621      	mov	r1, r4
   d4be4:	2220      	movs	r2, #32
   d4be6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4be8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4bea:	f000 fd3c 	bl	d5666 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4bee:	2340      	movs	r3, #64	; 0x40
   d4bf0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4bf2:	4621      	mov	r1, r4
   d4bf4:	466b      	mov	r3, sp
   d4bf6:	aa0c      	add	r2, sp, #48	; 0x30
   d4bf8:	4630      	mov	r0, r6
   d4bfa:	f7ff fcbb 	bl	d4574 <netdb_getaddrinfo>
    if (!r) {
   d4bfe:	4604      	mov	r4, r0
   d4c00:	2800      	cmp	r0, #0
   d4c02:	d144      	bne.n	d4c8e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4c04:	4602      	mov	r2, r0
   d4c06:	2101      	movs	r1, #1
   d4c08:	6868      	ldr	r0, [r5, #4]
   d4c0a:	f7ff fd7f 	bl	d470c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4c0e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4c10:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4c12:	4622      	mov	r2, r4
   d4c14:	6868      	ldr	r0, [r5, #4]
   d4c16:	f7ff fd79 	bl	d470c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4c1a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4c1c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d4c1e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4c20:	2e00      	cmp	r6, #0
   d4c22:	d034      	beq.n	d4c8e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d4c24:	2900      	cmp	r1, #0
   d4c26:	d132      	bne.n	d4c8e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4c28:	6873      	ldr	r3, [r6, #4]
   d4c2a:	2b02      	cmp	r3, #2
   d4c2c:	d002      	beq.n	d4c34 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d4c2e:	2b0a      	cmp	r3, #10
   d4c30:	d009      	beq.n	d4c46 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d4c32:	e02a      	b.n	d4c8a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d4c34:	f1b8 0f00 	cmp.w	r8, #0
   d4c38:	d027      	beq.n	d4c8a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4c3a:	6971      	ldr	r1, [r6, #20]
   d4c3c:	4638      	mov	r0, r7
   d4c3e:	3104      	adds	r1, #4
   d4c40:	f7ff fec1 	bl	d49c6 <_ZN9IPAddressaSEPKh>
   d4c44:	e020      	b.n	d4c88 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4c46:	f1b9 0f00 	cmp.w	r9, #0
   d4c4a:	d01e      	beq.n	d4c8a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4c4c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4c4e:	2211      	movs	r2, #17
   d4c50:	a801      	add	r0, sp, #4
   d4c52:	f000 fd08 	bl	d5666 <memset>
                    a.v = 6;
   d4c56:	2306      	movs	r3, #6
   d4c58:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4c5c:	ad01      	add	r5, sp, #4
   d4c5e:	f104 0308 	add.w	r3, r4, #8
   d4c62:	3418      	adds	r4, #24
   d4c64:	6818      	ldr	r0, [r3, #0]
   d4c66:	6859      	ldr	r1, [r3, #4]
   d4c68:	462a      	mov	r2, r5
   d4c6a:	c203      	stmia	r2!, {r0, r1}
   d4c6c:	3308      	adds	r3, #8
   d4c6e:	42a3      	cmp	r3, r4
   d4c70:	4615      	mov	r5, r2
   d4c72:	d1f7      	bne.n	d4c64 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d4c74:	a901      	add	r1, sp, #4
   d4c76:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4c78:	ad07      	add	r5, sp, #28
   d4c7a:	f7ff fe85 	bl	d4988 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4c7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4c80:	1d3c      	adds	r4, r7, #4
   d4c82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4c84:	682b      	ldr	r3, [r5, #0]
   d4c86:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d4c88:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4c8a:	69f6      	ldr	r6, [r6, #28]
   d4c8c:	e7c8      	b.n	d4c20 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4c8e:	9800      	ldr	r0, [sp, #0]
   d4c90:	f7ff fc68 	bl	d4564 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4c94:	4638      	mov	r0, r7
   d4c96:	b015      	add	sp, #84	; 0x54
   d4c98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4c9c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4c9c:	4b02      	ldr	r3, [pc, #8]	; (d4ca8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4c9e:	4a03      	ldr	r2, [pc, #12]	; (d4cac <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4ca0:	601a      	str	r2, [r3, #0]
   d4ca2:	2200      	movs	r2, #0
   d4ca4:	605a      	str	r2, [r3, #4]
   d4ca6:	4770      	bx	lr
   d4ca8:	2003e5b4 	.word	0x2003e5b4
   d4cac:	000d58c8 	.word	0x000d58c8

000d4cb0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4cb2:	4606      	mov	r6, r0
   d4cb4:	460d      	mov	r5, r1
   d4cb6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4cb8:	2400      	movs	r4, #0
  while (size--) {
   d4cba:	42bd      	cmp	r5, r7
   d4cbc:	d00c      	beq.n	d4cd8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4cbe:	6833      	ldr	r3, [r6, #0]
   d4cc0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4cc4:	689b      	ldr	r3, [r3, #8]
   d4cc6:	4630      	mov	r0, r6
   d4cc8:	4798      	blx	r3
     if (chunk>=0)
   d4cca:	2800      	cmp	r0, #0
   d4ccc:	db01      	blt.n	d4cd2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4cce:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4cd0:	e7f3      	b.n	d4cba <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4cd2:	2c00      	cmp	r4, #0
   d4cd4:	bf08      	it	eq
   d4cd6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4cd8:	4620      	mov	r0, r4
   d4cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4cdc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4cdc:	b570      	push	{r4, r5, r6, lr}
   d4cde:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4ce0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4ce2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4ce4:	b149      	cbz	r1, d4cfa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4ce6:	f000 fcef 	bl	d56c8 <strlen>
   d4cea:	682b      	ldr	r3, [r5, #0]
   d4cec:	4602      	mov	r2, r0
   d4cee:	4621      	mov	r1, r4
   d4cf0:	4628      	mov	r0, r5
   d4cf2:	68db      	ldr	r3, [r3, #12]
    }
   d4cf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4cf8:	4718      	bx	r3
    }
   d4cfa:	bd70      	pop	{r4, r5, r6, pc}

000d4cfc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4cfc:	6803      	ldr	r3, [r0, #0]
   d4cfe:	689b      	ldr	r3, [r3, #8]
   d4d00:	4718      	bx	r3

000d4d02 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4d02:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4d04:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4d06:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4d08:	f7ff fff8 	bl	d4cfc <_ZN5Print5printEc>
  n += print('\n');
   d4d0c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4d0e:	4604      	mov	r4, r0
  n += print('\n');
   d4d10:	4628      	mov	r0, r5
   d4d12:	f7ff fff3 	bl	d4cfc <_ZN5Print5printEc>
  return n;
}
   d4d16:	4420      	add	r0, r4
   d4d18:	bd38      	pop	{r3, r4, r5, pc}

000d4d1a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4d1a:	b530      	push	{r4, r5, lr}
   d4d1c:	b08b      	sub	sp, #44	; 0x2c
   d4d1e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4d20:	2100      	movs	r1, #0
   d4d22:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4d26:	2a01      	cmp	r2, #1
   d4d28:	bf98      	it	ls
   d4d2a:	220a      	movls	r2, #10
   d4d2c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4d30:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4d34:	fb05 3312 	mls	r3, r5, r2, r3
   d4d38:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4d3c:	2b09      	cmp	r3, #9
   d4d3e:	bf94      	ite	ls
   d4d40:	3330      	addls	r3, #48	; 0x30
   d4d42:	3337      	addhi	r3, #55	; 0x37
   d4d44:	b2db      	uxtb	r3, r3
   d4d46:	4621      	mov	r1, r4
   d4d48:	f804 3901 	strb.w	r3, [r4], #-1
   d4d4c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4d4e:	2d00      	cmp	r5, #0
   d4d50:	d1ee      	bne.n	d4d30 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4d52:	f7ff ffc3 	bl	d4cdc <_ZN5Print5writeEPKc>
}
   d4d56:	b00b      	add	sp, #44	; 0x2c
   d4d58:	bd30      	pop	{r4, r5, pc}

000d4d5a <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4d5a:	b40c      	push	{r2, r3}
   d4d5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4d60:	b087      	sub	sp, #28
   d4d62:	af00      	add	r7, sp, #0
   d4d64:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d4d68:	4605      	mov	r5, r0
   d4d6a:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d4d6e:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4d70:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d4d72:	4623      	mov	r3, r4
   d4d74:	464a      	mov	r2, r9
   d4d76:	2114      	movs	r1, #20
   d4d78:	1d38      	adds	r0, r7, #4
   d4d7a:	f7ff fd0f 	bl	d479c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d4d7e:	2813      	cmp	r0, #19
   d4d80:	d805      	bhi.n	d4d8e <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4d82:	1d39      	adds	r1, r7, #4
   d4d84:	4628      	mov	r0, r5
   d4d86:	f7ff ffa9 	bl	d4cdc <_ZN5Print5writeEPKc>
   d4d8a:	4604      	mov	r4, r0
   d4d8c:	e013      	b.n	d4db6 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4d8e:	f100 0308 	add.w	r3, r0, #8
   d4d92:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d4d96:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4d98:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d4d9c:	1c41      	adds	r1, r0, #1
   d4d9e:	4623      	mov	r3, r4
   d4da0:	464a      	mov	r2, r9
   d4da2:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d4da4:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d4da6:	f7ff fcf9 	bl	d479c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4daa:	4669      	mov	r1, sp
   d4dac:	4628      	mov	r0, r5
   d4dae:	f7ff ff95 	bl	d4cdc <_ZN5Print5writeEPKc>
   d4db2:	4604      	mov	r4, r0
   d4db4:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d4db6:	b11e      	cbz	r6, d4dc0 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d4db8:	4628      	mov	r0, r5
   d4dba:	f7ff ffa2 	bl	d4d02 <_ZN5Print7printlnEv>
   d4dbe:	4404      	add	r4, r0
    return n;
}
   d4dc0:	4620      	mov	r0, r4
   d4dc2:	371c      	adds	r7, #28
   d4dc4:	46bd      	mov	sp, r7
   d4dc6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4dca:	b002      	add	sp, #8
   d4dcc:	4770      	bx	lr

000d4dce <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4dce:	b510      	push	{r4, lr}
   d4dd0:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4dd2:	f7ff fd07 	bl	d47e4 <_ZNSt14_Function_baseD1Ev>
   d4dd6:	4620      	mov	r0, r4
   d4dd8:	bd10      	pop	{r4, pc}
	...

000d4ddc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4ddc:	4803      	ldr	r0, [pc, #12]	; (d4dec <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4dde:	4a04      	ldr	r2, [pc, #16]	; (d4df0 <_GLOBAL__sub_I_RGB+0x14>)
   d4de0:	4904      	ldr	r1, [pc, #16]	; (d4df4 <_GLOBAL__sub_I_RGB+0x18>)
   d4de2:	2300      	movs	r3, #0
   d4de4:	6083      	str	r3, [r0, #8]
   d4de6:	f000 babb 	b.w	d5360 <__aeabi_atexit>
   d4dea:	bf00      	nop
   d4dec:	2003e5bc 	.word	0x2003e5bc
   d4df0:	2003e194 	.word	0x2003e194
   d4df4:	000d4dcf 	.word	0x000d4dcf

000d4df8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4df8:	b510      	push	{r4, lr}
   d4dfa:	4604      	mov	r4, r0
{
    _spi = spi;
   d4dfc:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d4dfe:	4608      	mov	r0, r1
   d4e00:	f7ff fbc0 	bl	d4584 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4e04:	2300      	movs	r3, #0
   d4e06:	6063      	str	r3, [r4, #4]
}
   d4e08:	4620      	mov	r0, r4
   d4e0a:	bd10      	pop	{r4, pc}

000d4e0c <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d4e0c:	7800      	ldrb	r0, [r0, #0]
   d4e0e:	f7ff bbc1 	b.w	d4594 <HAL_SPI_Is_Enabled>
	...

000d4e14 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4e14:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4e16:	4c09      	ldr	r4, [pc, #36]	; (d4e3c <_GLOBAL__sub_I_System+0x28>)
   d4e18:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4e1a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4e1e:	6020      	str	r0, [r4, #0]
   d4e20:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4e22:	71a0      	strb	r0, [r4, #6]
   d4e24:	8120      	strh	r0, [r4, #8]
   d4e26:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4e28:	f7ff fc34 	bl	d4694 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4e2c:	4620      	mov	r0, r4
   d4e2e:	4a04      	ldr	r2, [pc, #16]	; (d4e40 <_GLOBAL__sub_I_System+0x2c>)
   d4e30:	4904      	ldr	r1, [pc, #16]	; (d4e44 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4e36:	f000 ba93 	b.w	d5360 <__aeabi_atexit>
   d4e3a:	bf00      	nop
   d4e3c:	2003e5cc 	.word	0x2003e5cc
   d4e40:	2003e194 	.word	0x2003e194
   d4e44:	000d40d9 	.word	0x000d40d9

000d4e48 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4e48:	4b02      	ldr	r3, [pc, #8]	; (d4e54 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4e4a:	681a      	ldr	r2, [r3, #0]
   d4e4c:	4b02      	ldr	r3, [pc, #8]	; (d4e58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4e4e:	601a      	str	r2, [r3, #0]
   d4e50:	4770      	bx	lr
   d4e52:	bf00      	nop
   d4e54:	2003e12c 	.word	0x2003e12c
   d4e58:	2003e5d8 	.word	0x2003e5d8

000d4e5c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4e5c:	4770      	bx	lr

000d4e5e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4e5e:	7441      	strb	r1, [r0, #17]
   d4e60:	4770      	bx	lr

000d4e62 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4e62:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4e64:	7c00      	ldrb	r0, [r0, #16]
   d4e66:	f7ff fbd5 	bl	d4614 <HAL_USART_Available_Data_For_Write>
}
   d4e6a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4e6e:	bd08      	pop	{r3, pc}

000d4e70 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4e70:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4e72:	7c00      	ldrb	r0, [r0, #16]
   d4e74:	f7ff fba6 	bl	d45c4 <HAL_USART_Available_Data>
}
   d4e78:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4e7c:	bd08      	pop	{r3, pc}

000d4e7e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4e7e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4e80:	7c00      	ldrb	r0, [r0, #16]
   d4e82:	f7ff fbaf 	bl	d45e4 <HAL_USART_Peek_Data>
}
   d4e86:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4e8a:	bf28      	it	cs
   d4e8c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d4e90:	bd08      	pop	{r3, pc}

000d4e92 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4e92:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4e94:	7c00      	ldrb	r0, [r0, #16]
   d4e96:	f7ff fb9d 	bl	d45d4 <HAL_USART_Read_Data>
}
   d4e9a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4e9e:	bf28      	it	cs
   d4ea0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d4ea4:	bd08      	pop	{r3, pc}

000d4ea6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4ea6:	7c00      	ldrb	r0, [r0, #16]
   d4ea8:	f7ff bba4 	b.w	d45f4 <HAL_USART_Flush_Data>

000d4eac <_ZN11USARTSerialD0Ev>:
   d4eac:	b510      	push	{r4, lr}
   d4eae:	2114      	movs	r1, #20
   d4eb0:	4604      	mov	r4, r0
   d4eb2:	f000 fa5a 	bl	d536a <_ZdlPvj>
   d4eb6:	4620      	mov	r0, r4
   d4eb8:	bd10      	pop	{r4, pc}

000d4eba <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4eba:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4ebc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4ebe:	4604      	mov	r4, r0
   d4ec0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4ec2:	b925      	cbnz	r5, d4ece <_ZN11USARTSerial5writeEh+0x14>
   d4ec4:	7c00      	ldrb	r0, [r0, #16]
   d4ec6:	f7ff fba5 	bl	d4614 <HAL_USART_Available_Data_For_Write>
   d4eca:	2800      	cmp	r0, #0
   d4ecc:	dd05      	ble.n	d4eda <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4ece:	4631      	mov	r1, r6
   d4ed0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4ed2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4ed6:	f7ff bb6d 	b.w	d45b4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d4eda:	4628      	mov	r0, r5
   d4edc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4ee0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4ee0:	b510      	push	{r4, lr}
   d4ee2:	4604      	mov	r4, r0
   d4ee4:	4608      	mov	r0, r1
   d4ee6:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4ee8:	2200      	movs	r2, #0
   d4eea:	6062      	str	r2, [r4, #4]
   d4eec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4ef0:	60a2      	str	r2, [r4, #8]
   d4ef2:	4a05      	ldr	r2, [pc, #20]	; (d4f08 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4ef4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4ef6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4ef8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4efa:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4efc:	461a      	mov	r2, r3
   d4efe:	f7ff fb51 	bl	d45a4 <HAL_USART_Init>
}
   d4f02:	4620      	mov	r0, r4
   d4f04:	bd10      	pop	{r4, pc}
   d4f06:	bf00      	nop
   d4f08:	000d5928 	.word	0x000d5928

000d4f0c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d4f0c:	7c00      	ldrb	r0, [r0, #16]
   d4f0e:	f7ff bb79 	b.w	d4604 <HAL_USART_Is_Enabled>
	...

000d4f14 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4f14:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4f16:	4d0c      	ldr	r5, [pc, #48]	; (d4f48 <_Z22__fetch_global_Serial1v+0x34>)
   d4f18:	6829      	ldr	r1, [r5, #0]
   d4f1a:	f011 0401 	ands.w	r4, r1, #1
   d4f1e:	d111      	bne.n	d4f44 <_Z22__fetch_global_Serial1v+0x30>
   d4f20:	4628      	mov	r0, r5
   d4f22:	f7ff f8bc 	bl	d409e <__cxa_guard_acquire>
   d4f26:	b168      	cbz	r0, d4f44 <_Z22__fetch_global_Serial1v+0x30>
   d4f28:	4a08      	ldr	r2, [pc, #32]	; (d4f4c <_Z22__fetch_global_Serial1v+0x38>)
   d4f2a:	4b09      	ldr	r3, [pc, #36]	; (d4f50 <_Z22__fetch_global_Serial1v+0x3c>)
   d4f2c:	4809      	ldr	r0, [pc, #36]	; (d4f54 <_Z22__fetch_global_Serial1v+0x40>)
   d4f2e:	4621      	mov	r1, r4
   d4f30:	f7ff ffd6 	bl	d4ee0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4f34:	4628      	mov	r0, r5
   d4f36:	f7ff f8b7 	bl	d40a8 <__cxa_guard_release>
   d4f3a:	4a07      	ldr	r2, [pc, #28]	; (d4f58 <_Z22__fetch_global_Serial1v+0x44>)
   d4f3c:	4907      	ldr	r1, [pc, #28]	; (d4f5c <_Z22__fetch_global_Serial1v+0x48>)
   d4f3e:	4805      	ldr	r0, [pc, #20]	; (d4f54 <_Z22__fetch_global_Serial1v+0x40>)
   d4f40:	f000 fa0e 	bl	d5360 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4f44:	4803      	ldr	r0, [pc, #12]	; (d4f54 <_Z22__fetch_global_Serial1v+0x40>)
   d4f46:	bd38      	pop	{r3, r4, r5, pc}
   d4f48:	2003e674 	.word	0x2003e674
   d4f4c:	2003e678 	.word	0x2003e678
   d4f50:	2003e5f0 	.word	0x2003e5f0
   d4f54:	2003e5dc 	.word	0x2003e5dc
   d4f58:	2003e194 	.word	0x2003e194
   d4f5c:	000d4e5d 	.word	0x000d4e5d

000d4f60 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4f60:	7441      	strb	r1, [r0, #17]
   d4f62:	4770      	bx	lr

000d4f64 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4f64:	4770      	bx	lr

000d4f66 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4f66:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4f68:	2100      	movs	r1, #0
   d4f6a:	7c00      	ldrb	r0, [r0, #16]
   d4f6c:	f7ff fb7a 	bl	d4664 <HAL_USB_USART_Receive_Data>
}
   d4f70:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4f74:	bf28      	it	cs
   d4f76:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d4f7a:	bd08      	pop	{r3, pc}

000d4f7c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4f7c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4f7e:	2101      	movs	r1, #1
   d4f80:	7c00      	ldrb	r0, [r0, #16]
   d4f82:	f7ff fb6f 	bl	d4664 <HAL_USB_USART_Receive_Data>
}
   d4f86:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4f8a:	bf28      	it	cs
   d4f8c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d4f90:	bd08      	pop	{r3, pc}

000d4f92 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4f92:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4f94:	7c00      	ldrb	r0, [r0, #16]
   d4f96:	f7ff fb5d 	bl	d4654 <HAL_USB_USART_Available_Data_For_Write>
}
   d4f9a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4f9e:	bd08      	pop	{r3, pc}

000d4fa0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4fa0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4fa2:	7c00      	ldrb	r0, [r0, #16]
   d4fa4:	f7ff fb4e 	bl	d4644 <HAL_USB_USART_Available_Data>
}
   d4fa8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4fac:	bd08      	pop	{r3, pc}

000d4fae <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4fae:	7c00      	ldrb	r0, [r0, #16]
   d4fb0:	f7ff bb68 	b.w	d4684 <HAL_USB_USART_Flush_Data>

000d4fb4 <_ZN9USBSerialD0Ev>:
   d4fb4:	b510      	push	{r4, lr}
   d4fb6:	2114      	movs	r1, #20
   d4fb8:	4604      	mov	r4, r0
   d4fba:	f000 f9d6 	bl	d536a <_ZdlPvj>
   d4fbe:	4620      	mov	r0, r4
   d4fc0:	bd10      	pop	{r4, pc}

000d4fc2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4fc2:	b538      	push	{r3, r4, r5, lr}
   d4fc4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4fc6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4fc8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4fca:	f7ff fb43 	bl	d4654 <HAL_USB_USART_Available_Data_For_Write>
   d4fce:	2800      	cmp	r0, #0
   d4fd0:	dc01      	bgt.n	d4fd6 <_ZN9USBSerial5writeEh+0x14>
   d4fd2:	7c60      	ldrb	r0, [r4, #17]
   d4fd4:	b128      	cbz	r0, d4fe2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4fd6:	4629      	mov	r1, r5
   d4fd8:	7c20      	ldrb	r0, [r4, #16]
   d4fda:	f7ff fb4b 	bl	d4674 <HAL_USB_USART_Send_Data>
   d4fde:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4fe2:	bd38      	pop	{r3, r4, r5, pc}

000d4fe4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4fe4:	b510      	push	{r4, lr}
   d4fe6:	4604      	mov	r4, r0
   d4fe8:	2300      	movs	r3, #0
   d4fea:	6063      	str	r3, [r4, #4]
   d4fec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4ff0:	60a3      	str	r3, [r4, #8]
   d4ff2:	4b05      	ldr	r3, [pc, #20]	; (d5008 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4ff4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4ff6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4ff8:	4608      	mov	r0, r1
{
  _serial = serial;
   d4ffa:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4ffc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4ffe:	4611      	mov	r1, r2
   d5000:	f7ff fb10 	bl	d4624 <HAL_USB_USART_Init>
}
   d5004:	4620      	mov	r0, r4
   d5006:	bd10      	pop	{r4, pc}
   d5008:	000d5958 	.word	0x000d5958

000d500c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d500c:	2200      	movs	r2, #0
   d500e:	7c00      	ldrb	r0, [r0, #16]
   d5010:	f7ff bb10 	b.w	d4634 <HAL_USB_USART_Begin>

000d5014 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5014:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5016:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5018:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d501a:	2100      	movs	r1, #0
   d501c:	f000 fb23 	bl	d5666 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5020:	4620      	mov	r0, r4
   d5022:	bd10      	pop	{r4, pc}

000d5024 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5024:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5026:	4d0e      	ldr	r5, [pc, #56]	; (d5060 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5028:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d502a:	a801      	add	r0, sp, #4
   d502c:	f7ff fff2 	bl	d5014 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5030:	6829      	ldr	r1, [r5, #0]
   d5032:	f011 0401 	ands.w	r4, r1, #1
   d5036:	d110      	bne.n	d505a <_Z16_fetch_usbserialv+0x36>
   d5038:	4628      	mov	r0, r5
   d503a:	f7ff f830 	bl	d409e <__cxa_guard_acquire>
   d503e:	b160      	cbz	r0, d505a <_Z16_fetch_usbserialv+0x36>
   d5040:	aa01      	add	r2, sp, #4
   d5042:	4621      	mov	r1, r4
   d5044:	4807      	ldr	r0, [pc, #28]	; (d5064 <_Z16_fetch_usbserialv+0x40>)
   d5046:	f7ff ffcd 	bl	d4fe4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d504a:	4628      	mov	r0, r5
   d504c:	f7ff f82c 	bl	d40a8 <__cxa_guard_release>
   d5050:	4a05      	ldr	r2, [pc, #20]	; (d5068 <_Z16_fetch_usbserialv+0x44>)
   d5052:	4906      	ldr	r1, [pc, #24]	; (d506c <_Z16_fetch_usbserialv+0x48>)
   d5054:	4803      	ldr	r0, [pc, #12]	; (d5064 <_Z16_fetch_usbserialv+0x40>)
   d5056:	f000 f983 	bl	d5360 <__aeabi_atexit>
	return _usbserial;
}
   d505a:	4802      	ldr	r0, [pc, #8]	; (d5064 <_Z16_fetch_usbserialv+0x40>)
   d505c:	b007      	add	sp, #28
   d505e:	bd30      	pop	{r4, r5, pc}
   d5060:	2003e6fc 	.word	0x2003e6fc
   d5064:	2003e700 	.word	0x2003e700
   d5068:	2003e194 	.word	0x2003e194
   d506c:	000d4f65 	.word	0x000d4f65

000d5070 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5070:	2200      	movs	r2, #0
   d5072:	4611      	mov	r1, r2
   d5074:	6840      	ldr	r0, [r0, #4]
   d5076:	f7ff bb49 	b.w	d470c <network_ready>

000d507a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d507a:	2200      	movs	r2, #0
   d507c:	4611      	mov	r1, r2
   d507e:	6840      	ldr	r0, [r0, #4]
   d5080:	f7ff bb64 	b.w	d474c <network_listening>

000d5084 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5084:	2200      	movs	r2, #0
   d5086:	4611      	mov	r1, r2
   d5088:	6840      	ldr	r0, [r0, #4]
   d508a:	f7ff bb6f 	b.w	d476c <network_get_listen_timeout>

000d508e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d508e:	2200      	movs	r2, #0
   d5090:	6840      	ldr	r0, [r0, #4]
   d5092:	f7ff bb63 	b.w	d475c <network_set_listen_timeout>

000d5096 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5096:	2200      	movs	r2, #0
   d5098:	f081 0101 	eor.w	r1, r1, #1
   d509c:	6840      	ldr	r0, [r0, #4]
   d509e:	f7ff bb4d 	b.w	d473c <network_listen>

000d50a2 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d50a2:	2300      	movs	r3, #0
   d50a4:	461a      	mov	r2, r3
   d50a6:	4619      	mov	r1, r3
   d50a8:	6840      	ldr	r0, [r0, #4]
   d50aa:	f7ff bb3f 	b.w	d472c <network_off>

000d50ae <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d50ae:	2300      	movs	r3, #0
   d50b0:	461a      	mov	r2, r3
   d50b2:	4619      	mov	r1, r3
   d50b4:	6840      	ldr	r0, [r0, #4]
   d50b6:	f7ff bb31 	b.w	d471c <network_on>

000d50ba <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d50ba:	2200      	movs	r2, #0
   d50bc:	4611      	mov	r1, r2
   d50be:	6840      	ldr	r0, [r0, #4]
   d50c0:	f7ff bb14 	b.w	d46ec <network_connecting>

000d50c4 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d50c4:	2200      	movs	r2, #0
   d50c6:	2102      	movs	r1, #2
   d50c8:	6840      	ldr	r0, [r0, #4]
   d50ca:	f7ff bb17 	b.w	d46fc <network_disconnect>

000d50ce <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d50ce:	2300      	movs	r3, #0
   d50d0:	461a      	mov	r2, r3
   d50d2:	6840      	ldr	r0, [r0, #4]
   d50d4:	f7ff bb02 	b.w	d46dc <network_connect>

000d50d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d50d8:	4b02      	ldr	r3, [pc, #8]	; (d50e4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d50da:	2204      	movs	r2, #4
   d50dc:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d50de:	4a02      	ldr	r2, [pc, #8]	; (d50e8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d50e0:	601a      	str	r2, [r3, #0]
   d50e2:	4770      	bx	lr
   d50e4:	2003e714 	.word	0x2003e714
   d50e8:	000d5988 	.word	0x000d5988

000d50ec <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d50ec:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d50ee:	4b0c      	ldr	r3, [pc, #48]	; (d5120 <serialEventRun+0x34>)
   d50f0:	b133      	cbz	r3, d5100 <serialEventRun+0x14>
   d50f2:	f7ff ff97 	bl	d5024 <_Z16_fetch_usbserialv>
   d50f6:	6803      	ldr	r3, [r0, #0]
   d50f8:	691b      	ldr	r3, [r3, #16]
   d50fa:	4798      	blx	r3
   d50fc:	2800      	cmp	r0, #0
   d50fe:	dc09      	bgt.n	d5114 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5100:	4b08      	ldr	r3, [pc, #32]	; (d5124 <serialEventRun+0x38>)
   d5102:	b163      	cbz	r3, d511e <serialEventRun+0x32>
   d5104:	f7ff ff06 	bl	d4f14 <_Z22__fetch_global_Serial1v>
   d5108:	6803      	ldr	r3, [r0, #0]
   d510a:	691b      	ldr	r3, [r3, #16]
   d510c:	4798      	blx	r3
   d510e:	2800      	cmp	r0, #0
   d5110:	dc03      	bgt.n	d511a <serialEventRun+0x2e>
   d5112:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5114:	f3af 8000 	nop.w
   d5118:	e7f2      	b.n	d5100 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d511a:	f3af 8000 	nop.w
   d511e:	bd08      	pop	{r3, pc}
	...

000d5128 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5128:	b508      	push	{r3, lr}
	serialEventRun();
   d512a:	f7ff ffdf 	bl	d50ec <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d512e:	f7ff f9a1 	bl	d4474 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5132:	4b01      	ldr	r3, [pc, #4]	; (d5138 <_post_loop+0x10>)
   d5134:	6018      	str	r0, [r3, #0]
   d5136:	bd08      	pop	{r3, pc}
   d5138:	2003e730 	.word	0x2003e730

000d513c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d513c:	4802      	ldr	r0, [pc, #8]	; (d5148 <_Z33system_initialize_user_backup_ramv+0xc>)
   d513e:	4a03      	ldr	r2, [pc, #12]	; (d514c <_Z33system_initialize_user_backup_ramv+0x10>)
   d5140:	4903      	ldr	r1, [pc, #12]	; (d5150 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5142:	1a12      	subs	r2, r2, r0
   d5144:	f000 ba84 	b.w	d5650 <memcpy>
   d5148:	2003f400 	.word	0x2003f400
   d514c:	2003f404 	.word	0x2003f404
   d5150:	000d5a60 	.word	0x000d5a60

000d5154 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5154:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5156:	2300      	movs	r3, #0
   d5158:	9300      	str	r3, [sp, #0]
   d515a:	461a      	mov	r2, r3
   d515c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5160:	f7ff faaa 	bl	d46b8 <system_ctrl_set_result>
}
   d5164:	b003      	add	sp, #12
   d5166:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d516c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d516c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d516e:	8843      	ldrh	r3, [r0, #2]
   d5170:	2b0a      	cmp	r3, #10
   d5172:	d008      	beq.n	d5186 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5174:	2b50      	cmp	r3, #80	; 0x50
   d5176:	d109      	bne.n	d518c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5178:	4b09      	ldr	r3, [pc, #36]	; (d51a0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d517a:	681b      	ldr	r3, [r3, #0]
   d517c:	b13b      	cbz	r3, d518e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d517e:	b003      	add	sp, #12
   d5180:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5184:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5186:	f7ff ffe5 	bl	d5154 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d518a:	e006      	b.n	d519a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d518c:	2300      	movs	r3, #0
   d518e:	9300      	str	r3, [sp, #0]
   d5190:	461a      	mov	r2, r3
   d5192:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5196:	f7ff fa8f 	bl	d46b8 <system_ctrl_set_result>
        break;
    }
}
   d519a:	b003      	add	sp, #12
   d519c:	f85d fb04 	ldr.w	pc, [sp], #4
   d51a0:	2003e71c 	.word	0x2003e71c

000d51a4 <module_user_init_hook>:

void module_user_init_hook()
{
   d51a4:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d51a6:	4c10      	ldr	r4, [pc, #64]	; (d51e8 <module_user_init_hook+0x44>)
   d51a8:	4d10      	ldr	r5, [pc, #64]	; (d51ec <module_user_init_hook+0x48>)
   d51aa:	6823      	ldr	r3, [r4, #0]
   d51ac:	42ab      	cmp	r3, r5
   d51ae:	4b10      	ldr	r3, [pc, #64]	; (d51f0 <module_user_init_hook+0x4c>)
   d51b0:	bf0c      	ite	eq
   d51b2:	2201      	moveq	r2, #1
   d51b4:	2200      	movne	r2, #0
   d51b6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d51b8:	d002      	beq.n	d51c0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d51ba:	f7ff ffbf 	bl	d513c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d51be:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d51c0:	f7ff f950 	bl	d4464 <HAL_RNG_GetRandomNumber>
   d51c4:	4604      	mov	r4, r0
    srand(seed);
   d51c6:	f000 fa57 	bl	d5678 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d51ca:	4b0a      	ldr	r3, [pc, #40]	; (d51f4 <module_user_init_hook+0x50>)
   d51cc:	b113      	cbz	r3, d51d4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d51ce:	4620      	mov	r0, r4
   d51d0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d51d4:	2100      	movs	r1, #0
   d51d6:	4807      	ldr	r0, [pc, #28]	; (d51f4 <module_user_init_hook+0x50>)
   d51d8:	f7ff fa78 	bl	d46cc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d51dc:	2100      	movs	r1, #0
   d51de:	4806      	ldr	r0, [pc, #24]	; (d51f8 <module_user_init_hook+0x54>)
}
   d51e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d51e4:	f7ff ba5e 	b.w	d46a4 <system_ctrl_set_app_request_handler>
   d51e8:	2003f400 	.word	0x2003f400
   d51ec:	9a271c1e 	.word	0x9a271c1e
   d51f0:	2003e720 	.word	0x2003e720
   d51f4:	00000000 	.word	0x00000000
   d51f8:	000d516d 	.word	0x000d516d

000d51fc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d51fc:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d51fe:	4e18      	ldr	r6, [pc, #96]	; (d5260 <pinAvailable+0x64>)
   d5200:	6831      	ldr	r1, [r6, #0]
   d5202:	f011 0501 	ands.w	r5, r1, #1
   d5206:	4604      	mov	r4, r0
   d5208:	d10a      	bne.n	d5220 <pinAvailable+0x24>
   d520a:	4630      	mov	r0, r6
   d520c:	f7fe ff47 	bl	d409e <__cxa_guard_acquire>
   d5210:	b130      	cbz	r0, d5220 <pinAvailable+0x24>
   d5212:	4629      	mov	r1, r5
   d5214:	4813      	ldr	r0, [pc, #76]	; (d5264 <pinAvailable+0x68>)
   d5216:	f7ff fdef 	bl	d4df8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d521a:	4630      	mov	r0, r6
   d521c:	f7fe ff44 	bl	d40a8 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d5220:	4810      	ldr	r0, [pc, #64]	; (d5264 <pinAvailable+0x68>)
   d5222:	f7ff fdf3 	bl	d4e0c <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5226:	b128      	cbz	r0, d5234 <pinAvailable+0x38>
   d5228:	f1a4 030b 	sub.w	r3, r4, #11
   d522c:	2b02      	cmp	r3, #2
   d522e:	d801      	bhi.n	d5234 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d5230:	2000      	movs	r0, #0
   d5232:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5234:	f000 f86e 	bl	d5314 <_Z19__fetch_global_Wirev>
   d5238:	f7ff fb5a 	bl	d48f0 <_ZN7TwoWire9isEnabledEv>
   d523c:	b108      	cbz	r0, d5242 <pinAvailable+0x46>
   d523e:	2c01      	cmp	r4, #1
   d5240:	d9f6      	bls.n	d5230 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5242:	f7ff fe67 	bl	d4f14 <_Z22__fetch_global_Serial1v>
   d5246:	f7ff fe61 	bl	d4f0c <_ZN11USARTSerial9isEnabledEv>
   d524a:	b118      	cbz	r0, d5254 <pinAvailable+0x58>
   d524c:	f1a4 0309 	sub.w	r3, r4, #9
   d5250:	2b01      	cmp	r3, #1
   d5252:	d9ed      	bls.n	d5230 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5254:	2c23      	cmp	r4, #35	; 0x23
   d5256:	bf8c      	ite	hi
   d5258:	2000      	movhi	r0, #0
   d525a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d525c:	bd70      	pop	{r4, r5, r6, pc}
   d525e:	bf00      	nop
   d5260:	2003e724 	.word	0x2003e724
   d5264:	2003e728 	.word	0x2003e728

000d5268 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5268:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d526a:	b538      	push	{r3, r4, r5, lr}
   d526c:	4604      	mov	r4, r0
   d526e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5270:	d80a      	bhi.n	d5288 <pinMode+0x20>
   d5272:	29ff      	cmp	r1, #255	; 0xff
   d5274:	d008      	beq.n	d5288 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5276:	f7ff ffc1 	bl	d51fc <pinAvailable>
   d527a:	b128      	cbz	r0, d5288 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d527c:	4629      	mov	r1, r5
   d527e:	4620      	mov	r0, r4
}
   d5280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5284:	f7ff b90e 	b.w	d44a4 <HAL_Pin_Mode>
   d5288:	bd38      	pop	{r3, r4, r5, pc}

000d528a <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d528a:	b510      	push	{r4, lr}
   d528c:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d528e:	f7ff f911 	bl	d44b4 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d5292:	3804      	subs	r0, #4
   d5294:	b2c0      	uxtb	r0, r0
   d5296:	2801      	cmp	r0, #1
   d5298:	d908      	bls.n	d52ac <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d529a:	4620      	mov	r0, r4
   d529c:	f7ff ffae 	bl	d51fc <pinAvailable>
   d52a0:	b120      	cbz	r0, d52ac <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d52a2:	4620      	mov	r0, r4
}
   d52a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d52a8:	f7ff b90c 	b.w	d44c4 <HAL_GPIO_Read>
}
   d52ac:	2000      	movs	r0, #0
   d52ae:	bd10      	pop	{r4, pc}

000d52b0 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d52b0:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d52b2:	b510      	push	{r4, lr}
   d52b4:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d52b6:	bf9c      	itt	ls
   d52b8:	340e      	addls	r4, #14
   d52ba:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d52bc:	4620      	mov	r0, r4
   d52be:	f7ff ff9d 	bl	d51fc <pinAvailable>
   d52c2:	b150      	cbz	r0, d52da <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d52c4:	2103      	movs	r1, #3
   d52c6:	4620      	mov	r0, r4
   d52c8:	f7ff f8e4 	bl	d4494 <HAL_Validate_Pin_Function>
   d52cc:	2803      	cmp	r0, #3
   d52ce:	d104      	bne.n	d52da <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d52d0:	4620      	mov	r0, r4
}
   d52d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d52d6:	f7ff b8fd 	b.w	d44d4 <HAL_ADC_Read>
}
   d52da:	2000      	movs	r0, #0
   d52dc:	bd10      	pop	{r4, pc}
	...

000d52e0 <_Z17acquireWireBufferv>:
   d52e0:	b570      	push	{r4, r5, r6, lr}
   d52e2:	4604      	mov	r4, r0
   d52e4:	2514      	movs	r5, #20
   d52e6:	462a      	mov	r2, r5
   d52e8:	4e09      	ldr	r6, [pc, #36]	; (d5310 <_Z17acquireWireBufferv+0x30>)
   d52ea:	2100      	movs	r1, #0
   d52ec:	f000 f9bb 	bl	d5666 <memset>
   d52f0:	8025      	strh	r5, [r4, #0]
   d52f2:	2520      	movs	r5, #32
   d52f4:	4631      	mov	r1, r6
   d52f6:	60a5      	str	r5, [r4, #8]
   d52f8:	6125      	str	r5, [r4, #16]
   d52fa:	4628      	mov	r0, r5
   d52fc:	f000 f84f 	bl	d539e <_ZnajRKSt9nothrow_t>
   d5300:	4631      	mov	r1, r6
   d5302:	6060      	str	r0, [r4, #4]
   d5304:	4628      	mov	r0, r5
   d5306:	f000 f84a 	bl	d539e <_ZnajRKSt9nothrow_t>
   d530a:	60e0      	str	r0, [r4, #12]
   d530c:	4620      	mov	r0, r4
   d530e:	bd70      	pop	{r4, r5, r6, pc}
   d5310:	000d59b4 	.word	0x000d59b4

000d5314 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5314:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5316:	4d0e      	ldr	r5, [pc, #56]	; (d5350 <_Z19__fetch_global_Wirev+0x3c>)
   d5318:	6829      	ldr	r1, [r5, #0]
   d531a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d531e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5320:	d113      	bne.n	d534a <_Z19__fetch_global_Wirev+0x36>
   d5322:	4628      	mov	r0, r5
   d5324:	f7fe febb 	bl	d409e <__cxa_guard_acquire>
   d5328:	b178      	cbz	r0, d534a <_Z19__fetch_global_Wirev+0x36>
   d532a:	a801      	add	r0, sp, #4
   d532c:	f7ff ffd8 	bl	d52e0 <_Z17acquireWireBufferv>
   d5330:	aa01      	add	r2, sp, #4
   d5332:	4621      	mov	r1, r4
   d5334:	4807      	ldr	r0, [pc, #28]	; (d5354 <_Z19__fetch_global_Wirev+0x40>)
   d5336:	f7ff fac9 	bl	d48cc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d533a:	4628      	mov	r0, r5
   d533c:	f7fe feb4 	bl	d40a8 <__cxa_guard_release>
   d5340:	4a05      	ldr	r2, [pc, #20]	; (d5358 <_Z19__fetch_global_Wirev+0x44>)
   d5342:	4906      	ldr	r1, [pc, #24]	; (d535c <_Z19__fetch_global_Wirev+0x48>)
   d5344:	4803      	ldr	r0, [pc, #12]	; (d5354 <_Z19__fetch_global_Wirev+0x40>)
   d5346:	f000 f80b 	bl	d5360 <__aeabi_atexit>
	return wire;
}
   d534a:	4802      	ldr	r0, [pc, #8]	; (d5354 <_Z19__fetch_global_Wirev+0x40>)
   d534c:	b007      	add	sp, #28
   d534e:	bd30      	pop	{r4, r5, pc}
   d5350:	2003e734 	.word	0x2003e734
   d5354:	2003e738 	.word	0x2003e738
   d5358:	2003e194 	.word	0x2003e194
   d535c:	000d4875 	.word	0x000d4875

000d5360 <__aeabi_atexit>:
   d5360:	460b      	mov	r3, r1
   d5362:	4601      	mov	r1, r0
   d5364:	4618      	mov	r0, r3
   d5366:	f000 b965 	b.w	d5634 <__cxa_atexit>

000d536a <_ZdlPvj>:
   d536a:	f7fe be94 	b.w	d4096 <_ZdlPv>
	...

000d5370 <_ZSt15get_new_handlerv>:
   d5370:	4b02      	ldr	r3, [pc, #8]	; (d537c <_ZSt15get_new_handlerv+0xc>)
   d5372:	6818      	ldr	r0, [r3, #0]
   d5374:	f3bf 8f5f 	dmb	sy
   d5378:	4770      	bx	lr
   d537a:	bf00      	nop
   d537c:	2003e74c 	.word	0x2003e74c

000d5380 <_ZnwjRKSt9nothrow_t>:
   d5380:	b510      	push	{r4, lr}
   d5382:	2800      	cmp	r0, #0
   d5384:	bf14      	ite	ne
   d5386:	4604      	movne	r4, r0
   d5388:	2401      	moveq	r4, #1
   d538a:	4620      	mov	r0, r4
   d538c:	f7ff f9f6 	bl	d477c <malloc>
   d5390:	b920      	cbnz	r0, d539c <_ZnwjRKSt9nothrow_t+0x1c>
   d5392:	f7ff ffed 	bl	d5370 <_ZSt15get_new_handlerv>
   d5396:	b108      	cbz	r0, d539c <_ZnwjRKSt9nothrow_t+0x1c>
   d5398:	4780      	blx	r0
   d539a:	e7f6      	b.n	d538a <_ZnwjRKSt9nothrow_t+0xa>
   d539c:	bd10      	pop	{r4, pc}

000d539e <_ZnajRKSt9nothrow_t>:
   d539e:	f7ff bfef 	b.w	d5380 <_ZnwjRKSt9nothrow_t>
	...

000d53a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d53a4:	4b24      	ldr	r3, [pc, #144]	; (d5438 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d53a6:	681a      	ldr	r2, [r3, #0]
   d53a8:	07d0      	lsls	r0, r2, #31
   d53aa:	bf5c      	itt	pl
   d53ac:	2201      	movpl	r2, #1
   d53ae:	601a      	strpl	r2, [r3, #0]
   d53b0:	4b22      	ldr	r3, [pc, #136]	; (d543c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d53b2:	681a      	ldr	r2, [r3, #0]
   d53b4:	07d1      	lsls	r1, r2, #31
   d53b6:	bf5c      	itt	pl
   d53b8:	2201      	movpl	r2, #1
   d53ba:	601a      	strpl	r2, [r3, #0]
   d53bc:	4b20      	ldr	r3, [pc, #128]	; (d5440 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d53be:	681a      	ldr	r2, [r3, #0]
   d53c0:	07d2      	lsls	r2, r2, #31
   d53c2:	bf5c      	itt	pl
   d53c4:	2201      	movpl	r2, #1
   d53c6:	601a      	strpl	r2, [r3, #0]
   d53c8:	4b1e      	ldr	r3, [pc, #120]	; (d5444 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d53ca:	681a      	ldr	r2, [r3, #0]
   d53cc:	07d0      	lsls	r0, r2, #31
   d53ce:	bf5c      	itt	pl
   d53d0:	2201      	movpl	r2, #1
   d53d2:	601a      	strpl	r2, [r3, #0]
   d53d4:	4b1c      	ldr	r3, [pc, #112]	; (d5448 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d53d6:	681a      	ldr	r2, [r3, #0]
   d53d8:	07d1      	lsls	r1, r2, #31
   d53da:	bf5c      	itt	pl
   d53dc:	2201      	movpl	r2, #1
   d53de:	601a      	strpl	r2, [r3, #0]
   d53e0:	4b1a      	ldr	r3, [pc, #104]	; (d544c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d53e2:	681a      	ldr	r2, [r3, #0]
   d53e4:	07d2      	lsls	r2, r2, #31
   d53e6:	bf5c      	itt	pl
   d53e8:	2201      	movpl	r2, #1
   d53ea:	601a      	strpl	r2, [r3, #0]
   d53ec:	4b18      	ldr	r3, [pc, #96]	; (d5450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d53ee:	681a      	ldr	r2, [r3, #0]
   d53f0:	07d0      	lsls	r0, r2, #31
   d53f2:	bf5c      	itt	pl
   d53f4:	2201      	movpl	r2, #1
   d53f6:	601a      	strpl	r2, [r3, #0]
   d53f8:	4b16      	ldr	r3, [pc, #88]	; (d5454 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d53fa:	681a      	ldr	r2, [r3, #0]
   d53fc:	07d1      	lsls	r1, r2, #31
   d53fe:	bf5c      	itt	pl
   d5400:	2201      	movpl	r2, #1
   d5402:	601a      	strpl	r2, [r3, #0]
   d5404:	4b14      	ldr	r3, [pc, #80]	; (d5458 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5406:	681a      	ldr	r2, [r3, #0]
   d5408:	07d2      	lsls	r2, r2, #31
   d540a:	bf5c      	itt	pl
   d540c:	2201      	movpl	r2, #1
   d540e:	601a      	strpl	r2, [r3, #0]
   d5410:	4b12      	ldr	r3, [pc, #72]	; (d545c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5412:	681a      	ldr	r2, [r3, #0]
   d5414:	07d0      	lsls	r0, r2, #31
   d5416:	bf5c      	itt	pl
   d5418:	2201      	movpl	r2, #1
   d541a:	601a      	strpl	r2, [r3, #0]
   d541c:	4b10      	ldr	r3, [pc, #64]	; (d5460 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d541e:	681a      	ldr	r2, [r3, #0]
   d5420:	07d1      	lsls	r1, r2, #31
   d5422:	bf5c      	itt	pl
   d5424:	2201      	movpl	r2, #1
   d5426:	601a      	strpl	r2, [r3, #0]
   d5428:	4b0e      	ldr	r3, [pc, #56]	; (d5464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d542a:	681a      	ldr	r2, [r3, #0]
   d542c:	07d2      	lsls	r2, r2, #31
   d542e:	bf5c      	itt	pl
   d5430:	2201      	movpl	r2, #1
   d5432:	601a      	strpl	r2, [r3, #0]
   d5434:	4770      	bx	lr
   d5436:	bf00      	nop
   d5438:	2003e77c 	.word	0x2003e77c
   d543c:	2003e778 	.word	0x2003e778
   d5440:	2003e774 	.word	0x2003e774
   d5444:	2003e770 	.word	0x2003e770
   d5448:	2003e76c 	.word	0x2003e76c
   d544c:	2003e768 	.word	0x2003e768
   d5450:	2003e764 	.word	0x2003e764
   d5454:	2003e760 	.word	0x2003e760
   d5458:	2003e75c 	.word	0x2003e75c
   d545c:	2003e758 	.word	0x2003e758
   d5460:	2003e754 	.word	0x2003e754
   d5464:	2003e750 	.word	0x2003e750

000d5468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5468:	4b18      	ldr	r3, [pc, #96]	; (d54cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d546a:	681a      	ldr	r2, [r3, #0]
   d546c:	07d1      	lsls	r1, r2, #31
   d546e:	bf5c      	itt	pl
   d5470:	2201      	movpl	r2, #1
   d5472:	601a      	strpl	r2, [r3, #0]
   d5474:	4b16      	ldr	r3, [pc, #88]	; (d54d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5476:	681a      	ldr	r2, [r3, #0]
   d5478:	07d2      	lsls	r2, r2, #31
   d547a:	bf5c      	itt	pl
   d547c:	2201      	movpl	r2, #1
   d547e:	601a      	strpl	r2, [r3, #0]
   d5480:	4b14      	ldr	r3, [pc, #80]	; (d54d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5482:	681a      	ldr	r2, [r3, #0]
   d5484:	07d0      	lsls	r0, r2, #31
   d5486:	bf5c      	itt	pl
   d5488:	2201      	movpl	r2, #1
   d548a:	601a      	strpl	r2, [r3, #0]
   d548c:	4b12      	ldr	r3, [pc, #72]	; (d54d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d548e:	681a      	ldr	r2, [r3, #0]
   d5490:	07d1      	lsls	r1, r2, #31
   d5492:	bf5c      	itt	pl
   d5494:	2201      	movpl	r2, #1
   d5496:	601a      	strpl	r2, [r3, #0]
   d5498:	4b10      	ldr	r3, [pc, #64]	; (d54dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d549a:	681a      	ldr	r2, [r3, #0]
   d549c:	07d2      	lsls	r2, r2, #31
   d549e:	bf5c      	itt	pl
   d54a0:	2201      	movpl	r2, #1
   d54a2:	601a      	strpl	r2, [r3, #0]
   d54a4:	4b0e      	ldr	r3, [pc, #56]	; (d54e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d54a6:	681a      	ldr	r2, [r3, #0]
   d54a8:	07d0      	lsls	r0, r2, #31
   d54aa:	bf5c      	itt	pl
   d54ac:	2201      	movpl	r2, #1
   d54ae:	601a      	strpl	r2, [r3, #0]
   d54b0:	4b0c      	ldr	r3, [pc, #48]	; (d54e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d54b2:	681a      	ldr	r2, [r3, #0]
   d54b4:	07d1      	lsls	r1, r2, #31
   d54b6:	bf5c      	itt	pl
   d54b8:	2201      	movpl	r2, #1
   d54ba:	601a      	strpl	r2, [r3, #0]
   d54bc:	4b0a      	ldr	r3, [pc, #40]	; (d54e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d54be:	681a      	ldr	r2, [r3, #0]
   d54c0:	07d2      	lsls	r2, r2, #31
   d54c2:	bf5c      	itt	pl
   d54c4:	2201      	movpl	r2, #1
   d54c6:	601a      	strpl	r2, [r3, #0]
   d54c8:	4770      	bx	lr
   d54ca:	bf00      	nop
   d54cc:	2003e79c 	.word	0x2003e79c
   d54d0:	2003e798 	.word	0x2003e798
   d54d4:	2003e794 	.word	0x2003e794
   d54d8:	2003e790 	.word	0x2003e790
   d54dc:	2003e78c 	.word	0x2003e78c
   d54e0:	2003e788 	.word	0x2003e788
   d54e4:	2003e784 	.word	0x2003e784
   d54e8:	2003e780 	.word	0x2003e780

000d54ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d54ec:	4b18      	ldr	r3, [pc, #96]	; (d5550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d54ee:	681a      	ldr	r2, [r3, #0]
   d54f0:	07d1      	lsls	r1, r2, #31
   d54f2:	bf5c      	itt	pl
   d54f4:	2201      	movpl	r2, #1
   d54f6:	601a      	strpl	r2, [r3, #0]
   d54f8:	4b16      	ldr	r3, [pc, #88]	; (d5554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d54fa:	681a      	ldr	r2, [r3, #0]
   d54fc:	07d2      	lsls	r2, r2, #31
   d54fe:	bf5c      	itt	pl
   d5500:	2201      	movpl	r2, #1
   d5502:	601a      	strpl	r2, [r3, #0]
   d5504:	4b14      	ldr	r3, [pc, #80]	; (d5558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5506:	681a      	ldr	r2, [r3, #0]
   d5508:	07d0      	lsls	r0, r2, #31
   d550a:	bf5c      	itt	pl
   d550c:	2201      	movpl	r2, #1
   d550e:	601a      	strpl	r2, [r3, #0]
   d5510:	4b12      	ldr	r3, [pc, #72]	; (d555c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5512:	681a      	ldr	r2, [r3, #0]
   d5514:	07d1      	lsls	r1, r2, #31
   d5516:	bf5c      	itt	pl
   d5518:	2201      	movpl	r2, #1
   d551a:	601a      	strpl	r2, [r3, #0]
   d551c:	4b10      	ldr	r3, [pc, #64]	; (d5560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d551e:	681a      	ldr	r2, [r3, #0]
   d5520:	07d2      	lsls	r2, r2, #31
   d5522:	bf5c      	itt	pl
   d5524:	2201      	movpl	r2, #1
   d5526:	601a      	strpl	r2, [r3, #0]
   d5528:	4b0e      	ldr	r3, [pc, #56]	; (d5564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d552a:	681a      	ldr	r2, [r3, #0]
   d552c:	07d0      	lsls	r0, r2, #31
   d552e:	bf5c      	itt	pl
   d5530:	2201      	movpl	r2, #1
   d5532:	601a      	strpl	r2, [r3, #0]
   d5534:	4b0c      	ldr	r3, [pc, #48]	; (d5568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5536:	681a      	ldr	r2, [r3, #0]
   d5538:	07d1      	lsls	r1, r2, #31
   d553a:	bf5c      	itt	pl
   d553c:	2201      	movpl	r2, #1
   d553e:	601a      	strpl	r2, [r3, #0]
   d5540:	4b0a      	ldr	r3, [pc, #40]	; (d556c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5542:	681a      	ldr	r2, [r3, #0]
   d5544:	07d2      	lsls	r2, r2, #31
   d5546:	bf5c      	itt	pl
   d5548:	2201      	movpl	r2, #1
   d554a:	601a      	strpl	r2, [r3, #0]
   d554c:	4770      	bx	lr
   d554e:	bf00      	nop
   d5550:	2003e7bc 	.word	0x2003e7bc
   d5554:	2003e7b8 	.word	0x2003e7b8
   d5558:	2003e7b4 	.word	0x2003e7b4
   d555c:	2003e7b0 	.word	0x2003e7b0
   d5560:	2003e7ac 	.word	0x2003e7ac
   d5564:	2003e7a8 	.word	0x2003e7a8
   d5568:	2003e7a4 	.word	0x2003e7a4
   d556c:	2003e7a0 	.word	0x2003e7a0

000d5570 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5570:	4b24      	ldr	r3, [pc, #144]	; (d5604 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5572:	681a      	ldr	r2, [r3, #0]
   d5574:	07d0      	lsls	r0, r2, #31
   d5576:	bf5c      	itt	pl
   d5578:	2201      	movpl	r2, #1
   d557a:	601a      	strpl	r2, [r3, #0]
   d557c:	4b22      	ldr	r3, [pc, #136]	; (d5608 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d557e:	681a      	ldr	r2, [r3, #0]
   d5580:	07d1      	lsls	r1, r2, #31
   d5582:	bf5c      	itt	pl
   d5584:	2201      	movpl	r2, #1
   d5586:	601a      	strpl	r2, [r3, #0]
   d5588:	4b20      	ldr	r3, [pc, #128]	; (d560c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d558a:	681a      	ldr	r2, [r3, #0]
   d558c:	07d2      	lsls	r2, r2, #31
   d558e:	bf5c      	itt	pl
   d5590:	2201      	movpl	r2, #1
   d5592:	601a      	strpl	r2, [r3, #0]
   d5594:	4b1e      	ldr	r3, [pc, #120]	; (d5610 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5596:	681a      	ldr	r2, [r3, #0]
   d5598:	07d0      	lsls	r0, r2, #31
   d559a:	bf5c      	itt	pl
   d559c:	2201      	movpl	r2, #1
   d559e:	601a      	strpl	r2, [r3, #0]
   d55a0:	4b1c      	ldr	r3, [pc, #112]	; (d5614 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d55a2:	681a      	ldr	r2, [r3, #0]
   d55a4:	07d1      	lsls	r1, r2, #31
   d55a6:	bf5c      	itt	pl
   d55a8:	2201      	movpl	r2, #1
   d55aa:	601a      	strpl	r2, [r3, #0]
   d55ac:	4b1a      	ldr	r3, [pc, #104]	; (d5618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d55ae:	681a      	ldr	r2, [r3, #0]
   d55b0:	07d2      	lsls	r2, r2, #31
   d55b2:	bf5c      	itt	pl
   d55b4:	2201      	movpl	r2, #1
   d55b6:	601a      	strpl	r2, [r3, #0]
   d55b8:	4b18      	ldr	r3, [pc, #96]	; (d561c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d55ba:	681a      	ldr	r2, [r3, #0]
   d55bc:	07d0      	lsls	r0, r2, #31
   d55be:	bf5c      	itt	pl
   d55c0:	2201      	movpl	r2, #1
   d55c2:	601a      	strpl	r2, [r3, #0]
   d55c4:	4b16      	ldr	r3, [pc, #88]	; (d5620 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d55c6:	681a      	ldr	r2, [r3, #0]
   d55c8:	07d1      	lsls	r1, r2, #31
   d55ca:	bf5c      	itt	pl
   d55cc:	2201      	movpl	r2, #1
   d55ce:	601a      	strpl	r2, [r3, #0]
   d55d0:	4b14      	ldr	r3, [pc, #80]	; (d5624 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d55d2:	681a      	ldr	r2, [r3, #0]
   d55d4:	07d2      	lsls	r2, r2, #31
   d55d6:	bf5c      	itt	pl
   d55d8:	2201      	movpl	r2, #1
   d55da:	601a      	strpl	r2, [r3, #0]
   d55dc:	4b12      	ldr	r3, [pc, #72]	; (d5628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d55de:	681a      	ldr	r2, [r3, #0]
   d55e0:	07d0      	lsls	r0, r2, #31
   d55e2:	bf5c      	itt	pl
   d55e4:	2201      	movpl	r2, #1
   d55e6:	601a      	strpl	r2, [r3, #0]
   d55e8:	4b10      	ldr	r3, [pc, #64]	; (d562c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d55ea:	681a      	ldr	r2, [r3, #0]
   d55ec:	07d1      	lsls	r1, r2, #31
   d55ee:	bf5c      	itt	pl
   d55f0:	2201      	movpl	r2, #1
   d55f2:	601a      	strpl	r2, [r3, #0]
   d55f4:	4b0e      	ldr	r3, [pc, #56]	; (d5630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d55f6:	681a      	ldr	r2, [r3, #0]
   d55f8:	07d2      	lsls	r2, r2, #31
   d55fa:	bf5c      	itt	pl
   d55fc:	2201      	movpl	r2, #1
   d55fe:	601a      	strpl	r2, [r3, #0]
   d5600:	4770      	bx	lr
   d5602:	bf00      	nop
   d5604:	2003e7ec 	.word	0x2003e7ec
   d5608:	2003e7e8 	.word	0x2003e7e8
   d560c:	2003e7e4 	.word	0x2003e7e4
   d5610:	2003e7e0 	.word	0x2003e7e0
   d5614:	2003e7dc 	.word	0x2003e7dc
   d5618:	2003e7d8 	.word	0x2003e7d8
   d561c:	2003e7d4 	.word	0x2003e7d4
   d5620:	2003e7d0 	.word	0x2003e7d0
   d5624:	2003e7cc 	.word	0x2003e7cc
   d5628:	2003e7c8 	.word	0x2003e7c8
   d562c:	2003e7c4 	.word	0x2003e7c4
   d5630:	2003e7c0 	.word	0x2003e7c0

000d5634 <__cxa_atexit>:
   d5634:	b510      	push	{r4, lr}
   d5636:	4c05      	ldr	r4, [pc, #20]	; (d564c <__cxa_atexit+0x18>)
   d5638:	4613      	mov	r3, r2
   d563a:	b12c      	cbz	r4, d5648 <__cxa_atexit+0x14>
   d563c:	460a      	mov	r2, r1
   d563e:	4601      	mov	r1, r0
   d5640:	2002      	movs	r0, #2
   d5642:	f3af 8000 	nop.w
   d5646:	bd10      	pop	{r4, pc}
   d5648:	4620      	mov	r0, r4
   d564a:	bd10      	pop	{r4, pc}
   d564c:	00000000 	.word	0x00000000

000d5650 <memcpy>:
   d5650:	b510      	push	{r4, lr}
   d5652:	1e43      	subs	r3, r0, #1
   d5654:	440a      	add	r2, r1
   d5656:	4291      	cmp	r1, r2
   d5658:	d004      	beq.n	d5664 <memcpy+0x14>
   d565a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d565e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5662:	e7f8      	b.n	d5656 <memcpy+0x6>
   d5664:	bd10      	pop	{r4, pc}

000d5666 <memset>:
   d5666:	4402      	add	r2, r0
   d5668:	4603      	mov	r3, r0
   d566a:	4293      	cmp	r3, r2
   d566c:	d002      	beq.n	d5674 <memset+0xe>
   d566e:	f803 1b01 	strb.w	r1, [r3], #1
   d5672:	e7fa      	b.n	d566a <memset+0x4>
   d5674:	4770      	bx	lr
	...

000d5678 <srand>:
   d5678:	b538      	push	{r3, r4, r5, lr}
   d567a:	4b12      	ldr	r3, [pc, #72]	; (d56c4 <srand+0x4c>)
   d567c:	681c      	ldr	r4, [r3, #0]
   d567e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5680:	4605      	mov	r5, r0
   d5682:	b9d3      	cbnz	r3, d56ba <srand+0x42>
   d5684:	2018      	movs	r0, #24
   d5686:	f7ff f879 	bl	d477c <malloc>
   d568a:	f243 330e 	movw	r3, #13070	; 0x330e
   d568e:	63a0      	str	r0, [r4, #56]	; 0x38
   d5690:	8003      	strh	r3, [r0, #0]
   d5692:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5696:	8043      	strh	r3, [r0, #2]
   d5698:	f241 2334 	movw	r3, #4660	; 0x1234
   d569c:	8083      	strh	r3, [r0, #4]
   d569e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d56a2:	80c3      	strh	r3, [r0, #6]
   d56a4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d56a8:	8103      	strh	r3, [r0, #8]
   d56aa:	2305      	movs	r3, #5
   d56ac:	8143      	strh	r3, [r0, #10]
   d56ae:	230b      	movs	r3, #11
   d56b0:	8183      	strh	r3, [r0, #12]
   d56b2:	2201      	movs	r2, #1
   d56b4:	2300      	movs	r3, #0
   d56b6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d56ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d56bc:	2200      	movs	r2, #0
   d56be:	611d      	str	r5, [r3, #16]
   d56c0:	615a      	str	r2, [r3, #20]
   d56c2:	bd38      	pop	{r3, r4, r5, pc}
   d56c4:	2003e190 	.word	0x2003e190

000d56c8 <strlen>:
   d56c8:	4603      	mov	r3, r0
   d56ca:	f813 2b01 	ldrb.w	r2, [r3], #1
   d56ce:	2a00      	cmp	r2, #0
   d56d0:	d1fb      	bne.n	d56ca <strlen+0x2>
   d56d2:	1a18      	subs	r0, r3, r0
   d56d4:	3801      	subs	r0, #1
   d56d6:	4770      	bx	lr

000d56d8 <dynalib_user>:
   d56d8:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d56e8:	0000 0000 7542 7474 6e6f 5320 6174 6574     ....Button State
   d56f8:	203a 6925 000a 455a 4f52 6920 3d20 2520     : %i..ZERO i = %
   d5708:	2069 7241 6172 2079 6156 756c 3a65 2520     i Array Value: %
   d5718:	0a69 4f00 454e 2020 2069 203d 6925 4120     i..ONE  i = %i A
   d5728:	7272 7961 5620 6c61 6575 203a 6925 000a     rray Value: %i..

000d5738 <_ZTVN5spark13EthernetClassE>:
	...
   d5740:	4855 000d 484b 000d 4841 000d 4837 000d     UH..KH..AH..7H..
   d5750:	482b 000d 481f 000d 4813 000d 480b 000d     +H...H...H...H..
   d5760:	4801 000d 47f7 000d 4bd1 000d               .H...G...K..

000d576c <_ZTV7TwoWire>:
	...
   d5774:	4875 000d 48bf 000d 4897 000d 4877 000d     uH...H...H..wH..
   d5784:	489f 000d 48a7 000d 48af 000d 48b7 000d     .H...H...H...H..

000d5794 <_ZTV9IPAddress>:
	...
   d579c:	4909 000d 48f9 000d 48fb 000d 6162 6475     .I...H...H..baud
   d57ac:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d57bc:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d57cc:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d57dc:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d57ec:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d57fc:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d580c:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d581c:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d582c:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d583c:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d584c:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
   d585c:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   d586c:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d587c:	726f 7000 6e61 6369 6100 6c6c 0000 0000     or.panic.all....

000d588c <_ZTVN5spark9MeshClassE>:
	...
   d5894:	4a4b 000d 4a41 000d 4a37 000d 4a2d 000d     KJ..AJ..7J..-J..
   d58a4:	4a21 000d 4a15 000d 4a09 000d 4a01 000d     !J...J...J...J..
   d58b4:	49f7 000d 49ed 000d 4bd1 000d               .I...I...K..

000d58c0 <_ZTVN5spark12NetworkClassE>:
	...
   d58c8:	4b69 000d 4b73 000d 4b7d 000d 4b87 000d     iK..sK..}K...K..
   d58d8:	4b91 000d 4b9d 000d 4ba9 000d 4bb5 000d     .K...K...K...K..
   d58e8:	4bbd 000d 4bc7 000d 4bd1 000d 005a 2b25     .K...K...K..Z.%+
   d58f8:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   d5908:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   d5918:	6974 656d 0000 0000                         time....

000d5920 <_ZTV11USARTSerial>:
	...
   d5928:	4e5d 000d 4ead 000d 4ebb 000d 4cb1 000d     ]N...N...N...L..
   d5938:	4e71 000d 4e93 000d 4e7f 000d 4ea7 000d     qN...N...N...N..
   d5948:	4e5f 000d 4e63 000d                         _N..cN..

000d5950 <_ZTV9USBSerial>:
	...
   d5958:	4f65 000d 4fb5 000d 4fc3 000d 4cb1 000d     eO...O...O...L..
   d5968:	4fa1 000d 4f67 000d 4f7d 000d 4faf 000d     .O..gO..}O...O..
   d5978:	4f93 000d 4f61 000d                         .O..aO..

000d5980 <_ZTVN5spark9WiFiClassE>:
	...
   d5988:	50cf 000d 50c5 000d 50bb 000d 5071 000d     .P...P...P..qP..
   d5998:	50af 000d 50a3 000d 5097 000d 508f 000d     .P...P...P...P..
   d59a8:	5085 000d 507b 000d 4bd1 000d               .P..{P...K..

000d59b4 <_ZSt7nothrow>:
   d59b4:	0000 0000                                   ....

000d59b8 <__sf_fake_stdin>:
	...

000d59d8 <__sf_fake_stdout>:
	...

000d59f8 <__sf_fake_stderr>:
	...
   d5a18:	0043                                        C.

000d5a1a <link_const_variable_data_end>:
	...

000d5a1c <link_constructors_location>:
   d5a1c:	000d4229 	.word	0x000d4229
   d5a20:	000d43fb 	.word	0x000d43fb
   d5a24:	000d4401 	.word	0x000d4401
   d5a28:	000d47bd 	.word	0x000d47bd
   d5a2c:	000d4861 	.word	0x000d4861
   d5a30:	000d49dd 	.word	0x000d49dd
   d5a34:	000d4b19 	.word	0x000d4b19
   d5a38:	000d4c9d 	.word	0x000d4c9d
   d5a3c:	000d4ddd 	.word	0x000d4ddd
   d5a40:	000d4e15 	.word	0x000d4e15
   d5a44:	000d4e49 	.word	0x000d4e49
   d5a48:	000d50d9 	.word	0x000d50d9
   d5a4c:	000d53a5 	.word	0x000d53a5
   d5a50:	000d5469 	.word	0x000d5469
   d5a54:	000d54ed 	.word	0x000d54ed
   d5a58:	000d5571 	.word	0x000d5571

000d5a5c <link_constructors_end>:
   d5a5c:	00000000 	.word	0x00000000
