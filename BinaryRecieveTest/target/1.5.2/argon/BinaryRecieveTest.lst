
/Users/christianc/Documents/IoT/Capstone/BinaryRecieveTest/target/1.5.2/argon/BinaryRecieveTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001974  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5990  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  2003e314  000d5994  0001e314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000460  2003e390  2003e390  0002e390  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5a10  000d5a10  00025a10  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5a38  000d5a38  00025a38  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d8e4f  00000000  00000000  00025a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00010925  00000000  00000000  000fe88b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001eb6a  00000000  00000000  0010f1b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002538  00000000  00000000  0012dd1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000047e8  00000000  00000000  00130252  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003335d  00000000  00000000  00134a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00026d65  00000000  00000000  00167d97  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00105500  00000000  00000000  0018eafc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ce50  00000000  00000000  00293ffc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 faad 	bl	d558c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fab2 	bl	d55a2 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e314 	.word	0x2003e314
   d4048:	000d5994 	.word	0x000d5994
   d404c:	2003e390 	.word	0x2003e390
   d4050:	2003e390 	.word	0x2003e390
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 f855 	bl	d5108 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d5984 	.word	0x000d5984
   d4080:	000d594c 	.word	0x000d594c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b81c 	b.w	d40c0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f895 	bl	d41b8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bffb 	b.w	d508c <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 bac5 	b.w	d4624 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 bac3 	b.w	d4624 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40ae:	b510      	push	{r4, lr}
   d40b0:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40b2:	6800      	ldr	r0, [r0, #0]
   d40b4:	b108      	cbz	r0, d40ba <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40b6:	f000 fab5 	bl	d4624 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40ba:	4620      	mov	r0, r4
   d40bc:	bd10      	pop	{r4, pc}
	...

000d40c0 <setup>:
byte send_array[8];
int i;
int n;
byte value[8];

void setup() {
   d40c0:	b508      	push	{r3, lr}

  Serial.begin(9600);
   d40c2:	f000 ff61 	bl	d4f88 <_Z16_fetch_usbserialv>
   d40c6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40ca:	f000 ff51 	bl	d4f70 <_ZN9USBSerial5beginEl>
  pinMode(anodePin, INPUT);
   d40ce:	2100      	movs	r1, #0
   d40d0:	200e      	movs	r0, #14
   d40d2:	f001 f87b 	bl	d51cc <pinMode>
  delay(1000); //system set up time
   d40d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d40da:	f000 fabb 	bl	d4654 <delay>
  Serial.printf("System Ready...\n");
   d40de:	f000 ff53 	bl	d4f88 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d40e2:	4a03      	ldr	r2, [pc, #12]	; (d40f0 <setup+0x30>)
   d40e4:	2100      	movs	r1, #0

}
   d40e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d40ea:	f000 bd8e 	b.w	d4c0a <_ZN5Print11printf_implEbPKcz>
   d40ee:	bf00      	nop
   d40f0:	000d5628 	.word	0x000d5628

000d40f4 <_Z10decodeDataPh>:
    decodeData(send_array);
    i = 0;
  }
}

void decodeData(byte data[8]){ 
   d40f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  byte frank = 0x00;
  for(i = 7; i >= 0; i--){
   d40f6:	490d      	ldr	r1, [pc, #52]	; (d412c <_Z10decodeDataPh+0x38>)
   d40f8:	2307      	movs	r3, #7
   d40fa:	600b      	str	r3, [r1, #0]
    i = 0;
  }
}

void decodeData(byte data[8]){ 
  byte frank = 0x00;
   d40fc:	2400      	movs	r4, #0
  for(i = 7; i >= 0; i--){
   d40fe:	460d      	mov	r5, r1
   d4100:	680a      	ldr	r2, [r1, #0]
   d4102:	2a00      	cmp	r2, #0
   d4104:	db06      	blt.n	d4114 <_Z10decodeDataPh+0x20>
    frank = frank << 1 | data[i];
   d4106:	5c83      	ldrb	r3, [r0, r2]
  }
}

void decodeData(byte data[8]){ 
  byte frank = 0x00;
  for(i = 7; i >= 0; i--){
   d4108:	3a01      	subs	r2, #1
    frank = frank << 1 | data[i];
   d410a:	ea43 0444 	orr.w	r4, r3, r4, lsl #1
   d410e:	b2e4      	uxtb	r4, r4
  }
}

void decodeData(byte data[8]){ 
  byte frank = 0x00;
  for(i = 7; i >= 0; i--){
   d4110:	602a      	str	r2, [r5, #0]
   d4112:	e7f5      	b.n	d4100 <_Z10decodeDataPh+0xc>
    frank = frank << 1 | data[i];
  }
  Serial.printf("Frank: %x, %c, %s\n", frank, frank, frank);
   d4114:	f000 ff38 	bl	d4f88 <_Z16_fetch_usbserialv>
   d4118:	9401      	str	r4, [sp, #4]
   d411a:	9400      	str	r4, [sp, #0]
   d411c:	4623      	mov	r3, r4
   d411e:	4a04      	ldr	r2, [pc, #16]	; (d4130 <_Z10decodeDataPh+0x3c>)
   d4120:	2100      	movs	r1, #0
   d4122:	f000 fd72 	bl	d4c0a <_ZN5Print11printf_implEbPKcz>
}
   d4126:	b003      	add	sp, #12
   d4128:	bd30      	pop	{r4, r5, pc}
   d412a:	bf00      	nop
   d412c:	2003e3c8 	.word	0x2003e3c8
   d4130:	000d5639 	.word	0x000d5639

000d4134 <_Z8readZerov>:
        readOne();
      }
    }
}

void readZero() {
   d4134:	b573      	push	{r0, r1, r4, r5, r6, lr}
  send_array[i] = 0;
   d4136:	4c0c      	ldr	r4, [pc, #48]	; (d4168 <_Z8readZerov+0x34>)
   d4138:	4e0c      	ldr	r6, [pc, #48]	; (d416c <_Z8readZerov+0x38>)
   d413a:	6823      	ldr	r3, [r4, #0]
   d413c:	2500      	movs	r5, #0
   d413e:	54f5      	strb	r5, [r6, r3]
   Serial.printf("send_array[i]: %i i: %i\n", send_array[i], i);
   d4140:	f000 ff22 	bl	d4f88 <_Z16_fetch_usbserialv>
   d4144:	6822      	ldr	r2, [r4, #0]
   d4146:	9200      	str	r2, [sp, #0]
   d4148:	5cb3      	ldrb	r3, [r6, r2]
   d414a:	4a09      	ldr	r2, [pc, #36]	; (d4170 <_Z8readZerov+0x3c>)
   d414c:	4629      	mov	r1, r5
   d414e:	f000 fd5c 	bl	d4c0a <_ZN5Print11printf_implEbPKcz>
  i++;
   d4152:	6823      	ldr	r3, [r4, #0]
   d4154:	3301      	adds	r3, #1
  if(i > 7){
   d4156:	2b07      	cmp	r3, #7
}

void readZero() {
  send_array[i] = 0;
   Serial.printf("send_array[i]: %i i: %i\n", send_array[i], i);
  i++;
   d4158:	6023      	str	r3, [r4, #0]
  if(i > 7){
   d415a:	dd03      	ble.n	d4164 <_Z8readZerov+0x30>
void readOne() {
  send_array[i] = 1;
   Serial.printf("send_array[i]: %i i: %i\n", send_array[i], i);
  i++;
  if(i > 7){
    decodeData(send_array);
   d415c:	4630      	mov	r0, r6
   d415e:	f7ff ffc9 	bl	d40f4 <_Z10decodeDataPh>
    i = 0;
   d4162:	6025      	str	r5, [r4, #0]
  i++;
  if(i > 7){
    decodeData(send_array);
    i = 0;
  }
}
   d4164:	b002      	add	sp, #8
   d4166:	bd70      	pop	{r4, r5, r6, pc}
   d4168:	2003e3c8 	.word	0x2003e3c8
   d416c:	2003e394 	.word	0x2003e394
   d4170:	000d564c 	.word	0x000d564c

000d4174 <_Z7readOnev>:

void readOne() {
   d4174:	b537      	push	{r0, r1, r2, r4, r5, lr}
  send_array[i] = 1;
   d4176:	4c0d      	ldr	r4, [pc, #52]	; (d41ac <_Z7readOnev+0x38>)
   d4178:	4d0d      	ldr	r5, [pc, #52]	; (d41b0 <_Z7readOnev+0x3c>)
   d417a:	6823      	ldr	r3, [r4, #0]
   d417c:	2201      	movs	r2, #1
   d417e:	54ea      	strb	r2, [r5, r3]
   Serial.printf("send_array[i]: %i i: %i\n", send_array[i], i);
   d4180:	f000 ff02 	bl	d4f88 <_Z16_fetch_usbserialv>
   d4184:	6822      	ldr	r2, [r4, #0]
   d4186:	9200      	str	r2, [sp, #0]
   d4188:	5cab      	ldrb	r3, [r5, r2]
   d418a:	4a0a      	ldr	r2, [pc, #40]	; (d41b4 <_Z7readOnev+0x40>)
   d418c:	2100      	movs	r1, #0
   d418e:	f000 fd3c 	bl	d4c0a <_ZN5Print11printf_implEbPKcz>
  i++;
   d4192:	6823      	ldr	r3, [r4, #0]
   d4194:	3301      	adds	r3, #1
  if(i > 7){
   d4196:	2b07      	cmp	r3, #7
}

void readOne() {
  send_array[i] = 1;
   Serial.printf("send_array[i]: %i i: %i\n", send_array[i], i);
  i++;
   d4198:	6023      	str	r3, [r4, #0]
  if(i > 7){
   d419a:	dd04      	ble.n	d41a6 <_Z7readOnev+0x32>
    decodeData(send_array);
   d419c:	4628      	mov	r0, r5
   d419e:	f7ff ffa9 	bl	d40f4 <_Z10decodeDataPh>
    i = 0;
   d41a2:	2300      	movs	r3, #0
   d41a4:	6023      	str	r3, [r4, #0]
  }
}
   d41a6:	b003      	add	sp, #12
   d41a8:	bd30      	pop	{r4, r5, pc}
   d41aa:	bf00      	nop
   d41ac:	2003e3c8 	.word	0x2003e3c8
   d41b0:	2003e394 	.word	0x2003e394
   d41b4:	000d564c 	.word	0x000d564c

000d41b8 <loop>:
  delay(1000); //system set up time
  Serial.printf("System Ready...\n");

}

void loop() {
   d41b8:	b538      	push	{r3, r4, r5, lr}

  anodeRead = analogRead(anodePin);
   d41ba:	200e      	movs	r0, #14
  
    if (!timerState && anodeRead > triggerValue){ //if timer is off and anode is triggered then continue
   d41bc:	4c1e      	ldr	r4, [pc, #120]	; (d4238 <loop+0x80>)

}

void loop() {

  anodeRead = analogRead(anodePin);
   d41be:	f001 f816 	bl	d51ee <analogRead>
   d41c2:	4b1e      	ldr	r3, [pc, #120]	; (d423c <loop+0x84>)
  
    if (!timerState && anodeRead > triggerValue){ //if timer is off and anode is triggered then continue
   d41c4:	7822      	ldrb	r2, [r4, #0]

}

void loop() {

  anodeRead = analogRead(anodePin);
   d41c6:	6018      	str	r0, [r3, #0]
   d41c8:	461d      	mov	r5, r3
  
    if (!timerState && anodeRead > triggerValue){ //if timer is off and anode is triggered then continue
   d41ca:	b94a      	cbnz	r2, d41e0 <loop+0x28>
   d41cc:	4b1c      	ldr	r3, [pc, #112]	; (d4240 <loop+0x88>)
   d41ce:	681b      	ldr	r3, [r3, #0]
   d41d0:	4298      	cmp	r0, r3
   d41d2:	dd05      	ble.n	d41e0 <loop+0x28>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d41d4:	f000 f8a2 	bl	d431c <HAL_Timer_Get_Milli_Seconds>
      startTime = millis();
   d41d8:	4b1a      	ldr	r3, [pc, #104]	; (d4244 <loop+0x8c>)
   d41da:	6018      	str	r0, [r3, #0]
      timerState = true;
   d41dc:	2301      	movs	r3, #1
   d41de:	7023      	strb	r3, [r4, #0]
    }
  
    if (timerState && anodeRead < triggerValue){ //if timer is on and anode is not triggered then continue 
   d41e0:	7823      	ldrb	r3, [r4, #0]
   d41e2:	b343      	cbz	r3, d4236 <loop+0x7e>
   d41e4:	4b16      	ldr	r3, [pc, #88]	; (d4240 <loop+0x88>)
   d41e6:	682a      	ldr	r2, [r5, #0]
   d41e8:	681b      	ldr	r3, [r3, #0]
   d41ea:	429a      	cmp	r2, r3
   d41ec:	da23      	bge.n	d4236 <loop+0x7e>
   d41ee:	f000 f895 	bl	d431c <HAL_Timer_Get_Milli_Seconds>
      endTime = millis();
   d41f2:	4b15      	ldr	r3, [pc, #84]	; (d4248 <loop+0x90>)
   d41f4:	6018      	str	r0, [r3, #0]
      timerState = false;
   d41f6:	4b10      	ldr	r3, [pc, #64]	; (d4238 <loop+0x80>)
   d41f8:	2200      	movs	r2, #0
   d41fa:	701a      	strb	r2, [r3, #0]
      duration = endTime - startTime;
   d41fc:	4b11      	ldr	r3, [pc, #68]	; (d4244 <loop+0x8c>)
   d41fe:	681b      	ldr	r3, [r3, #0]
   d4200:	1ac0      	subs	r0, r0, r3
   d4202:	4b12      	ldr	r3, [pc, #72]	; (d424c <loop+0x94>)
   d4204:	6018      	str	r0, [r3, #0]
      if(duration > zeroMin && duration < zeroMax){
   d4206:	4b12      	ldr	r3, [pc, #72]	; (d4250 <loop+0x98>)
   d4208:	681b      	ldr	r3, [r3, #0]
   d420a:	4298      	cmp	r0, r3
   d420c:	d907      	bls.n	d421e <loop+0x66>
   d420e:	4b11      	ldr	r3, [pc, #68]	; (d4254 <loop+0x9c>)
   d4210:	681b      	ldr	r3, [r3, #0]
   d4212:	4298      	cmp	r0, r3
   d4214:	d203      	bcs.n	d421e <loop+0x66>
      }
      else if(duration > oneMin && duration < oneMax){
        readOne();
      }
    }
}
   d4216:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (timerState && anodeRead < triggerValue){ //if timer is on and anode is not triggered then continue 
      endTime = millis();
      timerState = false;
      duration = endTime - startTime;
      if(duration > zeroMin && duration < zeroMax){
        readZero();
   d421a:	f7ff bf8b 	b.w	d4134 <_Z8readZerov>
      }
      else if(duration > oneMin && duration < oneMax){
   d421e:	4b0e      	ldr	r3, [pc, #56]	; (d4258 <loop+0xa0>)
   d4220:	681b      	ldr	r3, [r3, #0]
   d4222:	4298      	cmp	r0, r3
   d4224:	d907      	bls.n	d4236 <loop+0x7e>
   d4226:	4b0d      	ldr	r3, [pc, #52]	; (d425c <loop+0xa4>)
   d4228:	681b      	ldr	r3, [r3, #0]
   d422a:	4298      	cmp	r0, r3
   d422c:	d203      	bcs.n	d4236 <loop+0x7e>
        readOne();
      }
    }
}
   d422e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      duration = endTime - startTime;
      if(duration > zeroMin && duration < zeroMax){
        readZero();
      }
      else if(duration > oneMin && duration < oneMax){
        readOne();
   d4232:	f7ff bf9f 	b.w	d4174 <_Z7readOnev>
   d4236:	bd38      	pop	{r3, r4, r5, pc}
   d4238:	2003e3cc 	.word	0x2003e3cc
   d423c:	2003e39c 	.word	0x2003e39c
   d4240:	2003e31c 	.word	0x2003e31c
   d4244:	2003e3c4 	.word	0x2003e3c4
   d4248:	2003e3c0 	.word	0x2003e3c0
   d424c:	2003e3bc 	.word	0x2003e3bc
   d4250:	2003e324 	.word	0x2003e324
   d4254:	2003e314 	.word	0x2003e314
   d4258:	2003e320 	.word	0x2003e320
   d425c:	2003e318 	.word	0x2003e318

000d4260 <_GLOBAL__sub_I_SystemMode>:
  byte frank = 0x00;
  for(i = 7; i >= 0; i--){
    frank = frank << 1 | data[i];
  }
  Serial.printf("Frank: %x, %c, %s\n", frank, frank, frank);
}
   d4260:	b538      	push	{r3, r4, r5, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4262:	4c10      	ldr	r4, [pc, #64]	; (d42a4 <_GLOBAL__sub_I_SystemMode+0x44>)
 * Description: LiFi Reciever 2.0
 * Author: Christian Chavez
 * Date: December, 2020
 */

SYSTEM_MODE(SEMI_AUTOMATIC);
   d4264:	4d10      	ldr	r5, [pc, #64]	; (d42a8 <_GLOBAL__sub_I_SystemMode+0x48>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4266:	f000 f861 	bl	d432c <HAL_Pin_Map>
   d426a:	2300      	movs	r3, #0
   d426c:	6023      	str	r3, [r4, #0]
   d426e:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4270:	71a3      	strb	r3, [r4, #6]
   d4272:	8123      	strh	r3, [r4, #8]
   d4274:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4278:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d427a:	2002      	movs	r0, #2
   d427c:	f000 f94e 	bl	d451c <set_system_mode>
   d4280:	4620      	mov	r0, r4
unsigned int startTime;
unsigned int endTime;
unsigned int duration;
bool timerState;

String temp;
   d4282:	4c0a      	ldr	r4, [pc, #40]	; (d42ac <_GLOBAL__sub_I_SystemMode+0x4c>)
 * Description: LiFi Reciever 2.0
 * Author: Christian Chavez
 * Date: December, 2020
 */

SYSTEM_MODE(SEMI_AUTOMATIC);
   d4284:	490a      	ldr	r1, [pc, #40]	; (d42b0 <_GLOBAL__sub_I_SystemMode+0x50>)
   d4286:	462a      	mov	r2, r5
   d4288:	f001 f808 	bl	d529c <__aeabi_atexit>
unsigned int startTime;
unsigned int endTime;
unsigned int duration;
bool timerState;

String temp;
   d428c:	4909      	ldr	r1, [pc, #36]	; (d42b4 <_GLOBAL__sub_I_SystemMode+0x54>)
   d428e:	4620      	mov	r0, r4
   d4290:	f000 fd5e 	bl	d4d50 <_ZN6StringC1EPK19__FlashStringHelper>
   d4294:	462a      	mov	r2, r5
   d4296:	4620      	mov	r0, r4
   d4298:	4907      	ldr	r1, [pc, #28]	; (d42b8 <_GLOBAL__sub_I_SystemMode+0x58>)
  byte frank = 0x00;
  for(i = 7; i >= 0; i--){
    frank = frank << 1 | data[i];
  }
  Serial.printf("Frank: %x, %c, %s\n", frank, frank, frank);
}
   d429a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
unsigned int startTime;
unsigned int endTime;
unsigned int duration;
bool timerState;

String temp;
   d429e:	f000 bffd 	b.w	d529c <__aeabi_atexit>
   d42a2:	bf00      	nop
   d42a4:	2003e3b0 	.word	0x2003e3b0
   d42a8:	2003e390 	.word	0x2003e390
   d42ac:	2003e3a0 	.word	0x2003e3a0
   d42b0:	000d40af 	.word	0x000d40af
   d42b4:	000d577f 	.word	0x000d577f
   d42b8:	000d4cc3 	.word	0x000d4cc3

000d42bc <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d42bc:	b508      	push	{r3, lr}
   d42be:	4b02      	ldr	r3, [pc, #8]	; (d42c8 <os_thread_is_current+0xc>)
   d42c0:	681b      	ldr	r3, [r3, #0]
   d42c2:	689b      	ldr	r3, [r3, #8]
   d42c4:	9301      	str	r3, [sp, #4]
   d42c6:	bd08      	pop	{r3, pc}
   d42c8:	00030248 	.word	0x00030248

000d42cc <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d42cc:	b508      	push	{r3, lr}
   d42ce:	4b02      	ldr	r3, [pc, #8]	; (d42d8 <os_thread_join+0xc>)
   d42d0:	681b      	ldr	r3, [r3, #0]
   d42d2:	691b      	ldr	r3, [r3, #16]
   d42d4:	9301      	str	r3, [sp, #4]
   d42d6:	bd08      	pop	{r3, pc}
   d42d8:	00030248 	.word	0x00030248

000d42dc <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d42dc:	b508      	push	{r3, lr}
   d42de:	4b02      	ldr	r3, [pc, #8]	; (d42e8 <os_thread_cleanup+0xc>)
   d42e0:	681b      	ldr	r3, [r3, #0]
   d42e2:	695b      	ldr	r3, [r3, #20]
   d42e4:	9301      	str	r3, [sp, #4]
   d42e6:	bd08      	pop	{r3, pc}
   d42e8:	00030248 	.word	0x00030248

000d42ec <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d42ec:	b508      	push	{r3, lr}
   d42ee:	4b02      	ldr	r3, [pc, #8]	; (d42f8 <os_mutex_recursive_create+0xc>)
   d42f0:	681b      	ldr	r3, [r3, #0]
   d42f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d42f4:	9301      	str	r3, [sp, #4]
   d42f6:	bd08      	pop	{r3, pc}
   d42f8:	00030248 	.word	0x00030248

000d42fc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d42fc:	b508      	push	{r3, lr}
   d42fe:	4b02      	ldr	r3, [pc, #8]	; (d4308 <os_mutex_recursive_destroy+0xc>)
   d4300:	681b      	ldr	r3, [r3, #0]
   d4302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4304:	9301      	str	r3, [sp, #4]
   d4306:	bd08      	pop	{r3, pc}
   d4308:	00030248 	.word	0x00030248

000d430c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d430c:	b508      	push	{r3, lr}
   d430e:	4b02      	ldr	r3, [pc, #8]	; (d4318 <HAL_RNG_GetRandomNumber+0xc>)
   d4310:	681b      	ldr	r3, [r3, #0]
   d4312:	685b      	ldr	r3, [r3, #4]
   d4314:	9301      	str	r3, [sp, #4]
   d4316:	bd08      	pop	{r3, pc}
   d4318:	00030218 	.word	0x00030218

000d431c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d431c:	b508      	push	{r3, lr}
   d431e:	4b02      	ldr	r3, [pc, #8]	; (d4328 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4320:	681b      	ldr	r3, [r3, #0]
   d4322:	695b      	ldr	r3, [r3, #20]
   d4324:	9301      	str	r3, [sp, #4]
   d4326:	bd08      	pop	{r3, pc}
   d4328:	00030218 	.word	0x00030218

000d432c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d432c:	b508      	push	{r3, lr}
   d432e:	4b02      	ldr	r3, [pc, #8]	; (d4338 <HAL_Pin_Map+0xc>)
   d4330:	681b      	ldr	r3, [r3, #0]
   d4332:	681b      	ldr	r3, [r3, #0]
   d4334:	9301      	str	r3, [sp, #4]
   d4336:	bd08      	pop	{r3, pc}
   d4338:	0003022c 	.word	0x0003022c

000d433c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d433c:	b508      	push	{r3, lr}
   d433e:	4b02      	ldr	r3, [pc, #8]	; (d4348 <HAL_Validate_Pin_Function+0xc>)
   d4340:	681b      	ldr	r3, [r3, #0]
   d4342:	685b      	ldr	r3, [r3, #4]
   d4344:	9301      	str	r3, [sp, #4]
   d4346:	bd08      	pop	{r3, pc}
   d4348:	0003022c 	.word	0x0003022c

000d434c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d434c:	b508      	push	{r3, lr}
   d434e:	4b02      	ldr	r3, [pc, #8]	; (d4358 <HAL_Pin_Mode+0xc>)
   d4350:	681b      	ldr	r3, [r3, #0]
   d4352:	689b      	ldr	r3, [r3, #8]
   d4354:	9301      	str	r3, [sp, #4]
   d4356:	bd08      	pop	{r3, pc}
   d4358:	0003022c 	.word	0x0003022c

000d435c <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d435c:	b508      	push	{r3, lr}
   d435e:	4b02      	ldr	r3, [pc, #8]	; (d4368 <HAL_ADC_Read+0xc>)
   d4360:	681b      	ldr	r3, [r3, #0]
   d4362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4364:	9301      	str	r3, [sp, #4]
   d4366:	bd08      	pop	{r3, pc}
   d4368:	0003022c 	.word	0x0003022c

000d436c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d436c:	b508      	push	{r3, lr}
   d436e:	4b02      	ldr	r3, [pc, #8]	; (d4378 <HAL_I2C_Write_Data+0xc>)
   d4370:	681b      	ldr	r3, [r3, #0]
   d4372:	6a1b      	ldr	r3, [r3, #32]
   d4374:	9301      	str	r3, [sp, #4]
   d4376:	bd08      	pop	{r3, pc}
   d4378:	00030228 	.word	0x00030228

000d437c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d437c:	b508      	push	{r3, lr}
   d437e:	4b02      	ldr	r3, [pc, #8]	; (d4388 <HAL_I2C_Available_Data+0xc>)
   d4380:	681b      	ldr	r3, [r3, #0]
   d4382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4384:	9301      	str	r3, [sp, #4]
   d4386:	bd08      	pop	{r3, pc}
   d4388:	00030228 	.word	0x00030228

000d438c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d438c:	b508      	push	{r3, lr}
   d438e:	4b02      	ldr	r3, [pc, #8]	; (d4398 <HAL_I2C_Read_Data+0xc>)
   d4390:	681b      	ldr	r3, [r3, #0]
   d4392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4394:	9301      	str	r3, [sp, #4]
   d4396:	bd08      	pop	{r3, pc}
   d4398:	00030228 	.word	0x00030228

000d439c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d439c:	b508      	push	{r3, lr}
   d439e:	4b02      	ldr	r3, [pc, #8]	; (d43a8 <HAL_I2C_Peek_Data+0xc>)
   d43a0:	681b      	ldr	r3, [r3, #0]
   d43a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d43a4:	9301      	str	r3, [sp, #4]
   d43a6:	bd08      	pop	{r3, pc}
   d43a8:	00030228 	.word	0x00030228

000d43ac <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d43ac:	b508      	push	{r3, lr}
   d43ae:	4b02      	ldr	r3, [pc, #8]	; (d43b8 <HAL_I2C_Flush_Data+0xc>)
   d43b0:	681b      	ldr	r3, [r3, #0]
   d43b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d43b4:	9301      	str	r3, [sp, #4]
   d43b6:	bd08      	pop	{r3, pc}
   d43b8:	00030228 	.word	0x00030228

000d43bc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d43bc:	b508      	push	{r3, lr}
   d43be:	4b02      	ldr	r3, [pc, #8]	; (d43c8 <HAL_I2C_Is_Enabled+0xc>)
   d43c0:	681b      	ldr	r3, [r3, #0]
   d43c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d43c4:	9301      	str	r3, [sp, #4]
   d43c6:	bd08      	pop	{r3, pc}
   d43c8:	00030228 	.word	0x00030228

000d43cc <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d43cc:	b508      	push	{r3, lr}
   d43ce:	4b02      	ldr	r3, [pc, #8]	; (d43d8 <HAL_I2C_Init+0xc>)
   d43d0:	681b      	ldr	r3, [r3, #0]
   d43d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d43d4:	9301      	str	r3, [sp, #4]
   d43d6:	bd08      	pop	{r3, pc}
   d43d8:	00030228 	.word	0x00030228

000d43dc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d43dc:	b508      	push	{r3, lr}
   d43de:	4b02      	ldr	r3, [pc, #8]	; (d43e8 <inet_inet_ntop+0xc>)
   d43e0:	681b      	ldr	r3, [r3, #0]
   d43e2:	695b      	ldr	r3, [r3, #20]
   d43e4:	9301      	str	r3, [sp, #4]
   d43e6:	bd08      	pop	{r3, pc}
   d43e8:	00030264 	.word	0x00030264

000d43ec <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d43ec:	b508      	push	{r3, lr}
   d43ee:	4b02      	ldr	r3, [pc, #8]	; (d43f8 <netdb_freeaddrinfo+0xc>)
   d43f0:	681b      	ldr	r3, [r3, #0]
   d43f2:	689b      	ldr	r3, [r3, #8]
   d43f4:	9301      	str	r3, [sp, #4]
   d43f6:	bd08      	pop	{r3, pc}
   d43f8:	00030268 	.word	0x00030268

000d43fc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d43fc:	b508      	push	{r3, lr}
   d43fe:	4b02      	ldr	r3, [pc, #8]	; (d4408 <netdb_getaddrinfo+0xc>)
   d4400:	681b      	ldr	r3, [r3, #0]
   d4402:	68db      	ldr	r3, [r3, #12]
   d4404:	9301      	str	r3, [sp, #4]
   d4406:	bd08      	pop	{r3, pc}
   d4408:	00030268 	.word	0x00030268

000d440c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d440c:	b508      	push	{r3, lr}
   d440e:	4b02      	ldr	r3, [pc, #8]	; (d4418 <HAL_SPI_Init+0xc>)
   d4410:	681b      	ldr	r3, [r3, #0]
   d4412:	69db      	ldr	r3, [r3, #28]
   d4414:	9301      	str	r3, [sp, #4]
   d4416:	bd08      	pop	{r3, pc}
   d4418:	00030230 	.word	0x00030230

000d441c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d441c:	b508      	push	{r3, lr}
   d441e:	4b02      	ldr	r3, [pc, #8]	; (d4428 <HAL_SPI_Is_Enabled+0xc>)
   d4420:	681b      	ldr	r3, [r3, #0]
   d4422:	6a1b      	ldr	r3, [r3, #32]
   d4424:	9301      	str	r3, [sp, #4]
   d4426:	bd08      	pop	{r3, pc}
   d4428:	00030230 	.word	0x00030230

000d442c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d442c:	b508      	push	{r3, lr}
   d442e:	4b02      	ldr	r3, [pc, #8]	; (d4438 <HAL_USART_Init+0xc>)
   d4430:	681b      	ldr	r3, [r3, #0]
   d4432:	681b      	ldr	r3, [r3, #0]
   d4434:	9301      	str	r3, [sp, #4]
   d4436:	bd08      	pop	{r3, pc}
   d4438:	0003023c 	.word	0x0003023c

000d443c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d443c:	b508      	push	{r3, lr}
   d443e:	4b02      	ldr	r3, [pc, #8]	; (d4448 <HAL_USART_Write_Data+0xc>)
   d4440:	681b      	ldr	r3, [r3, #0]
   d4442:	68db      	ldr	r3, [r3, #12]
   d4444:	9301      	str	r3, [sp, #4]
   d4446:	bd08      	pop	{r3, pc}
   d4448:	0003023c 	.word	0x0003023c

000d444c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d444c:	b508      	push	{r3, lr}
   d444e:	4b02      	ldr	r3, [pc, #8]	; (d4458 <HAL_USART_Available_Data+0xc>)
   d4450:	681b      	ldr	r3, [r3, #0]
   d4452:	691b      	ldr	r3, [r3, #16]
   d4454:	9301      	str	r3, [sp, #4]
   d4456:	bd08      	pop	{r3, pc}
   d4458:	0003023c 	.word	0x0003023c

000d445c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d445c:	b508      	push	{r3, lr}
   d445e:	4b02      	ldr	r3, [pc, #8]	; (d4468 <HAL_USART_Read_Data+0xc>)
   d4460:	681b      	ldr	r3, [r3, #0]
   d4462:	695b      	ldr	r3, [r3, #20]
   d4464:	9301      	str	r3, [sp, #4]
   d4466:	bd08      	pop	{r3, pc}
   d4468:	0003023c 	.word	0x0003023c

000d446c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d446c:	b508      	push	{r3, lr}
   d446e:	4b02      	ldr	r3, [pc, #8]	; (d4478 <HAL_USART_Peek_Data+0xc>)
   d4470:	681b      	ldr	r3, [r3, #0]
   d4472:	699b      	ldr	r3, [r3, #24]
   d4474:	9301      	str	r3, [sp, #4]
   d4476:	bd08      	pop	{r3, pc}
   d4478:	0003023c 	.word	0x0003023c

000d447c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d447c:	b508      	push	{r3, lr}
   d447e:	4b02      	ldr	r3, [pc, #8]	; (d4488 <HAL_USART_Flush_Data+0xc>)
   d4480:	681b      	ldr	r3, [r3, #0]
   d4482:	69db      	ldr	r3, [r3, #28]
   d4484:	9301      	str	r3, [sp, #4]
   d4486:	bd08      	pop	{r3, pc}
   d4488:	0003023c 	.word	0x0003023c

000d448c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d448c:	b508      	push	{r3, lr}
   d448e:	4b02      	ldr	r3, [pc, #8]	; (d4498 <HAL_USART_Is_Enabled+0xc>)
   d4490:	681b      	ldr	r3, [r3, #0]
   d4492:	6a1b      	ldr	r3, [r3, #32]
   d4494:	9301      	str	r3, [sp, #4]
   d4496:	bd08      	pop	{r3, pc}
   d4498:	0003023c 	.word	0x0003023c

000d449c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d449c:	b508      	push	{r3, lr}
   d449e:	4b02      	ldr	r3, [pc, #8]	; (d44a8 <HAL_USART_Available_Data_For_Write+0xc>)
   d44a0:	681b      	ldr	r3, [r3, #0]
   d44a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d44a4:	9301      	str	r3, [sp, #4]
   d44a6:	bd08      	pop	{r3, pc}
   d44a8:	0003023c 	.word	0x0003023c

000d44ac <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d44ac:	b508      	push	{r3, lr}
   d44ae:	4b02      	ldr	r3, [pc, #8]	; (d44b8 <HAL_USB_USART_Init+0xc>)
   d44b0:	681b      	ldr	r3, [r3, #0]
   d44b2:	681b      	ldr	r3, [r3, #0]
   d44b4:	9301      	str	r3, [sp, #4]
   d44b6:	bd08      	pop	{r3, pc}
   d44b8:	0003024c 	.word	0x0003024c

000d44bc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d44bc:	b508      	push	{r3, lr}
   d44be:	4b02      	ldr	r3, [pc, #8]	; (d44c8 <HAL_USB_USART_Begin+0xc>)
   d44c0:	681b      	ldr	r3, [r3, #0]
   d44c2:	685b      	ldr	r3, [r3, #4]
   d44c4:	9301      	str	r3, [sp, #4]
   d44c6:	bd08      	pop	{r3, pc}
   d44c8:	0003024c 	.word	0x0003024c

000d44cc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d44cc:	b508      	push	{r3, lr}
   d44ce:	4b02      	ldr	r3, [pc, #8]	; (d44d8 <HAL_USB_USART_Available_Data+0xc>)
   d44d0:	681b      	ldr	r3, [r3, #0]
   d44d2:	691b      	ldr	r3, [r3, #16]
   d44d4:	9301      	str	r3, [sp, #4]
   d44d6:	bd08      	pop	{r3, pc}
   d44d8:	0003024c 	.word	0x0003024c

000d44dc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d44dc:	b508      	push	{r3, lr}
   d44de:	4b02      	ldr	r3, [pc, #8]	; (d44e8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d44e0:	681b      	ldr	r3, [r3, #0]
   d44e2:	695b      	ldr	r3, [r3, #20]
   d44e4:	9301      	str	r3, [sp, #4]
   d44e6:	bd08      	pop	{r3, pc}
   d44e8:	0003024c 	.word	0x0003024c

000d44ec <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d44ec:	b508      	push	{r3, lr}
   d44ee:	4b02      	ldr	r3, [pc, #8]	; (d44f8 <HAL_USB_USART_Receive_Data+0xc>)
   d44f0:	681b      	ldr	r3, [r3, #0]
   d44f2:	699b      	ldr	r3, [r3, #24]
   d44f4:	9301      	str	r3, [sp, #4]
   d44f6:	bd08      	pop	{r3, pc}
   d44f8:	0003024c 	.word	0x0003024c

000d44fc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d44fc:	b508      	push	{r3, lr}
   d44fe:	4b02      	ldr	r3, [pc, #8]	; (d4508 <HAL_USB_USART_Send_Data+0xc>)
   d4500:	681b      	ldr	r3, [r3, #0]
   d4502:	69db      	ldr	r3, [r3, #28]
   d4504:	9301      	str	r3, [sp, #4]
   d4506:	bd08      	pop	{r3, pc}
   d4508:	0003024c 	.word	0x0003024c

000d450c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d450c:	b508      	push	{r3, lr}
   d450e:	4b02      	ldr	r3, [pc, #8]	; (d4518 <HAL_USB_USART_Flush_Data+0xc>)
   d4510:	681b      	ldr	r3, [r3, #0]
   d4512:	6a1b      	ldr	r3, [r3, #32]
   d4514:	9301      	str	r3, [sp, #4]
   d4516:	bd08      	pop	{r3, pc}
   d4518:	0003024c 	.word	0x0003024c

000d451c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d451c:	b508      	push	{r3, lr}
   d451e:	4b02      	ldr	r3, [pc, #8]	; (d4528 <set_system_mode+0xc>)
   d4520:	681b      	ldr	r3, [r3, #0]
   d4522:	685b      	ldr	r3, [r3, #4]
   d4524:	9301      	str	r3, [sp, #4]
   d4526:	bd08      	pop	{r3, pc}
   d4528:	00030220 	.word	0x00030220

000d452c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d452c:	b508      	push	{r3, lr}
   d452e:	4b02      	ldr	r3, [pc, #8]	; (d4538 <system_delay_ms+0xc>)
   d4530:	681b      	ldr	r3, [r3, #0]
   d4532:	695b      	ldr	r3, [r3, #20]
   d4534:	9301      	str	r3, [sp, #4]
   d4536:	bd08      	pop	{r3, pc}
   d4538:	00030220 	.word	0x00030220

000d453c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d453c:	b508      	push	{r3, lr}
   d453e:	4b03      	ldr	r3, [pc, #12]	; (d454c <system_ctrl_set_app_request_handler+0x10>)
   d4540:	681b      	ldr	r3, [r3, #0]
   d4542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4546:	9301      	str	r3, [sp, #4]
   d4548:	bd08      	pop	{r3, pc}
   d454a:	0000      	.short	0x0000
   d454c:	00030220 	.word	0x00030220

000d4550 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4550:	b508      	push	{r3, lr}
   d4552:	4b03      	ldr	r3, [pc, #12]	; (d4560 <system_ctrl_set_result+0x10>)
   d4554:	681b      	ldr	r3, [r3, #0]
   d4556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d455a:	9301      	str	r3, [sp, #4]
   d455c:	bd08      	pop	{r3, pc}
   d455e:	0000      	.short	0x0000
   d4560:	00030220 	.word	0x00030220

000d4564 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4564:	b508      	push	{r3, lr}
   d4566:	4b02      	ldr	r3, [pc, #8]	; (d4570 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d456c:	9301      	str	r3, [sp, #4]
   d456e:	bd08      	pop	{r3, pc}
   d4570:	00030244 	.word	0x00030244

000d4574 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4574:	b508      	push	{r3, lr}
   d4576:	4b02      	ldr	r3, [pc, #8]	; (d4580 <network_connect+0xc>)
   d4578:	681b      	ldr	r3, [r3, #0]
   d457a:	685b      	ldr	r3, [r3, #4]
   d457c:	9301      	str	r3, [sp, #4]
   d457e:	bd08      	pop	{r3, pc}
   d4580:	00030240 	.word	0x00030240

000d4584 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4584:	b508      	push	{r3, lr}
   d4586:	4b02      	ldr	r3, [pc, #8]	; (d4590 <network_connecting+0xc>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	689b      	ldr	r3, [r3, #8]
   d458c:	9301      	str	r3, [sp, #4]
   d458e:	bd08      	pop	{r3, pc}
   d4590:	00030240 	.word	0x00030240

000d4594 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4594:	b508      	push	{r3, lr}
   d4596:	4b02      	ldr	r3, [pc, #8]	; (d45a0 <network_disconnect+0xc>)
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	68db      	ldr	r3, [r3, #12]
   d459c:	9301      	str	r3, [sp, #4]
   d459e:	bd08      	pop	{r3, pc}
   d45a0:	00030240 	.word	0x00030240

000d45a4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d45a4:	b508      	push	{r3, lr}
   d45a6:	4b02      	ldr	r3, [pc, #8]	; (d45b0 <network_ready+0xc>)
   d45a8:	681b      	ldr	r3, [r3, #0]
   d45aa:	691b      	ldr	r3, [r3, #16]
   d45ac:	9301      	str	r3, [sp, #4]
   d45ae:	bd08      	pop	{r3, pc}
   d45b0:	00030240 	.word	0x00030240

000d45b4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b02      	ldr	r3, [pc, #8]	; (d45c0 <network_on+0xc>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	695b      	ldr	r3, [r3, #20]
   d45bc:	9301      	str	r3, [sp, #4]
   d45be:	bd08      	pop	{r3, pc}
   d45c0:	00030240 	.word	0x00030240

000d45c4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d45c4:	b508      	push	{r3, lr}
   d45c6:	4b02      	ldr	r3, [pc, #8]	; (d45d0 <network_off+0xc>)
   d45c8:	681b      	ldr	r3, [r3, #0]
   d45ca:	699b      	ldr	r3, [r3, #24]
   d45cc:	9301      	str	r3, [sp, #4]
   d45ce:	bd08      	pop	{r3, pc}
   d45d0:	00030240 	.word	0x00030240

000d45d4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d45d4:	b508      	push	{r3, lr}
   d45d6:	4b02      	ldr	r3, [pc, #8]	; (d45e0 <network_listen+0xc>)
   d45d8:	681b      	ldr	r3, [r3, #0]
   d45da:	69db      	ldr	r3, [r3, #28]
   d45dc:	9301      	str	r3, [sp, #4]
   d45de:	bd08      	pop	{r3, pc}
   d45e0:	00030240 	.word	0x00030240

000d45e4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <network_listening+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	6a1b      	ldr	r3, [r3, #32]
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	00030240 	.word	0x00030240

000d45f4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <network_set_listen_timeout+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	00030240 	.word	0x00030240

000d4604 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <network_get_listen_timeout+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	00030240 	.word	0x00030240

000d4614 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <malloc+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	681b      	ldr	r3, [r3, #0]
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	0003021c 	.word	0x0003021c

000d4624 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <free+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	685b      	ldr	r3, [r3, #4]
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	0003021c 	.word	0x0003021c

000d4634 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <realloc+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	689b      	ldr	r3, [r3, #8]
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	0003021c 	.word	0x0003021c

000d4644 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <vsnprintf+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	0003021c 	.word	0x0003021c

000d4654 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4654:	2100      	movs	r1, #0
   d4656:	f7ff bf69 	b.w	d452c <system_delay_ms>

000d465a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d465a:	b510      	push	{r4, lr}
   d465c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d465e:	6800      	ldr	r0, [r0, #0]
   d4660:	b108      	cbz	r0, d4666 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4662:	f7ff fe4b 	bl	d42fc <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4666:	4620      	mov	r0, r4
   d4668:	bd10      	pop	{r4, pc}
	...

000d466c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d466c:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d466e:	4c06      	ldr	r4, [pc, #24]	; (d4688 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4670:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4672:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4674:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4676:	f7ff fe39 	bl	d42ec <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d467a:	4620      	mov	r0, r4
   d467c:	4a03      	ldr	r2, [pc, #12]	; (d468c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d467e:	4904      	ldr	r1, [pc, #16]	; (d4690 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4684:	f000 be0a 	b.w	d529c <__aeabi_atexit>
   d4688:	2003e3d0 	.word	0x2003e3d0
   d468c:	2003e390 	.word	0x2003e390
   d4690:	000d465b 	.word	0x000d465b

000d4694 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4694:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4696:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4698:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d469a:	b113      	cbz	r3, d46a2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d469c:	2203      	movs	r2, #3
   d469e:	4601      	mov	r1, r0
   d46a0:	4798      	blx	r3
    }
   d46a2:	4620      	mov	r0, r4
   d46a4:	bd10      	pop	{r4, pc}

000d46a6 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d46a6:	2200      	movs	r2, #0
   d46a8:	4611      	mov	r1, r2
   d46aa:	6840      	ldr	r0, [r0, #4]
   d46ac:	f7ff bf9a 	b.w	d45e4 <network_listening>

000d46b0 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d46b0:	2200      	movs	r2, #0
   d46b2:	4611      	mov	r1, r2
   d46b4:	6840      	ldr	r0, [r0, #4]
   d46b6:	f7ff bfa5 	b.w	d4604 <network_get_listen_timeout>

000d46ba <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d46ba:	2200      	movs	r2, #0
   d46bc:	6840      	ldr	r0, [r0, #4]
   d46be:	f7ff bf99 	b.w	d45f4 <network_set_listen_timeout>

000d46c2 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d46c2:	2200      	movs	r2, #0
   d46c4:	f081 0101 	eor.w	r1, r1, #1
   d46c8:	6840      	ldr	r0, [r0, #4]
   d46ca:	f7ff bf83 	b.w	d45d4 <network_listen>

000d46ce <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d46ce:	2300      	movs	r3, #0
   d46d0:	461a      	mov	r2, r3
   d46d2:	4619      	mov	r1, r3
   d46d4:	6840      	ldr	r0, [r0, #4]
   d46d6:	f7ff bf75 	b.w	d45c4 <network_off>

000d46da <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d46da:	2300      	movs	r3, #0
   d46dc:	461a      	mov	r2, r3
   d46de:	4619      	mov	r1, r3
   d46e0:	6840      	ldr	r0, [r0, #4]
   d46e2:	f7ff bf67 	b.w	d45b4 <network_on>

000d46e6 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d46e6:	2200      	movs	r2, #0
   d46e8:	4611      	mov	r1, r2
   d46ea:	6840      	ldr	r0, [r0, #4]
   d46ec:	f7ff bf5a 	b.w	d45a4 <network_ready>

000d46f0 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d46f0:	2200      	movs	r2, #0
   d46f2:	4611      	mov	r1, r2
   d46f4:	6840      	ldr	r0, [r0, #4]
   d46f6:	f7ff bf45 	b.w	d4584 <network_connecting>

000d46fa <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d46fa:	2200      	movs	r2, #0
   d46fc:	2102      	movs	r1, #2
   d46fe:	6840      	ldr	r0, [r0, #4]
   d4700:	f7ff bf48 	b.w	d4594 <network_disconnect>

000d4704 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4704:	2300      	movs	r3, #0
   d4706:	461a      	mov	r2, r3
   d4708:	6840      	ldr	r0, [r0, #4]
   d470a:	f7ff bf33 	b.w	d4574 <network_connect>
	...

000d4710 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4710:	4b02      	ldr	r3, [pc, #8]	; (d471c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4712:	2203      	movs	r2, #3
   d4714:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4716:	4a02      	ldr	r2, [pc, #8]	; (d4720 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4718:	601a      	str	r2, [r3, #0]
   d471a:	4770      	bx	lr
   d471c:	2003e3d4 	.word	0x2003e3d4
   d4720:	000d5670 	.word	0x000d5670

000d4724 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d4724:	4770      	bx	lr

000d4726 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4728:	4606      	mov	r6, r0
   d472a:	4615      	mov	r5, r2
   d472c:	460c      	mov	r4, r1
   d472e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4730:	42bc      	cmp	r4, r7
   d4732:	d006      	beq.n	d4742 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4734:	6833      	ldr	r3, [r6, #0]
   d4736:	f814 1b01 	ldrb.w	r1, [r4], #1
   d473a:	689b      	ldr	r3, [r3, #8]
   d473c:	4630      	mov	r0, r6
   d473e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4740:	e7f6      	b.n	d4730 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4742:	4628      	mov	r0, r5
   d4744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4746 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4746:	2200      	movs	r2, #0
   d4748:	7c00      	ldrb	r0, [r0, #16]
   d474a:	f7ff be0f 	b.w	d436c <HAL_I2C_Write_Data>

000d474e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d474e:	2100      	movs	r1, #0
   d4750:	7c00      	ldrb	r0, [r0, #16]
   d4752:	f7ff be13 	b.w	d437c <HAL_I2C_Available_Data>

000d4756 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4756:	2100      	movs	r1, #0
   d4758:	7c00      	ldrb	r0, [r0, #16]
   d475a:	f7ff be17 	b.w	d438c <HAL_I2C_Read_Data>

000d475e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d475e:	2100      	movs	r1, #0
   d4760:	7c00      	ldrb	r0, [r0, #16]
   d4762:	f7ff be1b 	b.w	d439c <HAL_I2C_Peek_Data>

000d4766 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4766:	2100      	movs	r1, #0
   d4768:	7c00      	ldrb	r0, [r0, #16]
   d476a:	f7ff be1f 	b.w	d43ac <HAL_I2C_Flush_Data>

000d476e <_ZN7TwoWireD0Ev>:
   d476e:	b510      	push	{r4, lr}
   d4770:	2114      	movs	r1, #20
   d4772:	4604      	mov	r4, r0
   d4774:	f000 fd97 	bl	d52a6 <_ZdlPvj>
   d4778:	4620      	mov	r0, r4
   d477a:	bd10      	pop	{r4, pc}

000d477c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d477c:	b510      	push	{r4, lr}
   d477e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4780:	2300      	movs	r3, #0
   d4782:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4788:	60a3      	str	r3, [r4, #8]
   d478a:	4b04      	ldr	r3, [pc, #16]	; (d479c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d478c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d478e:	4608      	mov	r0, r1
   d4790:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d4792:	4611      	mov	r1, r2
   d4794:	f7ff fe1a 	bl	d43cc <HAL_I2C_Init>
}
   d4798:	4620      	mov	r0, r4
   d479a:	bd10      	pop	{r4, pc}
   d479c:	000d56a4 	.word	0x000d56a4

000d47a0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d47a0:	2100      	movs	r1, #0
   d47a2:	7c00      	ldrb	r0, [r0, #16]
   d47a4:	f7ff be0a 	b.w	d43bc <HAL_I2C_Is_Enabled>

000d47a8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d47a8:	4770      	bx	lr

000d47aa <_ZN9IPAddressD0Ev>:
   d47aa:	b510      	push	{r4, lr}
   d47ac:	2118      	movs	r1, #24
   d47ae:	4604      	mov	r4, r0
   d47b0:	f000 fd79 	bl	d52a6 <_ZdlPvj>
   d47b4:	4620      	mov	r0, r4
   d47b6:	bd10      	pop	{r4, pc}

000d47b8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d47b8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d47ba:	7d03      	ldrb	r3, [r0, #20]
   d47bc:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d47be:	b08d      	sub	sp, #52	; 0x34
   d47c0:	460e      	mov	r6, r1
   d47c2:	f100 0704 	add.w	r7, r0, #4
   d47c6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d47ca:	d002      	beq.n	d47d2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d47cc:	f100 0508 	add.w	r5, r0, #8
   d47d0:	e018      	b.n	d4804 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d47d2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d47d4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d47d6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d47da:	232f      	movs	r3, #47	; 0x2f
   d47dc:	462a      	mov	r2, r5
   d47de:	200a      	movs	r0, #10
   d47e0:	f7ff fdfc 	bl	d43dc <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d47e4:	4628      	mov	r0, r5
   d47e6:	f000 ff0d 	bl	d5604 <strlen>
   d47ea:	6833      	ldr	r3, [r6, #0]
   d47ec:	4602      	mov	r2, r0
   d47ee:	68db      	ldr	r3, [r3, #12]
   d47f0:	4629      	mov	r1, r5
   d47f2:	4630      	mov	r0, r6
   d47f4:	4798      	blx	r3
   d47f6:	e00f      	b.n	d4818 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d47f8:	b124      	cbz	r4, d4804 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d47fa:	212e      	movs	r1, #46	; 0x2e
   d47fc:	4630      	mov	r0, r6
   d47fe:	f000 f9d5 	bl	d4bac <_ZN5Print5printEc>
   d4802:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4804:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4808:	220a      	movs	r2, #10
   d480a:	4630      	mov	r0, r6
   d480c:	f000 f9dd 	bl	d4bca <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4810:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4812:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4814:	d1f0      	bne.n	d47f8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4816:	4620      	mov	r0, r4
    }
    return n;
}
   d4818:	b00d      	add	sp, #52	; 0x34
   d481a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d481c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d481c:	b510      	push	{r4, lr}
   d481e:	4b05      	ldr	r3, [pc, #20]	; (d4834 <_ZN9IPAddressC1Ev+0x18>)
   d4820:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4822:	2211      	movs	r2, #17
   d4824:	f840 3b04 	str.w	r3, [r0], #4
   d4828:	2100      	movs	r1, #0
   d482a:	f000 feba 	bl	d55a2 <memset>
{
    clear();
}
   d482e:	4620      	mov	r0, r4
   d4830:	bd10      	pop	{r4, pc}
   d4832:	bf00      	nop
   d4834:	000d56cc 	.word	0x000d56cc

000d4838 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4838:	4603      	mov	r3, r0
   d483a:	4a07      	ldr	r2, [pc, #28]	; (d4858 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d483c:	b510      	push	{r4, lr}
   d483e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4842:	f101 0210 	add.w	r2, r1, #16
   d4846:	f851 4b04 	ldr.w	r4, [r1], #4
   d484a:	f843 4b04 	str.w	r4, [r3], #4
   d484e:	4291      	cmp	r1, r2
   d4850:	d1f9      	bne.n	d4846 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4852:	780a      	ldrb	r2, [r1, #0]
   d4854:	701a      	strb	r2, [r3, #0]
}
   d4856:	bd10      	pop	{r4, pc}
   d4858:	000d56cc 	.word	0x000d56cc

000d485c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d485c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d485e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4862:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4866:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d486a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d486e:	2304      	movs	r3, #4
   d4870:	6041      	str	r1, [r0, #4]
   d4872:	7503      	strb	r3, [r0, #20]
   d4874:	bd10      	pop	{r4, pc}

000d4876 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4876:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4878:	780d      	ldrb	r5, [r1, #0]
   d487a:	788b      	ldrb	r3, [r1, #2]
   d487c:	784a      	ldrb	r2, [r1, #1]
   d487e:	78c9      	ldrb	r1, [r1, #3]
   d4880:	9100      	str	r1, [sp, #0]
   d4882:	4629      	mov	r1, r5
   d4884:	f7ff ffea 	bl	d485c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4888:	b003      	add	sp, #12
   d488a:	bd30      	pop	{r4, r5, pc}

000d488c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d488c:	4b01      	ldr	r3, [pc, #4]	; (d4894 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d488e:	4a02      	ldr	r2, [pc, #8]	; (d4898 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4890:	601a      	str	r2, [r3, #0]
   d4892:	4770      	bx	lr
   d4894:	2003e3dc 	.word	0x2003e3dc
   d4898:	000d574b 	.word	0x000d574b

000d489c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d489c:	2200      	movs	r2, #0
   d489e:	4611      	mov	r1, r2
   d48a0:	6840      	ldr	r0, [r0, #4]
   d48a2:	f7ff be9f 	b.w	d45e4 <network_listening>

000d48a6 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d48a6:	2200      	movs	r2, #0
   d48a8:	4611      	mov	r1, r2
   d48aa:	6840      	ldr	r0, [r0, #4]
   d48ac:	f7ff beaa 	b.w	d4604 <network_get_listen_timeout>

000d48b0 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d48b0:	2200      	movs	r2, #0
   d48b2:	6840      	ldr	r0, [r0, #4]
   d48b4:	f7ff be9e 	b.w	d45f4 <network_set_listen_timeout>

000d48b8 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d48b8:	2200      	movs	r2, #0
   d48ba:	f081 0101 	eor.w	r1, r1, #1
   d48be:	6840      	ldr	r0, [r0, #4]
   d48c0:	f7ff be88 	b.w	d45d4 <network_listen>

000d48c4 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d48c4:	2300      	movs	r3, #0
   d48c6:	461a      	mov	r2, r3
   d48c8:	2101      	movs	r1, #1
   d48ca:	6840      	ldr	r0, [r0, #4]
   d48cc:	f7ff be7a 	b.w	d45c4 <network_off>

000d48d0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d48d0:	2300      	movs	r3, #0
   d48d2:	461a      	mov	r2, r3
   d48d4:	4619      	mov	r1, r3
   d48d6:	6840      	ldr	r0, [r0, #4]
   d48d8:	f7ff be6c 	b.w	d45b4 <network_on>

000d48dc <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d48dc:	2200      	movs	r2, #0
   d48de:	4611      	mov	r1, r2
   d48e0:	6840      	ldr	r0, [r0, #4]
   d48e2:	f7ff be5f 	b.w	d45a4 <network_ready>

000d48e6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d48e6:	2200      	movs	r2, #0
   d48e8:	4611      	mov	r1, r2
   d48ea:	6840      	ldr	r0, [r0, #4]
   d48ec:	f7ff be4a 	b.w	d4584 <network_connecting>

000d48f0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d48f0:	2200      	movs	r2, #0
   d48f2:	2102      	movs	r1, #2
   d48f4:	6840      	ldr	r0, [r0, #4]
   d48f6:	f7ff be4d 	b.w	d4594 <network_disconnect>

000d48fa <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d48fa:	2300      	movs	r3, #0
   d48fc:	461a      	mov	r2, r3
   d48fe:	6840      	ldr	r0, [r0, #4]
   d4900:	f7ff be38 	b.w	d4574 <network_connect>

000d4904 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4904:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4906:	4605      	mov	r5, r0
   d4908:	b188      	cbz	r0, d492e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d490a:	6804      	ldr	r4, [r0, #0]
   d490c:	b14c      	cbz	r4, d4922 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d490e:	68a3      	ldr	r3, [r4, #8]
   d4910:	b11b      	cbz	r3, d491a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4912:	2203      	movs	r2, #3
   d4914:	4621      	mov	r1, r4
   d4916:	4620      	mov	r0, r4
   d4918:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d491a:	2110      	movs	r1, #16
   d491c:	4620      	mov	r0, r4
   d491e:	f000 fcc2 	bl	d52a6 <_ZdlPvj>
   d4922:	4628      	mov	r0, r5
   d4924:	2114      	movs	r1, #20
      }
   d4926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d492a:	f000 bcbc 	b.w	d52a6 <_ZdlPvj>
   d492e:	bd38      	pop	{r3, r4, r5, pc}

000d4930 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4930:	b110      	cbz	r0, d4938 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4932:	6803      	ldr	r3, [r0, #0]
   d4934:	685b      	ldr	r3, [r3, #4]
   d4936:	4718      	bx	r3
   d4938:	4770      	bx	lr

000d493a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d493a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d493c:	6803      	ldr	r3, [r0, #0]
   d493e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4940:	b1bb      	cbz	r3, d4972 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4942:	6858      	ldr	r0, [r3, #4]
   d4944:	f7ff fcba 	bl	d42bc <os_thread_is_current>
   d4948:	b978      	cbnz	r0, d496a <_ZN6ThreadD1Ev+0x30>
   d494a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d494c:	7c5a      	ldrb	r2, [r3, #17]
   d494e:	b912      	cbnz	r2, d4956 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4950:	6858      	ldr	r0, [r3, #4]
   d4952:	f7ff fcbb 	bl	d42cc <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4956:	6823      	ldr	r3, [r4, #0]
   d4958:	6858      	ldr	r0, [r3, #4]
   d495a:	f7ff fcbf 	bl	d42dc <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d495e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4960:	2300      	movs	r3, #0
   d4962:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4964:	b128      	cbz	r0, d4972 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4966:	f7ff ffcd 	bl	d4904 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d496a:	6820      	ldr	r0, [r4, #0]
   d496c:	b108      	cbz	r0, d4972 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d496e:	f7ff ffc9 	bl	d4904 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4972:	4620      	mov	r0, r4
   d4974:	bd10      	pop	{r4, pc}

000d4976 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d4976:	b538      	push	{r3, r4, r5, lr}
   d4978:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d497a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d497e:	b108      	cbz	r0, d4984 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4980:	f7ff fb8b 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4984:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d4988:	b108      	cbz	r0, d498e <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d498a:	f7ff fcb7 	bl	d42fc <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d498e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d4992:	b135      	cbz	r5, d49a2 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4994:	4628      	mov	r0, r5
   d4996:	f7ff ffd0 	bl	d493a <_ZN6ThreadD1Ev>
   d499a:	2104      	movs	r1, #4
   d499c:	4628      	mov	r0, r5
   d499e:	f000 fc82 	bl	d52a6 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d49a2:	6820      	ldr	r0, [r4, #0]
   d49a4:	b108      	cbz	r0, d49aa <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d49a6:	f7ff ffc3 	bl	d4930 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d49aa:	4620      	mov	r0, r4
   d49ac:	bd38      	pop	{r3, r4, r5, pc}
	...

000d49b0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d49b0:	b510      	push	{r4, lr}
   d49b2:	4b04      	ldr	r3, [pc, #16]	; (d49c4 <_ZN5spark9MeshClassD1Ev+0x14>)
   d49b4:	4604      	mov	r4, r0
   d49b6:	f840 3b08 	str.w	r3, [r0], #8
   d49ba:	f7ff ffdc 	bl	d4976 <_ZN5spark11MeshPublishD1Ev>
   d49be:	4620      	mov	r0, r4
   d49c0:	bd10      	pop	{r4, pc}
   d49c2:	bf00      	nop
   d49c4:	000d57c4 	.word	0x000d57c4

000d49c8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d49c8:	b538      	push	{r3, r4, r5, lr}
   d49ca:	4c0e      	ldr	r4, [pc, #56]	; (d4a04 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d49cc:	4b0e      	ldr	r3, [pc, #56]	; (d4a08 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d49ce:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d49d0:	2500      	movs	r5, #0
   d49d2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d49d4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d49d8:	6063      	str	r3, [r4, #4]
   d49da:	60a5      	str	r5, [r4, #8]
   d49dc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d49e0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d49e4:	f7ff fc82 	bl	d42ec <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d49e8:	4b08      	ldr	r3, [pc, #32]	; (d4a0c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d49ea:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d49ee:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d49f2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d49f4:	4620      	mov	r0, r4
   d49f6:	4a06      	ldr	r2, [pc, #24]	; (d4a10 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d49f8:	4906      	ldr	r1, [pc, #24]	; (d4a14 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d49fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d49fe:	f000 bc4d 	b.w	d529c <__aeabi_atexit>
   d4a02:	bf00      	nop
   d4a04:	2003e3e0 	.word	0x2003e3e0
   d4a08:	000d57f8 	.word	0x000d57f8
   d4a0c:	000d57c4 	.word	0x000d57c4
   d4a10:	2003e390 	.word	0x2003e390
   d4a14:	000d49b1 	.word	0x000d49b1

000d4a18 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4a18:	2300      	movs	r3, #0
   d4a1a:	461a      	mov	r2, r3
   d4a1c:	6840      	ldr	r0, [r0, #4]
   d4a1e:	f7ff bda9 	b.w	d4574 <network_connect>

000d4a22 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4a22:	2200      	movs	r2, #0
   d4a24:	2102      	movs	r1, #2
   d4a26:	6840      	ldr	r0, [r0, #4]
   d4a28:	f7ff bdb4 	b.w	d4594 <network_disconnect>

000d4a2c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4a2c:	2200      	movs	r2, #0
   d4a2e:	4611      	mov	r1, r2
   d4a30:	6840      	ldr	r0, [r0, #4]
   d4a32:	f7ff bda7 	b.w	d4584 <network_connecting>

000d4a36 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4a36:	2200      	movs	r2, #0
   d4a38:	4611      	mov	r1, r2
   d4a3a:	6840      	ldr	r0, [r0, #4]
   d4a3c:	f7ff bdb2 	b.w	d45a4 <network_ready>

000d4a40 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4a40:	2300      	movs	r3, #0
   d4a42:	461a      	mov	r2, r3
   d4a44:	4619      	mov	r1, r3
   d4a46:	6840      	ldr	r0, [r0, #4]
   d4a48:	f7ff bdb4 	b.w	d45b4 <network_on>

000d4a4c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4a4c:	2300      	movs	r3, #0
   d4a4e:	461a      	mov	r2, r3
   d4a50:	4619      	mov	r1, r3
   d4a52:	6840      	ldr	r0, [r0, #4]
   d4a54:	f7ff bdb6 	b.w	d45c4 <network_off>

000d4a58 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4a58:	2200      	movs	r2, #0
   d4a5a:	f081 0101 	eor.w	r1, r1, #1
   d4a5e:	6840      	ldr	r0, [r0, #4]
   d4a60:	f7ff bdb8 	b.w	d45d4 <network_listen>

000d4a64 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4a64:	2200      	movs	r2, #0
   d4a66:	6840      	ldr	r0, [r0, #4]
   d4a68:	f7ff bdc4 	b.w	d45f4 <network_set_listen_timeout>

000d4a6c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4a6c:	2200      	movs	r2, #0
   d4a6e:	4611      	mov	r1, r2
   d4a70:	6840      	ldr	r0, [r0, #4]
   d4a72:	f7ff bdc7 	b.w	d4604 <network_get_listen_timeout>

000d4a76 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4a76:	2200      	movs	r2, #0
   d4a78:	4611      	mov	r1, r2
   d4a7a:	6840      	ldr	r0, [r0, #4]
   d4a7c:	f7ff bdb2 	b.w	d45e4 <network_listening>

000d4a80 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4a80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4a84:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d4a86:	b095      	sub	sp, #84	; 0x54
   d4a88:	4616      	mov	r6, r2
   d4a8a:	460d      	mov	r5, r1
   d4a8c:	4607      	mov	r7, r0
    IPAddress addr;
   d4a8e:	f7ff fec5 	bl	d481c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4a92:	4621      	mov	r1, r4
   d4a94:	2220      	movs	r2, #32
   d4a96:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4a98:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4a9a:	f000 fd82 	bl	d55a2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4a9e:	2340      	movs	r3, #64	; 0x40
   d4aa0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4aa2:	4621      	mov	r1, r4
   d4aa4:	466b      	mov	r3, sp
   d4aa6:	aa0c      	add	r2, sp, #48	; 0x30
   d4aa8:	4630      	mov	r0, r6
   d4aaa:	f7ff fca7 	bl	d43fc <netdb_getaddrinfo>
    if (!r) {
   d4aae:	4604      	mov	r4, r0
   d4ab0:	2800      	cmp	r0, #0
   d4ab2:	d144      	bne.n	d4b3e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4ab4:	4602      	mov	r2, r0
   d4ab6:	2101      	movs	r1, #1
   d4ab8:	6868      	ldr	r0, [r5, #4]
   d4aba:	f7ff fd73 	bl	d45a4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4abe:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4ac0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4ac2:	4622      	mov	r2, r4
   d4ac4:	6868      	ldr	r0, [r5, #4]
   d4ac6:	f7ff fd6d 	bl	d45a4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4aca:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4acc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d4ace:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4ad0:	2e00      	cmp	r6, #0
   d4ad2:	d034      	beq.n	d4b3e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d4ad4:	2900      	cmp	r1, #0
   d4ad6:	d132      	bne.n	d4b3e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4ad8:	6873      	ldr	r3, [r6, #4]
   d4ada:	2b02      	cmp	r3, #2
   d4adc:	d002      	beq.n	d4ae4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d4ade:	2b0a      	cmp	r3, #10
   d4ae0:	d009      	beq.n	d4af6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d4ae2:	e02a      	b.n	d4b3a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d4ae4:	f1b8 0f00 	cmp.w	r8, #0
   d4ae8:	d027      	beq.n	d4b3a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4aea:	6971      	ldr	r1, [r6, #20]
   d4aec:	4638      	mov	r0, r7
   d4aee:	3104      	adds	r1, #4
   d4af0:	f7ff fec1 	bl	d4876 <_ZN9IPAddressaSEPKh>
   d4af4:	e020      	b.n	d4b38 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4af6:	f1b9 0f00 	cmp.w	r9, #0
   d4afa:	d01e      	beq.n	d4b3a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4afc:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4afe:	2211      	movs	r2, #17
   d4b00:	a801      	add	r0, sp, #4
   d4b02:	f000 fd4e 	bl	d55a2 <memset>
                    a.v = 6;
   d4b06:	2306      	movs	r3, #6
   d4b08:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4b0c:	ad01      	add	r5, sp, #4
   d4b0e:	f104 0308 	add.w	r3, r4, #8
   d4b12:	3418      	adds	r4, #24
   d4b14:	6818      	ldr	r0, [r3, #0]
   d4b16:	6859      	ldr	r1, [r3, #4]
   d4b18:	462a      	mov	r2, r5
   d4b1a:	c203      	stmia	r2!, {r0, r1}
   d4b1c:	3308      	adds	r3, #8
   d4b1e:	42a3      	cmp	r3, r4
   d4b20:	4615      	mov	r5, r2
   d4b22:	d1f7      	bne.n	d4b14 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d4b24:	a901      	add	r1, sp, #4
   d4b26:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4b28:	ad07      	add	r5, sp, #28
   d4b2a:	f7ff fe85 	bl	d4838 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4b2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4b30:	1d3c      	adds	r4, r7, #4
   d4b32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4b34:	682b      	ldr	r3, [r5, #0]
   d4b36:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d4b38:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4b3a:	69f6      	ldr	r6, [r6, #28]
   d4b3c:	e7c8      	b.n	d4ad0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4b3e:	9800      	ldr	r0, [sp, #0]
   d4b40:	f7ff fc54 	bl	d43ec <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4b44:	4638      	mov	r0, r7
   d4b46:	b015      	add	sp, #84	; 0x54
   d4b48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4b4c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4b4c:	4b02      	ldr	r3, [pc, #8]	; (d4b58 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4b4e:	4a03      	ldr	r2, [pc, #12]	; (d4b5c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4b50:	601a      	str	r2, [r3, #0]
   d4b52:	2200      	movs	r2, #0
   d4b54:	605a      	str	r2, [r3, #4]
   d4b56:	4770      	bx	lr
   d4b58:	2003e5b4 	.word	0x2003e5b4
   d4b5c:	000d57f8 	.word	0x000d57f8

000d4b60 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4b62:	4606      	mov	r6, r0
   d4b64:	460d      	mov	r5, r1
   d4b66:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4b68:	2400      	movs	r4, #0
  while (size--) {
   d4b6a:	42bd      	cmp	r5, r7
   d4b6c:	d00c      	beq.n	d4b88 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4b6e:	6833      	ldr	r3, [r6, #0]
   d4b70:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4b74:	689b      	ldr	r3, [r3, #8]
   d4b76:	4630      	mov	r0, r6
   d4b78:	4798      	blx	r3
     if (chunk>=0)
   d4b7a:	2800      	cmp	r0, #0
   d4b7c:	db01      	blt.n	d4b82 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4b7e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4b80:	e7f3      	b.n	d4b6a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4b82:	2c00      	cmp	r4, #0
   d4b84:	bf08      	it	eq
   d4b86:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4b88:	4620      	mov	r0, r4
   d4b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4b8c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4b8c:	b570      	push	{r4, r5, r6, lr}
   d4b8e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4b90:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4b92:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4b94:	b149      	cbz	r1, d4baa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4b96:	f000 fd35 	bl	d5604 <strlen>
   d4b9a:	682b      	ldr	r3, [r5, #0]
   d4b9c:	4602      	mov	r2, r0
   d4b9e:	4621      	mov	r1, r4
   d4ba0:	4628      	mov	r0, r5
   d4ba2:	68db      	ldr	r3, [r3, #12]
    }
   d4ba4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4ba8:	4718      	bx	r3
    }
   d4baa:	bd70      	pop	{r4, r5, r6, pc}

000d4bac <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4bac:	6803      	ldr	r3, [r0, #0]
   d4bae:	689b      	ldr	r3, [r3, #8]
   d4bb0:	4718      	bx	r3

000d4bb2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4bb2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4bb4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4bb6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4bb8:	f7ff fff8 	bl	d4bac <_ZN5Print5printEc>
  n += print('\n');
   d4bbc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4bbe:	4604      	mov	r4, r0
  n += print('\n');
   d4bc0:	4628      	mov	r0, r5
   d4bc2:	f7ff fff3 	bl	d4bac <_ZN5Print5printEc>
  return n;
}
   d4bc6:	4420      	add	r0, r4
   d4bc8:	bd38      	pop	{r3, r4, r5, pc}

000d4bca <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4bca:	b530      	push	{r4, r5, lr}
   d4bcc:	b08b      	sub	sp, #44	; 0x2c
   d4bce:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4bd0:	2100      	movs	r1, #0
   d4bd2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4bd6:	2a01      	cmp	r2, #1
   d4bd8:	bf98      	it	ls
   d4bda:	220a      	movls	r2, #10
   d4bdc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4be0:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4be4:	fb05 3312 	mls	r3, r5, r2, r3
   d4be8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4bec:	2b09      	cmp	r3, #9
   d4bee:	bf94      	ite	ls
   d4bf0:	3330      	addls	r3, #48	; 0x30
   d4bf2:	3337      	addhi	r3, #55	; 0x37
   d4bf4:	b2db      	uxtb	r3, r3
   d4bf6:	4621      	mov	r1, r4
   d4bf8:	f804 3901 	strb.w	r3, [r4], #-1
   d4bfc:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4bfe:	2d00      	cmp	r5, #0
   d4c00:	d1ee      	bne.n	d4be0 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4c02:	f7ff ffc3 	bl	d4b8c <_ZN5Print5writeEPKc>
}
   d4c06:	b00b      	add	sp, #44	; 0x2c
   d4c08:	bd30      	pop	{r4, r5, pc}

000d4c0a <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4c0a:	b40c      	push	{r2, r3}
   d4c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4c10:	b087      	sub	sp, #28
   d4c12:	af00      	add	r7, sp, #0
   d4c14:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d4c18:	4605      	mov	r5, r0
   d4c1a:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d4c1e:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4c20:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d4c22:	4623      	mov	r3, r4
   d4c24:	464a      	mov	r2, r9
   d4c26:	2114      	movs	r1, #20
   d4c28:	1d38      	adds	r0, r7, #4
   d4c2a:	f7ff fd0b 	bl	d4644 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d4c2e:	2813      	cmp	r0, #19
   d4c30:	d805      	bhi.n	d4c3e <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4c32:	1d39      	adds	r1, r7, #4
   d4c34:	4628      	mov	r0, r5
   d4c36:	f7ff ffa9 	bl	d4b8c <_ZN5Print5writeEPKc>
   d4c3a:	4604      	mov	r4, r0
   d4c3c:	e013      	b.n	d4c66 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4c3e:	f100 0308 	add.w	r3, r0, #8
   d4c42:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d4c46:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4c48:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d4c4c:	1c41      	adds	r1, r0, #1
   d4c4e:	4623      	mov	r3, r4
   d4c50:	464a      	mov	r2, r9
   d4c52:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d4c54:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d4c56:	f7ff fcf5 	bl	d4644 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4c5a:	4669      	mov	r1, sp
   d4c5c:	4628      	mov	r0, r5
   d4c5e:	f7ff ff95 	bl	d4b8c <_ZN5Print5writeEPKc>
   d4c62:	4604      	mov	r4, r0
   d4c64:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d4c66:	b11e      	cbz	r6, d4c70 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d4c68:	4628      	mov	r0, r5
   d4c6a:	f7ff ffa2 	bl	d4bb2 <_ZN5Print7printlnEv>
   d4c6e:	4404      	add	r4, r0
    return n;
}
   d4c70:	4620      	mov	r0, r4
   d4c72:	371c      	adds	r7, #28
   d4c74:	46bd      	mov	sp, r7
   d4c76:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4c7a:	b002      	add	sp, #8
   d4c7c:	4770      	bx	lr

000d4c7e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4c7e:	b510      	push	{r4, lr}
   d4c80:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4c82:	f7ff fd07 	bl	d4694 <_ZNSt14_Function_baseD1Ev>
   d4c86:	4620      	mov	r0, r4
   d4c88:	bd10      	pop	{r4, pc}
	...

000d4c8c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4c8c:	4803      	ldr	r0, [pc, #12]	; (d4c9c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4c8e:	4a04      	ldr	r2, [pc, #16]	; (d4ca0 <_GLOBAL__sub_I_RGB+0x14>)
   d4c90:	4904      	ldr	r1, [pc, #16]	; (d4ca4 <_GLOBAL__sub_I_RGB+0x18>)
   d4c92:	2300      	movs	r3, #0
   d4c94:	6083      	str	r3, [r0, #8]
   d4c96:	f000 bb01 	b.w	d529c <__aeabi_atexit>
   d4c9a:	bf00      	nop
   d4c9c:	2003e5bc 	.word	0x2003e5bc
   d4ca0:	2003e390 	.word	0x2003e390
   d4ca4:	000d4c7f 	.word	0x000d4c7f

000d4ca8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4ca8:	b510      	push	{r4, lr}
   d4caa:	4604      	mov	r4, r0
{
    _spi = spi;
   d4cac:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d4cae:	4608      	mov	r0, r1
   d4cb0:	f7ff fbac 	bl	d440c <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4cb4:	2300      	movs	r3, #0
   d4cb6:	6063      	str	r3, [r4, #4]
}
   d4cb8:	4620      	mov	r0, r4
   d4cba:	bd10      	pop	{r4, pc}

000d4cbc <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d4cbc:	7800      	ldrb	r0, [r0, #0]
   d4cbe:	f7ff bbad 	b.w	d441c <HAL_SPI_Is_Enabled>

000d4cc2 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4cc2:	b510      	push	{r4, lr}
   d4cc4:	4604      	mov	r4, r0
{
	free(buffer);
   d4cc6:	6800      	ldr	r0, [r0, #0]
   d4cc8:	f7ff fcac 	bl	d4624 <free>
}
   d4ccc:	4620      	mov	r0, r4
   d4cce:	bd10      	pop	{r4, pc}

000d4cd0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4cd0:	b510      	push	{r4, lr}
   d4cd2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4cd4:	6800      	ldr	r0, [r0, #0]
   d4cd6:	b108      	cbz	r0, d4cdc <_ZN6String10invalidateEv+0xc>
   d4cd8:	f7ff fca4 	bl	d4624 <free>
	buffer = NULL;
   d4cdc:	2300      	movs	r3, #0
   d4cde:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4ce0:	60a3      	str	r3, [r4, #8]
   d4ce2:	6063      	str	r3, [r4, #4]
   d4ce4:	bd10      	pop	{r4, pc}

000d4ce6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4ce6:	b538      	push	{r3, r4, r5, lr}
   d4ce8:	4604      	mov	r4, r0
   d4cea:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4cec:	6800      	ldr	r0, [r0, #0]
   d4cee:	3101      	adds	r1, #1
   d4cf0:	f7ff fca0 	bl	d4634 <realloc>
	if (newbuffer) {
   d4cf4:	b110      	cbz	r0, d4cfc <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4cf6:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4cfa:	2001      	movs	r0, #1
	}
	return 0;
}
   d4cfc:	bd38      	pop	{r3, r4, r5, pc}

000d4cfe <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4cfe:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4d00:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4d02:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4d04:	b113      	cbz	r3, d4d0c <_ZN6String7reserveEj+0xe>
   d4d06:	6843      	ldr	r3, [r0, #4]
   d4d08:	428b      	cmp	r3, r1
   d4d0a:	d207      	bcs.n	d4d1c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4d0c:	4620      	mov	r0, r4
   d4d0e:	f7ff ffea 	bl	d4ce6 <_ZN6String12changeBufferEj>
   d4d12:	b120      	cbz	r0, d4d1e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4d14:	68a3      	ldr	r3, [r4, #8]
   d4d16:	b90b      	cbnz	r3, d4d1c <_ZN6String7reserveEj+0x1e>
   d4d18:	6822      	ldr	r2, [r4, #0]
   d4d1a:	7013      	strb	r3, [r2, #0]
   d4d1c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4d1e:	bd10      	pop	{r4, pc}

000d4d20 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4d20:	b570      	push	{r4, r5, r6, lr}
   d4d22:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4d24:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4d26:	4604      	mov	r4, r0
   d4d28:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4d2a:	f7ff ffe8 	bl	d4cfe <_ZN6String7reserveEj>
   d4d2e:	b918      	cbnz	r0, d4d38 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4d30:	4620      	mov	r0, r4
   d4d32:	f7ff ffcd 	bl	d4cd0 <_ZN6String10invalidateEv>
		return *this;
   d4d36:	e009      	b.n	d4d4c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4d38:	462a      	mov	r2, r5
   d4d3a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4d3c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4d3e:	6820      	ldr	r0, [r4, #0]
   d4d40:	f000 fc24 	bl	d558c <memcpy>
	buffer[len] = 0;
   d4d44:	6822      	ldr	r2, [r4, #0]
   d4d46:	68a3      	ldr	r3, [r4, #8]
   d4d48:	2100      	movs	r1, #0
   d4d4a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4d4c:	4620      	mov	r0, r4
   d4d4e:	bd70      	pop	{r4, r5, r6, pc}

000d4d50 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4d50:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4d52:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4d54:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4d56:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4d58:	6043      	str	r3, [r0, #4]
	len = 0;
   d4d5a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4d5c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4d5e:	460d      	mov	r5, r1
   d4d60:	b139      	cbz	r1, d4d72 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4d62:	4608      	mov	r0, r1
   d4d64:	f000 fc4e 	bl	d5604 <strlen>
   d4d68:	4629      	mov	r1, r5
   d4d6a:	4602      	mov	r2, r0
   d4d6c:	4620      	mov	r0, r4
   d4d6e:	f7ff ffd7 	bl	d4d20 <_ZN6String4copyEPKcj>
}
   d4d72:	4620      	mov	r0, r4
   d4d74:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4d78 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4d78:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4d7a:	4c09      	ldr	r4, [pc, #36]	; (d4da0 <_GLOBAL__sub_I_System+0x28>)
   d4d7c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4d7e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4d82:	6020      	str	r0, [r4, #0]
   d4d84:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4d86:	71a0      	strb	r0, [r4, #6]
   d4d88:	8120      	strh	r0, [r4, #8]
   d4d8a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4d8c:	f7ff fbc6 	bl	d451c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4d90:	4620      	mov	r0, r4
   d4d92:	4a04      	ldr	r2, [pc, #16]	; (d4da4 <_GLOBAL__sub_I_System+0x2c>)
   d4d94:	4904      	ldr	r1, [pc, #16]	; (d4da8 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4d9a:	f000 ba7f 	b.w	d529c <__aeabi_atexit>
   d4d9e:	bf00      	nop
   d4da0:	2003e5cc 	.word	0x2003e5cc
   d4da4:	2003e390 	.word	0x2003e390
   d4da8:	000d40af 	.word	0x000d40af

000d4dac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4dac:	4b02      	ldr	r3, [pc, #8]	; (d4db8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4dae:	681a      	ldr	r2, [r3, #0]
   d4db0:	4b02      	ldr	r3, [pc, #8]	; (d4dbc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4db2:	601a      	str	r2, [r3, #0]
   d4db4:	4770      	bx	lr
   d4db6:	bf00      	nop
   d4db8:	2003e328 	.word	0x2003e328
   d4dbc:	2003e5d8 	.word	0x2003e5d8

000d4dc0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4dc0:	4770      	bx	lr

000d4dc2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4dc2:	7441      	strb	r1, [r0, #17]
   d4dc4:	4770      	bx	lr

000d4dc6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4dc6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4dc8:	7c00      	ldrb	r0, [r0, #16]
   d4dca:	f7ff fb67 	bl	d449c <HAL_USART_Available_Data_For_Write>
}
   d4dce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4dd2:	bd08      	pop	{r3, pc}

000d4dd4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4dd4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4dd6:	7c00      	ldrb	r0, [r0, #16]
   d4dd8:	f7ff fb38 	bl	d444c <HAL_USART_Available_Data>
}
   d4ddc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4de0:	bd08      	pop	{r3, pc}

000d4de2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4de2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4de4:	7c00      	ldrb	r0, [r0, #16]
   d4de6:	f7ff fb41 	bl	d446c <HAL_USART_Peek_Data>
}
   d4dea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4dee:	bf28      	it	cs
   d4df0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d4df4:	bd08      	pop	{r3, pc}

000d4df6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4df6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4df8:	7c00      	ldrb	r0, [r0, #16]
   d4dfa:	f7ff fb2f 	bl	d445c <HAL_USART_Read_Data>
}
   d4dfe:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4e02:	bf28      	it	cs
   d4e04:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d4e08:	bd08      	pop	{r3, pc}

000d4e0a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4e0a:	7c00      	ldrb	r0, [r0, #16]
   d4e0c:	f7ff bb36 	b.w	d447c <HAL_USART_Flush_Data>

000d4e10 <_ZN11USARTSerialD0Ev>:
   d4e10:	b510      	push	{r4, lr}
   d4e12:	2114      	movs	r1, #20
   d4e14:	4604      	mov	r4, r0
   d4e16:	f000 fa46 	bl	d52a6 <_ZdlPvj>
   d4e1a:	4620      	mov	r0, r4
   d4e1c:	bd10      	pop	{r4, pc}

000d4e1e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4e1e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4e20:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4e22:	4604      	mov	r4, r0
   d4e24:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4e26:	b925      	cbnz	r5, d4e32 <_ZN11USARTSerial5writeEh+0x14>
   d4e28:	7c00      	ldrb	r0, [r0, #16]
   d4e2a:	f7ff fb37 	bl	d449c <HAL_USART_Available_Data_For_Write>
   d4e2e:	2800      	cmp	r0, #0
   d4e30:	dd05      	ble.n	d4e3e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4e32:	4631      	mov	r1, r6
   d4e34:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4e36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4e3a:	f7ff baff 	b.w	d443c <HAL_USART_Write_Data>
  }
  return 0;
}
   d4e3e:	4628      	mov	r0, r5
   d4e40:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4e44 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4e44:	b510      	push	{r4, lr}
   d4e46:	4604      	mov	r4, r0
   d4e48:	4608      	mov	r0, r1
   d4e4a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4e4c:	2200      	movs	r2, #0
   d4e4e:	6062      	str	r2, [r4, #4]
   d4e50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4e54:	60a2      	str	r2, [r4, #8]
   d4e56:	4a05      	ldr	r2, [pc, #20]	; (d4e6c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4e58:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4e5a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4e5c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4e5e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4e60:	461a      	mov	r2, r3
   d4e62:	f7ff fae3 	bl	d442c <HAL_USART_Init>
}
   d4e66:	4620      	mov	r0, r4
   d4e68:	bd10      	pop	{r4, pc}
   d4e6a:	bf00      	nop
   d4e6c:	000d5858 	.word	0x000d5858

000d4e70 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d4e70:	7c00      	ldrb	r0, [r0, #16]
   d4e72:	f7ff bb0b 	b.w	d448c <HAL_USART_Is_Enabled>
	...

000d4e78 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4e78:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4e7a:	4d0c      	ldr	r5, [pc, #48]	; (d4eac <_Z22__fetch_global_Serial1v+0x34>)
   d4e7c:	6829      	ldr	r1, [r5, #0]
   d4e7e:	f011 0401 	ands.w	r4, r1, #1
   d4e82:	d111      	bne.n	d4ea8 <_Z22__fetch_global_Serial1v+0x30>
   d4e84:	4628      	mov	r0, r5
   d4e86:	f7ff f90a 	bl	d409e <__cxa_guard_acquire>
   d4e8a:	b168      	cbz	r0, d4ea8 <_Z22__fetch_global_Serial1v+0x30>
   d4e8c:	4a08      	ldr	r2, [pc, #32]	; (d4eb0 <_Z22__fetch_global_Serial1v+0x38>)
   d4e8e:	4b09      	ldr	r3, [pc, #36]	; (d4eb4 <_Z22__fetch_global_Serial1v+0x3c>)
   d4e90:	4809      	ldr	r0, [pc, #36]	; (d4eb8 <_Z22__fetch_global_Serial1v+0x40>)
   d4e92:	4621      	mov	r1, r4
   d4e94:	f7ff ffd6 	bl	d4e44 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4e98:	4628      	mov	r0, r5
   d4e9a:	f7ff f905 	bl	d40a8 <__cxa_guard_release>
   d4e9e:	4a07      	ldr	r2, [pc, #28]	; (d4ebc <_Z22__fetch_global_Serial1v+0x44>)
   d4ea0:	4907      	ldr	r1, [pc, #28]	; (d4ec0 <_Z22__fetch_global_Serial1v+0x48>)
   d4ea2:	4805      	ldr	r0, [pc, #20]	; (d4eb8 <_Z22__fetch_global_Serial1v+0x40>)
   d4ea4:	f000 f9fa 	bl	d529c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4ea8:	4803      	ldr	r0, [pc, #12]	; (d4eb8 <_Z22__fetch_global_Serial1v+0x40>)
   d4eaa:	bd38      	pop	{r3, r4, r5, pc}
   d4eac:	2003e674 	.word	0x2003e674
   d4eb0:	2003e678 	.word	0x2003e678
   d4eb4:	2003e5f0 	.word	0x2003e5f0
   d4eb8:	2003e5dc 	.word	0x2003e5dc
   d4ebc:	2003e390 	.word	0x2003e390
   d4ec0:	000d4dc1 	.word	0x000d4dc1

000d4ec4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4ec4:	7441      	strb	r1, [r0, #17]
   d4ec6:	4770      	bx	lr

000d4ec8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4ec8:	4770      	bx	lr

000d4eca <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4eca:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4ecc:	2100      	movs	r1, #0
   d4ece:	7c00      	ldrb	r0, [r0, #16]
   d4ed0:	f7ff fb0c 	bl	d44ec <HAL_USB_USART_Receive_Data>
}
   d4ed4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4ed8:	bf28      	it	cs
   d4eda:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d4ede:	bd08      	pop	{r3, pc}

000d4ee0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4ee0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4ee2:	2101      	movs	r1, #1
   d4ee4:	7c00      	ldrb	r0, [r0, #16]
   d4ee6:	f7ff fb01 	bl	d44ec <HAL_USB_USART_Receive_Data>
}
   d4eea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4eee:	bf28      	it	cs
   d4ef0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d4ef4:	bd08      	pop	{r3, pc}

000d4ef6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4ef6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4ef8:	7c00      	ldrb	r0, [r0, #16]
   d4efa:	f7ff faef 	bl	d44dc <HAL_USB_USART_Available_Data_For_Write>
}
   d4efe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4f02:	bd08      	pop	{r3, pc}

000d4f04 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4f04:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4f06:	7c00      	ldrb	r0, [r0, #16]
   d4f08:	f7ff fae0 	bl	d44cc <HAL_USB_USART_Available_Data>
}
   d4f0c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4f10:	bd08      	pop	{r3, pc}

000d4f12 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4f12:	7c00      	ldrb	r0, [r0, #16]
   d4f14:	f7ff bafa 	b.w	d450c <HAL_USB_USART_Flush_Data>

000d4f18 <_ZN9USBSerialD0Ev>:
   d4f18:	b510      	push	{r4, lr}
   d4f1a:	2114      	movs	r1, #20
   d4f1c:	4604      	mov	r4, r0
   d4f1e:	f000 f9c2 	bl	d52a6 <_ZdlPvj>
   d4f22:	4620      	mov	r0, r4
   d4f24:	bd10      	pop	{r4, pc}

000d4f26 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4f26:	b538      	push	{r3, r4, r5, lr}
   d4f28:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4f2a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4f2c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4f2e:	f7ff fad5 	bl	d44dc <HAL_USB_USART_Available_Data_For_Write>
   d4f32:	2800      	cmp	r0, #0
   d4f34:	dc01      	bgt.n	d4f3a <_ZN9USBSerial5writeEh+0x14>
   d4f36:	7c60      	ldrb	r0, [r4, #17]
   d4f38:	b128      	cbz	r0, d4f46 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4f3a:	4629      	mov	r1, r5
   d4f3c:	7c20      	ldrb	r0, [r4, #16]
   d4f3e:	f7ff fadd 	bl	d44fc <HAL_USB_USART_Send_Data>
   d4f42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4f46:	bd38      	pop	{r3, r4, r5, pc}

000d4f48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4f48:	b510      	push	{r4, lr}
   d4f4a:	4604      	mov	r4, r0
   d4f4c:	2300      	movs	r3, #0
   d4f4e:	6063      	str	r3, [r4, #4]
   d4f50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4f54:	60a3      	str	r3, [r4, #8]
   d4f56:	4b05      	ldr	r3, [pc, #20]	; (d4f6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4f58:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4f5a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4f5c:	4608      	mov	r0, r1
{
  _serial = serial;
   d4f5e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4f60:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4f62:	4611      	mov	r1, r2
   d4f64:	f7ff faa2 	bl	d44ac <HAL_USB_USART_Init>
}
   d4f68:	4620      	mov	r0, r4
   d4f6a:	bd10      	pop	{r4, pc}
   d4f6c:	000d5888 	.word	0x000d5888

000d4f70 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4f70:	2200      	movs	r2, #0
   d4f72:	7c00      	ldrb	r0, [r0, #16]
   d4f74:	f7ff baa2 	b.w	d44bc <HAL_USB_USART_Begin>

000d4f78 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4f78:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4f7a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4f7c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4f7e:	2100      	movs	r1, #0
   d4f80:	f000 fb0f 	bl	d55a2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4f84:	4620      	mov	r0, r4
   d4f86:	bd10      	pop	{r4, pc}

000d4f88 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4f88:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4f8a:	4d0e      	ldr	r5, [pc, #56]	; (d4fc4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4f8c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4f8e:	a801      	add	r0, sp, #4
   d4f90:	f7ff fff2 	bl	d4f78 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4f94:	6829      	ldr	r1, [r5, #0]
   d4f96:	f011 0401 	ands.w	r4, r1, #1
   d4f9a:	d110      	bne.n	d4fbe <_Z16_fetch_usbserialv+0x36>
   d4f9c:	4628      	mov	r0, r5
   d4f9e:	f7ff f87e 	bl	d409e <__cxa_guard_acquire>
   d4fa2:	b160      	cbz	r0, d4fbe <_Z16_fetch_usbserialv+0x36>
   d4fa4:	aa01      	add	r2, sp, #4
   d4fa6:	4621      	mov	r1, r4
   d4fa8:	4807      	ldr	r0, [pc, #28]	; (d4fc8 <_Z16_fetch_usbserialv+0x40>)
   d4faa:	f7ff ffcd 	bl	d4f48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4fae:	4628      	mov	r0, r5
   d4fb0:	f7ff f87a 	bl	d40a8 <__cxa_guard_release>
   d4fb4:	4a05      	ldr	r2, [pc, #20]	; (d4fcc <_Z16_fetch_usbserialv+0x44>)
   d4fb6:	4906      	ldr	r1, [pc, #24]	; (d4fd0 <_Z16_fetch_usbserialv+0x48>)
   d4fb8:	4803      	ldr	r0, [pc, #12]	; (d4fc8 <_Z16_fetch_usbserialv+0x40>)
   d4fba:	f000 f96f 	bl	d529c <__aeabi_atexit>
	return _usbserial;
}
   d4fbe:	4802      	ldr	r0, [pc, #8]	; (d4fc8 <_Z16_fetch_usbserialv+0x40>)
   d4fc0:	b007      	add	sp, #28
   d4fc2:	bd30      	pop	{r4, r5, pc}
   d4fc4:	2003e6fc 	.word	0x2003e6fc
   d4fc8:	2003e700 	.word	0x2003e700
   d4fcc:	2003e390 	.word	0x2003e390
   d4fd0:	000d4ec9 	.word	0x000d4ec9

000d4fd4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4fd4:	2200      	movs	r2, #0
   d4fd6:	4611      	mov	r1, r2
   d4fd8:	6840      	ldr	r0, [r0, #4]
   d4fda:	f7ff bae3 	b.w	d45a4 <network_ready>

000d4fde <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4fde:	2200      	movs	r2, #0
   d4fe0:	4611      	mov	r1, r2
   d4fe2:	6840      	ldr	r0, [r0, #4]
   d4fe4:	f7ff bafe 	b.w	d45e4 <network_listening>

000d4fe8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4fe8:	2200      	movs	r2, #0
   d4fea:	4611      	mov	r1, r2
   d4fec:	6840      	ldr	r0, [r0, #4]
   d4fee:	f7ff bb09 	b.w	d4604 <network_get_listen_timeout>

000d4ff2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4ff2:	2200      	movs	r2, #0
   d4ff4:	6840      	ldr	r0, [r0, #4]
   d4ff6:	f7ff bafd 	b.w	d45f4 <network_set_listen_timeout>

000d4ffa <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4ffa:	2200      	movs	r2, #0
   d4ffc:	f081 0101 	eor.w	r1, r1, #1
   d5000:	6840      	ldr	r0, [r0, #4]
   d5002:	f7ff bae7 	b.w	d45d4 <network_listen>

000d5006 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5006:	2300      	movs	r3, #0
   d5008:	461a      	mov	r2, r3
   d500a:	4619      	mov	r1, r3
   d500c:	6840      	ldr	r0, [r0, #4]
   d500e:	f7ff bad9 	b.w	d45c4 <network_off>

000d5012 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5012:	2300      	movs	r3, #0
   d5014:	461a      	mov	r2, r3
   d5016:	4619      	mov	r1, r3
   d5018:	6840      	ldr	r0, [r0, #4]
   d501a:	f7ff bacb 	b.w	d45b4 <network_on>

000d501e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d501e:	2200      	movs	r2, #0
   d5020:	4611      	mov	r1, r2
   d5022:	6840      	ldr	r0, [r0, #4]
   d5024:	f7ff baae 	b.w	d4584 <network_connecting>

000d5028 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5028:	2200      	movs	r2, #0
   d502a:	2102      	movs	r1, #2
   d502c:	6840      	ldr	r0, [r0, #4]
   d502e:	f7ff bab1 	b.w	d4594 <network_disconnect>

000d5032 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5032:	2300      	movs	r3, #0
   d5034:	461a      	mov	r2, r3
   d5036:	6840      	ldr	r0, [r0, #4]
   d5038:	f7ff ba9c 	b.w	d4574 <network_connect>

000d503c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d503c:	4b02      	ldr	r3, [pc, #8]	; (d5048 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d503e:	2204      	movs	r2, #4
   d5040:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5042:	4a02      	ldr	r2, [pc, #8]	; (d504c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5044:	601a      	str	r2, [r3, #0]
   d5046:	4770      	bx	lr
   d5048:	2003e714 	.word	0x2003e714
   d504c:	000d58b8 	.word	0x000d58b8

000d5050 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5050:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5052:	4b0c      	ldr	r3, [pc, #48]	; (d5084 <serialEventRun+0x34>)
   d5054:	b133      	cbz	r3, d5064 <serialEventRun+0x14>
   d5056:	f7ff ff97 	bl	d4f88 <_Z16_fetch_usbserialv>
   d505a:	6803      	ldr	r3, [r0, #0]
   d505c:	691b      	ldr	r3, [r3, #16]
   d505e:	4798      	blx	r3
   d5060:	2800      	cmp	r0, #0
   d5062:	dc09      	bgt.n	d5078 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5064:	4b08      	ldr	r3, [pc, #32]	; (d5088 <serialEventRun+0x38>)
   d5066:	b163      	cbz	r3, d5082 <serialEventRun+0x32>
   d5068:	f7ff ff06 	bl	d4e78 <_Z22__fetch_global_Serial1v>
   d506c:	6803      	ldr	r3, [r0, #0]
   d506e:	691b      	ldr	r3, [r3, #16]
   d5070:	4798      	blx	r3
   d5072:	2800      	cmp	r0, #0
   d5074:	dc03      	bgt.n	d507e <serialEventRun+0x2e>
   d5076:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5078:	f3af 8000 	nop.w
   d507c:	e7f2      	b.n	d5064 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d507e:	f3af 8000 	nop.w
   d5082:	bd08      	pop	{r3, pc}
	...

000d508c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d508c:	b508      	push	{r3, lr}
	serialEventRun();
   d508e:	f7ff ffdf 	bl	d5050 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5092:	f7ff f943 	bl	d431c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5096:	4b01      	ldr	r3, [pc, #4]	; (d509c <_post_loop+0x10>)
   d5098:	6018      	str	r0, [r3, #0]
   d509a:	bd08      	pop	{r3, pc}
   d509c:	2003e730 	.word	0x2003e730

000d50a0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d50a0:	4802      	ldr	r0, [pc, #8]	; (d50ac <_Z33system_initialize_user_backup_ramv+0xc>)
   d50a2:	4a03      	ldr	r2, [pc, #12]	; (d50b0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d50a4:	4903      	ldr	r1, [pc, #12]	; (d50b4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d50a6:	1a12      	subs	r2, r2, r0
   d50a8:	f000 ba70 	b.w	d558c <memcpy>
   d50ac:	2003f400 	.word	0x2003f400
   d50b0:	2003f404 	.word	0x2003f404
   d50b4:	000d5990 	.word	0x000d5990

000d50b8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d50b8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d50ba:	2300      	movs	r3, #0
   d50bc:	9300      	str	r3, [sp, #0]
   d50be:	461a      	mov	r2, r3
   d50c0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d50c4:	f7ff fa44 	bl	d4550 <system_ctrl_set_result>
}
   d50c8:	b003      	add	sp, #12
   d50ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d50d0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d50d0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d50d2:	8843      	ldrh	r3, [r0, #2]
   d50d4:	2b0a      	cmp	r3, #10
   d50d6:	d008      	beq.n	d50ea <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d50d8:	2b50      	cmp	r3, #80	; 0x50
   d50da:	d109      	bne.n	d50f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d50dc:	4b09      	ldr	r3, [pc, #36]	; (d5104 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d50de:	681b      	ldr	r3, [r3, #0]
   d50e0:	b13b      	cbz	r3, d50f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d50e2:	b003      	add	sp, #12
   d50e4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d50e8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d50ea:	f7ff ffe5 	bl	d50b8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d50ee:	e006      	b.n	d50fe <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d50f0:	2300      	movs	r3, #0
   d50f2:	9300      	str	r3, [sp, #0]
   d50f4:	461a      	mov	r2, r3
   d50f6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d50fa:	f7ff fa29 	bl	d4550 <system_ctrl_set_result>
        break;
    }
}
   d50fe:	b003      	add	sp, #12
   d5100:	f85d fb04 	ldr.w	pc, [sp], #4
   d5104:	2003e71c 	.word	0x2003e71c

000d5108 <module_user_init_hook>:

void module_user_init_hook()
{
   d5108:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d510a:	4c10      	ldr	r4, [pc, #64]	; (d514c <module_user_init_hook+0x44>)
   d510c:	4d10      	ldr	r5, [pc, #64]	; (d5150 <module_user_init_hook+0x48>)
   d510e:	6823      	ldr	r3, [r4, #0]
   d5110:	42ab      	cmp	r3, r5
   d5112:	4b10      	ldr	r3, [pc, #64]	; (d5154 <module_user_init_hook+0x4c>)
   d5114:	bf0c      	ite	eq
   d5116:	2201      	moveq	r2, #1
   d5118:	2200      	movne	r2, #0
   d511a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d511c:	d002      	beq.n	d5124 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d511e:	f7ff ffbf 	bl	d50a0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5122:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5124:	f7ff f8f2 	bl	d430c <HAL_RNG_GetRandomNumber>
   d5128:	4604      	mov	r4, r0
    srand(seed);
   d512a:	f000 fa43 	bl	d55b4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d512e:	4b0a      	ldr	r3, [pc, #40]	; (d5158 <module_user_init_hook+0x50>)
   d5130:	b113      	cbz	r3, d5138 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5132:	4620      	mov	r0, r4
   d5134:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5138:	2100      	movs	r1, #0
   d513a:	4807      	ldr	r0, [pc, #28]	; (d5158 <module_user_init_hook+0x50>)
   d513c:	f7ff fa12 	bl	d4564 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5140:	2100      	movs	r1, #0
   d5142:	4806      	ldr	r0, [pc, #24]	; (d515c <module_user_init_hook+0x54>)
}
   d5144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5148:	f7ff b9f8 	b.w	d453c <system_ctrl_set_app_request_handler>
   d514c:	2003f400 	.word	0x2003f400
   d5150:	9a271c1e 	.word	0x9a271c1e
   d5154:	2003e720 	.word	0x2003e720
   d5158:	00000000 	.word	0x00000000
   d515c:	000d50d1 	.word	0x000d50d1

000d5160 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5160:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5162:	4e18      	ldr	r6, [pc, #96]	; (d51c4 <pinAvailable+0x64>)
   d5164:	6831      	ldr	r1, [r6, #0]
   d5166:	f011 0501 	ands.w	r5, r1, #1
   d516a:	4604      	mov	r4, r0
   d516c:	d10a      	bne.n	d5184 <pinAvailable+0x24>
   d516e:	4630      	mov	r0, r6
   d5170:	f7fe ff95 	bl	d409e <__cxa_guard_acquire>
   d5174:	b130      	cbz	r0, d5184 <pinAvailable+0x24>
   d5176:	4629      	mov	r1, r5
   d5178:	4813      	ldr	r0, [pc, #76]	; (d51c8 <pinAvailable+0x68>)
   d517a:	f7ff fd95 	bl	d4ca8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d517e:	4630      	mov	r0, r6
   d5180:	f7fe ff92 	bl	d40a8 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d5184:	4810      	ldr	r0, [pc, #64]	; (d51c8 <pinAvailable+0x68>)
   d5186:	f7ff fd99 	bl	d4cbc <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d518a:	b128      	cbz	r0, d5198 <pinAvailable+0x38>
   d518c:	f1a4 030b 	sub.w	r3, r4, #11
   d5190:	2b02      	cmp	r3, #2
   d5192:	d801      	bhi.n	d5198 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d5194:	2000      	movs	r0, #0
   d5196:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5198:	f000 f85a 	bl	d5250 <_Z19__fetch_global_Wirev>
   d519c:	f7ff fb00 	bl	d47a0 <_ZN7TwoWire9isEnabledEv>
   d51a0:	b108      	cbz	r0, d51a6 <pinAvailable+0x46>
   d51a2:	2c01      	cmp	r4, #1
   d51a4:	d9f6      	bls.n	d5194 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d51a6:	f7ff fe67 	bl	d4e78 <_Z22__fetch_global_Serial1v>
   d51aa:	f7ff fe61 	bl	d4e70 <_ZN11USARTSerial9isEnabledEv>
   d51ae:	b118      	cbz	r0, d51b8 <pinAvailable+0x58>
   d51b0:	f1a4 0309 	sub.w	r3, r4, #9
   d51b4:	2b01      	cmp	r3, #1
   d51b6:	d9ed      	bls.n	d5194 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d51b8:	2c23      	cmp	r4, #35	; 0x23
   d51ba:	bf8c      	ite	hi
   d51bc:	2000      	movhi	r0, #0
   d51be:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d51c0:	bd70      	pop	{r4, r5, r6, pc}
   d51c2:	bf00      	nop
   d51c4:	2003e724 	.word	0x2003e724
   d51c8:	2003e728 	.word	0x2003e728

000d51cc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d51cc:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d51ce:	b538      	push	{r3, r4, r5, lr}
   d51d0:	4604      	mov	r4, r0
   d51d2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d51d4:	d80a      	bhi.n	d51ec <pinMode+0x20>
   d51d6:	29ff      	cmp	r1, #255	; 0xff
   d51d8:	d008      	beq.n	d51ec <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d51da:	f7ff ffc1 	bl	d5160 <pinAvailable>
   d51de:	b128      	cbz	r0, d51ec <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d51e0:	4629      	mov	r1, r5
   d51e2:	4620      	mov	r0, r4
}
   d51e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d51e8:	f7ff b8b0 	b.w	d434c <HAL_Pin_Mode>
   d51ec:	bd38      	pop	{r3, r4, r5, pc}

000d51ee <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d51ee:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d51f0:	b510      	push	{r4, lr}
   d51f2:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d51f4:	bf9c      	itt	ls
   d51f6:	340e      	addls	r4, #14
   d51f8:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d51fa:	4620      	mov	r0, r4
   d51fc:	f7ff ffb0 	bl	d5160 <pinAvailable>
   d5200:	b150      	cbz	r0, d5218 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d5202:	2103      	movs	r1, #3
   d5204:	4620      	mov	r0, r4
   d5206:	f7ff f899 	bl	d433c <HAL_Validate_Pin_Function>
   d520a:	2803      	cmp	r0, #3
   d520c:	d104      	bne.n	d5218 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d520e:	4620      	mov	r0, r4
}
   d5210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5214:	f7ff b8a2 	b.w	d435c <HAL_ADC_Read>
}
   d5218:	2000      	movs	r0, #0
   d521a:	bd10      	pop	{r4, pc}

000d521c <_Z17acquireWireBufferv>:
   d521c:	b570      	push	{r4, r5, r6, lr}
   d521e:	4604      	mov	r4, r0
   d5220:	2514      	movs	r5, #20
   d5222:	462a      	mov	r2, r5
   d5224:	4e09      	ldr	r6, [pc, #36]	; (d524c <_Z17acquireWireBufferv+0x30>)
   d5226:	2100      	movs	r1, #0
   d5228:	f000 f9bb 	bl	d55a2 <memset>
   d522c:	8025      	strh	r5, [r4, #0]
   d522e:	2520      	movs	r5, #32
   d5230:	4631      	mov	r1, r6
   d5232:	60a5      	str	r5, [r4, #8]
   d5234:	6125      	str	r5, [r4, #16]
   d5236:	4628      	mov	r0, r5
   d5238:	f000 f84f 	bl	d52da <_ZnajRKSt9nothrow_t>
   d523c:	4631      	mov	r1, r6
   d523e:	6060      	str	r0, [r4, #4]
   d5240:	4628      	mov	r0, r5
   d5242:	f000 f84a 	bl	d52da <_ZnajRKSt9nothrow_t>
   d5246:	60e0      	str	r0, [r4, #12]
   d5248:	4620      	mov	r0, r4
   d524a:	bd70      	pop	{r4, r5, r6, pc}
   d524c:	000d58e4 	.word	0x000d58e4

000d5250 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5250:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5252:	4d0e      	ldr	r5, [pc, #56]	; (d528c <_Z19__fetch_global_Wirev+0x3c>)
   d5254:	6829      	ldr	r1, [r5, #0]
   d5256:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d525a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d525c:	d113      	bne.n	d5286 <_Z19__fetch_global_Wirev+0x36>
   d525e:	4628      	mov	r0, r5
   d5260:	f7fe ff1d 	bl	d409e <__cxa_guard_acquire>
   d5264:	b178      	cbz	r0, d5286 <_Z19__fetch_global_Wirev+0x36>
   d5266:	a801      	add	r0, sp, #4
   d5268:	f7ff ffd8 	bl	d521c <_Z17acquireWireBufferv>
   d526c:	aa01      	add	r2, sp, #4
   d526e:	4621      	mov	r1, r4
   d5270:	4807      	ldr	r0, [pc, #28]	; (d5290 <_Z19__fetch_global_Wirev+0x40>)
   d5272:	f7ff fa83 	bl	d477c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d5276:	4628      	mov	r0, r5
   d5278:	f7fe ff16 	bl	d40a8 <__cxa_guard_release>
   d527c:	4a05      	ldr	r2, [pc, #20]	; (d5294 <_Z19__fetch_global_Wirev+0x44>)
   d527e:	4906      	ldr	r1, [pc, #24]	; (d5298 <_Z19__fetch_global_Wirev+0x48>)
   d5280:	4803      	ldr	r0, [pc, #12]	; (d5290 <_Z19__fetch_global_Wirev+0x40>)
   d5282:	f000 f80b 	bl	d529c <__aeabi_atexit>
	return wire;
}
   d5286:	4802      	ldr	r0, [pc, #8]	; (d5290 <_Z19__fetch_global_Wirev+0x40>)
   d5288:	b007      	add	sp, #28
   d528a:	bd30      	pop	{r4, r5, pc}
   d528c:	2003e734 	.word	0x2003e734
   d5290:	2003e738 	.word	0x2003e738
   d5294:	2003e390 	.word	0x2003e390
   d5298:	000d4725 	.word	0x000d4725

000d529c <__aeabi_atexit>:
   d529c:	460b      	mov	r3, r1
   d529e:	4601      	mov	r1, r0
   d52a0:	4618      	mov	r0, r3
   d52a2:	f000 b965 	b.w	d5570 <__cxa_atexit>

000d52a6 <_ZdlPvj>:
   d52a6:	f7fe bef6 	b.w	d4096 <_ZdlPv>
	...

000d52ac <_ZSt15get_new_handlerv>:
   d52ac:	4b02      	ldr	r3, [pc, #8]	; (d52b8 <_ZSt15get_new_handlerv+0xc>)
   d52ae:	6818      	ldr	r0, [r3, #0]
   d52b0:	f3bf 8f5f 	dmb	sy
   d52b4:	4770      	bx	lr
   d52b6:	bf00      	nop
   d52b8:	2003e74c 	.word	0x2003e74c

000d52bc <_ZnwjRKSt9nothrow_t>:
   d52bc:	b510      	push	{r4, lr}
   d52be:	2800      	cmp	r0, #0
   d52c0:	bf14      	ite	ne
   d52c2:	4604      	movne	r4, r0
   d52c4:	2401      	moveq	r4, #1
   d52c6:	4620      	mov	r0, r4
   d52c8:	f7ff f9a4 	bl	d4614 <malloc>
   d52cc:	b920      	cbnz	r0, d52d8 <_ZnwjRKSt9nothrow_t+0x1c>
   d52ce:	f7ff ffed 	bl	d52ac <_ZSt15get_new_handlerv>
   d52d2:	b108      	cbz	r0, d52d8 <_ZnwjRKSt9nothrow_t+0x1c>
   d52d4:	4780      	blx	r0
   d52d6:	e7f6      	b.n	d52c6 <_ZnwjRKSt9nothrow_t+0xa>
   d52d8:	bd10      	pop	{r4, pc}

000d52da <_ZnajRKSt9nothrow_t>:
   d52da:	f7ff bfef 	b.w	d52bc <_ZnwjRKSt9nothrow_t>
	...

000d52e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d52e0:	4b24      	ldr	r3, [pc, #144]	; (d5374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d52e2:	681a      	ldr	r2, [r3, #0]
   d52e4:	07d0      	lsls	r0, r2, #31
   d52e6:	bf5c      	itt	pl
   d52e8:	2201      	movpl	r2, #1
   d52ea:	601a      	strpl	r2, [r3, #0]
   d52ec:	4b22      	ldr	r3, [pc, #136]	; (d5378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d52ee:	681a      	ldr	r2, [r3, #0]
   d52f0:	07d1      	lsls	r1, r2, #31
   d52f2:	bf5c      	itt	pl
   d52f4:	2201      	movpl	r2, #1
   d52f6:	601a      	strpl	r2, [r3, #0]
   d52f8:	4b20      	ldr	r3, [pc, #128]	; (d537c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d52fa:	681a      	ldr	r2, [r3, #0]
   d52fc:	07d2      	lsls	r2, r2, #31
   d52fe:	bf5c      	itt	pl
   d5300:	2201      	movpl	r2, #1
   d5302:	601a      	strpl	r2, [r3, #0]
   d5304:	4b1e      	ldr	r3, [pc, #120]	; (d5380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5306:	681a      	ldr	r2, [r3, #0]
   d5308:	07d0      	lsls	r0, r2, #31
   d530a:	bf5c      	itt	pl
   d530c:	2201      	movpl	r2, #1
   d530e:	601a      	strpl	r2, [r3, #0]
   d5310:	4b1c      	ldr	r3, [pc, #112]	; (d5384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5312:	681a      	ldr	r2, [r3, #0]
   d5314:	07d1      	lsls	r1, r2, #31
   d5316:	bf5c      	itt	pl
   d5318:	2201      	movpl	r2, #1
   d531a:	601a      	strpl	r2, [r3, #0]
   d531c:	4b1a      	ldr	r3, [pc, #104]	; (d5388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d531e:	681a      	ldr	r2, [r3, #0]
   d5320:	07d2      	lsls	r2, r2, #31
   d5322:	bf5c      	itt	pl
   d5324:	2201      	movpl	r2, #1
   d5326:	601a      	strpl	r2, [r3, #0]
   d5328:	4b18      	ldr	r3, [pc, #96]	; (d538c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d532a:	681a      	ldr	r2, [r3, #0]
   d532c:	07d0      	lsls	r0, r2, #31
   d532e:	bf5c      	itt	pl
   d5330:	2201      	movpl	r2, #1
   d5332:	601a      	strpl	r2, [r3, #0]
   d5334:	4b16      	ldr	r3, [pc, #88]	; (d5390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5336:	681a      	ldr	r2, [r3, #0]
   d5338:	07d1      	lsls	r1, r2, #31
   d533a:	bf5c      	itt	pl
   d533c:	2201      	movpl	r2, #1
   d533e:	601a      	strpl	r2, [r3, #0]
   d5340:	4b14      	ldr	r3, [pc, #80]	; (d5394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5342:	681a      	ldr	r2, [r3, #0]
   d5344:	07d2      	lsls	r2, r2, #31
   d5346:	bf5c      	itt	pl
   d5348:	2201      	movpl	r2, #1
   d534a:	601a      	strpl	r2, [r3, #0]
   d534c:	4b12      	ldr	r3, [pc, #72]	; (d5398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d534e:	681a      	ldr	r2, [r3, #0]
   d5350:	07d0      	lsls	r0, r2, #31
   d5352:	bf5c      	itt	pl
   d5354:	2201      	movpl	r2, #1
   d5356:	601a      	strpl	r2, [r3, #0]
   d5358:	4b10      	ldr	r3, [pc, #64]	; (d539c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d535a:	681a      	ldr	r2, [r3, #0]
   d535c:	07d1      	lsls	r1, r2, #31
   d535e:	bf5c      	itt	pl
   d5360:	2201      	movpl	r2, #1
   d5362:	601a      	strpl	r2, [r3, #0]
   d5364:	4b0e      	ldr	r3, [pc, #56]	; (d53a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5366:	681a      	ldr	r2, [r3, #0]
   d5368:	07d2      	lsls	r2, r2, #31
   d536a:	bf5c      	itt	pl
   d536c:	2201      	movpl	r2, #1
   d536e:	601a      	strpl	r2, [r3, #0]
   d5370:	4770      	bx	lr
   d5372:	bf00      	nop
   d5374:	2003e77c 	.word	0x2003e77c
   d5378:	2003e778 	.word	0x2003e778
   d537c:	2003e774 	.word	0x2003e774
   d5380:	2003e770 	.word	0x2003e770
   d5384:	2003e76c 	.word	0x2003e76c
   d5388:	2003e768 	.word	0x2003e768
   d538c:	2003e764 	.word	0x2003e764
   d5390:	2003e760 	.word	0x2003e760
   d5394:	2003e75c 	.word	0x2003e75c
   d5398:	2003e758 	.word	0x2003e758
   d539c:	2003e754 	.word	0x2003e754
   d53a0:	2003e750 	.word	0x2003e750

000d53a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d53a4:	4b18      	ldr	r3, [pc, #96]	; (d5408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d53a6:	681a      	ldr	r2, [r3, #0]
   d53a8:	07d1      	lsls	r1, r2, #31
   d53aa:	bf5c      	itt	pl
   d53ac:	2201      	movpl	r2, #1
   d53ae:	601a      	strpl	r2, [r3, #0]
   d53b0:	4b16      	ldr	r3, [pc, #88]	; (d540c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d53b2:	681a      	ldr	r2, [r3, #0]
   d53b4:	07d2      	lsls	r2, r2, #31
   d53b6:	bf5c      	itt	pl
   d53b8:	2201      	movpl	r2, #1
   d53ba:	601a      	strpl	r2, [r3, #0]
   d53bc:	4b14      	ldr	r3, [pc, #80]	; (d5410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d53be:	681a      	ldr	r2, [r3, #0]
   d53c0:	07d0      	lsls	r0, r2, #31
   d53c2:	bf5c      	itt	pl
   d53c4:	2201      	movpl	r2, #1
   d53c6:	601a      	strpl	r2, [r3, #0]
   d53c8:	4b12      	ldr	r3, [pc, #72]	; (d5414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d53ca:	681a      	ldr	r2, [r3, #0]
   d53cc:	07d1      	lsls	r1, r2, #31
   d53ce:	bf5c      	itt	pl
   d53d0:	2201      	movpl	r2, #1
   d53d2:	601a      	strpl	r2, [r3, #0]
   d53d4:	4b10      	ldr	r3, [pc, #64]	; (d5418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d53d6:	681a      	ldr	r2, [r3, #0]
   d53d8:	07d2      	lsls	r2, r2, #31
   d53da:	bf5c      	itt	pl
   d53dc:	2201      	movpl	r2, #1
   d53de:	601a      	strpl	r2, [r3, #0]
   d53e0:	4b0e      	ldr	r3, [pc, #56]	; (d541c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d53e2:	681a      	ldr	r2, [r3, #0]
   d53e4:	07d0      	lsls	r0, r2, #31
   d53e6:	bf5c      	itt	pl
   d53e8:	2201      	movpl	r2, #1
   d53ea:	601a      	strpl	r2, [r3, #0]
   d53ec:	4b0c      	ldr	r3, [pc, #48]	; (d5420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d53ee:	681a      	ldr	r2, [r3, #0]
   d53f0:	07d1      	lsls	r1, r2, #31
   d53f2:	bf5c      	itt	pl
   d53f4:	2201      	movpl	r2, #1
   d53f6:	601a      	strpl	r2, [r3, #0]
   d53f8:	4b0a      	ldr	r3, [pc, #40]	; (d5424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d53fa:	681a      	ldr	r2, [r3, #0]
   d53fc:	07d2      	lsls	r2, r2, #31
   d53fe:	bf5c      	itt	pl
   d5400:	2201      	movpl	r2, #1
   d5402:	601a      	strpl	r2, [r3, #0]
   d5404:	4770      	bx	lr
   d5406:	bf00      	nop
   d5408:	2003e79c 	.word	0x2003e79c
   d540c:	2003e798 	.word	0x2003e798
   d5410:	2003e794 	.word	0x2003e794
   d5414:	2003e790 	.word	0x2003e790
   d5418:	2003e78c 	.word	0x2003e78c
   d541c:	2003e788 	.word	0x2003e788
   d5420:	2003e784 	.word	0x2003e784
   d5424:	2003e780 	.word	0x2003e780

000d5428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5428:	4b18      	ldr	r3, [pc, #96]	; (d548c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d542a:	681a      	ldr	r2, [r3, #0]
   d542c:	07d1      	lsls	r1, r2, #31
   d542e:	bf5c      	itt	pl
   d5430:	2201      	movpl	r2, #1
   d5432:	601a      	strpl	r2, [r3, #0]
   d5434:	4b16      	ldr	r3, [pc, #88]	; (d5490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5436:	681a      	ldr	r2, [r3, #0]
   d5438:	07d2      	lsls	r2, r2, #31
   d543a:	bf5c      	itt	pl
   d543c:	2201      	movpl	r2, #1
   d543e:	601a      	strpl	r2, [r3, #0]
   d5440:	4b14      	ldr	r3, [pc, #80]	; (d5494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5442:	681a      	ldr	r2, [r3, #0]
   d5444:	07d0      	lsls	r0, r2, #31
   d5446:	bf5c      	itt	pl
   d5448:	2201      	movpl	r2, #1
   d544a:	601a      	strpl	r2, [r3, #0]
   d544c:	4b12      	ldr	r3, [pc, #72]	; (d5498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d544e:	681a      	ldr	r2, [r3, #0]
   d5450:	07d1      	lsls	r1, r2, #31
   d5452:	bf5c      	itt	pl
   d5454:	2201      	movpl	r2, #1
   d5456:	601a      	strpl	r2, [r3, #0]
   d5458:	4b10      	ldr	r3, [pc, #64]	; (d549c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d545a:	681a      	ldr	r2, [r3, #0]
   d545c:	07d2      	lsls	r2, r2, #31
   d545e:	bf5c      	itt	pl
   d5460:	2201      	movpl	r2, #1
   d5462:	601a      	strpl	r2, [r3, #0]
   d5464:	4b0e      	ldr	r3, [pc, #56]	; (d54a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5466:	681a      	ldr	r2, [r3, #0]
   d5468:	07d0      	lsls	r0, r2, #31
   d546a:	bf5c      	itt	pl
   d546c:	2201      	movpl	r2, #1
   d546e:	601a      	strpl	r2, [r3, #0]
   d5470:	4b0c      	ldr	r3, [pc, #48]	; (d54a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5472:	681a      	ldr	r2, [r3, #0]
   d5474:	07d1      	lsls	r1, r2, #31
   d5476:	bf5c      	itt	pl
   d5478:	2201      	movpl	r2, #1
   d547a:	601a      	strpl	r2, [r3, #0]
   d547c:	4b0a      	ldr	r3, [pc, #40]	; (d54a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d547e:	681a      	ldr	r2, [r3, #0]
   d5480:	07d2      	lsls	r2, r2, #31
   d5482:	bf5c      	itt	pl
   d5484:	2201      	movpl	r2, #1
   d5486:	601a      	strpl	r2, [r3, #0]
   d5488:	4770      	bx	lr
   d548a:	bf00      	nop
   d548c:	2003e7bc 	.word	0x2003e7bc
   d5490:	2003e7b8 	.word	0x2003e7b8
   d5494:	2003e7b4 	.word	0x2003e7b4
   d5498:	2003e7b0 	.word	0x2003e7b0
   d549c:	2003e7ac 	.word	0x2003e7ac
   d54a0:	2003e7a8 	.word	0x2003e7a8
   d54a4:	2003e7a4 	.word	0x2003e7a4
   d54a8:	2003e7a0 	.word	0x2003e7a0

000d54ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d54ac:	4b24      	ldr	r3, [pc, #144]	; (d5540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d54ae:	681a      	ldr	r2, [r3, #0]
   d54b0:	07d0      	lsls	r0, r2, #31
   d54b2:	bf5c      	itt	pl
   d54b4:	2201      	movpl	r2, #1
   d54b6:	601a      	strpl	r2, [r3, #0]
   d54b8:	4b22      	ldr	r3, [pc, #136]	; (d5544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d54ba:	681a      	ldr	r2, [r3, #0]
   d54bc:	07d1      	lsls	r1, r2, #31
   d54be:	bf5c      	itt	pl
   d54c0:	2201      	movpl	r2, #1
   d54c2:	601a      	strpl	r2, [r3, #0]
   d54c4:	4b20      	ldr	r3, [pc, #128]	; (d5548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d54c6:	681a      	ldr	r2, [r3, #0]
   d54c8:	07d2      	lsls	r2, r2, #31
   d54ca:	bf5c      	itt	pl
   d54cc:	2201      	movpl	r2, #1
   d54ce:	601a      	strpl	r2, [r3, #0]
   d54d0:	4b1e      	ldr	r3, [pc, #120]	; (d554c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d54d2:	681a      	ldr	r2, [r3, #0]
   d54d4:	07d0      	lsls	r0, r2, #31
   d54d6:	bf5c      	itt	pl
   d54d8:	2201      	movpl	r2, #1
   d54da:	601a      	strpl	r2, [r3, #0]
   d54dc:	4b1c      	ldr	r3, [pc, #112]	; (d5550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d54de:	681a      	ldr	r2, [r3, #0]
   d54e0:	07d1      	lsls	r1, r2, #31
   d54e2:	bf5c      	itt	pl
   d54e4:	2201      	movpl	r2, #1
   d54e6:	601a      	strpl	r2, [r3, #0]
   d54e8:	4b1a      	ldr	r3, [pc, #104]	; (d5554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d54ea:	681a      	ldr	r2, [r3, #0]
   d54ec:	07d2      	lsls	r2, r2, #31
   d54ee:	bf5c      	itt	pl
   d54f0:	2201      	movpl	r2, #1
   d54f2:	601a      	strpl	r2, [r3, #0]
   d54f4:	4b18      	ldr	r3, [pc, #96]	; (d5558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d54f6:	681a      	ldr	r2, [r3, #0]
   d54f8:	07d0      	lsls	r0, r2, #31
   d54fa:	bf5c      	itt	pl
   d54fc:	2201      	movpl	r2, #1
   d54fe:	601a      	strpl	r2, [r3, #0]
   d5500:	4b16      	ldr	r3, [pc, #88]	; (d555c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5502:	681a      	ldr	r2, [r3, #0]
   d5504:	07d1      	lsls	r1, r2, #31
   d5506:	bf5c      	itt	pl
   d5508:	2201      	movpl	r2, #1
   d550a:	601a      	strpl	r2, [r3, #0]
   d550c:	4b14      	ldr	r3, [pc, #80]	; (d5560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d550e:	681a      	ldr	r2, [r3, #0]
   d5510:	07d2      	lsls	r2, r2, #31
   d5512:	bf5c      	itt	pl
   d5514:	2201      	movpl	r2, #1
   d5516:	601a      	strpl	r2, [r3, #0]
   d5518:	4b12      	ldr	r3, [pc, #72]	; (d5564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d551a:	681a      	ldr	r2, [r3, #0]
   d551c:	07d0      	lsls	r0, r2, #31
   d551e:	bf5c      	itt	pl
   d5520:	2201      	movpl	r2, #1
   d5522:	601a      	strpl	r2, [r3, #0]
   d5524:	4b10      	ldr	r3, [pc, #64]	; (d5568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5526:	681a      	ldr	r2, [r3, #0]
   d5528:	07d1      	lsls	r1, r2, #31
   d552a:	bf5c      	itt	pl
   d552c:	2201      	movpl	r2, #1
   d552e:	601a      	strpl	r2, [r3, #0]
   d5530:	4b0e      	ldr	r3, [pc, #56]	; (d556c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5532:	681a      	ldr	r2, [r3, #0]
   d5534:	07d2      	lsls	r2, r2, #31
   d5536:	bf5c      	itt	pl
   d5538:	2201      	movpl	r2, #1
   d553a:	601a      	strpl	r2, [r3, #0]
   d553c:	4770      	bx	lr
   d553e:	bf00      	nop
   d5540:	2003e7ec 	.word	0x2003e7ec
   d5544:	2003e7e8 	.word	0x2003e7e8
   d5548:	2003e7e4 	.word	0x2003e7e4
   d554c:	2003e7e0 	.word	0x2003e7e0
   d5550:	2003e7dc 	.word	0x2003e7dc
   d5554:	2003e7d8 	.word	0x2003e7d8
   d5558:	2003e7d4 	.word	0x2003e7d4
   d555c:	2003e7d0 	.word	0x2003e7d0
   d5560:	2003e7cc 	.word	0x2003e7cc
   d5564:	2003e7c8 	.word	0x2003e7c8
   d5568:	2003e7c4 	.word	0x2003e7c4
   d556c:	2003e7c0 	.word	0x2003e7c0

000d5570 <__cxa_atexit>:
   d5570:	b510      	push	{r4, lr}
   d5572:	4c05      	ldr	r4, [pc, #20]	; (d5588 <__cxa_atexit+0x18>)
   d5574:	4613      	mov	r3, r2
   d5576:	b12c      	cbz	r4, d5584 <__cxa_atexit+0x14>
   d5578:	460a      	mov	r2, r1
   d557a:	4601      	mov	r1, r0
   d557c:	2002      	movs	r0, #2
   d557e:	f3af 8000 	nop.w
   d5582:	bd10      	pop	{r4, pc}
   d5584:	4620      	mov	r0, r4
   d5586:	bd10      	pop	{r4, pc}
   d5588:	00000000 	.word	0x00000000

000d558c <memcpy>:
   d558c:	b510      	push	{r4, lr}
   d558e:	1e43      	subs	r3, r0, #1
   d5590:	440a      	add	r2, r1
   d5592:	4291      	cmp	r1, r2
   d5594:	d004      	beq.n	d55a0 <memcpy+0x14>
   d5596:	f811 4b01 	ldrb.w	r4, [r1], #1
   d559a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d559e:	e7f8      	b.n	d5592 <memcpy+0x6>
   d55a0:	bd10      	pop	{r4, pc}

000d55a2 <memset>:
   d55a2:	4402      	add	r2, r0
   d55a4:	4603      	mov	r3, r0
   d55a6:	4293      	cmp	r3, r2
   d55a8:	d002      	beq.n	d55b0 <memset+0xe>
   d55aa:	f803 1b01 	strb.w	r1, [r3], #1
   d55ae:	e7fa      	b.n	d55a6 <memset+0x4>
   d55b0:	4770      	bx	lr
	...

000d55b4 <srand>:
   d55b4:	b538      	push	{r3, r4, r5, lr}
   d55b6:	4b12      	ldr	r3, [pc, #72]	; (d5600 <srand+0x4c>)
   d55b8:	681c      	ldr	r4, [r3, #0]
   d55ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d55bc:	4605      	mov	r5, r0
   d55be:	b9d3      	cbnz	r3, d55f6 <srand+0x42>
   d55c0:	2018      	movs	r0, #24
   d55c2:	f7ff f827 	bl	d4614 <malloc>
   d55c6:	f243 330e 	movw	r3, #13070	; 0x330e
   d55ca:	63a0      	str	r0, [r4, #56]	; 0x38
   d55cc:	8003      	strh	r3, [r0, #0]
   d55ce:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d55d2:	8043      	strh	r3, [r0, #2]
   d55d4:	f241 2334 	movw	r3, #4660	; 0x1234
   d55d8:	8083      	strh	r3, [r0, #4]
   d55da:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d55de:	80c3      	strh	r3, [r0, #6]
   d55e0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d55e4:	8103      	strh	r3, [r0, #8]
   d55e6:	2305      	movs	r3, #5
   d55e8:	8143      	strh	r3, [r0, #10]
   d55ea:	230b      	movs	r3, #11
   d55ec:	8183      	strh	r3, [r0, #12]
   d55ee:	2201      	movs	r2, #1
   d55f0:	2300      	movs	r3, #0
   d55f2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d55f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d55f8:	2200      	movs	r2, #0
   d55fa:	611d      	str	r5, [r3, #16]
   d55fc:	615a      	str	r2, [r3, #20]
   d55fe:	bd38      	pop	{r3, r4, r5, pc}
   d5600:	2003e38c 	.word	0x2003e38c

000d5604 <strlen>:
   d5604:	4603      	mov	r3, r0
   d5606:	f813 2b01 	ldrb.w	r2, [r3], #1
   d560a:	2a00      	cmp	r2, #0
   d560c:	d1fb      	bne.n	d5606 <strlen+0x2>
   d560e:	1a18      	subs	r0, r3, r0
   d5610:	3801      	subs	r0, #1
   d5612:	4770      	bx	lr

000d5614 <dynalib_user>:
   d5614:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5624:	0000 0000 7953 7473 6d65 5220 6165 7964     ....System Ready
   d5634:	2e2e 0a2e 4600 6172 6b6e 203a 7825 202c     .....Frank: %x, 
   d5644:	6325 202c 7325 000a 6573 646e 615f 7272     %c, %s..send_arr
   d5654:	7961 695b 3a5d 2520 2069 3a69 2520 0a69     ay[i]: %i i: %i.
   d5664:	0000 0000                                   ....

000d5668 <_ZTVN5spark13EthernetClassE>:
	...
   d5670:	4705 000d 46fb 000d 46f1 000d 46e7 000d     .G...F...F...F..
   d5680:	46db 000d 46cf 000d 46c3 000d 46bb 000d     .F...F...F...F..
   d5690:	46b1 000d 46a7 000d 4a81 000d               .F...F...J..

000d569c <_ZTV7TwoWire>:
	...
   d56a4:	4725 000d 476f 000d 4747 000d 4727 000d     %G..oG..GG..'G..
   d56b4:	474f 000d 4757 000d 475f 000d 4767 000d     OG..WG.._G..gG..

000d56c4 <_ZTV9IPAddress>:
	...
   d56cc:	47b9 000d 47a9 000d 47ab 000d 6162 6475     .G...G...G..baud
   d56dc:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d56ec:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d56fc:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d570c:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d571c:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d572c:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d573c:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d574c:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d575c:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d576c:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d577c:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
   d578c:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   d579c:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d57ac:	726f 7000 6e61 6369 6100 6c6c 0000 0000     or.panic.all....

000d57bc <_ZTVN5spark9MeshClassE>:
	...
   d57c4:	48fb 000d 48f1 000d 48e7 000d 48dd 000d     .H...H...H...H..
   d57d4:	48d1 000d 48c5 000d 48b9 000d 48b1 000d     .H...H...H...H..
   d57e4:	48a7 000d 489d 000d 4a81 000d               .H...H...J..

000d57f0 <_ZTVN5spark12NetworkClassE>:
	...
   d57f8:	4a19 000d 4a23 000d 4a2d 000d 4a37 000d     .J..#J..-J..7J..
   d5808:	4a41 000d 4a4d 000d 4a59 000d 4a65 000d     AJ..MJ..YJ..eJ..
   d5818:	4a6d 000d 4a77 000d 4a81 000d 005a 2b25     mJ..wJ...J..Z.%+
   d5828:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   d5838:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   d5848:	6974 656d 0000 0000                         time....

000d5850 <_ZTV11USARTSerial>:
	...
   d5858:	4dc1 000d 4e11 000d 4e1f 000d 4b61 000d     .M...N...N..aK..
   d5868:	4dd5 000d 4df7 000d 4de3 000d 4e0b 000d     .M...M...M...N..
   d5878:	4dc3 000d 4dc7 000d                         .M...M..

000d5880 <_ZTV9USBSerial>:
	...
   d5888:	4ec9 000d 4f19 000d 4f27 000d 4b61 000d     .N...O..'O..aK..
   d5898:	4f05 000d 4ecb 000d 4ee1 000d 4f13 000d     .O...N...N...O..
   d58a8:	4ef7 000d 4ec5 000d                         .N...N..

000d58b0 <_ZTVN5spark9WiFiClassE>:
	...
   d58b8:	5033 000d 5029 000d 501f 000d 4fd5 000d     3P..)P...P...O..
   d58c8:	5013 000d 5007 000d 4ffb 000d 4ff3 000d     .P...P...O...O..
   d58d8:	4fe9 000d 4fdf 000d 4a81 000d               .O...O...J..

000d58e4 <_ZSt7nothrow>:
   d58e4:	0000 0000                                   ....

000d58e8 <__sf_fake_stdin>:
	...

000d5908 <__sf_fake_stdout>:
	...

000d5928 <__sf_fake_stderr>:
	...
   d5948:	0043                                        C.

000d594a <link_const_variable_data_end>:
	...

000d594c <link_constructors_location>:
   d594c:	000d4261 	.word	0x000d4261
   d5950:	000d466d 	.word	0x000d466d
   d5954:	000d4711 	.word	0x000d4711
   d5958:	000d488d 	.word	0x000d488d
   d595c:	000d49c9 	.word	0x000d49c9
   d5960:	000d4b4d 	.word	0x000d4b4d
   d5964:	000d4c8d 	.word	0x000d4c8d
   d5968:	000d4d79 	.word	0x000d4d79
   d596c:	000d4dad 	.word	0x000d4dad
   d5970:	000d503d 	.word	0x000d503d
   d5974:	000d52e1 	.word	0x000d52e1
   d5978:	000d53a5 	.word	0x000d53a5
   d597c:	000d5429 	.word	0x000d5429
   d5980:	000d54ad 	.word	0x000d54ad

000d5984 <link_constructors_end>:
	...
