
/Users/christianc/Documents/IoT/Capstone/LaserTest/target/1.5.2/argon/LaserTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000028d4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d68f0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000098  2003e200  000d68f4  0001e200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000558  2003e298  2003e298  0002e298  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d698c  000d698c  0002698c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d69b4  000d69b4  000269b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000eab40  00000000  00000000  000269b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012435  00000000  00000000  001114f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001ea1d  00000000  00000000  0012392d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002540  00000000  00000000  0014234a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000048a8  00000000  00000000  0014488a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00037ec0  00000000  00000000  00149132  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002cfb9  00000000  00000000  00180ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001096a0  00000000  00000000  001adfab  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000cd84  00000000  00000000  002b764c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fa29 	bl	d6484 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fa2e 	bl	d649a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e200 	.word	0x2003e200
   d4048:	000d68f4 	.word	0x000d68f4
   d404c:	2003e298 	.word	0x2003e298
   d4050:	2003e298 	.word	0x2003e298
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fddd 	bl	d5c18 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d68e8 	.word	0x000d68e8
   d4080:	000d68a4 	.word	0x000d68a4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b85a 	b.w	d413c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8c9 	bl	d4220 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bd83 	b.w	d5b9c <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 bfb9 	b.w	d500c <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 bfb7 	b.w	d500c <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <_Z6click1v>:

}

void click1(){

  buttonState = !buttonState;
   d40b0:	4a02      	ldr	r2, [pc, #8]	; (d40bc <_Z6click1v+0xc>)
   d40b2:	7813      	ldrb	r3, [r2, #0]
   d40b4:	f083 0301 	eor.w	r3, r3, #1
   d40b8:	7013      	strb	r3, [r2, #0]
   d40ba:	4770      	bx	lr
   d40bc:	2003e37c 	.word	0x2003e37c

000d40c0 <_Z6click2v>:

}

void click2(){

  extraButtonState = !extraButtonState;
   d40c0:	4a02      	ldr	r2, [pc, #8]	; (d40cc <_Z6click2v+0xc>)
   d40c2:	7813      	ldrb	r3, [r2, #0]
   d40c4:	f083 0301 	eor.w	r3, r3, #1
   d40c8:	7013      	strb	r3, [r2, #0]
   d40ca:	4770      	bx	lr
   d40cc:	2003e384 	.word	0x2003e384

000d40d0 <_Z14longPressStop1v>:
  Serial.printf("Temperature: %f\n", temp);
  

} 

void longPressStop1() {
   d40d0:	b508      	push	{r3, lr}

  Serial.println("Button 1 longPress stop");
   d40d2:	f001 fce1 	bl	d5a98 <_Z16_fetch_usbserialv>
   d40d6:	4904      	ldr	r1, [pc, #16]	; (d40e8 <_Z14longPressStop1v+0x18>)
   d40d8:	f001 faa9 	bl	d562e <_ZN5Print7printlnEPKc>
  analogWrite(D7, 0);
   d40dc:	2100      	movs	r1, #0
   d40de:	2007      	movs	r0, #7

   d40e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
} 

void longPressStop1() {

  Serial.println("Button 1 longPress stop");
  analogWrite(D7, 0);
   d40e4:	f001 be37 	b.w	d5d56 <_Z11analogWritetm>
   d40e8:	000d6520 	.word	0x000d6520

000d40ec <_Z15longPressStart1v>:

  extraButtonState = !extraButtonState;

}

void longPressStart1() {
   d40ec:	b513      	push	{r0, r1, r4, lr}

  Serial.println("Button 1 longPress start");
   d40ee:	f001 fcd3 	bl	d5a98 <_Z16_fetch_usbserialv>
   d40f2:	490b      	ldr	r1, [pc, #44]	; (d4120 <_Z15longPressStart1v+0x34>)
   d40f4:	f001 fa9b 	bl	d562e <_ZN5Print7printlnEPKc>
  analogWrite(D7, 200);
   d40f8:	21c8      	movs	r1, #200	; 0xc8
   d40fa:	2007      	movs	r0, #7
   d40fc:	f001 fe2b 	bl	d5d56 <_Z11analogWritetm>
  Serial.printf("Temperature: %f\n", temp);
   d4100:	f001 fcca 	bl	d5a98 <_Z16_fetch_usbserialv>
   d4104:	4b07      	ldr	r3, [pc, #28]	; (d4124 <_Z15longPressStart1v+0x38>)
   d4106:	4604      	mov	r4, r0
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4108:	6818      	ldr	r0, [r3, #0]
   d410a:	f002 f959 	bl	d63c0 <__aeabi_f2d>
   d410e:	4a06      	ldr	r2, [pc, #24]	; (d4128 <_Z15longPressStart1v+0x3c>)
   d4110:	e9cd 0100 	strd	r0, r1, [sp]
   d4114:	2100      	movs	r1, #0
   d4116:	4620      	mov	r0, r4
   d4118:	f001 fab3 	bl	d5682 <_ZN5Print11printf_implEbPKcz>
  

} 
   d411c:	b002      	add	sp, #8
   d411e:	bd10      	pop	{r4, pc}
   d4120:	000d6538 	.word	0x000d6538
   d4124:	2003e29c 	.word	0x2003e29c
   d4128:	000d6551 	.word	0x000d6551

000d412c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d412c:	b510      	push	{r4, lr}
   d412e:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d4130:	6800      	ldr	r0, [r0, #0]
   d4132:	b108      	cbz	r0, d4138 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4134:	f000 ff6a 	bl	d500c <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4138:	4620      	mov	r0, r4
   d413a:	bd10      	pop	{r4, pc}

000d413c <setup>:
bool extraButtonState;

float temp;


void setup() {
   d413c:	b510      	push	{r4, lr}

  Serial.begin(9600);
   d413e:	f001 fcab 	bl	d5a98 <_Z16_fetch_usbserialv>
   d4142:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4146:	f001 fc9b 	bl	d5a80 <_ZN9USBSerial5beginEl>

  bme.begin(0x76);
   d414a:	2176      	movs	r1, #118	; 0x76
   d414c:	4819      	ldr	r0, [pc, #100]	; (d41b4 <setup+0x78>)
  pinMode(buttonPin, INPUT_PULLDOWN);
  pinMode(extraButtonPin, INPUT_PULLDOWN);
  pinMode(A1, OUTPUT); //used for testing 
  pinMode(D7, OUTPUT); //used for testing
  
  button1.attachClick(click1);
   d414e:	4c1a      	ldr	r4, [pc, #104]	; (d41b8 <setup+0x7c>)

void setup() {

  Serial.begin(9600);

  bme.begin(0x76);
   d4150:	f000 fd2a 	bl	d4ba8 <_ZN15Adafruit_BME2805beginEh>

  pinMode(laserPin, OUTPUT);
   d4154:	2101      	movs	r1, #1
   d4156:	200e      	movs	r0, #14
   d4158:	f001 fdc0 	bl	d5cdc <pinMode>
  pinMode(buttonPin, INPUT_PULLDOWN);
   d415c:	2103      	movs	r1, #3
   d415e:	2005      	movs	r0, #5
   d4160:	f001 fdbc 	bl	d5cdc <pinMode>
  pinMode(extraButtonPin, INPUT_PULLDOWN);
   d4164:	2103      	movs	r1, #3
   d4166:	2006      	movs	r0, #6
   d4168:	f001 fdb8 	bl	d5cdc <pinMode>
  pinMode(A1, OUTPUT); //used for testing 
   d416c:	2101      	movs	r1, #1
   d416e:	2012      	movs	r0, #18
   d4170:	f001 fdb4 	bl	d5cdc <pinMode>
  pinMode(D7, OUTPUT); //used for testing
   d4174:	2101      	movs	r1, #1
   d4176:	2007      	movs	r0, #7
   d4178:	f001 fdb0 	bl	d5cdc <pinMode>
  
  button1.attachClick(click1);
   d417c:	4620      	mov	r0, r4
   d417e:	490f      	ldr	r1, [pc, #60]	; (d41bc <setup+0x80>)
   d4180:	f000 f91b 	bl	d43ba <_ZN9OneButton11attachClickEPFvvE>
  button1.attachLongPressStart(longPressStart1);
   d4184:	4620      	mov	r0, r4
   d4186:	490e      	ldr	r1, [pc, #56]	; (d41c0 <setup+0x84>)
   d4188:	f000 f919 	bl	d43be <_ZN9OneButton20attachLongPressStartEPFvvE>
  button1.attachLongPressStop(longPressStop1);
   d418c:	4620      	mov	r0, r4
   d418e:	490d      	ldr	r1, [pc, #52]	; (d41c4 <setup+0x88>)
   d4190:	f000 f917 	bl	d43c2 <_ZN9OneButton19attachLongPressStopEPFvvE>
  button1.setClickTicks(250);
   d4194:	4620      	mov	r0, r4

  button2.attachClick(click2);
   d4196:	4c0c      	ldr	r4, [pc, #48]	; (d41c8 <setup+0x8c>)
  pinMode(D7, OUTPUT); //used for testing
  
  button1.attachClick(click1);
  button1.attachLongPressStart(longPressStart1);
  button1.attachLongPressStop(longPressStop1);
  button1.setClickTicks(250);
   d4198:	21fa      	movs	r1, #250	; 0xfa
   d419a:	f000 f90c 	bl	d43b6 <_ZN9OneButton13setClickTicksEi>

  button2.attachClick(click2);
   d419e:	4620      	mov	r0, r4
   d41a0:	490a      	ldr	r1, [pc, #40]	; (d41cc <setup+0x90>)
   d41a2:	f000 f90a 	bl	d43ba <_ZN9OneButton11attachClickEPFvvE>
  button2.setClickTicks(250);
   d41a6:	4620      	mov	r0, r4
   d41a8:	21fa      	movs	r1, #250	; 0xfa

}
   d41aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  button1.attachLongPressStart(longPressStart1);
  button1.attachLongPressStop(longPressStop1);
  button1.setClickTicks(250);

  button2.attachClick(click2);
  button2.setClickTicks(250);
   d41ae:	f000 b902 	b.w	d43b6 <_ZN9OneButton13setClickTicksEi>
   d41b2:	bf00      	nop
   d41b4:	2003e388 	.word	0x2003e388
   d41b8:	2003e2ac 	.word	0x2003e2ac
   d41bc:	000d40b1 	.word	0x000d40b1
   d41c0:	000d40ed 	.word	0x000d40ed
   d41c4:	000d40d1 	.word	0x000d40d1
   d41c8:	2003e314 	.word	0x2003e314
   d41cc:	000d40c1 	.word	0x000d40c1

000d41d0 <_Z8beamZerov>:
      }
    }
  }
}

void beamZero() {
   d41d0:	b508      	push	{r3, lr}

  // Serial.printf("Array value is ZERO\n");
  digitalWrite(laserPin, HIGH);
   d41d2:	2101      	movs	r1, #1
   d41d4:	200e      	movs	r0, #14
   d41d6:	f001 fd92 	bl	d5cfe <digitalWrite>
  //Serial.printf("ZERO\n");
  delay(zeroTime);
   d41da:	4b06      	ldr	r3, [pc, #24]	; (d41f4 <_Z8beamZerov+0x24>)
   d41dc:	6818      	ldr	r0, [r3, #0]
   d41de:	f000 ff25 	bl	d502c <delay>
  digitalWrite(laserPin, LOW);
   d41e2:	200e      	movs	r0, #14
   d41e4:	2100      	movs	r1, #0
   d41e6:	f001 fd8a 	bl	d5cfe <digitalWrite>
  delay(25);
   d41ea:	2019      	movs	r0, #25

}
   d41ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  // Serial.printf("Array value is ZERO\n");
  digitalWrite(laserPin, HIGH);
  //Serial.printf("ZERO\n");
  delay(zeroTime);
  digitalWrite(laserPin, LOW);
  delay(25);
   d41f0:	f000 bf1c 	b.w	d502c <delay>
   d41f4:	2003e204 	.word	0x2003e204

000d41f8 <_Z7beamOnev>:

}

void beamOne() {
   d41f8:	b508      	push	{r3, lr}

  //Serial.printf("Array value is ONE\n");
  digitalWrite(laserPin, HIGH);
   d41fa:	2101      	movs	r1, #1
   d41fc:	200e      	movs	r0, #14
   d41fe:	f001 fd7e 	bl	d5cfe <digitalWrite>
  //Serial.printf("ONE\n");
  delay(oneTime);
   d4202:	4b06      	ldr	r3, [pc, #24]	; (d421c <_Z7beamOnev+0x24>)
   d4204:	6818      	ldr	r0, [r3, #0]
   d4206:	f000 ff11 	bl	d502c <delay>
  digitalWrite(laserPin, LOW);
   d420a:	200e      	movs	r0, #14
   d420c:	2100      	movs	r1, #0
   d420e:	f001 fd76 	bl	d5cfe <digitalWrite>
  delay(25);
   d4212:	2019      	movs	r0, #25

}
   d4214:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  //Serial.printf("Array value is ONE\n");
  digitalWrite(laserPin, HIGH);
  //Serial.printf("ONE\n");
  delay(oneTime);
  digitalWrite(laserPin, LOW);
  delay(25);
   d4218:	f000 bf08 	b.w	d502c <delay>
   d421c:	2003e200 	.word	0x2003e200

000d4220 <loop>:
  button2.attachClick(click2);
  button2.setClickTicks(250);

}

void loop() {
   d4220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  button1.tick();
   d4222:	482b      	ldr	r0, [pc, #172]	; (d42d0 <loop+0xb0>)
  //Serial.printf("Button State: %i\n", buttonState);

  temp = ((bme.readTemperature()*9/5)+32);

  
  if(buttonState){
   d4224:	4d2b      	ldr	r5, [pc, #172]	; (d42d4 <loop+0xb4>)

}

void loop() {

  button1.tick();
   d4226:	f000 f950 	bl	d44ca <_ZN9OneButton4tickEv>
  button2.tick();
   d422a:	482b      	ldr	r0, [pc, #172]	; (d42d8 <loop+0xb8>)
   d422c:	f000 f94d 	bl	d44ca <_ZN9OneButton4tickEv>
  digitalWrite(A1, HIGH);
   d4230:	2101      	movs	r1, #1
   d4232:	2012      	movs	r0, #18
   d4234:	f001 fd63 	bl	d5cfe <digitalWrite>
  //Serial.printf("Button State: %i\n", buttonState);

  temp = ((bme.readTemperature()*9/5)+32);
   d4238:	4828      	ldr	r0, [pc, #160]	; (d42dc <loop+0xbc>)
   d423a:	f000 fa63 	bl	d4704 <_ZN15Adafruit_BME28015readTemperatureEv>
   d423e:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   d4242:	ee20 0a27 	vmul.f32	s0, s0, s15
   d4246:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
   d424a:	eec0 7a07 	vdiv.f32	s15, s0, s14
   d424e:	4b24      	ldr	r3, [pc, #144]	; (d42e0 <loop+0xc0>)
   d4250:	ed9f 7a24 	vldr	s14, [pc, #144]	; d42e4 <loop+0xc4>
   d4254:	ee77 7a87 	vadd.f32	s15, s15, s14
   d4258:	edc3 7a00 	vstr	s15, [r3]

  
  if(buttonState){
   d425c:	782b      	ldrb	r3, [r5, #0]
   d425e:	b1cb      	cbz	r3, d4294 <loop+0x74>
    for(i = 0; i <= 4; i++){
   d4260:	4c21      	ldr	r4, [pc, #132]	; (d42e8 <loop+0xc8>)

      if(array[i] == 0){
   d4262:	4f22      	ldr	r7, [pc, #136]	; (d42ec <loop+0xcc>)

  temp = ((bme.readTemperature()*9/5)+32);

  
  if(buttonState){
    for(i = 0; i <= 4; i++){
   d4264:	2300      	movs	r3, #0
   d4266:	6023      	str	r3, [r4, #0]

      }

      if(i < 4){

        buttonState = false;
   d4268:	461e      	mov	r6, r3

  temp = ((bme.readTemperature()*9/5)+32);

  
  if(buttonState){
    for(i = 0; i <= 4; i++){
   d426a:	6823      	ldr	r3, [r4, #0]
   d426c:	2b04      	cmp	r3, #4
   d426e:	dc11      	bgt.n	d4294 <loop+0x74>

      if(array[i] == 0){
   d4270:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   d4274:	b913      	cbnz	r3, d427c <loop+0x5c>

        beamZero();
   d4276:	f7ff ffab 	bl	d41d0 <_Z8beamZerov>
   d427a:	e003      	b.n	d4284 <loop+0x64>
        
      }
      else if(array[i] == 1){
   d427c:	2b01      	cmp	r3, #1
   d427e:	d101      	bne.n	d4284 <loop+0x64>

        beamOne();
   d4280:	f7ff ffba 	bl	d41f8 <_Z7beamOnev>

      }

      if(i < 4){
   d4284:	6823      	ldr	r3, [r4, #0]
   d4286:	2b03      	cmp	r3, #3

  temp = ((bme.readTemperature()*9/5)+32);

  
  if(buttonState){
    for(i = 0; i <= 4; i++){
   d4288:	f103 0301 	add.w	r3, r3, #1

      }

      if(i < 4){

        buttonState = false;
   d428c:	bfd8      	it	le
   d428e:	702e      	strble	r6, [r5, #0]

  temp = ((bme.readTemperature()*9/5)+32);

  
  if(buttonState){
    for(i = 0; i <= 4; i++){
   d4290:	6023      	str	r3, [r4, #0]
   d4292:	e7ea      	b.n	d426a <loop+0x4a>
        buttonState = false;

      }
    }
  }
  if(extraButtonState){
   d4294:	4d16      	ldr	r5, [pc, #88]	; (d42f0 <loop+0xd0>)
   d4296:	782b      	ldrb	r3, [r5, #0]
   d4298:	b1cb      	cbz	r3, d42ce <loop+0xae>
    for(i = 0; i <= 4; i++){
   d429a:	4c13      	ldr	r4, [pc, #76]	; (d42e8 <loop+0xc8>)

      if(extraArray[i] == 0){
   d429c:	4f15      	ldr	r7, [pc, #84]	; (d42f4 <loop+0xd4>)

      }
    }
  }
  if(extraButtonState){
    for(i = 0; i <= 4; i++){
   d429e:	2300      	movs	r3, #0
   d42a0:	6023      	str	r3, [r4, #0]

      }

      if(i < 4){

        extraButtonState = false;
   d42a2:	461e      	mov	r6, r3

      }
    }
  }
  if(extraButtonState){
    for(i = 0; i <= 4; i++){
   d42a4:	6823      	ldr	r3, [r4, #0]
   d42a6:	2b04      	cmp	r3, #4
   d42a8:	dc11      	bgt.n	d42ce <loop+0xae>

      if(extraArray[i] == 0){
   d42aa:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   d42ae:	b913      	cbnz	r3, d42b6 <loop+0x96>

        beamZero();
   d42b0:	f7ff ff8e 	bl	d41d0 <_Z8beamZerov>
   d42b4:	e003      	b.n	d42be <loop+0x9e>
        
      }
      else if(extraArray[i] == 1){
   d42b6:	2b01      	cmp	r3, #1
   d42b8:	d101      	bne.n	d42be <loop+0x9e>

        beamOne();
   d42ba:	f7ff ff9d 	bl	d41f8 <_Z7beamOnev>

      }

      if(i < 4){
   d42be:	6823      	ldr	r3, [r4, #0]
   d42c0:	2b03      	cmp	r3, #3

      }
    }
  }
  if(extraButtonState){
    for(i = 0; i <= 4; i++){
   d42c2:	f103 0301 	add.w	r3, r3, #1

      }

      if(i < 4){

        extraButtonState = false;
   d42c6:	bfd8      	it	le
   d42c8:	702e      	strble	r6, [r5, #0]

      }
    }
  }
  if(extraButtonState){
    for(i = 0; i <= 4; i++){
   d42ca:	6023      	str	r3, [r4, #0]
   d42cc:	e7ea      	b.n	d42a4 <loop+0x84>
   d42ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d42d0:	2003e2ac 	.word	0x2003e2ac
   d42d4:	2003e37c 	.word	0x2003e37c
   d42d8:	2003e314 	.word	0x2003e314
   d42dc:	2003e388 	.word	0x2003e388
   d42e0:	2003e29c 	.word	0x2003e29c
   d42e4:	42000000 	.word	0x42000000
   d42e8:	2003e380 	.word	0x2003e380
   d42ec:	2003e21c 	.word	0x2003e21c
   d42f0:	2003e384 	.word	0x2003e384
   d42f4:	2003e208 	.word	0x2003e208

000d42f8 <_GLOBAL__sub_I_SystemMode>:
void longPressStop1() {

  Serial.println("Button 1 longPress stop");
  analogWrite(D7, 0);

   d42f8:	b538      	push	{r3, r4, r5, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d42fa:	4d12      	ldr	r5, [pc, #72]	; (d4344 <_GLOBAL__sub_I_SystemMode+0x4c>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d42fc:	f000 fc9a 	bl	d4c34 <HAL_Pin_Map>
   d4300:	2400      	movs	r4, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4302:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4306:	2002      	movs	r0, #2
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4308:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d430a:	602c      	str	r4, [r5, #0]
   d430c:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d430e:	71ac      	strb	r4, [r5, #6]
   d4310:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4312:	f000 fdf7 	bl	d4f04 <set_system_mode>
 * Author: Christian Chavez
 * Date: 11-23-2020
 */


SYSTEM_MODE(SEMI_AUTOMATIC);
   d4316:	4a0c      	ldr	r2, [pc, #48]	; (d4348 <_GLOBAL__sub_I_SystemMode+0x50>)
   d4318:	490c      	ldr	r1, [pc, #48]	; (d434c <_GLOBAL__sub_I_SystemMode+0x54>)
   d431a:	4628      	mov	r0, r5
   d431c:	f001 fd82 	bl	d5e24 <__aeabi_atexit>

const int laserPin = A5;
const int buttonPin = D5;
const int extraButtonPin = D6;

OneButton button1(buttonPin, false, false);
   d4320:	4623      	mov	r3, r4
   d4322:	4622      	mov	r2, r4
   d4324:	2105      	movs	r1, #5
   d4326:	480a      	ldr	r0, [pc, #40]	; (d4350 <_GLOBAL__sub_I_SystemMode+0x58>)
   d4328:	f000 f818 	bl	d435c <_ZN9OneButtonC1Eibb>
OneButton button2(extraButtonPin, false, false);
   d432c:	4623      	mov	r3, r4
   d432e:	4622      	mov	r2, r4
   d4330:	2106      	movs	r1, #6
   d4332:	4808      	ldr	r0, [pc, #32]	; (d4354 <_GLOBAL__sub_I_SystemMode+0x5c>)
   d4334:	f000 f812 	bl	d435c <_ZN9OneButtonC1Eibb>
Adafruit_BME280 bme;
   d4338:	4807      	ldr	r0, [pc, #28]	; (d4358 <_GLOBAL__sub_I_SystemMode+0x60>)
void longPressStop1() {

  Serial.println("Button 1 longPress stop");
  analogWrite(D7, 0);

   d433a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
const int buttonPin = D5;
const int extraButtonPin = D6;

OneButton button1(buttonPin, false, false);
OneButton button2(extraButtonPin, false, false);
Adafruit_BME280 bme;
   d433e:	f000 b90f 	b.w	d4560 <_ZN15Adafruit_BME280C1Ev>
   d4342:	bf00      	nop
   d4344:	2003e2a0 	.word	0x2003e2a0
   d4348:	2003e298 	.word	0x2003e298
   d434c:	000d412d 	.word	0x000d412d
   d4350:	2003e2ac 	.word	0x2003e2ac
   d4354:	2003e314 	.word	0x2003e314
   d4358:	2003e388 	.word	0x2003e388

000d435c <_ZN9OneButtonC1Eibb>:
 * Initialize the OneButton library.
 * @param pin The pin to be used for input from a momentary button.
 * @param activeLow Set to true when the input level is LOW when the button is pressed, Default is true.
 * @param pullupActive Activate the internal pullup when available. Default is true.
 */
OneButton::OneButton(int pin, boolean activeLow, bool pullupActive)
   d435c:	b538      	push	{r3, r4, r5, lr}
   d435e:	4604      	mov	r4, r0
   d4360:	4608      	mov	r0, r1
   d4362:	2132      	movs	r1, #50	; 0x32
   d4364:	6061      	str	r1, [r4, #4]
   d4366:	f44f 7116 	mov.w	r1, #600	; 0x258
   d436a:	2500      	movs	r5, #0
   d436c:	60a1      	str	r1, [r4, #8]
   d436e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4372:	60e1      	str	r1, [r4, #12]
   d4374:	7525      	strb	r5, [r4, #20]
   d4376:	61a5      	str	r5, [r4, #24]
   d4378:	61e5      	str	r5, [r4, #28]
   d437a:	6225      	str	r5, [r4, #32]
   d437c:	6265      	str	r5, [r4, #36]	; 0x24
   d437e:	62a5      	str	r5, [r4, #40]	; 0x28
   d4380:	62e5      	str	r5, [r4, #44]	; 0x2c
   d4382:	6325      	str	r5, [r4, #48]	; 0x30
   d4384:	6365      	str	r5, [r4, #52]	; 0x34
   d4386:	63a5      	str	r5, [r4, #56]	; 0x38
   d4388:	63e5      	str	r5, [r4, #60]	; 0x3c
   d438a:	6425      	str	r5, [r4, #64]	; 0x40
   d438c:	6465      	str	r5, [r4, #68]	; 0x44
   d438e:	64a5      	str	r5, [r4, #72]	; 0x48
   d4390:	6525      	str	r5, [r4, #80]	; 0x50
   d4392:	6565      	str	r5, [r4, #84]	; 0x54
   d4394:	65a5      	str	r5, [r4, #88]	; 0x58
   d4396:	65e5      	str	r5, [r4, #92]	; 0x5c
{
  // OneButton();
  _pin = pin;
   d4398:	6020      	str	r0, [r4, #0]

  if (activeLow) {
   d439a:	b10a      	cbz	r2, d43a0 <_ZN9OneButtonC1Eibb+0x44>
    // the button connects the input pin to GND when pressed.
    _buttonPressed = LOW;
   d439c:	6125      	str	r5, [r4, #16]
   d439e:	e001      	b.n	d43a4 <_ZN9OneButtonC1Eibb+0x48>

  } else {
    // the button connects the input pin to VCC when pressed.
    _buttonPressed = HIGH;
   d43a0:	2201      	movs	r2, #1
   d43a2:	6122      	str	r2, [r4, #16]
   d43a4:	b280      	uxth	r0, r0
  } // if

  if (pullupActive) {
   d43a6:	b10b      	cbz	r3, d43ac <_ZN9OneButtonC1Eibb+0x50>
    // use the given pin as input and activate internal PULLUP resistor.
    pinMode(pin, INPUT_PULLUP);
   d43a8:	2102      	movs	r1, #2
   d43aa:	e000      	b.n	d43ae <_ZN9OneButtonC1Eibb+0x52>
  } else {
    // use the given pin as input
    pinMode(pin, INPUT);
   d43ac:	4619      	mov	r1, r3
   d43ae:	f001 fc95 	bl	d5cdc <pinMode>
  } // if
} // OneButton
   d43b2:	4620      	mov	r0, r4
   d43b4:	bd38      	pop	{r3, r4, r5, pc}

000d43b6 <_ZN9OneButton13setClickTicksEi>:

// explicitly set the number of millisec that have to pass by before a click is
// detected.
void OneButton::setClickTicks(int ticks)
{
  _clickTicks = ticks;
   d43b6:	6081      	str	r1, [r0, #8]
   d43b8:	4770      	bx	lr

000d43ba <_ZN9OneButton11attachClickEPFvvE>:


// save function for click event
void OneButton::attachClick(callbackFunction newFunction)
{
  _clickFunc = newFunction;
   d43ba:	6181      	str	r1, [r0, #24]
   d43bc:	4770      	bx	lr

000d43be <_ZN9OneButton20attachLongPressStartEPFvvE>:
} // attachPressStart

// save function for longPressStart event
void OneButton::attachLongPressStart(callbackFunction newFunction)
{
  _longPressStartFunc = newFunction;
   d43be:	6381      	str	r1, [r0, #56]	; 0x38
   d43c0:	4770      	bx	lr

000d43c2 <_ZN9OneButton19attachLongPressStopEPFvvE>:
} // attachLongPressStart

// save function for longPressStop event
void OneButton::attachLongPressStop(callbackFunction newFunction)
{
  _longPressStopFunc = newFunction;
   d43c2:	6441      	str	r1, [r0, #68]	; 0x44
   d43c4:	4770      	bx	lr

000d43c6 <_ZN9OneButton4tickEb>:

/**
 * @brief Advance the finite state machine (FSM) using the given level.
 */
void OneButton::tick(bool activeLevel)
{
   d43c6:	b570      	push	{r4, r5, r6, lr}
   d43c8:	4604      	mov	r4, r0
   d43ca:	460d      	mov	r5, r1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d43cc:	f000 fc2a 	bl	d4c24 <HAL_Timer_Get_Milli_Seconds>
  unsigned long now = millis(); // current (relative) time in msecs.

  // Implementation of the state machine

  if (_state == 0) { // waiting for menu pin being pressed.
   d43d0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   d43d2:	b91b      	cbnz	r3, d43dc <_ZN9OneButton4tickEb+0x16>
    if (activeLevel) {
   d43d4:	2d00      	cmp	r5, #0
   d43d6:	d077      	beq.n	d44c8 <_ZN9OneButton4tickEb+0x102>
      _state = 1; // step to state 1
   d43d8:	2301      	movs	r3, #1
   d43da:	e047      	b.n	d446c <_ZN9OneButton4tickEb+0xa6>
      _startTime = now; // remember starting time
    } // if

  } else if (_state == 1) { // waiting for menu pin being released.
   d43dc:	2b01      	cmp	r3, #1
   d43de:	d12a      	bne.n	d4436 <_ZN9OneButton4tickEb+0x70>
   d43e0:	6e22      	ldr	r2, [r4, #96]	; 0x60

    if ((!activeLevel) &&
   d43e2:	1a82      	subs	r2, r0, r2
   d43e4:	b945      	cbnz	r5, d43f8 <_ZN9OneButton4tickEb+0x32>
   d43e6:	6863      	ldr	r3, [r4, #4]
   d43e8:	429a      	cmp	r2, r3
   d43ea:	d201      	bcs.n	d43f0 <_ZN9OneButton4tickEb+0x2a>
        ((unsigned long)(now - _startTime) < _debounceTicks)) {
      // button was released to quickly so I assume some debouncing.
      // go back to state 0 without calling a function.
      _state = 0;
   d43ec:	2300      	movs	r3, #0
   d43ee:	e01a      	b.n	d4426 <_ZN9OneButton4tickEb+0x60>

    } else if (!activeLevel) {
      _state = 2; // step to state 2
   d43f0:	2302      	movs	r3, #2
   d43f2:	65e3      	str	r3, [r4, #92]	; 0x5c
      _stopTime = now; // remember stopping time
   d43f4:	6660      	str	r0, [r4, #100]	; 0x64
   d43f6:	bd70      	pop	{r4, r5, r6, pc}

    } else if ((activeLevel) &&
   d43f8:	68e1      	ldr	r1, [r4, #12]
   d43fa:	428a      	cmp	r2, r1
   d43fc:	d915      	bls.n	d442a <_ZN9OneButton4tickEb+0x64>
               ((unsigned long)(now - _startTime) > _pressTicks)) {
      _stopTime = now; // remember stopping time
      _isLongPressed = true; // Keep track of long press state
   d43fe:	7523      	strb	r3, [r4, #20]
      if (_pressFunc)
   d4400:	6b23      	ldr	r3, [r4, #48]	; 0x30
      _state = 2; // step to state 2
      _stopTime = now; // remember stopping time

    } else if ((activeLevel) &&
               ((unsigned long)(now - _startTime) > _pressTicks)) {
      _stopTime = now; // remember stopping time
   d4402:	6660      	str	r0, [r4, #100]	; 0x64
      _isLongPressed = true; // Keep track of long press state
      if (_pressFunc)
   d4404:	b103      	cbz	r3, d4408 <_ZN9OneButton4tickEb+0x42>
        _pressFunc();
   d4406:	4798      	blx	r3
      if (_longPressStartFunc)
   d4408:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d440a:	b103      	cbz	r3, d440e <_ZN9OneButton4tickEb+0x48>
        _longPressStartFunc();
   d440c:	4798      	blx	r3
      if (_paramLongPressStartFunc)
   d440e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d4410:	b10b      	cbz	r3, d4416 <_ZN9OneButton4tickEb+0x50>
        _paramLongPressStartFunc(_longPressStartFuncParam);
   d4412:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d4414:	4798      	blx	r3
      if (_duringLongPressFunc)
   d4416:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d4418:	b103      	cbz	r3, d441c <_ZN9OneButton4tickEb+0x56>
        _duringLongPressFunc();
   d441a:	4798      	blx	r3
      if (_paramDuringLongPressFunc)
   d441c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d441e:	b10b      	cbz	r3, d4424 <_ZN9OneButton4tickEb+0x5e>
        _paramDuringLongPressFunc(_duringLongPressFuncParam);
   d4420:	6da0      	ldr	r0, [r4, #88]	; 0x58
   d4422:	4798      	blx	r3
      _state = 6; // step to state 6
   d4424:	2306      	movs	r3, #6
   d4426:	65e3      	str	r3, [r4, #92]	; 0x5c
   d4428:	bd70      	pop	{r4, r5, r6, pc}
    } else {
      // Button was pressed down. wait. Stay in this state.
      // if a pressStart event is registered, call it:
      if (_pressStartFunc)
   d442a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d442c:	2b00      	cmp	r3, #0
   d442e:	d04b      	beq.n	d44c8 <_ZN9OneButton4tickEb+0x102>
      if (_paramDuringLongPressFunc)
        _paramDuringLongPressFunc(_duringLongPressFuncParam);
    } // if

  } // if
} // OneButton.tick()
   d4430:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      _state = 6; // step to state 6
    } else {
      // Button was pressed down. wait. Stay in this state.
      // if a pressStart event is registered, call it:
      if (_pressStartFunc)
        _pressStartFunc();
   d4434:	4718      	bx	r3
    } // if

  } else if (_state == 2) {
   d4436:	2b02      	cmp	r3, #2
   d4438:	d11b      	bne.n	d4472 <_ZN9OneButton4tickEb+0xac>
    // waiting for menu pin being pressed the second time or timeout.
    if ((_doubleClickFunc == NULL && _paramDoubleClickFunc == NULL) ||
   d443a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d443c:	b90b      	cbnz	r3, d4442 <_ZN9OneButton4tickEb+0x7c>
   d443e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d4440:	b123      	cbz	r3, d444c <_ZN9OneButton4tickEb+0x86>
   d4442:	6e23      	ldr	r3, [r4, #96]	; 0x60
   d4444:	68a2      	ldr	r2, [r4, #8]
   d4446:	1ac3      	subs	r3, r0, r3
   d4448:	4293      	cmp	r3, r2
   d444a:	d907      	bls.n	d445c <_ZN9OneButton4tickEb+0x96>
        (unsigned long)(now - _startTime) > _clickTicks) {
      // this was only a single short click
      if (_clickFunc)
   d444c:	69a3      	ldr	r3, [r4, #24]
   d444e:	b103      	cbz	r3, d4452 <_ZN9OneButton4tickEb+0x8c>
        _clickFunc();
   d4450:	4798      	blx	r3
      if (_paramClickFunc)
   d4452:	69e3      	ldr	r3, [r4, #28]
   d4454:	2b00      	cmp	r3, #0
   d4456:	d0c9      	beq.n	d43ec <_ZN9OneButton4tickEb+0x26>
        _paramClickFunc(_clickFuncParam);
   d4458:	6a20      	ldr	r0, [r4, #32]
   d445a:	e01a      	b.n	d4492 <_ZN9OneButton4tickEb+0xcc>
      _state = 0; // restart.

    } else if ((activeLevel) &&
   d445c:	2d00      	cmp	r5, #0
   d445e:	d033      	beq.n	d44c8 <_ZN9OneButton4tickEb+0x102>
   d4460:	6e63      	ldr	r3, [r4, #100]	; 0x64
   d4462:	6862      	ldr	r2, [r4, #4]
   d4464:	1ac3      	subs	r3, r0, r3
   d4466:	4293      	cmp	r3, r2
   d4468:	d92e      	bls.n	d44c8 <_ZN9OneButton4tickEb+0x102>
               ((unsigned long)(now - _stopTime) > _debounceTicks)) {
      _state = 3; // step to state 3
   d446a:	2303      	movs	r3, #3
   d446c:	65e3      	str	r3, [r4, #92]	; 0x5c
      _startTime = now; // remember starting time
   d446e:	6620      	str	r0, [r4, #96]	; 0x60
   d4470:	bd70      	pop	{r4, r5, r6, pc}
    } // if

  } else if (_state == 3) { // waiting for menu pin being released finally.
   d4472:	2b03      	cmp	r3, #3
   d4474:	d10f      	bne.n	d4496 <_ZN9OneButton4tickEb+0xd0>
    // Stay here for at least _debounceTicks because else we might end up in
    // state 1 if the button bounces for too long.
    if ((!activeLevel) &&
   d4476:	bb3d      	cbnz	r5, d44c8 <_ZN9OneButton4tickEb+0x102>
   d4478:	6e23      	ldr	r3, [r4, #96]	; 0x60
   d447a:	6862      	ldr	r2, [r4, #4]
   d447c:	1ac3      	subs	r3, r0, r3
   d447e:	4293      	cmp	r3, r2
   d4480:	d922      	bls.n	d44c8 <_ZN9OneButton4tickEb+0x102>
        ((unsigned long)(now - _startTime) > _debounceTicks)) {
      _stopTime = now; // remember stopping time
      // this was a 2 click sequence.
      if (_doubleClickFunc)
   d4482:	6a63      	ldr	r3, [r4, #36]	; 0x24
  } else if (_state == 3) { // waiting for menu pin being released finally.
    // Stay here for at least _debounceTicks because else we might end up in
    // state 1 if the button bounces for too long.
    if ((!activeLevel) &&
        ((unsigned long)(now - _startTime) > _debounceTicks)) {
      _stopTime = now; // remember stopping time
   d4484:	6660      	str	r0, [r4, #100]	; 0x64
      // this was a 2 click sequence.
      if (_doubleClickFunc)
   d4486:	b103      	cbz	r3, d448a <_ZN9OneButton4tickEb+0xc4>
        _doubleClickFunc();
   d4488:	4798      	blx	r3
      if (_paramDoubleClickFunc)
   d448a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d448c:	2b00      	cmp	r3, #0
   d448e:	d0ad      	beq.n	d43ec <_ZN9OneButton4tickEb+0x26>
        _paramDoubleClickFunc(_doubleClickFuncParam);
   d4490:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   d4492:	4798      	blx	r3
   d4494:	e7aa      	b.n	d43ec <_ZN9OneButton4tickEb+0x26>
      _state = 0; // restart.
    } // if

  } else if (_state == 6) {
   d4496:	2b06      	cmp	r3, #6
   d4498:	d116      	bne.n	d44c8 <_ZN9OneButton4tickEb+0x102>
    // waiting for menu pin being release after long press.
    if (!activeLevel) {
   d449a:	b94d      	cbnz	r5, d44b0 <_ZN9OneButton4tickEb+0xea>
      _isLongPressed = false; // Keep track of long press state
      _stopTime = now; // remember stopping time
      if (_longPressStopFunc)
   d449c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    } // if

  } else if (_state == 6) {
    // waiting for menu pin being release after long press.
    if (!activeLevel) {
      _isLongPressed = false; // Keep track of long press state
   d449e:	7525      	strb	r5, [r4, #20]
      _stopTime = now; // remember stopping time
   d44a0:	6660      	str	r0, [r4, #100]	; 0x64
      if (_longPressStopFunc)
   d44a2:	b103      	cbz	r3, d44a6 <_ZN9OneButton4tickEb+0xe0>
        _longPressStopFunc();
   d44a4:	4798      	blx	r3
      if (_paramLongPressStopFunc)
   d44a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   d44a8:	2b00      	cmp	r3, #0
   d44aa:	d09f      	beq.n	d43ec <_ZN9OneButton4tickEb+0x26>
        _paramLongPressStopFunc(_longPressStopFuncParam);
   d44ac:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d44ae:	e7f0      	b.n	d4492 <_ZN9OneButton4tickEb+0xcc>
      _state = 0; // restart.
    } else {
      // button is being long pressed
      _stopTime = now; // remember stopping time
      _isLongPressed = true; // Keep track of long press state
   d44b0:	2301      	movs	r3, #1
   d44b2:	7523      	strb	r3, [r4, #20]
      if (_duringLongPressFunc)
   d44b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
      if (_paramLongPressStopFunc)
        _paramLongPressStopFunc(_longPressStopFuncParam);
      _state = 0; // restart.
    } else {
      // button is being long pressed
      _stopTime = now; // remember stopping time
   d44b6:	6660      	str	r0, [r4, #100]	; 0x64
      _isLongPressed = true; // Keep track of long press state
      if (_duringLongPressFunc)
   d44b8:	b103      	cbz	r3, d44bc <_ZN9OneButton4tickEb+0xf6>
        _duringLongPressFunc();
   d44ba:	4798      	blx	r3
      if (_paramDuringLongPressFunc)
   d44bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d44be:	b11b      	cbz	r3, d44c8 <_ZN9OneButton4tickEb+0x102>
        _paramDuringLongPressFunc(_duringLongPressFuncParam);
   d44c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    } // if

  } // if
} // OneButton.tick()
   d44c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      _stopTime = now; // remember stopping time
      _isLongPressed = true; // Keep track of long press state
      if (_duringLongPressFunc)
        _duringLongPressFunc();
      if (_paramDuringLongPressFunc)
        _paramDuringLongPressFunc(_duringLongPressFuncParam);
   d44c6:	4718      	bx	r3
   d44c8:	bd70      	pop	{r4, r5, r6, pc}

000d44ca <_ZN9OneButton4tickEv>:
/**
 * @brief Check input of the configured pin and then advance the finite state
 * machine (FSM).
 */
void OneButton::tick(void)
{
   d44ca:	b510      	push	{r4, lr}
   d44cc:	4604      	mov	r4, r0
  if (_pin >= 0) {
   d44ce:	6800      	ldr	r0, [r0, #0]
   d44d0:	2800      	cmp	r0, #0
   d44d2:	db0b      	blt.n	d44ec <_ZN9OneButton4tickEv+0x22>
    tick(digitalRead(_pin) == _buttonPressed);
   d44d4:	b280      	uxth	r0, r0
   d44d6:	f001 fc2b 	bl	d5d30 <digitalRead>
   d44da:	6921      	ldr	r1, [r4, #16]
   d44dc:	1a0b      	subs	r3, r1, r0
   d44de:	4259      	negs	r1, r3
   d44e0:	4620      	mov	r0, r4
   d44e2:	4159      	adcs	r1, r3
  }
}
   d44e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * machine (FSM).
 */
void OneButton::tick(void)
{
  if (_pin >= 0) {
    tick(digitalRead(_pin) == _buttonPressed);
   d44e8:	f7ff bf6d 	b.w	d43c6 <_ZN9OneButton4tickEb>
   d44ec:	bd10      	pop	{r4, pc}

000d44ee <_GLOBAL__sub_I__ZN9OneButtonC2Ev>:
   d44ee:	f000 bba1 	b.w	d4c34 <HAL_Pin_Map>
	...

000d44f4 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   d44f4:	b508      	push	{r3, lr}
   d44f6:	f000 fb9d 	bl	d4c34 <HAL_Pin_Map>
  #define pinHI(_pin) (PIN_MAP2[_pin].gpio_peripheral->BSRRL = PIN_MAP2[_pin].gpio_pin)
#elif (PLATFORM_ID == 12) || (PLATFORM_ID == 13) || (PLATFORM_ID == 14) // Argon (12), Boron (13), Xenon (14)
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "pinmap_impl.h"
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d44fa:	f000 fb9b 	bl	d4c34 <HAL_Pin_Map>
   d44fe:	4b01      	ldr	r3, [pc, #4]	; (d4504 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
   d4500:	6018      	str	r0, [r3, #0]
   d4502:	bd08      	pop	{r3, pc}
   d4504:	2003e3cc 	.word	0x2003e3cc

000d4508 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4508:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d450a:	4602      	mov	r2, r0
   d450c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d450e:	7913      	ldrb	r3, [r2, #4]
   d4510:	6895      	ldr	r5, [r2, #8]
   d4512:	b133      	cbz	r3, d4522 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d4514:	b93d      	cbnz	r5, d4526 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d4516:	490c      	ldr	r1, [pc, #48]	; (d4548 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d4518:	b004      	add	sp, #16
   d451a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d451e:	f001 b873 	b.w	d5608 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d4522:	4b0a      	ldr	r3, [pc, #40]	; (d454c <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4524:	e000      	b.n	d4528 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d4526:	4b0a      	ldr	r3, [pc, #40]	; (d4550 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d4528:	7b16      	ldrb	r6, [r2, #12]
   d452a:	4c0a      	ldr	r4, [pc, #40]	; (d4554 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d452c:	490a      	ldr	r1, [pc, #40]	; (d4558 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
   d452e:	7b52      	ldrb	r2, [r2, #13]
   d4530:	9202      	str	r2, [sp, #8]
   d4532:	2e01      	cmp	r6, #1
   d4534:	bf08      	it	eq
   d4536:	4621      	moveq	r1, r4
   d4538:	9101      	str	r1, [sp, #4]
   d453a:	9500      	str	r5, [sp, #0]
   d453c:	4a07      	ldr	r2, [pc, #28]	; (d455c <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d453e:	2100      	movs	r1, #0
   d4540:	f001 f89f 	bl	d5682 <_ZN5Print11printf_implEbPKcz>
  }
   d4544:	b004      	add	sp, #16
   d4546:	bd70      	pop	{r4, r5, r6, pc}
   d4548:	000d6581 	.word	0x000d6581
   d454c:	000d66cf 	.word	0x000d66cf
   d4550:	000d6570 	.word	0x000d6570
   d4554:	000d6579 	.word	0x000d6579
   d4558:	000d657d 	.word	0x000d657d
   d455c:	000d6597 	.word	0x000d6597

000d4560 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d4560:	22ff      	movs	r2, #255	; 0xff
   d4562:	7402      	strb	r2, [r0, #16]
   d4564:	7442      	strb	r2, [r0, #17]
   d4566:	7482      	strb	r2, [r0, #18]
   d4568:	74c2      	strb	r2, [r0, #19]
{ }
   d456a:	4770      	bx	lr

000d456c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d456c:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d456e:	4d09      	ldr	r5, [pc, #36]	; (d4594 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d4570:	6829      	ldr	r1, [r5, #0]
   d4572:	f011 0401 	ands.w	r4, r1, #1
   d4576:	d10a      	bne.n	d458e <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4578:	4628      	mov	r0, r5
   d457a:	f7ff fd90 	bl	d409e <__cxa_guard_acquire>
   d457e:	b130      	cbz	r0, d458e <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4580:	4621      	mov	r1, r4
   d4582:	4805      	ldr	r0, [pc, #20]	; (d4598 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4584:	f001 f8d2 	bl	d572c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4588:	4628      	mov	r0, r5
   d458a:	f7ff fd8d 	bl	d40a8 <__cxa_guard_release>
        return instance;
    }
   d458e:	4802      	ldr	r0, [pc, #8]	; (d4598 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4590:	bd38      	pop	{r3, r4, r5, pc}
   d4592:	bf00      	nop
   d4594:	2003e3d0 	.word	0x2003e3d0
   d4598:	2003e3d4 	.word	0x2003e3d4

000d459c <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d459c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d45a0:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d45a4:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d45a6:	4605      	mov	r5, r0
   d45a8:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
   d45aa:	d106      	bne.n	d45ba <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d45ac:	f7ff ffde 	bl	d456c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d45b0:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d45b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d45b6:	f001 b95d 	b.w	d5874 <_ZN8SPIClass8transferEh>
   d45ba:	2607      	movs	r6, #7
   d45bc:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
   d45be:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
   d45c2:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d45c6:	2100      	movs	r1, #0
   d45c8:	b280      	uxth	r0, r0
   d45ca:	f001 fb98 	bl	d5cfe <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d45ce:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d45d2:	fa08 f106 	lsl.w	r1, r8, r6
   d45d6:	4039      	ands	r1, r7
   d45d8:	b280      	uxth	r0, r0
   d45da:	f001 fb90 	bl	d5cfe <digitalWrite>
        digitalWrite(_sck, HIGH);
   d45de:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d45e2:	2101      	movs	r1, #1
   d45e4:	b280      	uxth	r0, r0
   d45e6:	f001 fb8a 	bl	d5cfe <digitalWrite>
        if (digitalRead(_miso))
   d45ea:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d45ee:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d45f0:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d45f2:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d45f4:	f001 fb9c 	bl	d5d30 <digitalRead>
   d45f8:	b108      	cbz	r0, d45fe <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d45fa:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
   d45fe:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
   d4602:	d2de      	bcs.n	d45c2 <_ZN15Adafruit_BME2807spixferEh+0x26>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4604:	4620      	mov	r0, r4
   d4606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d460a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   d460a:	b508      	push	{r3, lr}
        instance().endTransaction();
   d460c:	f7ff ffae 	bl	d456c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
    }
   d4610:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
        instance().endTransaction();
   d4614:	f001 b8a5 	b.w	d5762 <_ZN8SPIClass14endTransactionEv>

000d4618 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>:
        instance().usingInterrupt(arg);
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
   d4618:	b510      	push	{r4, lr}
   d461a:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d461c:	f7ff ffa6 	bl	d456c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4620:	4621      	mov	r1, r4
    }
   d4622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
   d4626:	f001 b8b5 	b.w	d5794 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
	...

000d462c <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d462c:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
   d462e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4632:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4634:	b085      	sub	sp, #20
   d4636:	4604      	mov	r4, r0
   d4638:	460d      	mov	r5, r1
    uint32_t value;

    if (_cs == -1) {
   d463a:	d121      	bne.n	d4680 <_ZN15Adafruit_BME2806read24Eh+0x54>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d463c:	7901      	ldrb	r1, [r0, #4]
   d463e:	6800      	ldr	r0, [r0, #0]
   d4640:	f000 fdd1 	bl	d51e6 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4644:	6820      	ldr	r0, [r4, #0]
   d4646:	6803      	ldr	r3, [r0, #0]
   d4648:	4629      	mov	r1, r5
   d464a:	689b      	ldr	r3, [r3, #8]
   d464c:	4798      	blx	r3
        _wire -> endTransmission();
   d464e:	6820      	ldr	r0, [r4, #0]
   d4650:	f000 fdd1 	bl	d51f6 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d4654:	2203      	movs	r2, #3
   d4656:	7921      	ldrb	r1, [r4, #4]
   d4658:	6820      	ldr	r0, [r4, #0]
   d465a:	f000 fdc1 	bl	d51e0 <_ZN7TwoWire11requestFromEhj>

        value = _wire -> read();
   d465e:	6820      	ldr	r0, [r4, #0]
   d4660:	6803      	ldr	r3, [r0, #0]
   d4662:	695b      	ldr	r3, [r3, #20]
   d4664:	4798      	blx	r3
        value <<= 8;
   d4666:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4668:	6820      	ldr	r0, [r4, #0]
   d466a:	6803      	ldr	r3, [r0, #0]
   d466c:	695b      	ldr	r3, [r3, #20]
   d466e:	4798      	blx	r3
   d4670:	4328      	orrs	r0, r5
        value <<= 8;
   d4672:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4674:	6820      	ldr	r0, [r4, #0]
   d4676:	6803      	ldr	r3, [r0, #0]
   d4678:	695b      	ldr	r3, [r3, #20]
   d467a:	4798      	blx	r3
   d467c:	4305      	orrs	r5, r0
   d467e:	e039      	b.n	d46f4 <_ZN15Adafruit_BME2806read24Eh+0xc8>
    } else {
        if (_sck == -1)
   d4680:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4684:	3301      	adds	r3, #1
   d4686:	d10e      	bne.n	d46a6 <_ZN15Adafruit_BME2806read24Eh+0x7a>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d4688:	4b1c      	ldr	r3, [pc, #112]	; (d46fc <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d468a:	4a1d      	ldr	r2, [pc, #116]	; (d4700 <_ZN15Adafruit_BME2806read24Eh+0xd4>)
   d468c:	9300      	str	r3, [sp, #0]
   d468e:	9202      	str	r2, [sp, #8]
   d4690:	2300      	movs	r3, #0
   d4692:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4694:	4668      	mov	r0, sp
   d4696:	f88d 3004 	strb.w	r3, [sp, #4]
   d469a:	f88d 200c 	strb.w	r2, [sp, #12]
   d469e:	f88d 300d 	strb.w	r3, [sp, #13]
   d46a2:	f7ff ffb9 	bl	d4618 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d46a6:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d46aa:	2100      	movs	r1, #0
   d46ac:	b280      	uxth	r0, r0
   d46ae:	f001 fb26 	bl	d5cfe <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d46b2:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d46b6:	4620      	mov	r0, r4
   d46b8:	f7ff ff70 	bl	d459c <_ZN15Adafruit_BME2807spixferEh>

        value = spixfer(0);
   d46bc:	2100      	movs	r1, #0
   d46be:	4620      	mov	r0, r4
   d46c0:	f7ff ff6c 	bl	d459c <_ZN15Adafruit_BME2807spixferEh>
        value <<= 8;
        value |= spixfer(0);
   d46c4:	2100      	movs	r1, #0
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
        digitalWrite(_cs, LOW);
        spixfer(reg | 0x80); // read, bit 7 high

        value = spixfer(0);
        value <<= 8;
   d46c6:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d46c8:	4620      	mov	r0, r4
   d46ca:	f7ff ff67 	bl	d459c <_ZN15Adafruit_BME2807spixferEh>
   d46ce:	4328      	orrs	r0, r5
        value <<= 8;
   d46d0:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d46d2:	2100      	movs	r1, #0
   d46d4:	4620      	mov	r0, r4
   d46d6:	f7ff ff61 	bl	d459c <_ZN15Adafruit_BME2807spixferEh>
   d46da:	4305      	orrs	r5, r0

        digitalWrite(_cs, HIGH);
   d46dc:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d46e0:	2101      	movs	r1, #1
   d46e2:	b280      	uxth	r0, r0
   d46e4:	f001 fb0b 	bl	d5cfe <digitalWrite>
        if (_sck == -1)
   d46e8:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d46ec:	3301      	adds	r3, #1
   d46ee:	d101      	bne.n	d46f4 <_ZN15Adafruit_BME2806read24Eh+0xc8>
            SPI.endTransaction(); // release the SPI bus
   d46f0:	f7ff ff8b 	bl	d460a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d46f4:	4628      	mov	r0, r5
   d46f6:	b005      	add	sp, #20
   d46f8:	bd30      	pop	{r4, r5, pc}
   d46fa:	bf00      	nop
   d46fc:	000d656c 	.word	0x000d656c
   d4700:	0007a120 	.word	0x0007a120

000d4704 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d4704:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d4706:	21fa      	movs	r1, #250	; 0xfa
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d4708:	4604      	mov	r4, r0
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d470a:	f7ff ff8f 	bl	d462c <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d470e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d4712:	d01e      	beq.n	d4752 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d4714:	8aa2      	ldrh	r2, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d4716:	ed9f 7a10 	vldr	s14, [pc, #64]	; d4758 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
             
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d471a:	ebc2 2320 	rsb	r3, r2, r0, asr #8
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;
   d471e:	0052      	lsls	r2, r2, #1
   d4720:	ebc2 10e0 	rsb	r0, r2, r0, asr #7
   d4724:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
   d4728:	435b      	muls	r3, r3
   d472a:	4350      	muls	r0, r2
   d472c:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
   d4730:	131b      	asrs	r3, r3, #12
   d4732:	4353      	muls	r3, r2
   d4734:	139b      	asrs	r3, r3, #14
   d4736:	eb03 20e0 	add.w	r0, r3, r0, asr #11
   d473a:	60e0      	str	r0, [r4, #12]

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d473c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d4740:	3080      	adds	r0, #128	; 0x80
   d4742:	1200      	asrs	r0, r0, #8
   d4744:	ee07 0a90 	vmov	s15, r0
   d4748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d474c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d4750:	bd10      	pop	{r4, pc}
{
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    if (adc_T == 0x800000) // value in case temp measurement was disabled
        return NAN;
   d4752:	ed9f 0a02 	vldr	s0, [pc, #8]	; d475c <_ZN15Adafruit_BME28015readTemperatureEv+0x58>

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
}
   d4756:	bd10      	pop	{r4, pc}
   d4758:	42c80000 	.word	0x42c80000
   d475c:	7fc00000 	.word	0x7fc00000

000d4760 <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4760:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d4762:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4766:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4768:	b085      	sub	sp, #20
   d476a:	4604      	mov	r4, r0
   d476c:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
   d476e:	d11d      	bne.n	d47ac <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4770:	7901      	ldrb	r1, [r0, #4]
   d4772:	6800      	ldr	r0, [r0, #0]
   d4774:	f000 fd37 	bl	d51e6 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4778:	6820      	ldr	r0, [r4, #0]
   d477a:	6803      	ldr	r3, [r0, #0]
   d477c:	4629      	mov	r1, r5
   d477e:	689b      	ldr	r3, [r3, #8]
   d4780:	4798      	blx	r3
        _wire -> endTransmission();
   d4782:	6820      	ldr	r0, [r4, #0]
   d4784:	f000 fd37 	bl	d51f6 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d4788:	2202      	movs	r2, #2
   d478a:	7921      	ldrb	r1, [r4, #4]
   d478c:	6820      	ldr	r0, [r4, #0]
   d478e:	f000 fd27 	bl	d51e0 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d4792:	6820      	ldr	r0, [r4, #0]
   d4794:	6803      	ldr	r3, [r0, #0]
   d4796:	695b      	ldr	r3, [r3, #20]
   d4798:	4798      	blx	r3
   d479a:	4605      	mov	r5, r0
   d479c:	6820      	ldr	r0, [r4, #0]
   d479e:	6803      	ldr	r3, [r0, #0]
   d47a0:	695b      	ldr	r3, [r3, #20]
   d47a2:	4798      	blx	r3
   d47a4:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d47a8:	b285      	uxth	r5, r0
   d47aa:	e035      	b.n	d4818 <_ZN15Adafruit_BME2806read16Eh+0xb8>
    } else {
        if (_sck == -1)
   d47ac:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d47b0:	3301      	adds	r3, #1
   d47b2:	d10e      	bne.n	d47d2 <_ZN15Adafruit_BME2806read16Eh+0x72>
   d47b4:	4b1a      	ldr	r3, [pc, #104]	; (d4820 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d47b6:	4a1b      	ldr	r2, [pc, #108]	; (d4824 <_ZN15Adafruit_BME2806read16Eh+0xc4>)
   d47b8:	9300      	str	r3, [sp, #0]
   d47ba:	9202      	str	r2, [sp, #8]
   d47bc:	2300      	movs	r3, #0
   d47be:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d47c0:	4668      	mov	r0, sp
   d47c2:	f88d 3004 	strb.w	r3, [sp, #4]
   d47c6:	f88d 200c 	strb.w	r2, [sp, #12]
   d47ca:	f88d 300d 	strb.w	r3, [sp, #13]
   d47ce:	f7ff ff23 	bl	d4618 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d47d2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d47d6:	2100      	movs	r1, #0
   d47d8:	b280      	uxth	r0, r0
   d47da:	f001 fa90 	bl	d5cfe <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d47de:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d47e2:	4620      	mov	r0, r4
   d47e4:	f7ff feda 	bl	d459c <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d47e8:	2100      	movs	r1, #0
   d47ea:	4620      	mov	r0, r4
   d47ec:	f7ff fed6 	bl	d459c <_ZN15Adafruit_BME2807spixferEh>
   d47f0:	2100      	movs	r1, #0
   d47f2:	4605      	mov	r5, r0
   d47f4:	4620      	mov	r0, r4
   d47f6:	f7ff fed1 	bl	d459c <_ZN15Adafruit_BME2807spixferEh>
   d47fa:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d47fe:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d4800:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4804:	2101      	movs	r1, #1
   d4806:	b280      	uxth	r0, r0
   d4808:	f001 fa79 	bl	d5cfe <digitalWrite>
        if (_sck == -1)
   d480c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4810:	3301      	adds	r3, #1
   d4812:	d101      	bne.n	d4818 <_ZN15Adafruit_BME2806read16Eh+0xb8>
            SPI.endTransaction(); // release the SPI bus
   d4814:	f7ff fef9 	bl	d460a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d4818:	4628      	mov	r0, r5
   d481a:	b005      	add	sp, #20
   d481c:	bd30      	pop	{r4, r5, pc}
   d481e:	bf00      	nop
   d4820:	000d656c 	.word	0x000d656c
   d4824:	0007a120 	.word	0x0007a120

000d4828 <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d4828:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d482a:	f7ff ff99 	bl	d4760 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d482e:	ba40      	rev16	r0, r0
}
   d4830:	b280      	uxth	r0, r0
   d4832:	bd08      	pop	{r3, pc}

000d4834 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4834:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   d4836:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d483a:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d483c:	b085      	sub	sp, #20
   d483e:	4604      	mov	r4, r0
   d4840:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
   d4842:	d116      	bne.n	d4872 <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4844:	7901      	ldrb	r1, [r0, #4]
   d4846:	6800      	ldr	r0, [r0, #0]
   d4848:	f000 fccd 	bl	d51e6 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d484c:	6820      	ldr	r0, [r4, #0]
   d484e:	6803      	ldr	r3, [r0, #0]
   d4850:	4629      	mov	r1, r5
   d4852:	689b      	ldr	r3, [r3, #8]
   d4854:	4798      	blx	r3
        _wire -> endTransmission();
   d4856:	6820      	ldr	r0, [r4, #0]
   d4858:	f000 fccd 	bl	d51f6 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d485c:	2201      	movs	r2, #1
   d485e:	7921      	ldrb	r1, [r4, #4]
   d4860:	6820      	ldr	r0, [r4, #0]
   d4862:	f000 fcbd 	bl	d51e0 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d4866:	6820      	ldr	r0, [r4, #0]
   d4868:	6803      	ldr	r3, [r0, #0]
   d486a:	695b      	ldr	r3, [r3, #20]
   d486c:	4798      	blx	r3
   d486e:	b2c5      	uxtb	r5, r0
   d4870:	e02e      	b.n	d48d0 <_ZN15Adafruit_BME2805read8Eh+0x9c>
    } else {
        if (_sck == -1)
   d4872:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4876:	3301      	adds	r3, #1
   d4878:	d10e      	bne.n	d4898 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d487a:	4b17      	ldr	r3, [pc, #92]	; (d48d8 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d487c:	4a17      	ldr	r2, [pc, #92]	; (d48dc <_ZN15Adafruit_BME2805read8Eh+0xa8>)
   d487e:	9300      	str	r3, [sp, #0]
   d4880:	9202      	str	r2, [sp, #8]
   d4882:	2300      	movs	r3, #0
   d4884:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4886:	4668      	mov	r0, sp
   d4888:	f88d 3004 	strb.w	r3, [sp, #4]
   d488c:	f88d 200c 	strb.w	r2, [sp, #12]
   d4890:	f88d 300d 	strb.w	r3, [sp, #13]
   d4894:	f7ff fec0 	bl	d4618 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4898:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d489c:	2100      	movs	r1, #0
   d489e:	b280      	uxth	r0, r0
   d48a0:	f001 fa2d 	bl	d5cfe <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d48a4:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d48a8:	4620      	mov	r0, r4
   d48aa:	f7ff fe77 	bl	d459c <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d48ae:	2100      	movs	r1, #0
   d48b0:	4620      	mov	r0, r4
   d48b2:	f7ff fe73 	bl	d459c <_ZN15Adafruit_BME2807spixferEh>
   d48b6:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d48b8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d48bc:	2101      	movs	r1, #1
   d48be:	b280      	uxth	r0, r0
   d48c0:	f001 fa1d 	bl	d5cfe <digitalWrite>
        if (_sck == -1)
   d48c4:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d48c8:	3301      	adds	r3, #1
   d48ca:	d101      	bne.n	d48d0 <_ZN15Adafruit_BME2805read8Eh+0x9c>
            SPI.endTransaction(); // release the SPI bus
   d48cc:	f7ff fe9d 	bl	d460a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
    return value;
}
   d48d0:	4628      	mov	r0, r5
   d48d2:	b005      	add	sp, #20
   d48d4:	bd30      	pop	{r4, r5, pc}
   d48d6:	bf00      	nop
   d48d8:	000d656c 	.word	0x000d656c
   d48dc:	0007a120 	.word	0x0007a120

000d48e0 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d48e0:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d48e2:	21f3      	movs	r1, #243	; 0xf3
   d48e4:	f7ff ffa6 	bl	d4834 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d48e8:	f000 0001 	and.w	r0, r0, #1
   d48ec:	bd08      	pop	{r3, pc}

000d48ee <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d48ee:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d48f0:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d48f2:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d48f4:	f7ff ff98 	bl	d4828 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d48f8:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d48fa:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d48fc:	4620      	mov	r0, r4
   d48fe:	f7ff ff93 	bl	d4828 <_ZN15Adafruit_BME2809read16_LEEh>
   d4902:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d4904:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4906:	4620      	mov	r0, r4
   d4908:	f7ff ff8e 	bl	d4828 <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d490c:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d490e:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4910:	4620      	mov	r0, r4
   d4912:	f7ff ff89 	bl	d4828 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4916:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4918:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d491a:	4620      	mov	r0, r4
   d491c:	f7ff ff84 	bl	d4828 <_ZN15Adafruit_BME2809read16_LEEh>
   d4920:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d4922:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4924:	4620      	mov	r0, r4
   d4926:	f7ff ff7f 	bl	d4828 <_ZN15Adafruit_BME2809read16_LEEh>
   d492a:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d492c:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d492e:	4620      	mov	r0, r4
   d4930:	f7ff ff7a 	bl	d4828 <_ZN15Adafruit_BME2809read16_LEEh>
   d4934:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d4936:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4938:	4620      	mov	r0, r4
   d493a:	f7ff ff75 	bl	d4828 <_ZN15Adafruit_BME2809read16_LEEh>
   d493e:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d4940:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4942:	4620      	mov	r0, r4
   d4944:	f7ff ff70 	bl	d4828 <_ZN15Adafruit_BME2809read16_LEEh>
   d4948:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d494a:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d494c:	4620      	mov	r0, r4
   d494e:	f7ff ff6b 	bl	d4828 <_ZN15Adafruit_BME2809read16_LEEh>
   d4952:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d4954:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4956:	4620      	mov	r0, r4
   d4958:	f7ff ff66 	bl	d4828 <_ZN15Adafruit_BME2809read16_LEEh>
   d495c:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d495e:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4960:	4620      	mov	r0, r4
   d4962:	f7ff ff61 	bl	d4828 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4966:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d4968:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d496a:	4620      	mov	r0, r4
   d496c:	f7ff ff62 	bl	d4834 <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4970:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4972:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4976:	4620      	mov	r0, r4
   d4978:	f7ff ff56 	bl	d4828 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d497c:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d497e:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4980:	4620      	mov	r0, r4
   d4982:	f7ff ff57 	bl	d4834 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d4986:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4988:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d498c:	4620      	mov	r0, r4
   d498e:	f7ff ff51 	bl	d4834 <_ZN15Adafruit_BME2805read8Eh>
   d4992:	21e5      	movs	r1, #229	; 0xe5
   d4994:	4605      	mov	r5, r0
   d4996:	4620      	mov	r0, r4
   d4998:	f7ff ff4c 	bl	d4834 <_ZN15Adafruit_BME2805read8Eh>
   d499c:	f000 000f 	and.w	r0, r0, #15
   d49a0:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d49a4:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d49a6:	21e6      	movs	r1, #230	; 0xe6
   d49a8:	4620      	mov	r0, r4
   d49aa:	f7ff ff43 	bl	d4834 <_ZN15Adafruit_BME2805read8Eh>
   d49ae:	21e5      	movs	r1, #229	; 0xe5
   d49b0:	4605      	mov	r5, r0
   d49b2:	4620      	mov	r0, r4
   d49b4:	f7ff ff3e 	bl	d4834 <_ZN15Adafruit_BME2805read8Eh>
   d49b8:	1100      	asrs	r0, r0, #4
   d49ba:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d49be:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d49c0:	21e7      	movs	r1, #231	; 0xe7
   d49c2:	4620      	mov	r0, r4
   d49c4:	f7ff ff36 	bl	d4834 <_ZN15Adafruit_BME2805read8Eh>
   d49c8:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   d49cc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d49d0 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d49d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d49d2:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d49d6:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d49d8:	4604      	mov	r4, r0
   d49da:	460e      	mov	r6, r1
   d49dc:	4615      	mov	r5, r2
    if (_cs == -1) {
   d49de:	d111      	bne.n	d4a04 <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d49e0:	7901      	ldrb	r1, [r0, #4]
   d49e2:	6800      	ldr	r0, [r0, #0]
   d49e4:	f000 fbff 	bl	d51e6 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d49e8:	6820      	ldr	r0, [r4, #0]
   d49ea:	6803      	ldr	r3, [r0, #0]
   d49ec:	4631      	mov	r1, r6
   d49ee:	689b      	ldr	r3, [r3, #8]
   d49f0:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d49f2:	6820      	ldr	r0, [r4, #0]
   d49f4:	6803      	ldr	r3, [r0, #0]
   d49f6:	4629      	mov	r1, r5
   d49f8:	689b      	ldr	r3, [r3, #8]
   d49fa:	4798      	blx	r3
        _wire -> endTransmission();
   d49fc:	6820      	ldr	r0, [r4, #0]
   d49fe:	f000 fbfa 	bl	d51f6 <_ZN7TwoWire15endTransmissionEv>
   d4a02:	e02d      	b.n	d4a60 <_ZN15Adafruit_BME2806write8Ehh+0x90>
    } else {
        if (_sck == -1)
   d4a04:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4a08:	3301      	adds	r3, #1
   d4a0a:	d10e      	bne.n	d4a2a <_ZN15Adafruit_BME2806write8Ehh+0x5a>
   d4a0c:	4b15      	ldr	r3, [pc, #84]	; (d4a64 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d4a0e:	4a16      	ldr	r2, [pc, #88]	; (d4a68 <_ZN15Adafruit_BME2806write8Ehh+0x98>)
   d4a10:	9300      	str	r3, [sp, #0]
   d4a12:	9202      	str	r2, [sp, #8]
   d4a14:	2300      	movs	r3, #0
   d4a16:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4a18:	4668      	mov	r0, sp
   d4a1a:	f88d 3004 	strb.w	r3, [sp, #4]
   d4a1e:	f88d 200c 	strb.w	r2, [sp, #12]
   d4a22:	f88d 300d 	strb.w	r3, [sp, #13]
   d4a26:	f7ff fdf7 	bl	d4618 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4a2a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4a2e:	2100      	movs	r1, #0
   d4a30:	b280      	uxth	r0, r0
   d4a32:	f001 f964 	bl	d5cfe <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d4a36:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d4a3a:	4620      	mov	r0, r4
   d4a3c:	f7ff fdae 	bl	d459c <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d4a40:	4629      	mov	r1, r5
   d4a42:	4620      	mov	r0, r4
   d4a44:	f7ff fdaa 	bl	d459c <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d4a48:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4a4c:	2101      	movs	r1, #1
   d4a4e:	b280      	uxth	r0, r0
   d4a50:	f001 f955 	bl	d5cfe <digitalWrite>
    if (_sck == -1)
   d4a54:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4a58:	3301      	adds	r3, #1
   d4a5a:	d101      	bne.n	d4a60 <_ZN15Adafruit_BME2806write8Ehh+0x90>
        SPI.endTransaction(); // release the SPI bus
   d4a5c:	f7ff fdd5 	bl	d460a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
}
   d4a60:	b004      	add	sp, #16
   d4a62:	bd70      	pop	{r4, r5, r6, pc}
   d4a64:	000d656c 	.word	0x000d656c
   d4a68:	0007a120 	.word	0x0007a120

000d4a6c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.mode     = mode;
   d4a6e:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4a72:	f89d 6018 	ldrb.w	r6, [sp, #24]
   d4a76:	f89d e01c 	ldrb.w	lr, [sp, #28]
   d4a7a:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.mode     = mode;
   d4a7e:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
   d4a82:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
   d4a86:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
   d4a8a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
   d4a8e:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
   d4a92:	f366 1347 	bfi	r3, r6, #5, #3
   d4a96:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
   d4a9a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d4a9e:	f36e 03c5 	bfi	r3, lr, #3, #3
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4aa2:	4604      	mov	r4, r0
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
   d4aa4:	f367 0302 	bfi	r3, r7, #0, #3
   d4aa8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d4aac:	f006 0207 	and.w	r2, r6, #7
   d4ab0:	21f2      	movs	r1, #242	; 0xf2
   d4ab2:	f7ff ff8d 	bl	d49d0 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d4ab6:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d4aba:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4abe:	f002 0107 	and.w	r1, r2, #7
   d4ac2:	009b      	lsls	r3, r3, #2
   d4ac4:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4ac8:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d4acc:	4620      	mov	r0, r4
   d4ace:	21f5      	movs	r1, #245	; 0xf5
   d4ad0:	f7ff ff7e 	bl	d49d0 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d4ad4:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4ad8:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4adc:	f002 0107 	and.w	r1, r2, #7
   d4ae0:	009b      	lsls	r3, r3, #2
   d4ae2:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4ae6:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d4aea:	4620      	mov	r0, r4
   d4aec:	21f4      	movs	r1, #244	; 0xf4
}
   d4aee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4af2:	f7ff bf6d 	b.w	d49d0 <_ZN15Adafruit_BME2806write8Ehh>

000d4af6 <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4af6:	b530      	push	{r4, r5, lr}
   d4af8:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4afa:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d4afe:	1c42      	adds	r2, r0, #1
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4b00:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4b02:	d103      	bne.n	d4b0c <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
   d4b04:	6820      	ldr	r0, [r4, #0]
   d4b06:	f000 fb37 	bl	d5178 <_ZN7TwoWire5beginEv>
   d4b0a:	e022      	b.n	d4b52 <_ZN15Adafruit_BME2804initEv+0x5c>
    } else {
        digitalWrite(_cs, HIGH);
   d4b0c:	2101      	movs	r1, #1
   d4b0e:	b280      	uxth	r0, r0
   d4b10:	f001 f8f5 	bl	d5cfe <digitalWrite>
        pinMode(_cs, OUTPUT);
   d4b14:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4b18:	2101      	movs	r1, #1
   d4b1a:	b280      	uxth	r0, r0
   d4b1c:	f001 f8de 	bl	d5cdc <pinMode>
        if (_sck == -1) {
   d4b20:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d4b24:	1c43      	adds	r3, r0, #1
   d4b26:	d104      	bne.n	d4b32 <_ZN15Adafruit_BME2804initEv+0x3c>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d4b28:	f7ff fd20 	bl	d456c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4b2c:	f000 fe08 	bl	d5740 <_ZN8SPIClass5beginEv>
   d4b30:	e00f      	b.n	d4b52 <_ZN15Adafruit_BME2804initEv+0x5c>
            // hardware SPI
            SPI.begin();
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
   d4b32:	2101      	movs	r1, #1
   d4b34:	b280      	uxth	r0, r0
   d4b36:	f001 f8d1 	bl	d5cdc <pinMode>
            pinMode(_mosi, OUTPUT);
   d4b3a:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d4b3e:	2101      	movs	r1, #1
   d4b40:	b280      	uxth	r0, r0
   d4b42:	f001 f8cb 	bl	d5cdc <pinMode>
            pinMode(_miso, INPUT);
   d4b46:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d4b4a:	2100      	movs	r1, #0
   d4b4c:	b280      	uxth	r0, r0
   d4b4e:	f001 f8c5 	bl	d5cdc <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4b52:	21d0      	movs	r1, #208	; 0xd0
   d4b54:	4620      	mov	r0, r4
   d4b56:	f7ff fe6d 	bl	d4834 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d4b5a:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4b5c:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d4b5e:	d120      	bne.n	d4ba2 <_ZN15Adafruit_BME2804initEv+0xac>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d4b60:	4620      	mov	r0, r4
   d4b62:	22b6      	movs	r2, #182	; 0xb6
   d4b64:	21e0      	movs	r1, #224	; 0xe0
   d4b66:	f7ff ff33 	bl	d49d0 <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
   d4b6a:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4b6e:	f000 fa5d 	bl	d502c <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
   d4b72:	4620      	mov	r0, r4
   d4b74:	f7ff feb4 	bl	d48e0 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d4b78:	4605      	mov	r5, r0
   d4b7a:	b108      	cbz	r0, d4b80 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d4b7c:	2064      	movs	r0, #100	; 0x64
   d4b7e:	e7f6      	b.n	d4b6e <_ZN15Adafruit_BME2804initEv+0x78>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d4b80:	4620      	mov	r0, r4
   d4b82:	f7ff feb4 	bl	d48ee <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
   d4b86:	2305      	movs	r3, #5
   d4b88:	9300      	str	r3, [sp, #0]
   d4b8a:	461a      	mov	r2, r3
   d4b8c:	2103      	movs	r1, #3
   d4b8e:	4620      	mov	r0, r4
   d4b90:	9502      	str	r5, [sp, #8]
   d4b92:	9501      	str	r5, [sp, #4]
   d4b94:	f7ff ff6a 	bl	d4a6c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
   d4b98:	2064      	movs	r0, #100	; 0x64
   d4b9a:	f000 fa47 	bl	d502c <delay>
   d4b9e:	2001      	movs	r0, #1
   d4ba0:	e000      	b.n	d4ba4 <_ZN15Adafruit_BME2804initEv+0xae>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
   d4ba2:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
   d4ba4:	b005      	add	sp, #20
   d4ba6:	bd30      	pop	{r4, r5, pc}

000d4ba8 <_ZN15Adafruit_BME2805beginEh>:
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d4ba8:	b510      	push	{r4, lr}
	_i2caddr = addr;
   d4baa:	7101      	strb	r1, [r0, #4]
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d4bac:	4604      	mov	r4, r0
	_i2caddr = addr;
	_wire = &Wire;
   d4bae:	f001 f913 	bl	d5dd8 <_Z19__fetch_global_Wirev>
   d4bb2:	6020      	str	r0, [r4, #0]
	return init();
   d4bb4:	4620      	mov	r0, r4
}
   d4bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
	_i2caddr = addr;
	_wire = &Wire;
	return init();
   d4bba:	f7ff bf9c 	b.w	d4af6 <_ZN15Adafruit_BME2804initEv>

000d4bbe <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d4bbe:	f000 b839 	b.w	d4c34 <HAL_Pin_Map>
	...

000d4bc4 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4bc4:	b508      	push	{r3, lr}
   d4bc6:	4b02      	ldr	r3, [pc, #8]	; (d4bd0 <os_thread_is_current+0xc>)
   d4bc8:	681b      	ldr	r3, [r3, #0]
   d4bca:	689b      	ldr	r3, [r3, #8]
   d4bcc:	9301      	str	r3, [sp, #4]
   d4bce:	bd08      	pop	{r3, pc}
   d4bd0:	00030248 	.word	0x00030248

000d4bd4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4bd4:	b508      	push	{r3, lr}
   d4bd6:	4b02      	ldr	r3, [pc, #8]	; (d4be0 <os_thread_join+0xc>)
   d4bd8:	681b      	ldr	r3, [r3, #0]
   d4bda:	691b      	ldr	r3, [r3, #16]
   d4bdc:	9301      	str	r3, [sp, #4]
   d4bde:	bd08      	pop	{r3, pc}
   d4be0:	00030248 	.word	0x00030248

000d4be4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4be4:	b508      	push	{r3, lr}
   d4be6:	4b02      	ldr	r3, [pc, #8]	; (d4bf0 <os_thread_cleanup+0xc>)
   d4be8:	681b      	ldr	r3, [r3, #0]
   d4bea:	695b      	ldr	r3, [r3, #20]
   d4bec:	9301      	str	r3, [sp, #4]
   d4bee:	bd08      	pop	{r3, pc}
   d4bf0:	00030248 	.word	0x00030248

000d4bf4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4bf4:	b508      	push	{r3, lr}
   d4bf6:	4b02      	ldr	r3, [pc, #8]	; (d4c00 <os_mutex_recursive_create+0xc>)
   d4bf8:	681b      	ldr	r3, [r3, #0]
   d4bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4bfc:	9301      	str	r3, [sp, #4]
   d4bfe:	bd08      	pop	{r3, pc}
   d4c00:	00030248 	.word	0x00030248

000d4c04 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4c04:	b508      	push	{r3, lr}
   d4c06:	4b02      	ldr	r3, [pc, #8]	; (d4c10 <os_mutex_recursive_destroy+0xc>)
   d4c08:	681b      	ldr	r3, [r3, #0]
   d4c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4c0c:	9301      	str	r3, [sp, #4]
   d4c0e:	bd08      	pop	{r3, pc}
   d4c10:	00030248 	.word	0x00030248

000d4c14 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4c14:	b508      	push	{r3, lr}
   d4c16:	4b02      	ldr	r3, [pc, #8]	; (d4c20 <HAL_RNG_GetRandomNumber+0xc>)
   d4c18:	681b      	ldr	r3, [r3, #0]
   d4c1a:	685b      	ldr	r3, [r3, #4]
   d4c1c:	9301      	str	r3, [sp, #4]
   d4c1e:	bd08      	pop	{r3, pc}
   d4c20:	00030218 	.word	0x00030218

000d4c24 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4c24:	b508      	push	{r3, lr}
   d4c26:	4b02      	ldr	r3, [pc, #8]	; (d4c30 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4c28:	681b      	ldr	r3, [r3, #0]
   d4c2a:	695b      	ldr	r3, [r3, #20]
   d4c2c:	9301      	str	r3, [sp, #4]
   d4c2e:	bd08      	pop	{r3, pc}
   d4c30:	00030218 	.word	0x00030218

000d4c34 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4c34:	b508      	push	{r3, lr}
   d4c36:	4b02      	ldr	r3, [pc, #8]	; (d4c40 <HAL_Pin_Map+0xc>)
   d4c38:	681b      	ldr	r3, [r3, #0]
   d4c3a:	681b      	ldr	r3, [r3, #0]
   d4c3c:	9301      	str	r3, [sp, #4]
   d4c3e:	bd08      	pop	{r3, pc}
   d4c40:	0003022c 	.word	0x0003022c

000d4c44 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4c44:	b508      	push	{r3, lr}
   d4c46:	4b02      	ldr	r3, [pc, #8]	; (d4c50 <HAL_Validate_Pin_Function+0xc>)
   d4c48:	681b      	ldr	r3, [r3, #0]
   d4c4a:	685b      	ldr	r3, [r3, #4]
   d4c4c:	9301      	str	r3, [sp, #4]
   d4c4e:	bd08      	pop	{r3, pc}
   d4c50:	0003022c 	.word	0x0003022c

000d4c54 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4c54:	b508      	push	{r3, lr}
   d4c56:	4b02      	ldr	r3, [pc, #8]	; (d4c60 <HAL_Pin_Mode+0xc>)
   d4c58:	681b      	ldr	r3, [r3, #0]
   d4c5a:	689b      	ldr	r3, [r3, #8]
   d4c5c:	9301      	str	r3, [sp, #4]
   d4c5e:	bd08      	pop	{r3, pc}
   d4c60:	0003022c 	.word	0x0003022c

000d4c64 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4c64:	b508      	push	{r3, lr}
   d4c66:	4b02      	ldr	r3, [pc, #8]	; (d4c70 <HAL_Get_Pin_Mode+0xc>)
   d4c68:	681b      	ldr	r3, [r3, #0]
   d4c6a:	68db      	ldr	r3, [r3, #12]
   d4c6c:	9301      	str	r3, [sp, #4]
   d4c6e:	bd08      	pop	{r3, pc}
   d4c70:	0003022c 	.word	0x0003022c

000d4c74 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4c74:	b508      	push	{r3, lr}
   d4c76:	4b02      	ldr	r3, [pc, #8]	; (d4c80 <HAL_GPIO_Write+0xc>)
   d4c78:	681b      	ldr	r3, [r3, #0]
   d4c7a:	691b      	ldr	r3, [r3, #16]
   d4c7c:	9301      	str	r3, [sp, #4]
   d4c7e:	bd08      	pop	{r3, pc}
   d4c80:	0003022c 	.word	0x0003022c

000d4c84 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4c84:	b508      	push	{r3, lr}
   d4c86:	4b02      	ldr	r3, [pc, #8]	; (d4c90 <HAL_GPIO_Read+0xc>)
   d4c88:	681b      	ldr	r3, [r3, #0]
   d4c8a:	695b      	ldr	r3, [r3, #20]
   d4c8c:	9301      	str	r3, [sp, #4]
   d4c8e:	bd08      	pop	{r3, pc}
   d4c90:	0003022c 	.word	0x0003022c

000d4c94 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d4c94:	b508      	push	{r3, lr}
   d4c96:	4b02      	ldr	r3, [pc, #8]	; (d4ca0 <HAL_DAC_Write+0xc>)
   d4c98:	681b      	ldr	r3, [r3, #0]
   d4c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4c9c:	9301      	str	r3, [sp, #4]
   d4c9e:	bd08      	pop	{r3, pc}
   d4ca0:	0003022c 	.word	0x0003022c

000d4ca4 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
   d4ca4:	b508      	push	{r3, lr}
   d4ca6:	4b02      	ldr	r3, [pc, #8]	; (d4cb0 <HAL_PWM_Write_Ext+0xc>)
   d4ca8:	681b      	ldr	r3, [r3, #0]
   d4caa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d4cac:	9301      	str	r3, [sp, #4]
   d4cae:	bd08      	pop	{r3, pc}
   d4cb0:	0003022c 	.word	0x0003022c

000d4cb4 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4cb4:	b508      	push	{r3, lr}
   d4cb6:	4b02      	ldr	r3, [pc, #8]	; (d4cc0 <HAL_I2C_Begin+0xc>)
   d4cb8:	681b      	ldr	r3, [r3, #0]
   d4cba:	68db      	ldr	r3, [r3, #12]
   d4cbc:	9301      	str	r3, [sp, #4]
   d4cbe:	bd08      	pop	{r3, pc}
   d4cc0:	00030228 	.word	0x00030228

000d4cc4 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4cc4:	b508      	push	{r3, lr}
   d4cc6:	4b02      	ldr	r3, [pc, #8]	; (d4cd0 <HAL_I2C_Begin_Transmission+0xc>)
   d4cc8:	681b      	ldr	r3, [r3, #0]
   d4cca:	699b      	ldr	r3, [r3, #24]
   d4ccc:	9301      	str	r3, [sp, #4]
   d4cce:	bd08      	pop	{r3, pc}
   d4cd0:	00030228 	.word	0x00030228

000d4cd4 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4cd4:	b508      	push	{r3, lr}
   d4cd6:	4b02      	ldr	r3, [pc, #8]	; (d4ce0 <HAL_I2C_End_Transmission+0xc>)
   d4cd8:	681b      	ldr	r3, [r3, #0]
   d4cda:	69db      	ldr	r3, [r3, #28]
   d4cdc:	9301      	str	r3, [sp, #4]
   d4cde:	bd08      	pop	{r3, pc}
   d4ce0:	00030228 	.word	0x00030228

000d4ce4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4ce4:	b508      	push	{r3, lr}
   d4ce6:	4b02      	ldr	r3, [pc, #8]	; (d4cf0 <HAL_I2C_Write_Data+0xc>)
   d4ce8:	681b      	ldr	r3, [r3, #0]
   d4cea:	6a1b      	ldr	r3, [r3, #32]
   d4cec:	9301      	str	r3, [sp, #4]
   d4cee:	bd08      	pop	{r3, pc}
   d4cf0:	00030228 	.word	0x00030228

000d4cf4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4cf4:	b508      	push	{r3, lr}
   d4cf6:	4b02      	ldr	r3, [pc, #8]	; (d4d00 <HAL_I2C_Available_Data+0xc>)
   d4cf8:	681b      	ldr	r3, [r3, #0]
   d4cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4cfc:	9301      	str	r3, [sp, #4]
   d4cfe:	bd08      	pop	{r3, pc}
   d4d00:	00030228 	.word	0x00030228

000d4d04 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4d04:	b508      	push	{r3, lr}
   d4d06:	4b02      	ldr	r3, [pc, #8]	; (d4d10 <HAL_I2C_Read_Data+0xc>)
   d4d08:	681b      	ldr	r3, [r3, #0]
   d4d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4d0c:	9301      	str	r3, [sp, #4]
   d4d0e:	bd08      	pop	{r3, pc}
   d4d10:	00030228 	.word	0x00030228

000d4d14 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4d14:	b508      	push	{r3, lr}
   d4d16:	4b02      	ldr	r3, [pc, #8]	; (d4d20 <HAL_I2C_Peek_Data+0xc>)
   d4d18:	681b      	ldr	r3, [r3, #0]
   d4d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4d1c:	9301      	str	r3, [sp, #4]
   d4d1e:	bd08      	pop	{r3, pc}
   d4d20:	00030228 	.word	0x00030228

000d4d24 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4d24:	b508      	push	{r3, lr}
   d4d26:	4b02      	ldr	r3, [pc, #8]	; (d4d30 <HAL_I2C_Flush_Data+0xc>)
   d4d28:	681b      	ldr	r3, [r3, #0]
   d4d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d2c:	9301      	str	r3, [sp, #4]
   d4d2e:	bd08      	pop	{r3, pc}
   d4d30:	00030228 	.word	0x00030228

000d4d34 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4d34:	b508      	push	{r3, lr}
   d4d36:	4b02      	ldr	r3, [pc, #8]	; (d4d40 <HAL_I2C_Is_Enabled+0xc>)
   d4d38:	681b      	ldr	r3, [r3, #0]
   d4d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4d3c:	9301      	str	r3, [sp, #4]
   d4d3e:	bd08      	pop	{r3, pc}
   d4d40:	00030228 	.word	0x00030228

000d4d44 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4d44:	b508      	push	{r3, lr}
   d4d46:	4b02      	ldr	r3, [pc, #8]	; (d4d50 <HAL_I2C_Init+0xc>)
   d4d48:	681b      	ldr	r3, [r3, #0]
   d4d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4d4c:	9301      	str	r3, [sp, #4]
   d4d4e:	bd08      	pop	{r3, pc}
   d4d50:	00030228 	.word	0x00030228

000d4d54 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d4d54:	b508      	push	{r3, lr}
   d4d56:	4b02      	ldr	r3, [pc, #8]	; (d4d60 <HAL_I2C_Request_Data_Ex+0xc>)
   d4d58:	681b      	ldr	r3, [r3, #0]
   d4d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4d5c:	9301      	str	r3, [sp, #4]
   d4d5e:	bd08      	pop	{r3, pc}
   d4d60:	00030228 	.word	0x00030228

000d4d64 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4d64:	b508      	push	{r3, lr}
   d4d66:	4b02      	ldr	r3, [pc, #8]	; (d4d70 <inet_inet_ntop+0xc>)
   d4d68:	681b      	ldr	r3, [r3, #0]
   d4d6a:	695b      	ldr	r3, [r3, #20]
   d4d6c:	9301      	str	r3, [sp, #4]
   d4d6e:	bd08      	pop	{r3, pc}
   d4d70:	00030264 	.word	0x00030264

000d4d74 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4d74:	b508      	push	{r3, lr}
   d4d76:	4b02      	ldr	r3, [pc, #8]	; (d4d80 <netdb_freeaddrinfo+0xc>)
   d4d78:	681b      	ldr	r3, [r3, #0]
   d4d7a:	689b      	ldr	r3, [r3, #8]
   d4d7c:	9301      	str	r3, [sp, #4]
   d4d7e:	bd08      	pop	{r3, pc}
   d4d80:	00030268 	.word	0x00030268

000d4d84 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4d84:	b508      	push	{r3, lr}
   d4d86:	4b02      	ldr	r3, [pc, #8]	; (d4d90 <netdb_getaddrinfo+0xc>)
   d4d88:	681b      	ldr	r3, [r3, #0]
   d4d8a:	68db      	ldr	r3, [r3, #12]
   d4d8c:	9301      	str	r3, [sp, #4]
   d4d8e:	bd08      	pop	{r3, pc}
   d4d90:	00030268 	.word	0x00030268

000d4d94 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d4d94:	b508      	push	{r3, lr}
   d4d96:	4b02      	ldr	r3, [pc, #8]	; (d4da0 <HAL_SPI_Begin+0xc>)
   d4d98:	681b      	ldr	r3, [r3, #0]
   d4d9a:	681b      	ldr	r3, [r3, #0]
   d4d9c:	9301      	str	r3, [sp, #4]
   d4d9e:	bd08      	pop	{r3, pc}
   d4da0:	00030230 	.word	0x00030230

000d4da4 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d4da4:	b508      	push	{r3, lr}
   d4da6:	4b02      	ldr	r3, [pc, #8]	; (d4db0 <HAL_SPI_Send_Receive_Data+0xc>)
   d4da8:	681b      	ldr	r3, [r3, #0]
   d4daa:	695b      	ldr	r3, [r3, #20]
   d4dac:	9301      	str	r3, [sp, #4]
   d4dae:	bd08      	pop	{r3, pc}
   d4db0:	00030230 	.word	0x00030230

000d4db4 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4db4:	b508      	push	{r3, lr}
   d4db6:	4b02      	ldr	r3, [pc, #8]	; (d4dc0 <HAL_SPI_Init+0xc>)
   d4db8:	681b      	ldr	r3, [r3, #0]
   d4dba:	69db      	ldr	r3, [r3, #28]
   d4dbc:	9301      	str	r3, [sp, #4]
   d4dbe:	bd08      	pop	{r3, pc}
   d4dc0:	00030230 	.word	0x00030230

000d4dc4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4dc4:	b508      	push	{r3, lr}
   d4dc6:	4b02      	ldr	r3, [pc, #8]	; (d4dd0 <HAL_SPI_Is_Enabled+0xc>)
   d4dc8:	681b      	ldr	r3, [r3, #0]
   d4dca:	6a1b      	ldr	r3, [r3, #32]
   d4dcc:	9301      	str	r3, [sp, #4]
   d4dce:	bd08      	pop	{r3, pc}
   d4dd0:	00030230 	.word	0x00030230

000d4dd4 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d4dd4:	b508      	push	{r3, lr}
   d4dd6:	4b02      	ldr	r3, [pc, #8]	; (d4de0 <HAL_SPI_Info+0xc>)
   d4dd8:	681b      	ldr	r3, [r3, #0]
   d4dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4ddc:	9301      	str	r3, [sp, #4]
   d4dde:	bd08      	pop	{r3, pc}
   d4de0:	00030230 	.word	0x00030230

000d4de4 <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d4de4:	b508      	push	{r3, lr}
   d4de6:	4b02      	ldr	r3, [pc, #8]	; (d4df0 <HAL_SPI_Set_Settings+0xc>)
   d4de8:	681b      	ldr	r3, [r3, #0]
   d4dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4dec:	9301      	str	r3, [sp, #4]
   d4dee:	bd08      	pop	{r3, pc}
   d4df0:	00030230 	.word	0x00030230

000d4df4 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d4df4:	b508      	push	{r3, lr}
   d4df6:	4b02      	ldr	r3, [pc, #8]	; (d4e00 <HAL_SPI_Acquire+0xc>)
   d4df8:	681b      	ldr	r3, [r3, #0]
   d4dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4dfc:	9301      	str	r3, [sp, #4]
   d4dfe:	bd08      	pop	{r3, pc}
   d4e00:	00030230 	.word	0x00030230

000d4e04 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d4e04:	b508      	push	{r3, lr}
   d4e06:	4b02      	ldr	r3, [pc, #8]	; (d4e10 <HAL_SPI_Release+0xc>)
   d4e08:	681b      	ldr	r3, [r3, #0]
   d4e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4e0c:	9301      	str	r3, [sp, #4]
   d4e0e:	bd08      	pop	{r3, pc}
   d4e10:	00030230 	.word	0x00030230

000d4e14 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4e14:	b508      	push	{r3, lr}
   d4e16:	4b02      	ldr	r3, [pc, #8]	; (d4e20 <HAL_USART_Init+0xc>)
   d4e18:	681b      	ldr	r3, [r3, #0]
   d4e1a:	681b      	ldr	r3, [r3, #0]
   d4e1c:	9301      	str	r3, [sp, #4]
   d4e1e:	bd08      	pop	{r3, pc}
   d4e20:	0003023c 	.word	0x0003023c

000d4e24 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4e24:	b508      	push	{r3, lr}
   d4e26:	4b02      	ldr	r3, [pc, #8]	; (d4e30 <HAL_USART_Write_Data+0xc>)
   d4e28:	681b      	ldr	r3, [r3, #0]
   d4e2a:	68db      	ldr	r3, [r3, #12]
   d4e2c:	9301      	str	r3, [sp, #4]
   d4e2e:	bd08      	pop	{r3, pc}
   d4e30:	0003023c 	.word	0x0003023c

000d4e34 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4e34:	b508      	push	{r3, lr}
   d4e36:	4b02      	ldr	r3, [pc, #8]	; (d4e40 <HAL_USART_Available_Data+0xc>)
   d4e38:	681b      	ldr	r3, [r3, #0]
   d4e3a:	691b      	ldr	r3, [r3, #16]
   d4e3c:	9301      	str	r3, [sp, #4]
   d4e3e:	bd08      	pop	{r3, pc}
   d4e40:	0003023c 	.word	0x0003023c

000d4e44 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4e44:	b508      	push	{r3, lr}
   d4e46:	4b02      	ldr	r3, [pc, #8]	; (d4e50 <HAL_USART_Read_Data+0xc>)
   d4e48:	681b      	ldr	r3, [r3, #0]
   d4e4a:	695b      	ldr	r3, [r3, #20]
   d4e4c:	9301      	str	r3, [sp, #4]
   d4e4e:	bd08      	pop	{r3, pc}
   d4e50:	0003023c 	.word	0x0003023c

000d4e54 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4e54:	b508      	push	{r3, lr}
   d4e56:	4b02      	ldr	r3, [pc, #8]	; (d4e60 <HAL_USART_Peek_Data+0xc>)
   d4e58:	681b      	ldr	r3, [r3, #0]
   d4e5a:	699b      	ldr	r3, [r3, #24]
   d4e5c:	9301      	str	r3, [sp, #4]
   d4e5e:	bd08      	pop	{r3, pc}
   d4e60:	0003023c 	.word	0x0003023c

000d4e64 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4e64:	b508      	push	{r3, lr}
   d4e66:	4b02      	ldr	r3, [pc, #8]	; (d4e70 <HAL_USART_Flush_Data+0xc>)
   d4e68:	681b      	ldr	r3, [r3, #0]
   d4e6a:	69db      	ldr	r3, [r3, #28]
   d4e6c:	9301      	str	r3, [sp, #4]
   d4e6e:	bd08      	pop	{r3, pc}
   d4e70:	0003023c 	.word	0x0003023c

000d4e74 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4e74:	b508      	push	{r3, lr}
   d4e76:	4b02      	ldr	r3, [pc, #8]	; (d4e80 <HAL_USART_Is_Enabled+0xc>)
   d4e78:	681b      	ldr	r3, [r3, #0]
   d4e7a:	6a1b      	ldr	r3, [r3, #32]
   d4e7c:	9301      	str	r3, [sp, #4]
   d4e7e:	bd08      	pop	{r3, pc}
   d4e80:	0003023c 	.word	0x0003023c

000d4e84 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4e84:	b508      	push	{r3, lr}
   d4e86:	4b02      	ldr	r3, [pc, #8]	; (d4e90 <HAL_USART_Available_Data_For_Write+0xc>)
   d4e88:	681b      	ldr	r3, [r3, #0]
   d4e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4e8c:	9301      	str	r3, [sp, #4]
   d4e8e:	bd08      	pop	{r3, pc}
   d4e90:	0003023c 	.word	0x0003023c

000d4e94 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4e94:	b508      	push	{r3, lr}
   d4e96:	4b02      	ldr	r3, [pc, #8]	; (d4ea0 <HAL_USB_USART_Init+0xc>)
   d4e98:	681b      	ldr	r3, [r3, #0]
   d4e9a:	681b      	ldr	r3, [r3, #0]
   d4e9c:	9301      	str	r3, [sp, #4]
   d4e9e:	bd08      	pop	{r3, pc}
   d4ea0:	0003024c 	.word	0x0003024c

000d4ea4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4ea4:	b508      	push	{r3, lr}
   d4ea6:	4b02      	ldr	r3, [pc, #8]	; (d4eb0 <HAL_USB_USART_Begin+0xc>)
   d4ea8:	681b      	ldr	r3, [r3, #0]
   d4eaa:	685b      	ldr	r3, [r3, #4]
   d4eac:	9301      	str	r3, [sp, #4]
   d4eae:	bd08      	pop	{r3, pc}
   d4eb0:	0003024c 	.word	0x0003024c

000d4eb4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4eb4:	b508      	push	{r3, lr}
   d4eb6:	4b02      	ldr	r3, [pc, #8]	; (d4ec0 <HAL_USB_USART_Available_Data+0xc>)
   d4eb8:	681b      	ldr	r3, [r3, #0]
   d4eba:	691b      	ldr	r3, [r3, #16]
   d4ebc:	9301      	str	r3, [sp, #4]
   d4ebe:	bd08      	pop	{r3, pc}
   d4ec0:	0003024c 	.word	0x0003024c

000d4ec4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4ec4:	b508      	push	{r3, lr}
   d4ec6:	4b02      	ldr	r3, [pc, #8]	; (d4ed0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4ec8:	681b      	ldr	r3, [r3, #0]
   d4eca:	695b      	ldr	r3, [r3, #20]
   d4ecc:	9301      	str	r3, [sp, #4]
   d4ece:	bd08      	pop	{r3, pc}
   d4ed0:	0003024c 	.word	0x0003024c

000d4ed4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ed4:	b508      	push	{r3, lr}
   d4ed6:	4b02      	ldr	r3, [pc, #8]	; (d4ee0 <HAL_USB_USART_Receive_Data+0xc>)
   d4ed8:	681b      	ldr	r3, [r3, #0]
   d4eda:	699b      	ldr	r3, [r3, #24]
   d4edc:	9301      	str	r3, [sp, #4]
   d4ede:	bd08      	pop	{r3, pc}
   d4ee0:	0003024c 	.word	0x0003024c

000d4ee4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ee4:	b508      	push	{r3, lr}
   d4ee6:	4b02      	ldr	r3, [pc, #8]	; (d4ef0 <HAL_USB_USART_Send_Data+0xc>)
   d4ee8:	681b      	ldr	r3, [r3, #0]
   d4eea:	69db      	ldr	r3, [r3, #28]
   d4eec:	9301      	str	r3, [sp, #4]
   d4eee:	bd08      	pop	{r3, pc}
   d4ef0:	0003024c 	.word	0x0003024c

000d4ef4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4ef4:	b508      	push	{r3, lr}
   d4ef6:	4b02      	ldr	r3, [pc, #8]	; (d4f00 <HAL_USB_USART_Flush_Data+0xc>)
   d4ef8:	681b      	ldr	r3, [r3, #0]
   d4efa:	6a1b      	ldr	r3, [r3, #32]
   d4efc:	9301      	str	r3, [sp, #4]
   d4efe:	bd08      	pop	{r3, pc}
   d4f00:	0003024c 	.word	0x0003024c

000d4f04 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4f04:	b508      	push	{r3, lr}
   d4f06:	4b02      	ldr	r3, [pc, #8]	; (d4f10 <set_system_mode+0xc>)
   d4f08:	681b      	ldr	r3, [r3, #0]
   d4f0a:	685b      	ldr	r3, [r3, #4]
   d4f0c:	9301      	str	r3, [sp, #4]
   d4f0e:	bd08      	pop	{r3, pc}
   d4f10:	00030220 	.word	0x00030220

000d4f14 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4f14:	b508      	push	{r3, lr}
   d4f16:	4b02      	ldr	r3, [pc, #8]	; (d4f20 <system_delay_ms+0xc>)
   d4f18:	681b      	ldr	r3, [r3, #0]
   d4f1a:	695b      	ldr	r3, [r3, #20]
   d4f1c:	9301      	str	r3, [sp, #4]
   d4f1e:	bd08      	pop	{r3, pc}
   d4f20:	00030220 	.word	0x00030220

000d4f24 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4f24:	b508      	push	{r3, lr}
   d4f26:	4b03      	ldr	r3, [pc, #12]	; (d4f34 <system_ctrl_set_app_request_handler+0x10>)
   d4f28:	681b      	ldr	r3, [r3, #0]
   d4f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4f2e:	9301      	str	r3, [sp, #4]
   d4f30:	bd08      	pop	{r3, pc}
   d4f32:	0000      	.short	0x0000
   d4f34:	00030220 	.word	0x00030220

000d4f38 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4f38:	b508      	push	{r3, lr}
   d4f3a:	4b03      	ldr	r3, [pc, #12]	; (d4f48 <system_ctrl_set_result+0x10>)
   d4f3c:	681b      	ldr	r3, [r3, #0]
   d4f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4f42:	9301      	str	r3, [sp, #4]
   d4f44:	bd08      	pop	{r3, pc}
   d4f46:	0000      	.short	0x0000
   d4f48:	00030220 	.word	0x00030220

000d4f4c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4f4c:	b508      	push	{r3, lr}
   d4f4e:	4b02      	ldr	r3, [pc, #8]	; (d4f58 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4f50:	681b      	ldr	r3, [r3, #0]
   d4f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4f54:	9301      	str	r3, [sp, #4]
   d4f56:	bd08      	pop	{r3, pc}
   d4f58:	00030244 	.word	0x00030244

000d4f5c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4f5c:	b508      	push	{r3, lr}
   d4f5e:	4b02      	ldr	r3, [pc, #8]	; (d4f68 <network_connect+0xc>)
   d4f60:	681b      	ldr	r3, [r3, #0]
   d4f62:	685b      	ldr	r3, [r3, #4]
   d4f64:	9301      	str	r3, [sp, #4]
   d4f66:	bd08      	pop	{r3, pc}
   d4f68:	00030240 	.word	0x00030240

000d4f6c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4f6c:	b508      	push	{r3, lr}
   d4f6e:	4b02      	ldr	r3, [pc, #8]	; (d4f78 <network_connecting+0xc>)
   d4f70:	681b      	ldr	r3, [r3, #0]
   d4f72:	689b      	ldr	r3, [r3, #8]
   d4f74:	9301      	str	r3, [sp, #4]
   d4f76:	bd08      	pop	{r3, pc}
   d4f78:	00030240 	.word	0x00030240

000d4f7c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4f7c:	b508      	push	{r3, lr}
   d4f7e:	4b02      	ldr	r3, [pc, #8]	; (d4f88 <network_disconnect+0xc>)
   d4f80:	681b      	ldr	r3, [r3, #0]
   d4f82:	68db      	ldr	r3, [r3, #12]
   d4f84:	9301      	str	r3, [sp, #4]
   d4f86:	bd08      	pop	{r3, pc}
   d4f88:	00030240 	.word	0x00030240

000d4f8c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4f8c:	b508      	push	{r3, lr}
   d4f8e:	4b02      	ldr	r3, [pc, #8]	; (d4f98 <network_ready+0xc>)
   d4f90:	681b      	ldr	r3, [r3, #0]
   d4f92:	691b      	ldr	r3, [r3, #16]
   d4f94:	9301      	str	r3, [sp, #4]
   d4f96:	bd08      	pop	{r3, pc}
   d4f98:	00030240 	.word	0x00030240

000d4f9c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4f9c:	b508      	push	{r3, lr}
   d4f9e:	4b02      	ldr	r3, [pc, #8]	; (d4fa8 <network_on+0xc>)
   d4fa0:	681b      	ldr	r3, [r3, #0]
   d4fa2:	695b      	ldr	r3, [r3, #20]
   d4fa4:	9301      	str	r3, [sp, #4]
   d4fa6:	bd08      	pop	{r3, pc}
   d4fa8:	00030240 	.word	0x00030240

000d4fac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4fac:	b508      	push	{r3, lr}
   d4fae:	4b02      	ldr	r3, [pc, #8]	; (d4fb8 <network_off+0xc>)
   d4fb0:	681b      	ldr	r3, [r3, #0]
   d4fb2:	699b      	ldr	r3, [r3, #24]
   d4fb4:	9301      	str	r3, [sp, #4]
   d4fb6:	bd08      	pop	{r3, pc}
   d4fb8:	00030240 	.word	0x00030240

000d4fbc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4fbc:	b508      	push	{r3, lr}
   d4fbe:	4b02      	ldr	r3, [pc, #8]	; (d4fc8 <network_listen+0xc>)
   d4fc0:	681b      	ldr	r3, [r3, #0]
   d4fc2:	69db      	ldr	r3, [r3, #28]
   d4fc4:	9301      	str	r3, [sp, #4]
   d4fc6:	bd08      	pop	{r3, pc}
   d4fc8:	00030240 	.word	0x00030240

000d4fcc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4fcc:	b508      	push	{r3, lr}
   d4fce:	4b02      	ldr	r3, [pc, #8]	; (d4fd8 <network_listening+0xc>)
   d4fd0:	681b      	ldr	r3, [r3, #0]
   d4fd2:	6a1b      	ldr	r3, [r3, #32]
   d4fd4:	9301      	str	r3, [sp, #4]
   d4fd6:	bd08      	pop	{r3, pc}
   d4fd8:	00030240 	.word	0x00030240

000d4fdc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4fdc:	b508      	push	{r3, lr}
   d4fde:	4b02      	ldr	r3, [pc, #8]	; (d4fe8 <network_set_listen_timeout+0xc>)
   d4fe0:	681b      	ldr	r3, [r3, #0]
   d4fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4fe4:	9301      	str	r3, [sp, #4]
   d4fe6:	bd08      	pop	{r3, pc}
   d4fe8:	00030240 	.word	0x00030240

000d4fec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4fec:	b508      	push	{r3, lr}
   d4fee:	4b02      	ldr	r3, [pc, #8]	; (d4ff8 <network_get_listen_timeout+0xc>)
   d4ff0:	681b      	ldr	r3, [r3, #0]
   d4ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4ff4:	9301      	str	r3, [sp, #4]
   d4ff6:	bd08      	pop	{r3, pc}
   d4ff8:	00030240 	.word	0x00030240

000d4ffc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4ffc:	b508      	push	{r3, lr}
   d4ffe:	4b02      	ldr	r3, [pc, #8]	; (d5008 <malloc+0xc>)
   d5000:	681b      	ldr	r3, [r3, #0]
   d5002:	681b      	ldr	r3, [r3, #0]
   d5004:	9301      	str	r3, [sp, #4]
   d5006:	bd08      	pop	{r3, pc}
   d5008:	0003021c 	.word	0x0003021c

000d500c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d500c:	b508      	push	{r3, lr}
   d500e:	4b02      	ldr	r3, [pc, #8]	; (d5018 <free+0xc>)
   d5010:	681b      	ldr	r3, [r3, #0]
   d5012:	685b      	ldr	r3, [r3, #4]
   d5014:	9301      	str	r3, [sp, #4]
   d5016:	bd08      	pop	{r3, pc}
   d5018:	0003021c 	.word	0x0003021c

000d501c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d501c:	b508      	push	{r3, lr}
   d501e:	4b02      	ldr	r3, [pc, #8]	; (d5028 <vsnprintf+0xc>)
   d5020:	681b      	ldr	r3, [r3, #0]
   d5022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5024:	9301      	str	r3, [sp, #4]
   d5026:	bd08      	pop	{r3, pc}
   d5028:	0003021c 	.word	0x0003021c

000d502c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d502c:	2100      	movs	r1, #0
   d502e:	f7ff bf71 	b.w	d4f14 <system_delay_ms>

000d5032 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5032:	b510      	push	{r4, lr}
   d5034:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5036:	6800      	ldr	r0, [r0, #0]
   d5038:	b108      	cbz	r0, d503e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d503a:	f7ff fde3 	bl	d4c04 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d503e:	4620      	mov	r0, r4
   d5040:	bd10      	pop	{r4, pc}
	...

000d5044 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5044:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5046:	4c06      	ldr	r4, [pc, #24]	; (d5060 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5048:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d504a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d504c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d504e:	f7ff fdd1 	bl	d4bf4 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5052:	4620      	mov	r0, r4
   d5054:	4a03      	ldr	r2, [pc, #12]	; (d5064 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5056:	4904      	ldr	r1, [pc, #16]	; (d5068 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d505c:	f000 bee2 	b.w	d5e24 <__aeabi_atexit>
   d5060:	2003e3dc 	.word	0x2003e3dc
   d5064:	2003e298 	.word	0x2003e298
   d5068:	000d5033 	.word	0x000d5033

000d506c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d506c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d506e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5070:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5072:	b113      	cbz	r3, d507a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5074:	2203      	movs	r2, #3
   d5076:	4601      	mov	r1, r0
   d5078:	4798      	blx	r3
    }
   d507a:	4620      	mov	r0, r4
   d507c:	bd10      	pop	{r4, pc}

000d507e <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d507e:	2200      	movs	r2, #0
   d5080:	4611      	mov	r1, r2
   d5082:	6840      	ldr	r0, [r0, #4]
   d5084:	f7ff bfa2 	b.w	d4fcc <network_listening>

000d5088 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5088:	2200      	movs	r2, #0
   d508a:	4611      	mov	r1, r2
   d508c:	6840      	ldr	r0, [r0, #4]
   d508e:	f7ff bfad 	b.w	d4fec <network_get_listen_timeout>

000d5092 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5092:	2200      	movs	r2, #0
   d5094:	6840      	ldr	r0, [r0, #4]
   d5096:	f7ff bfa1 	b.w	d4fdc <network_set_listen_timeout>

000d509a <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d509a:	2200      	movs	r2, #0
   d509c:	f081 0101 	eor.w	r1, r1, #1
   d50a0:	6840      	ldr	r0, [r0, #4]
   d50a2:	f7ff bf8b 	b.w	d4fbc <network_listen>

000d50a6 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d50a6:	2300      	movs	r3, #0
   d50a8:	461a      	mov	r2, r3
   d50aa:	4619      	mov	r1, r3
   d50ac:	6840      	ldr	r0, [r0, #4]
   d50ae:	f7ff bf7d 	b.w	d4fac <network_off>

000d50b2 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d50b2:	2300      	movs	r3, #0
   d50b4:	461a      	mov	r2, r3
   d50b6:	4619      	mov	r1, r3
   d50b8:	6840      	ldr	r0, [r0, #4]
   d50ba:	f7ff bf6f 	b.w	d4f9c <network_on>

000d50be <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d50be:	2200      	movs	r2, #0
   d50c0:	4611      	mov	r1, r2
   d50c2:	6840      	ldr	r0, [r0, #4]
   d50c4:	f7ff bf62 	b.w	d4f8c <network_ready>

000d50c8 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d50c8:	2200      	movs	r2, #0
   d50ca:	4611      	mov	r1, r2
   d50cc:	6840      	ldr	r0, [r0, #4]
   d50ce:	f7ff bf4d 	b.w	d4f6c <network_connecting>

000d50d2 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d50d2:	2200      	movs	r2, #0
   d50d4:	2102      	movs	r1, #2
   d50d6:	6840      	ldr	r0, [r0, #4]
   d50d8:	f7ff bf50 	b.w	d4f7c <network_disconnect>

000d50dc <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d50dc:	2300      	movs	r3, #0
   d50de:	461a      	mov	r2, r3
   d50e0:	6840      	ldr	r0, [r0, #4]
   d50e2:	f7ff bf3b 	b.w	d4f5c <network_connect>
	...

000d50e8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d50e8:	4b02      	ldr	r3, [pc, #8]	; (d50f4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d50ea:	2203      	movs	r2, #3
   d50ec:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d50ee:	4a02      	ldr	r2, [pc, #8]	; (d50f8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d50f0:	601a      	str	r2, [r3, #0]
   d50f2:	4770      	bx	lr
   d50f4:	2003e3e0 	.word	0x2003e3e0
   d50f8:	000d65c0 	.word	0x000d65c0

000d50fc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d50fc:	4770      	bx	lr

000d50fe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d50fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5100:	4606      	mov	r6, r0
   d5102:	4615      	mov	r5, r2
   d5104:	460c      	mov	r4, r1
   d5106:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5108:	42bc      	cmp	r4, r7
   d510a:	d006      	beq.n	d511a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d510c:	6833      	ldr	r3, [r6, #0]
   d510e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5112:	689b      	ldr	r3, [r3, #8]
   d5114:	4630      	mov	r0, r6
   d5116:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5118:	e7f6      	b.n	d5108 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d511a:	4628      	mov	r0, r5
   d511c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d511e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d511e:	2200      	movs	r2, #0
   d5120:	7c00      	ldrb	r0, [r0, #16]
   d5122:	f7ff bddf 	b.w	d4ce4 <HAL_I2C_Write_Data>

000d5126 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5126:	2100      	movs	r1, #0
   d5128:	7c00      	ldrb	r0, [r0, #16]
   d512a:	f7ff bde3 	b.w	d4cf4 <HAL_I2C_Available_Data>

000d512e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d512e:	2100      	movs	r1, #0
   d5130:	7c00      	ldrb	r0, [r0, #16]
   d5132:	f7ff bde7 	b.w	d4d04 <HAL_I2C_Read_Data>

000d5136 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5136:	2100      	movs	r1, #0
   d5138:	7c00      	ldrb	r0, [r0, #16]
   d513a:	f7ff bdeb 	b.w	d4d14 <HAL_I2C_Peek_Data>

000d513e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d513e:	2100      	movs	r1, #0
   d5140:	7c00      	ldrb	r0, [r0, #16]
   d5142:	f7ff bdef 	b.w	d4d24 <HAL_I2C_Flush_Data>

000d5146 <_ZN7TwoWireD0Ev>:
   d5146:	b510      	push	{r4, lr}
   d5148:	2114      	movs	r1, #20
   d514a:	4604      	mov	r4, r0
   d514c:	f000 fe6f 	bl	d5e2e <_ZdlPvj>
   d5150:	4620      	mov	r0, r4
   d5152:	bd10      	pop	{r4, pc}

000d5154 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5154:	b510      	push	{r4, lr}
   d5156:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5158:	2300      	movs	r3, #0
   d515a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d515c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5160:	60a3      	str	r3, [r4, #8]
   d5162:	4b04      	ldr	r3, [pc, #16]	; (d5174 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5164:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5166:	4608      	mov	r0, r1
   d5168:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d516a:	4611      	mov	r1, r2
   d516c:	f7ff fdea 	bl	d4d44 <HAL_I2C_Init>
}
   d5170:	4620      	mov	r0, r4
   d5172:	bd10      	pop	{r4, pc}
   d5174:	000d65f4 	.word	0x000d65f4

000d5178 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5178:	2300      	movs	r3, #0
   d517a:	461a      	mov	r2, r3
   d517c:	4619      	mov	r1, r3
   d517e:	7c00      	ldrb	r0, [r0, #16]
   d5180:	f7ff bd98 	b.w	d4cb4 <HAL_I2C_Begin>

000d5184 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5184:	b570      	push	{r4, r5, r6, lr}
   d5186:	460c      	mov	r4, r1
   d5188:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d518a:	2514      	movs	r5, #20
   d518c:	4606      	mov	r6, r0
   d518e:	462a      	mov	r2, r5
   d5190:	2100      	movs	r1, #0
   d5192:	a801      	add	r0, sp, #4
   d5194:	f001 f981 	bl	d649a <memset>
   d5198:	7823      	ldrb	r3, [r4, #0]
   d519a:	f88d 3008 	strb.w	r3, [sp, #8]
   d519e:	6863      	ldr	r3, [r4, #4]
   d51a0:	9303      	str	r3, [sp, #12]
   d51a2:	68e3      	ldr	r3, [r4, #12]
   d51a4:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d51a6:	2200      	movs	r2, #0
   d51a8:	7a23      	ldrb	r3, [r4, #8]
   d51aa:	7c30      	ldrb	r0, [r6, #16]
   d51ac:	f8ad 5004 	strh.w	r5, [sp, #4]
   d51b0:	a901      	add	r1, sp, #4
   d51b2:	9305      	str	r3, [sp, #20]
   d51b4:	f7ff fdce 	bl	d4d54 <HAL_I2C_Request_Data_Ex>
}
   d51b8:	b006      	add	sp, #24
   d51ba:	bd70      	pop	{r4, r5, r6, pc}

000d51bc <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d51bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d51be:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d51c0:	f88d 1000 	strb.w	r1, [sp]
   d51c4:	f04f 0164 	mov.w	r1, #100	; 0x64
   d51c8:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d51ca:	bf18      	it	ne
   d51cc:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d51ce:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d51d0:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d51d2:	f88d 3008 	strb.w	r3, [sp, #8]
   d51d6:	f7ff ffd5 	bl	d5184 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d51da:	b005      	add	sp, #20
   d51dc:	f85d fb04 	ldr.w	pc, [sp], #4

000d51e0 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d51e0:	2301      	movs	r3, #1
   d51e2:	f7ff bfeb 	b.w	d51bc <_ZN7TwoWire11requestFromEhjh>

000d51e6 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d51e6:	2200      	movs	r2, #0
   d51e8:	7c00      	ldrb	r0, [r0, #16]
   d51ea:	f7ff bd6b 	b.w	d4cc4 <HAL_I2C_Begin_Transmission>

000d51ee <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d51ee:	2200      	movs	r2, #0
   d51f0:	7c00      	ldrb	r0, [r0, #16]
   d51f2:	f7ff bd6f 	b.w	d4cd4 <HAL_I2C_End_Transmission>

000d51f6 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d51f6:	2101      	movs	r1, #1
   d51f8:	f7ff bff9 	b.w	d51ee <_ZN7TwoWire15endTransmissionEh>

000d51fc <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d51fc:	2100      	movs	r1, #0
   d51fe:	7c00      	ldrb	r0, [r0, #16]
   d5200:	f7ff bd98 	b.w	d4d34 <HAL_I2C_Is_Enabled>

000d5204 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5204:	4770      	bx	lr

000d5206 <_ZN9IPAddressD0Ev>:
   d5206:	b510      	push	{r4, lr}
   d5208:	2118      	movs	r1, #24
   d520a:	4604      	mov	r4, r0
   d520c:	f000 fe0f 	bl	d5e2e <_ZdlPvj>
   d5210:	4620      	mov	r0, r4
   d5212:	bd10      	pop	{r4, pc}

000d5214 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5214:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5216:	7d03      	ldrb	r3, [r0, #20]
   d5218:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d521a:	b08d      	sub	sp, #52	; 0x34
   d521c:	460e      	mov	r6, r1
   d521e:	f100 0704 	add.w	r7, r0, #4
   d5222:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5226:	d002      	beq.n	d522e <_ZNK9IPAddress7printToER5Print+0x1a>
   d5228:	f100 0508 	add.w	r5, r0, #8
   d522c:	e018      	b.n	d5260 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d522e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5230:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5232:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5236:	232f      	movs	r3, #47	; 0x2f
   d5238:	462a      	mov	r2, r5
   d523a:	200a      	movs	r0, #10
   d523c:	f7ff fd92 	bl	d4d64 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5240:	4628      	mov	r0, r5
   d5242:	f001 f95b 	bl	d64fc <strlen>
   d5246:	6833      	ldr	r3, [r6, #0]
   d5248:	4602      	mov	r2, r0
   d524a:	68db      	ldr	r3, [r3, #12]
   d524c:	4629      	mov	r1, r5
   d524e:	4630      	mov	r0, r6
   d5250:	4798      	blx	r3
   d5252:	e00f      	b.n	d5274 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5254:	b124      	cbz	r4, d5260 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5256:	212e      	movs	r1, #46	; 0x2e
   d5258:	4630      	mov	r0, r6
   d525a:	f000 f9d9 	bl	d5610 <_ZN5Print5printEc>
   d525e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5260:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5264:	220a      	movs	r2, #10
   d5266:	4630      	mov	r0, r6
   d5268:	f000 f9eb 	bl	d5642 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d526c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d526e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5270:	d1f0      	bne.n	d5254 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5272:	4620      	mov	r0, r4
    }
    return n;
}
   d5274:	b00d      	add	sp, #52	; 0x34
   d5276:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5278 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5278:	b510      	push	{r4, lr}
   d527a:	4b05      	ldr	r3, [pc, #20]	; (d5290 <_ZN9IPAddressC1Ev+0x18>)
   d527c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d527e:	2211      	movs	r2, #17
   d5280:	f840 3b04 	str.w	r3, [r0], #4
   d5284:	2100      	movs	r1, #0
   d5286:	f001 f908 	bl	d649a <memset>
{
    clear();
}
   d528a:	4620      	mov	r0, r4
   d528c:	bd10      	pop	{r4, pc}
   d528e:	bf00      	nop
   d5290:	000d661c 	.word	0x000d661c

000d5294 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5294:	4603      	mov	r3, r0
   d5296:	4a07      	ldr	r2, [pc, #28]	; (d52b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5298:	b510      	push	{r4, lr}
   d529a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d529e:	f101 0210 	add.w	r2, r1, #16
   d52a2:	f851 4b04 	ldr.w	r4, [r1], #4
   d52a6:	f843 4b04 	str.w	r4, [r3], #4
   d52aa:	4291      	cmp	r1, r2
   d52ac:	d1f9      	bne.n	d52a2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d52ae:	780a      	ldrb	r2, [r1, #0]
   d52b0:	701a      	strb	r2, [r3, #0]
}
   d52b2:	bd10      	pop	{r4, pc}
   d52b4:	000d661c 	.word	0x000d661c

000d52b8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d52b8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d52ba:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d52be:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d52c2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d52c6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d52ca:	2304      	movs	r3, #4
   d52cc:	6041      	str	r1, [r0, #4]
   d52ce:	7503      	strb	r3, [r0, #20]
   d52d0:	bd10      	pop	{r4, pc}

000d52d2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d52d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d52d4:	780d      	ldrb	r5, [r1, #0]
   d52d6:	788b      	ldrb	r3, [r1, #2]
   d52d8:	784a      	ldrb	r2, [r1, #1]
   d52da:	78c9      	ldrb	r1, [r1, #3]
   d52dc:	9100      	str	r1, [sp, #0]
   d52de:	4629      	mov	r1, r5
   d52e0:	f7ff ffea 	bl	d52b8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d52e4:	b003      	add	sp, #12
   d52e6:	bd30      	pop	{r4, r5, pc}

000d52e8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d52e8:	4b01      	ldr	r3, [pc, #4]	; (d52f0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d52ea:	4a02      	ldr	r2, [pc, #8]	; (d52f4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d52ec:	601a      	str	r2, [r3, #0]
   d52ee:	4770      	bx	lr
   d52f0:	2003e3e8 	.word	0x2003e3e8
   d52f4:	000d669b 	.word	0x000d669b

000d52f8 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d52f8:	2200      	movs	r2, #0
   d52fa:	4611      	mov	r1, r2
   d52fc:	6840      	ldr	r0, [r0, #4]
   d52fe:	f7ff be65 	b.w	d4fcc <network_listening>

000d5302 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5302:	2200      	movs	r2, #0
   d5304:	4611      	mov	r1, r2
   d5306:	6840      	ldr	r0, [r0, #4]
   d5308:	f7ff be70 	b.w	d4fec <network_get_listen_timeout>

000d530c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d530c:	2200      	movs	r2, #0
   d530e:	6840      	ldr	r0, [r0, #4]
   d5310:	f7ff be64 	b.w	d4fdc <network_set_listen_timeout>

000d5314 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5314:	2200      	movs	r2, #0
   d5316:	f081 0101 	eor.w	r1, r1, #1
   d531a:	6840      	ldr	r0, [r0, #4]
   d531c:	f7ff be4e 	b.w	d4fbc <network_listen>

000d5320 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5320:	2300      	movs	r3, #0
   d5322:	461a      	mov	r2, r3
   d5324:	2101      	movs	r1, #1
   d5326:	6840      	ldr	r0, [r0, #4]
   d5328:	f7ff be40 	b.w	d4fac <network_off>

000d532c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d532c:	2300      	movs	r3, #0
   d532e:	461a      	mov	r2, r3
   d5330:	4619      	mov	r1, r3
   d5332:	6840      	ldr	r0, [r0, #4]
   d5334:	f7ff be32 	b.w	d4f9c <network_on>

000d5338 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5338:	2200      	movs	r2, #0
   d533a:	4611      	mov	r1, r2
   d533c:	6840      	ldr	r0, [r0, #4]
   d533e:	f7ff be25 	b.w	d4f8c <network_ready>

000d5342 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5342:	2200      	movs	r2, #0
   d5344:	4611      	mov	r1, r2
   d5346:	6840      	ldr	r0, [r0, #4]
   d5348:	f7ff be10 	b.w	d4f6c <network_connecting>

000d534c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d534c:	2200      	movs	r2, #0
   d534e:	2102      	movs	r1, #2
   d5350:	6840      	ldr	r0, [r0, #4]
   d5352:	f7ff be13 	b.w	d4f7c <network_disconnect>

000d5356 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5356:	2300      	movs	r3, #0
   d5358:	461a      	mov	r2, r3
   d535a:	6840      	ldr	r0, [r0, #4]
   d535c:	f7ff bdfe 	b.w	d4f5c <network_connect>

000d5360 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5360:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5362:	4605      	mov	r5, r0
   d5364:	b188      	cbz	r0, d538a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5366:	6804      	ldr	r4, [r0, #0]
   d5368:	b14c      	cbz	r4, d537e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d536a:	68a3      	ldr	r3, [r4, #8]
   d536c:	b11b      	cbz	r3, d5376 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d536e:	2203      	movs	r2, #3
   d5370:	4621      	mov	r1, r4
   d5372:	4620      	mov	r0, r4
   d5374:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5376:	2110      	movs	r1, #16
   d5378:	4620      	mov	r0, r4
   d537a:	f000 fd58 	bl	d5e2e <_ZdlPvj>
   d537e:	4628      	mov	r0, r5
   d5380:	2114      	movs	r1, #20
      }
   d5382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5386:	f000 bd52 	b.w	d5e2e <_ZdlPvj>
   d538a:	bd38      	pop	{r3, r4, r5, pc}

000d538c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d538c:	b110      	cbz	r0, d5394 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d538e:	6803      	ldr	r3, [r0, #0]
   d5390:	685b      	ldr	r3, [r3, #4]
   d5392:	4718      	bx	r3
   d5394:	4770      	bx	lr

000d5396 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5396:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5398:	6803      	ldr	r3, [r0, #0]
   d539a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d539c:	b1bb      	cbz	r3, d53ce <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d539e:	6858      	ldr	r0, [r3, #4]
   d53a0:	f7ff fc10 	bl	d4bc4 <os_thread_is_current>
   d53a4:	b978      	cbnz	r0, d53c6 <_ZN6ThreadD1Ev+0x30>
   d53a6:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d53a8:	7c5a      	ldrb	r2, [r3, #17]
   d53aa:	b912      	cbnz	r2, d53b2 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d53ac:	6858      	ldr	r0, [r3, #4]
   d53ae:	f7ff fc11 	bl	d4bd4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d53b2:	6823      	ldr	r3, [r4, #0]
   d53b4:	6858      	ldr	r0, [r3, #4]
   d53b6:	f7ff fc15 	bl	d4be4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53ba:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d53bc:	2300      	movs	r3, #0
   d53be:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d53c0:	b128      	cbz	r0, d53ce <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d53c2:	f7ff ffcd 	bl	d5360 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d53c6:	6820      	ldr	r0, [r4, #0]
   d53c8:	b108      	cbz	r0, d53ce <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d53ca:	f7ff ffc9 	bl	d5360 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d53ce:	4620      	mov	r0, r4
   d53d0:	bd10      	pop	{r4, pc}

000d53d2 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d53d2:	b538      	push	{r3, r4, r5, lr}
   d53d4:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d53d6:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d53da:	b108      	cbz	r0, d53e0 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d53dc:	f7fe fe5d 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d53e0:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d53e4:	b108      	cbz	r0, d53ea <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d53e6:	f7ff fc0d 	bl	d4c04 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d53ea:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d53ee:	b135      	cbz	r5, d53fe <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d53f0:	4628      	mov	r0, r5
   d53f2:	f7ff ffd0 	bl	d5396 <_ZN6ThreadD1Ev>
   d53f6:	2104      	movs	r1, #4
   d53f8:	4628      	mov	r0, r5
   d53fa:	f000 fd18 	bl	d5e2e <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d53fe:	6820      	ldr	r0, [r4, #0]
   d5400:	b108      	cbz	r0, d5406 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5402:	f7ff ffc3 	bl	d538c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5406:	4620      	mov	r0, r4
   d5408:	bd38      	pop	{r3, r4, r5, pc}
	...

000d540c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d540c:	b510      	push	{r4, lr}
   d540e:	4b04      	ldr	r3, [pc, #16]	; (d5420 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5410:	4604      	mov	r4, r0
   d5412:	f840 3b08 	str.w	r3, [r0], #8
   d5416:	f7ff ffdc 	bl	d53d2 <_ZN5spark11MeshPublishD1Ev>
   d541a:	4620      	mov	r0, r4
   d541c:	bd10      	pop	{r4, pc}
   d541e:	bf00      	nop
   d5420:	000d6714 	.word	0x000d6714

000d5424 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5424:	b538      	push	{r3, r4, r5, lr}
   d5426:	4c0e      	ldr	r4, [pc, #56]	; (d5460 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5428:	4b0e      	ldr	r3, [pc, #56]	; (d5464 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d542a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d542c:	2500      	movs	r5, #0
   d542e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5430:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5434:	6063      	str	r3, [r4, #4]
   d5436:	60a5      	str	r5, [r4, #8]
   d5438:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d543c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5440:	f7ff fbd8 	bl	d4bf4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5444:	4b08      	ldr	r3, [pc, #32]	; (d5468 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5446:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d544a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d544e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5450:	4620      	mov	r0, r4
   d5452:	4a06      	ldr	r2, [pc, #24]	; (d546c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5454:	4906      	ldr	r1, [pc, #24]	; (d5470 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5456:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d545a:	f000 bce3 	b.w	d5e24 <__aeabi_atexit>
   d545e:	bf00      	nop
   d5460:	2003e3ec 	.word	0x2003e3ec
   d5464:	000d6748 	.word	0x000d6748
   d5468:	000d6714 	.word	0x000d6714
   d546c:	2003e298 	.word	0x2003e298
   d5470:	000d540d 	.word	0x000d540d

000d5474 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5474:	2300      	movs	r3, #0
   d5476:	461a      	mov	r2, r3
   d5478:	6840      	ldr	r0, [r0, #4]
   d547a:	f7ff bd6f 	b.w	d4f5c <network_connect>

000d547e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d547e:	2200      	movs	r2, #0
   d5480:	2102      	movs	r1, #2
   d5482:	6840      	ldr	r0, [r0, #4]
   d5484:	f7ff bd7a 	b.w	d4f7c <network_disconnect>

000d5488 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5488:	2200      	movs	r2, #0
   d548a:	4611      	mov	r1, r2
   d548c:	6840      	ldr	r0, [r0, #4]
   d548e:	f7ff bd6d 	b.w	d4f6c <network_connecting>

000d5492 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5492:	2200      	movs	r2, #0
   d5494:	4611      	mov	r1, r2
   d5496:	6840      	ldr	r0, [r0, #4]
   d5498:	f7ff bd78 	b.w	d4f8c <network_ready>

000d549c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d549c:	2300      	movs	r3, #0
   d549e:	461a      	mov	r2, r3
   d54a0:	4619      	mov	r1, r3
   d54a2:	6840      	ldr	r0, [r0, #4]
   d54a4:	f7ff bd7a 	b.w	d4f9c <network_on>

000d54a8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d54a8:	2300      	movs	r3, #0
   d54aa:	461a      	mov	r2, r3
   d54ac:	4619      	mov	r1, r3
   d54ae:	6840      	ldr	r0, [r0, #4]
   d54b0:	f7ff bd7c 	b.w	d4fac <network_off>

000d54b4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d54b4:	2200      	movs	r2, #0
   d54b6:	f081 0101 	eor.w	r1, r1, #1
   d54ba:	6840      	ldr	r0, [r0, #4]
   d54bc:	f7ff bd7e 	b.w	d4fbc <network_listen>

000d54c0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d54c0:	2200      	movs	r2, #0
   d54c2:	6840      	ldr	r0, [r0, #4]
   d54c4:	f7ff bd8a 	b.w	d4fdc <network_set_listen_timeout>

000d54c8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d54c8:	2200      	movs	r2, #0
   d54ca:	4611      	mov	r1, r2
   d54cc:	6840      	ldr	r0, [r0, #4]
   d54ce:	f7ff bd8d 	b.w	d4fec <network_get_listen_timeout>

000d54d2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d54d2:	2200      	movs	r2, #0
   d54d4:	4611      	mov	r1, r2
   d54d6:	6840      	ldr	r0, [r0, #4]
   d54d8:	f7ff bd78 	b.w	d4fcc <network_listening>

000d54dc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d54dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d54e0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d54e2:	b095      	sub	sp, #84	; 0x54
   d54e4:	4616      	mov	r6, r2
   d54e6:	460d      	mov	r5, r1
   d54e8:	4607      	mov	r7, r0
    IPAddress addr;
   d54ea:	f7ff fec5 	bl	d5278 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d54ee:	4621      	mov	r1, r4
   d54f0:	2220      	movs	r2, #32
   d54f2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d54f4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d54f6:	f000 ffd0 	bl	d649a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d54fa:	2340      	movs	r3, #64	; 0x40
   d54fc:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d54fe:	4621      	mov	r1, r4
   d5500:	466b      	mov	r3, sp
   d5502:	aa0c      	add	r2, sp, #48	; 0x30
   d5504:	4630      	mov	r0, r6
   d5506:	f7ff fc3d 	bl	d4d84 <netdb_getaddrinfo>
    if (!r) {
   d550a:	4604      	mov	r4, r0
   d550c:	2800      	cmp	r0, #0
   d550e:	d144      	bne.n	d559a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5510:	4602      	mov	r2, r0
   d5512:	2101      	movs	r1, #1
   d5514:	6868      	ldr	r0, [r5, #4]
   d5516:	f7ff fd39 	bl	d4f8c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d551a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d551c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d551e:	4622      	mov	r2, r4
   d5520:	6868      	ldr	r0, [r5, #4]
   d5522:	f7ff fd33 	bl	d4f8c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5526:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5528:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d552a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d552c:	2e00      	cmp	r6, #0
   d552e:	d034      	beq.n	d559a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5530:	2900      	cmp	r1, #0
   d5532:	d132      	bne.n	d559a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5534:	6873      	ldr	r3, [r6, #4]
   d5536:	2b02      	cmp	r3, #2
   d5538:	d002      	beq.n	d5540 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d553a:	2b0a      	cmp	r3, #10
   d553c:	d009      	beq.n	d5552 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d553e:	e02a      	b.n	d5596 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5540:	f1b8 0f00 	cmp.w	r8, #0
   d5544:	d027      	beq.n	d5596 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5546:	6971      	ldr	r1, [r6, #20]
   d5548:	4638      	mov	r0, r7
   d554a:	3104      	adds	r1, #4
   d554c:	f7ff fec1 	bl	d52d2 <_ZN9IPAddressaSEPKh>
   d5550:	e020      	b.n	d5594 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5552:	f1b9 0f00 	cmp.w	r9, #0
   d5556:	d01e      	beq.n	d5596 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5558:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d555a:	2211      	movs	r2, #17
   d555c:	a801      	add	r0, sp, #4
   d555e:	f000 ff9c 	bl	d649a <memset>
                    a.v = 6;
   d5562:	2306      	movs	r3, #6
   d5564:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5568:	ad01      	add	r5, sp, #4
   d556a:	f104 0308 	add.w	r3, r4, #8
   d556e:	3418      	adds	r4, #24
   d5570:	6818      	ldr	r0, [r3, #0]
   d5572:	6859      	ldr	r1, [r3, #4]
   d5574:	462a      	mov	r2, r5
   d5576:	c203      	stmia	r2!, {r0, r1}
   d5578:	3308      	adds	r3, #8
   d557a:	42a3      	cmp	r3, r4
   d557c:	4615      	mov	r5, r2
   d557e:	d1f7      	bne.n	d5570 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5580:	a901      	add	r1, sp, #4
   d5582:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5584:	ad07      	add	r5, sp, #28
   d5586:	f7ff fe85 	bl	d5294 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d558a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d558c:	1d3c      	adds	r4, r7, #4
   d558e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5590:	682b      	ldr	r3, [r5, #0]
   d5592:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5594:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5596:	69f6      	ldr	r6, [r6, #28]
   d5598:	e7c8      	b.n	d552c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d559a:	9800      	ldr	r0, [sp, #0]
   d559c:	f7ff fbea 	bl	d4d74 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d55a0:	4638      	mov	r0, r7
   d55a2:	b015      	add	sp, #84	; 0x54
   d55a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d55a8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d55a8:	4b02      	ldr	r3, [pc, #8]	; (d55b4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d55aa:	4a03      	ldr	r2, [pc, #12]	; (d55b8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d55ac:	601a      	str	r2, [r3, #0]
   d55ae:	2200      	movs	r2, #0
   d55b0:	605a      	str	r2, [r3, #4]
   d55b2:	4770      	bx	lr
   d55b4:	2003e5c0 	.word	0x2003e5c0
   d55b8:	000d6748 	.word	0x000d6748

000d55bc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d55bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d55be:	4606      	mov	r6, r0
   d55c0:	460d      	mov	r5, r1
   d55c2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d55c4:	2400      	movs	r4, #0
  while (size--) {
   d55c6:	42bd      	cmp	r5, r7
   d55c8:	d00c      	beq.n	d55e4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d55ca:	6833      	ldr	r3, [r6, #0]
   d55cc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d55d0:	689b      	ldr	r3, [r3, #8]
   d55d2:	4630      	mov	r0, r6
   d55d4:	4798      	blx	r3
     if (chunk>=0)
   d55d6:	2800      	cmp	r0, #0
   d55d8:	db01      	blt.n	d55de <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d55da:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d55dc:	e7f3      	b.n	d55c6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d55de:	2c00      	cmp	r4, #0
   d55e0:	bf08      	it	eq
   d55e2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d55e4:	4620      	mov	r0, r4
   d55e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d55e8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d55e8:	b570      	push	{r4, r5, r6, lr}
   d55ea:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d55ec:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d55ee:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d55f0:	b149      	cbz	r1, d5606 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d55f2:	f000 ff83 	bl	d64fc <strlen>
   d55f6:	682b      	ldr	r3, [r5, #0]
   d55f8:	4602      	mov	r2, r0
   d55fa:	4621      	mov	r1, r4
   d55fc:	4628      	mov	r0, r5
   d55fe:	68db      	ldr	r3, [r3, #12]
    }
   d5600:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5604:	4718      	bx	r3
    }
   d5606:	bd70      	pop	{r4, r5, r6, pc}

000d5608 <_ZN5Print5printEPKc>:
   d5608:	b508      	push	{r3, lr}
   d560a:	f7ff ffed 	bl	d55e8 <_ZN5Print5writeEPKc>
   d560e:	bd08      	pop	{r3, pc}

000d5610 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5610:	6803      	ldr	r3, [r0, #0]
   d5612:	689b      	ldr	r3, [r3, #8]
   d5614:	4718      	bx	r3

000d5616 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5616:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5618:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d561a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d561c:	f7ff fff8 	bl	d5610 <_ZN5Print5printEc>
  n += print('\n');
   d5620:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5622:	4604      	mov	r4, r0
  n += print('\n');
   d5624:	4628      	mov	r0, r5
   d5626:	f7ff fff3 	bl	d5610 <_ZN5Print5printEc>
  return n;
}
   d562a:	4420      	add	r0, r4
   d562c:	bd38      	pop	{r3, r4, r5, pc}

000d562e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d562e:	b538      	push	{r3, r4, r5, lr}
   d5630:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5632:	f7ff ffd9 	bl	d55e8 <_ZN5Print5writeEPKc>
   d5636:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5638:	4628      	mov	r0, r5
   d563a:	f7ff ffec 	bl	d5616 <_ZN5Print7printlnEv>
  return n;
}
   d563e:	4420      	add	r0, r4
   d5640:	bd38      	pop	{r3, r4, r5, pc}

000d5642 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5642:	b530      	push	{r4, r5, lr}
   d5644:	b08b      	sub	sp, #44	; 0x2c
   d5646:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5648:	2100      	movs	r1, #0
   d564a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d564e:	2a01      	cmp	r2, #1
   d5650:	bf98      	it	ls
   d5652:	220a      	movls	r2, #10
   d5654:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5658:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d565c:	fb05 3312 	mls	r3, r5, r2, r3
   d5660:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5664:	2b09      	cmp	r3, #9
   d5666:	bf94      	ite	ls
   d5668:	3330      	addls	r3, #48	; 0x30
   d566a:	3337      	addhi	r3, #55	; 0x37
   d566c:	b2db      	uxtb	r3, r3
   d566e:	4621      	mov	r1, r4
   d5670:	f804 3901 	strb.w	r3, [r4], #-1
   d5674:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5676:	2d00      	cmp	r5, #0
   d5678:	d1ee      	bne.n	d5658 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d567a:	f7ff ffb5 	bl	d55e8 <_ZN5Print5writeEPKc>
}
   d567e:	b00b      	add	sp, #44	; 0x2c
   d5680:	bd30      	pop	{r4, r5, pc}

000d5682 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5682:	b40c      	push	{r2, r3}
   d5684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5688:	b087      	sub	sp, #28
   d568a:	af00      	add	r7, sp, #0
   d568c:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d5690:	4605      	mov	r5, r0
   d5692:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d5696:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5698:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d569a:	4623      	mov	r3, r4
   d569c:	464a      	mov	r2, r9
   d569e:	2114      	movs	r1, #20
   d56a0:	1d38      	adds	r0, r7, #4
   d56a2:	f7ff fcbb 	bl	d501c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d56a6:	2813      	cmp	r0, #19
   d56a8:	d805      	bhi.n	d56b6 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d56aa:	1d39      	adds	r1, r7, #4
   d56ac:	4628      	mov	r0, r5
   d56ae:	f7ff ff9b 	bl	d55e8 <_ZN5Print5writeEPKc>
   d56b2:	4604      	mov	r4, r0
   d56b4:	e013      	b.n	d56de <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d56b6:	f100 0308 	add.w	r3, r0, #8
   d56ba:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d56be:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d56c0:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d56c4:	1c41      	adds	r1, r0, #1
   d56c6:	4623      	mov	r3, r4
   d56c8:	464a      	mov	r2, r9
   d56ca:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d56cc:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d56ce:	f7ff fca5 	bl	d501c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d56d2:	4669      	mov	r1, sp
   d56d4:	4628      	mov	r0, r5
   d56d6:	f7ff ff87 	bl	d55e8 <_ZN5Print5writeEPKc>
   d56da:	4604      	mov	r4, r0
   d56dc:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d56de:	b11e      	cbz	r6, d56e8 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d56e0:	4628      	mov	r0, r5
   d56e2:	f7ff ff98 	bl	d5616 <_ZN5Print7printlnEv>
   d56e6:	4404      	add	r4, r0
    return n;
}
   d56e8:	4620      	mov	r0, r4
   d56ea:	371c      	adds	r7, #28
   d56ec:	46bd      	mov	sp, r7
   d56ee:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d56f2:	b002      	add	sp, #8
   d56f4:	4770      	bx	lr

000d56f6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d56f6:	b510      	push	{r4, lr}
   d56f8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d56fa:	f7ff fcb7 	bl	d506c <_ZNSt14_Function_baseD1Ev>
   d56fe:	4620      	mov	r0, r4
   d5700:	bd10      	pop	{r4, pc}
	...

000d5704 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5704:	4803      	ldr	r0, [pc, #12]	; (d5714 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5706:	4a04      	ldr	r2, [pc, #16]	; (d5718 <_GLOBAL__sub_I_RGB+0x14>)
   d5708:	4904      	ldr	r1, [pc, #16]	; (d571c <_GLOBAL__sub_I_RGB+0x18>)
   d570a:	2300      	movs	r3, #0
   d570c:	6083      	str	r3, [r0, #8]
   d570e:	f000 bb89 	b.w	d5e24 <__aeabi_atexit>
   d5712:	bf00      	nop
   d5714:	2003e5c8 	.word	0x2003e5c8
   d5718:	2003e298 	.word	0x2003e298
   d571c:	000d56f7 	.word	0x000d56f7

000d5720 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d5720:	2100      	movs	r1, #0
   d5722:	f7ff bb67 	b.w	d4df4 <HAL_SPI_Acquire>

000d5726 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d5726:	2100      	movs	r1, #0
   d5728:	f7ff bb6c 	b.w	d4e04 <HAL_SPI_Release>

000d572c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d572c:	b510      	push	{r4, lr}
   d572e:	4604      	mov	r4, r0
{
    _spi = spi;
   d5730:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d5732:	4608      	mov	r0, r1
   d5734:	f7ff fb3e 	bl	d4db4 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5738:	2300      	movs	r3, #0
   d573a:	6063      	str	r3, [r4, #4]
}
   d573c:	4620      	mov	r0, r4
   d573e:	bd10      	pop	{r4, pc}

000d5740 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5740:	b510      	push	{r4, lr}
   d5742:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5744:	7800      	ldrb	r0, [r0, #0]
   d5746:	f7ff ffeb 	bl	d5720 <_ZN8SPIClass4lockEv.isra.0>
   d574a:	b948      	cbnz	r0, d5760 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d574c:	7820      	ldrb	r0, [r4, #0]
   d574e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5752:	f7ff fb1f 	bl	d4d94 <HAL_SPI_Begin>
        unlock();
   d5756:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d575c:	f7ff bfe3 	b.w	d5726 <_ZN8SPIClass6unlockEv.isra.1>
   d5760:	bd10      	pop	{r4, pc}

000d5762 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d5762:	7800      	ldrb	r0, [r0, #0]
   d5764:	f7ff bfdf 	b.w	d5726 <_ZN8SPIClass6unlockEv.isra.1>

000d5768 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5768:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d576a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d576c:	6018      	str	r0, [r3, #0]
   d576e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5770:	6818      	ldr	r0, [r3, #0]
   d5772:	4288      	cmp	r0, r1
   d5774:	b2e5      	uxtb	r5, r4
   d5776:	d906      	bls.n	d5786 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5778:	3401      	adds	r4, #1
   d577a:	2c08      	cmp	r4, #8
   d577c:	d002      	beq.n	d5784 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d577e:	0840      	lsrs	r0, r0, #1
   d5780:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d5782:	e7f5      	b.n	d5770 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5784:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d5786:	4b02      	ldr	r3, [pc, #8]	; (d5790 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5788:	5d5b      	ldrb	r3, [r3, r5]
   d578a:	7013      	strb	r3, [r2, #0]
   d578c:	bd30      	pop	{r4, r5, pc}
   d578e:	bf00      	nop
   d5790:	000d6774 	.word	0x000d6774

000d5794 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d5794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5798:	4607      	mov	r7, r0
   d579a:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d579c:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d579e:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d57a0:	f7ff ffbe 	bl	d5720 <_ZN8SPIClass4lockEv.isra.0>
   d57a4:	2800      	cmp	r0, #0
   d57a6:	db62      	blt.n	d586e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d57a8:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d57aa:	2214      	movs	r2, #20
   d57ac:	2100      	movs	r1, #0
   d57ae:	a809      	add	r0, sp, #36	; 0x24
   d57b0:	f000 fe73 	bl	d649a <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d57b4:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d57b6:	4620      	mov	r0, r4
   d57b8:	2200      	movs	r2, #0
   d57ba:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d57bc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d57c0:	f7ff fb08 	bl	d4dd4 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d57c4:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d57c8:	b154      	cbz	r4, d57e0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d57ca:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d57ce:	b935      	cbnz	r5, d57de <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d57d0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d57d4:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d57d8:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d57dc:	e003      	b.n	d57e6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d57de:	2400      	movs	r4, #0
   d57e0:	46a1      	mov	r9, r4
   d57e2:	46a0      	mov	r8, r4
   d57e4:	2501      	movs	r5, #1
   d57e6:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d57e8:	b105      	cbz	r5, d57ec <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d57ea:	b9bb      	cbnz	r3, d581c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d57ec:	429d      	cmp	r5, r3
   d57ee:	d10b      	bne.n	d5808 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d57f0:	68b2      	ldr	r2, [r6, #8]
   d57f2:	4542      	cmp	r2, r8
   d57f4:	d108      	bne.n	d5808 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d57f6:	f88d 9020 	strb.w	r9, [sp, #32]
   d57fa:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d57fe:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d5802:	89b2      	ldrh	r2, [r6, #12]
   d5804:	4291      	cmp	r1, r2
   d5806:	d009      	beq.n	d581c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d5808:	b153      	cbz	r3, d5820 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d580a:	2400      	movs	r4, #0
   d580c:	7838      	ldrb	r0, [r7, #0]
   d580e:	9401      	str	r4, [sp, #4]
   d5810:	9400      	str	r4, [sp, #0]
   d5812:	4623      	mov	r3, r4
   d5814:	4622      	mov	r2, r4
   d5816:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d5818:	f7ff fae4 	bl	d4de4 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d581c:	2000      	movs	r0, #0
   d581e:	e026      	b.n	d586e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d5820:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d5824:	68b1      	ldr	r1, [r6, #8]
   d5826:	980a      	ldr	r0, [sp, #40]	; 0x28
   d5828:	ab04      	add	r3, sp, #16
   d582a:	f10d 020f 	add.w	r2, sp, #15
   d582e:	f7ff ff9b 	bl	d5768 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d5832:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d5834:	b105      	cbz	r5, d5838 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d5836:	b9b1      	cbnz	r1, d5866 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d5838:	42a9      	cmp	r1, r5
   d583a:	d008      	beq.n	d584e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d583c:	2400      	movs	r4, #0
   d583e:	7838      	ldrb	r0, [r7, #0]
   d5840:	9401      	str	r4, [sp, #4]
   d5842:	7b74      	ldrb	r4, [r6, #13]
   d5844:	7b33      	ldrb	r3, [r6, #12]
   d5846:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d584a:	9400      	str	r4, [sp, #0]
   d584c:	e7e4      	b.n	d5818 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d584e:	68b3      	ldr	r3, [r6, #8]
   d5850:	4543      	cmp	r3, r8
   d5852:	d3f3      	bcc.n	d583c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d5854:	f88d 9020 	strb.w	r9, [sp, #32]
   d5858:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d585c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5860:	89b3      	ldrh	r3, [r6, #12]
   d5862:	429a      	cmp	r2, r3
   d5864:	d1ea      	bne.n	d583c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d5866:	9b04      	ldr	r3, [sp, #16]
   d5868:	4543      	cmp	r3, r8
   d586a:	d1e7      	bne.n	d583c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d586c:	e7d6      	b.n	d581c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d586e:	b00f      	add	sp, #60	; 0x3c
   d5870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5874 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5874:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d5876:	7800      	ldrb	r0, [r0, #0]
   d5878:	f7ff fa94 	bl	d4da4 <HAL_SPI_Send_Receive_Data>
}
   d587c:	b2c0      	uxtb	r0, r0
   d587e:	bd08      	pop	{r3, pc}

000d5880 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d5880:	7800      	ldrb	r0, [r0, #0]
   d5882:	f7ff ba9f 	b.w	d4dc4 <HAL_SPI_Is_Enabled>
	...

000d5888 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5888:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d588a:	4c09      	ldr	r4, [pc, #36]	; (d58b0 <_GLOBAL__sub_I_System+0x28>)
   d588c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d588e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5892:	6020      	str	r0, [r4, #0]
   d5894:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5896:	71a0      	strb	r0, [r4, #6]
   d5898:	8120      	strh	r0, [r4, #8]
   d589a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d589c:	f7ff fb32 	bl	d4f04 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d58a0:	4620      	mov	r0, r4
   d58a2:	4a04      	ldr	r2, [pc, #16]	; (d58b4 <_GLOBAL__sub_I_System+0x2c>)
   d58a4:	4904      	ldr	r1, [pc, #16]	; (d58b8 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d58a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d58aa:	f000 babb 	b.w	d5e24 <__aeabi_atexit>
   d58ae:	bf00      	nop
   d58b0:	2003e5d8 	.word	0x2003e5d8
   d58b4:	2003e298 	.word	0x2003e298
   d58b8:	000d412d 	.word	0x000d412d

000d58bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d58bc:	4b02      	ldr	r3, [pc, #8]	; (d58c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d58be:	681a      	ldr	r2, [r3, #0]
   d58c0:	4b02      	ldr	r3, [pc, #8]	; (d58cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d58c2:	601a      	str	r2, [r3, #0]
   d58c4:	4770      	bx	lr
   d58c6:	bf00      	nop
   d58c8:	2003e230 	.word	0x2003e230
   d58cc:	2003e5e4 	.word	0x2003e5e4

000d58d0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d58d0:	4770      	bx	lr

000d58d2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d58d2:	7441      	strb	r1, [r0, #17]
   d58d4:	4770      	bx	lr

000d58d6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d58d6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d58d8:	7c00      	ldrb	r0, [r0, #16]
   d58da:	f7ff fad3 	bl	d4e84 <HAL_USART_Available_Data_For_Write>
}
   d58de:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d58e2:	bd08      	pop	{r3, pc}

000d58e4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d58e4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d58e6:	7c00      	ldrb	r0, [r0, #16]
   d58e8:	f7ff faa4 	bl	d4e34 <HAL_USART_Available_Data>
}
   d58ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d58f0:	bd08      	pop	{r3, pc}

000d58f2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d58f2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d58f4:	7c00      	ldrb	r0, [r0, #16]
   d58f6:	f7ff faad 	bl	d4e54 <HAL_USART_Peek_Data>
}
   d58fa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d58fe:	bf28      	it	cs
   d5900:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5904:	bd08      	pop	{r3, pc}

000d5906 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5906:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5908:	7c00      	ldrb	r0, [r0, #16]
   d590a:	f7ff fa9b 	bl	d4e44 <HAL_USART_Read_Data>
}
   d590e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5912:	bf28      	it	cs
   d5914:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5918:	bd08      	pop	{r3, pc}

000d591a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d591a:	7c00      	ldrb	r0, [r0, #16]
   d591c:	f7ff baa2 	b.w	d4e64 <HAL_USART_Flush_Data>

000d5920 <_ZN11USARTSerialD0Ev>:
   d5920:	b510      	push	{r4, lr}
   d5922:	2114      	movs	r1, #20
   d5924:	4604      	mov	r4, r0
   d5926:	f000 fa82 	bl	d5e2e <_ZdlPvj>
   d592a:	4620      	mov	r0, r4
   d592c:	bd10      	pop	{r4, pc}

000d592e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d592e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5930:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5932:	4604      	mov	r4, r0
   d5934:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5936:	b925      	cbnz	r5, d5942 <_ZN11USARTSerial5writeEh+0x14>
   d5938:	7c00      	ldrb	r0, [r0, #16]
   d593a:	f7ff faa3 	bl	d4e84 <HAL_USART_Available_Data_For_Write>
   d593e:	2800      	cmp	r0, #0
   d5940:	dd05      	ble.n	d594e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5942:	4631      	mov	r1, r6
   d5944:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5946:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d594a:	f7ff ba6b 	b.w	d4e24 <HAL_USART_Write_Data>
  }
  return 0;
}
   d594e:	4628      	mov	r0, r5
   d5950:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5954 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5954:	b510      	push	{r4, lr}
   d5956:	4604      	mov	r4, r0
   d5958:	4608      	mov	r0, r1
   d595a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d595c:	2200      	movs	r2, #0
   d595e:	6062      	str	r2, [r4, #4]
   d5960:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5964:	60a2      	str	r2, [r4, #8]
   d5966:	4a05      	ldr	r2, [pc, #20]	; (d597c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5968:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d596a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d596c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d596e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5970:	461a      	mov	r2, r3
   d5972:	f7ff fa4f 	bl	d4e14 <HAL_USART_Init>
}
   d5976:	4620      	mov	r0, r4
   d5978:	bd10      	pop	{r4, pc}
   d597a:	bf00      	nop
   d597c:	000d67b0 	.word	0x000d67b0

000d5980 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5980:	7c00      	ldrb	r0, [r0, #16]
   d5982:	f7ff ba77 	b.w	d4e74 <HAL_USART_Is_Enabled>
	...

000d5988 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5988:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d598a:	4d0c      	ldr	r5, [pc, #48]	; (d59bc <_Z22__fetch_global_Serial1v+0x34>)
   d598c:	6829      	ldr	r1, [r5, #0]
   d598e:	f011 0401 	ands.w	r4, r1, #1
   d5992:	d111      	bne.n	d59b8 <_Z22__fetch_global_Serial1v+0x30>
   d5994:	4628      	mov	r0, r5
   d5996:	f7fe fb82 	bl	d409e <__cxa_guard_acquire>
   d599a:	b168      	cbz	r0, d59b8 <_Z22__fetch_global_Serial1v+0x30>
   d599c:	4a08      	ldr	r2, [pc, #32]	; (d59c0 <_Z22__fetch_global_Serial1v+0x38>)
   d599e:	4b09      	ldr	r3, [pc, #36]	; (d59c4 <_Z22__fetch_global_Serial1v+0x3c>)
   d59a0:	4809      	ldr	r0, [pc, #36]	; (d59c8 <_Z22__fetch_global_Serial1v+0x40>)
   d59a2:	4621      	mov	r1, r4
   d59a4:	f7ff ffd6 	bl	d5954 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d59a8:	4628      	mov	r0, r5
   d59aa:	f7fe fb7d 	bl	d40a8 <__cxa_guard_release>
   d59ae:	4a07      	ldr	r2, [pc, #28]	; (d59cc <_Z22__fetch_global_Serial1v+0x44>)
   d59b0:	4907      	ldr	r1, [pc, #28]	; (d59d0 <_Z22__fetch_global_Serial1v+0x48>)
   d59b2:	4805      	ldr	r0, [pc, #20]	; (d59c8 <_Z22__fetch_global_Serial1v+0x40>)
   d59b4:	f000 fa36 	bl	d5e24 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d59b8:	4803      	ldr	r0, [pc, #12]	; (d59c8 <_Z22__fetch_global_Serial1v+0x40>)
   d59ba:	bd38      	pop	{r3, r4, r5, pc}
   d59bc:	2003e680 	.word	0x2003e680
   d59c0:	2003e684 	.word	0x2003e684
   d59c4:	2003e5fc 	.word	0x2003e5fc
   d59c8:	2003e5e8 	.word	0x2003e5e8
   d59cc:	2003e298 	.word	0x2003e298
   d59d0:	000d58d1 	.word	0x000d58d1

000d59d4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d59d4:	7441      	strb	r1, [r0, #17]
   d59d6:	4770      	bx	lr

000d59d8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d59d8:	4770      	bx	lr

000d59da <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d59da:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d59dc:	2100      	movs	r1, #0
   d59de:	7c00      	ldrb	r0, [r0, #16]
   d59e0:	f7ff fa78 	bl	d4ed4 <HAL_USB_USART_Receive_Data>
}
   d59e4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d59e8:	bf28      	it	cs
   d59ea:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d59ee:	bd08      	pop	{r3, pc}

000d59f0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d59f0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d59f2:	2101      	movs	r1, #1
   d59f4:	7c00      	ldrb	r0, [r0, #16]
   d59f6:	f7ff fa6d 	bl	d4ed4 <HAL_USB_USART_Receive_Data>
}
   d59fa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d59fe:	bf28      	it	cs
   d5a00:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5a04:	bd08      	pop	{r3, pc}

000d5a06 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5a06:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5a08:	7c00      	ldrb	r0, [r0, #16]
   d5a0a:	f7ff fa5b 	bl	d4ec4 <HAL_USB_USART_Available_Data_For_Write>
}
   d5a0e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5a12:	bd08      	pop	{r3, pc}

000d5a14 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5a14:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5a16:	7c00      	ldrb	r0, [r0, #16]
   d5a18:	f7ff fa4c 	bl	d4eb4 <HAL_USB_USART_Available_Data>
}
   d5a1c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5a20:	bd08      	pop	{r3, pc}

000d5a22 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5a22:	7c00      	ldrb	r0, [r0, #16]
   d5a24:	f7ff ba66 	b.w	d4ef4 <HAL_USB_USART_Flush_Data>

000d5a28 <_ZN9USBSerialD0Ev>:
   d5a28:	b510      	push	{r4, lr}
   d5a2a:	2114      	movs	r1, #20
   d5a2c:	4604      	mov	r4, r0
   d5a2e:	f000 f9fe 	bl	d5e2e <_ZdlPvj>
   d5a32:	4620      	mov	r0, r4
   d5a34:	bd10      	pop	{r4, pc}

000d5a36 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5a36:	b538      	push	{r3, r4, r5, lr}
   d5a38:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5a3a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5a3c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5a3e:	f7ff fa41 	bl	d4ec4 <HAL_USB_USART_Available_Data_For_Write>
   d5a42:	2800      	cmp	r0, #0
   d5a44:	dc01      	bgt.n	d5a4a <_ZN9USBSerial5writeEh+0x14>
   d5a46:	7c60      	ldrb	r0, [r4, #17]
   d5a48:	b128      	cbz	r0, d5a56 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5a4a:	4629      	mov	r1, r5
   d5a4c:	7c20      	ldrb	r0, [r4, #16]
   d5a4e:	f7ff fa49 	bl	d4ee4 <HAL_USB_USART_Send_Data>
   d5a52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5a56:	bd38      	pop	{r3, r4, r5, pc}

000d5a58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5a58:	b510      	push	{r4, lr}
   d5a5a:	4604      	mov	r4, r0
   d5a5c:	2300      	movs	r3, #0
   d5a5e:	6063      	str	r3, [r4, #4]
   d5a60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5a64:	60a3      	str	r3, [r4, #8]
   d5a66:	4b05      	ldr	r3, [pc, #20]	; (d5a7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5a68:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5a6a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5a6c:	4608      	mov	r0, r1
{
  _serial = serial;
   d5a6e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5a70:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5a72:	4611      	mov	r1, r2
   d5a74:	f7ff fa0e 	bl	d4e94 <HAL_USB_USART_Init>
}
   d5a78:	4620      	mov	r0, r4
   d5a7a:	bd10      	pop	{r4, pc}
   d5a7c:	000d67e0 	.word	0x000d67e0

000d5a80 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5a80:	2200      	movs	r2, #0
   d5a82:	7c00      	ldrb	r0, [r0, #16]
   d5a84:	f7ff ba0e 	b.w	d4ea4 <HAL_USB_USART_Begin>

000d5a88 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5a88:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5a8a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5a8c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5a8e:	2100      	movs	r1, #0
   d5a90:	f000 fd03 	bl	d649a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5a94:	4620      	mov	r0, r4
   d5a96:	bd10      	pop	{r4, pc}

000d5a98 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5a98:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5a9a:	4d0e      	ldr	r5, [pc, #56]	; (d5ad4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5a9c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5a9e:	a801      	add	r0, sp, #4
   d5aa0:	f7ff fff2 	bl	d5a88 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5aa4:	6829      	ldr	r1, [r5, #0]
   d5aa6:	f011 0401 	ands.w	r4, r1, #1
   d5aaa:	d110      	bne.n	d5ace <_Z16_fetch_usbserialv+0x36>
   d5aac:	4628      	mov	r0, r5
   d5aae:	f7fe faf6 	bl	d409e <__cxa_guard_acquire>
   d5ab2:	b160      	cbz	r0, d5ace <_Z16_fetch_usbserialv+0x36>
   d5ab4:	aa01      	add	r2, sp, #4
   d5ab6:	4621      	mov	r1, r4
   d5ab8:	4807      	ldr	r0, [pc, #28]	; (d5ad8 <_Z16_fetch_usbserialv+0x40>)
   d5aba:	f7ff ffcd 	bl	d5a58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5abe:	4628      	mov	r0, r5
   d5ac0:	f7fe faf2 	bl	d40a8 <__cxa_guard_release>
   d5ac4:	4a05      	ldr	r2, [pc, #20]	; (d5adc <_Z16_fetch_usbserialv+0x44>)
   d5ac6:	4906      	ldr	r1, [pc, #24]	; (d5ae0 <_Z16_fetch_usbserialv+0x48>)
   d5ac8:	4803      	ldr	r0, [pc, #12]	; (d5ad8 <_Z16_fetch_usbserialv+0x40>)
   d5aca:	f000 f9ab 	bl	d5e24 <__aeabi_atexit>
	return _usbserial;
}
   d5ace:	4802      	ldr	r0, [pc, #8]	; (d5ad8 <_Z16_fetch_usbserialv+0x40>)
   d5ad0:	b007      	add	sp, #28
   d5ad2:	bd30      	pop	{r4, r5, pc}
   d5ad4:	2003e708 	.word	0x2003e708
   d5ad8:	2003e70c 	.word	0x2003e70c
   d5adc:	2003e298 	.word	0x2003e298
   d5ae0:	000d59d9 	.word	0x000d59d9

000d5ae4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5ae4:	2200      	movs	r2, #0
   d5ae6:	4611      	mov	r1, r2
   d5ae8:	6840      	ldr	r0, [r0, #4]
   d5aea:	f7ff ba4f 	b.w	d4f8c <network_ready>

000d5aee <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5aee:	2200      	movs	r2, #0
   d5af0:	4611      	mov	r1, r2
   d5af2:	6840      	ldr	r0, [r0, #4]
   d5af4:	f7ff ba6a 	b.w	d4fcc <network_listening>

000d5af8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5af8:	2200      	movs	r2, #0
   d5afa:	4611      	mov	r1, r2
   d5afc:	6840      	ldr	r0, [r0, #4]
   d5afe:	f7ff ba75 	b.w	d4fec <network_get_listen_timeout>

000d5b02 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5b02:	2200      	movs	r2, #0
   d5b04:	6840      	ldr	r0, [r0, #4]
   d5b06:	f7ff ba69 	b.w	d4fdc <network_set_listen_timeout>

000d5b0a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5b0a:	2200      	movs	r2, #0
   d5b0c:	f081 0101 	eor.w	r1, r1, #1
   d5b10:	6840      	ldr	r0, [r0, #4]
   d5b12:	f7ff ba53 	b.w	d4fbc <network_listen>

000d5b16 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5b16:	2300      	movs	r3, #0
   d5b18:	461a      	mov	r2, r3
   d5b1a:	4619      	mov	r1, r3
   d5b1c:	6840      	ldr	r0, [r0, #4]
   d5b1e:	f7ff ba45 	b.w	d4fac <network_off>

000d5b22 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5b22:	2300      	movs	r3, #0
   d5b24:	461a      	mov	r2, r3
   d5b26:	4619      	mov	r1, r3
   d5b28:	6840      	ldr	r0, [r0, #4]
   d5b2a:	f7ff ba37 	b.w	d4f9c <network_on>

000d5b2e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5b2e:	2200      	movs	r2, #0
   d5b30:	4611      	mov	r1, r2
   d5b32:	6840      	ldr	r0, [r0, #4]
   d5b34:	f7ff ba1a 	b.w	d4f6c <network_connecting>

000d5b38 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5b38:	2200      	movs	r2, #0
   d5b3a:	2102      	movs	r1, #2
   d5b3c:	6840      	ldr	r0, [r0, #4]
   d5b3e:	f7ff ba1d 	b.w	d4f7c <network_disconnect>

000d5b42 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5b42:	2300      	movs	r3, #0
   d5b44:	461a      	mov	r2, r3
   d5b46:	6840      	ldr	r0, [r0, #4]
   d5b48:	f7ff ba08 	b.w	d4f5c <network_connect>

000d5b4c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5b4c:	4b02      	ldr	r3, [pc, #8]	; (d5b58 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5b4e:	2204      	movs	r2, #4
   d5b50:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5b52:	4a02      	ldr	r2, [pc, #8]	; (d5b5c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5b54:	601a      	str	r2, [r3, #0]
   d5b56:	4770      	bx	lr
   d5b58:	2003e720 	.word	0x2003e720
   d5b5c:	000d6810 	.word	0x000d6810

000d5b60 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5b60:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5b62:	4b0c      	ldr	r3, [pc, #48]	; (d5b94 <serialEventRun+0x34>)
   d5b64:	b133      	cbz	r3, d5b74 <serialEventRun+0x14>
   d5b66:	f7ff ff97 	bl	d5a98 <_Z16_fetch_usbserialv>
   d5b6a:	6803      	ldr	r3, [r0, #0]
   d5b6c:	691b      	ldr	r3, [r3, #16]
   d5b6e:	4798      	blx	r3
   d5b70:	2800      	cmp	r0, #0
   d5b72:	dc09      	bgt.n	d5b88 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5b74:	4b08      	ldr	r3, [pc, #32]	; (d5b98 <serialEventRun+0x38>)
   d5b76:	b163      	cbz	r3, d5b92 <serialEventRun+0x32>
   d5b78:	f7ff ff06 	bl	d5988 <_Z22__fetch_global_Serial1v>
   d5b7c:	6803      	ldr	r3, [r0, #0]
   d5b7e:	691b      	ldr	r3, [r3, #16]
   d5b80:	4798      	blx	r3
   d5b82:	2800      	cmp	r0, #0
   d5b84:	dc03      	bgt.n	d5b8e <serialEventRun+0x2e>
   d5b86:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5b88:	f3af 8000 	nop.w
   d5b8c:	e7f2      	b.n	d5b74 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5b8e:	f3af 8000 	nop.w
   d5b92:	bd08      	pop	{r3, pc}
	...

000d5b9c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5b9c:	b508      	push	{r3, lr}
	serialEventRun();
   d5b9e:	f7ff ffdf 	bl	d5b60 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5ba2:	f7ff f83f 	bl	d4c24 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5ba6:	4b01      	ldr	r3, [pc, #4]	; (d5bac <_post_loop+0x10>)
   d5ba8:	6018      	str	r0, [r3, #0]
   d5baa:	bd08      	pop	{r3, pc}
   d5bac:	2003e730 	.word	0x2003e730

000d5bb0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5bb0:	4802      	ldr	r0, [pc, #8]	; (d5bbc <_Z33system_initialize_user_backup_ramv+0xc>)
   d5bb2:	4a03      	ldr	r2, [pc, #12]	; (d5bc0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5bb4:	4903      	ldr	r1, [pc, #12]	; (d5bc4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5bb6:	1a12      	subs	r2, r2, r0
   d5bb8:	f000 bc64 	b.w	d6484 <memcpy>
   d5bbc:	2003f400 	.word	0x2003f400
   d5bc0:	2003f404 	.word	0x2003f404
   d5bc4:	000d68f0 	.word	0x000d68f0

000d5bc8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5bc8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5bca:	2300      	movs	r3, #0
   d5bcc:	9300      	str	r3, [sp, #0]
   d5bce:	461a      	mov	r2, r3
   d5bd0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5bd4:	f7ff f9b0 	bl	d4f38 <system_ctrl_set_result>
}
   d5bd8:	b003      	add	sp, #12
   d5bda:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5be0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5be0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5be2:	8843      	ldrh	r3, [r0, #2]
   d5be4:	2b0a      	cmp	r3, #10
   d5be6:	d008      	beq.n	d5bfa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5be8:	2b50      	cmp	r3, #80	; 0x50
   d5bea:	d109      	bne.n	d5c00 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5bec:	4b09      	ldr	r3, [pc, #36]	; (d5c14 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5bee:	681b      	ldr	r3, [r3, #0]
   d5bf0:	b13b      	cbz	r3, d5c02 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5bf2:	b003      	add	sp, #12
   d5bf4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5bf8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5bfa:	f7ff ffe5 	bl	d5bc8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5bfe:	e006      	b.n	d5c0e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5c00:	2300      	movs	r3, #0
   d5c02:	9300      	str	r3, [sp, #0]
   d5c04:	461a      	mov	r2, r3
   d5c06:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5c0a:	f7ff f995 	bl	d4f38 <system_ctrl_set_result>
        break;
    }
}
   d5c0e:	b003      	add	sp, #12
   d5c10:	f85d fb04 	ldr.w	pc, [sp], #4
   d5c14:	2003e728 	.word	0x2003e728

000d5c18 <module_user_init_hook>:

void module_user_init_hook()
{
   d5c18:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5c1a:	4c10      	ldr	r4, [pc, #64]	; (d5c5c <module_user_init_hook+0x44>)
   d5c1c:	4d10      	ldr	r5, [pc, #64]	; (d5c60 <module_user_init_hook+0x48>)
   d5c1e:	6823      	ldr	r3, [r4, #0]
   d5c20:	42ab      	cmp	r3, r5
   d5c22:	4b10      	ldr	r3, [pc, #64]	; (d5c64 <module_user_init_hook+0x4c>)
   d5c24:	bf0c      	ite	eq
   d5c26:	2201      	moveq	r2, #1
   d5c28:	2200      	movne	r2, #0
   d5c2a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5c2c:	d002      	beq.n	d5c34 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d5c2e:	f7ff ffbf 	bl	d5bb0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5c32:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5c34:	f7fe ffee 	bl	d4c14 <HAL_RNG_GetRandomNumber>
   d5c38:	4604      	mov	r4, r0
    srand(seed);
   d5c3a:	f000 fc37 	bl	d64ac <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5c3e:	4b0a      	ldr	r3, [pc, #40]	; (d5c68 <module_user_init_hook+0x50>)
   d5c40:	b113      	cbz	r3, d5c48 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5c42:	4620      	mov	r0, r4
   d5c44:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5c48:	2100      	movs	r1, #0
   d5c4a:	4807      	ldr	r0, [pc, #28]	; (d5c68 <module_user_init_hook+0x50>)
   d5c4c:	f7ff f97e 	bl	d4f4c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5c50:	2100      	movs	r1, #0
   d5c52:	4806      	ldr	r0, [pc, #24]	; (d5c6c <module_user_init_hook+0x54>)
}
   d5c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5c58:	f7ff b964 	b.w	d4f24 <system_ctrl_set_app_request_handler>
   d5c5c:	2003f400 	.word	0x2003f400
   d5c60:	9a271c1e 	.word	0x9a271c1e
   d5c64:	2003e72c 	.word	0x2003e72c
   d5c68:	00000000 	.word	0x00000000
   d5c6c:	000d5be1 	.word	0x000d5be1

000d5c70 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5c70:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5c72:	4e18      	ldr	r6, [pc, #96]	; (d5cd4 <pinAvailable+0x64>)
   d5c74:	6831      	ldr	r1, [r6, #0]
   d5c76:	f011 0501 	ands.w	r5, r1, #1
   d5c7a:	4604      	mov	r4, r0
   d5c7c:	d10a      	bne.n	d5c94 <pinAvailable+0x24>
   d5c7e:	4630      	mov	r0, r6
   d5c80:	f7fe fa0d 	bl	d409e <__cxa_guard_acquire>
   d5c84:	b130      	cbz	r0, d5c94 <pinAvailable+0x24>
   d5c86:	4629      	mov	r1, r5
   d5c88:	4813      	ldr	r0, [pc, #76]	; (d5cd8 <pinAvailable+0x68>)
   d5c8a:	f7ff fd4f 	bl	d572c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5c8e:	4630      	mov	r0, r6
   d5c90:	f7fe fa0a 	bl	d40a8 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d5c94:	4810      	ldr	r0, [pc, #64]	; (d5cd8 <pinAvailable+0x68>)
   d5c96:	f7ff fdf3 	bl	d5880 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5c9a:	b128      	cbz	r0, d5ca8 <pinAvailable+0x38>
   d5c9c:	f1a4 030b 	sub.w	r3, r4, #11
   d5ca0:	2b02      	cmp	r3, #2
   d5ca2:	d801      	bhi.n	d5ca8 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d5ca4:	2000      	movs	r0, #0
   d5ca6:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5ca8:	f000 f896 	bl	d5dd8 <_Z19__fetch_global_Wirev>
   d5cac:	f7ff faa6 	bl	d51fc <_ZN7TwoWire9isEnabledEv>
   d5cb0:	b108      	cbz	r0, d5cb6 <pinAvailable+0x46>
   d5cb2:	2c01      	cmp	r4, #1
   d5cb4:	d9f6      	bls.n	d5ca4 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5cb6:	f7ff fe67 	bl	d5988 <_Z22__fetch_global_Serial1v>
   d5cba:	f7ff fe61 	bl	d5980 <_ZN11USARTSerial9isEnabledEv>
   d5cbe:	b118      	cbz	r0, d5cc8 <pinAvailable+0x58>
   d5cc0:	f1a4 0309 	sub.w	r3, r4, #9
   d5cc4:	2b01      	cmp	r3, #1
   d5cc6:	d9ed      	bls.n	d5ca4 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5cc8:	2c23      	cmp	r4, #35	; 0x23
   d5cca:	bf8c      	ite	hi
   d5ccc:	2000      	movhi	r0, #0
   d5cce:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5cd0:	bd70      	pop	{r4, r5, r6, pc}
   d5cd2:	bf00      	nop
   d5cd4:	2003e3d0 	.word	0x2003e3d0
   d5cd8:	2003e3d4 	.word	0x2003e3d4

000d5cdc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5cdc:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5cde:	b538      	push	{r3, r4, r5, lr}
   d5ce0:	4604      	mov	r4, r0
   d5ce2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5ce4:	d80a      	bhi.n	d5cfc <pinMode+0x20>
   d5ce6:	29ff      	cmp	r1, #255	; 0xff
   d5ce8:	d008      	beq.n	d5cfc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5cea:	f7ff ffc1 	bl	d5c70 <pinAvailable>
   d5cee:	b128      	cbz	r0, d5cfc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5cf0:	4629      	mov	r1, r5
   d5cf2:	4620      	mov	r0, r4
}
   d5cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5cf8:	f7fe bfac 	b.w	d4c54 <HAL_Pin_Mode>
   d5cfc:	bd38      	pop	{r3, r4, r5, pc}

000d5cfe <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5cfe:	b538      	push	{r3, r4, r5, lr}
   d5d00:	4604      	mov	r4, r0
   d5d02:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5d04:	f7fe ffae 	bl	d4c64 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5d08:	28ff      	cmp	r0, #255	; 0xff
   d5d0a:	d010      	beq.n	d5d2e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5d0c:	2806      	cmp	r0, #6
   d5d0e:	d804      	bhi.n	d5d1a <digitalWrite+0x1c>
   d5d10:	234d      	movs	r3, #77	; 0x4d
   d5d12:	fa23 f000 	lsr.w	r0, r3, r0
   d5d16:	07c3      	lsls	r3, r0, #31
   d5d18:	d409      	bmi.n	d5d2e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5d1a:	4620      	mov	r0, r4
   d5d1c:	f7ff ffa8 	bl	d5c70 <pinAvailable>
   d5d20:	b128      	cbz	r0, d5d2e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5d22:	4629      	mov	r1, r5
   d5d24:	4620      	mov	r0, r4
}
   d5d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5d2a:	f7fe bfa3 	b.w	d4c74 <HAL_GPIO_Write>
   d5d2e:	bd38      	pop	{r3, r4, r5, pc}

000d5d30 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d5d30:	b510      	push	{r4, lr}
   d5d32:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5d34:	f7fe ff96 	bl	d4c64 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d5d38:	3804      	subs	r0, #4
   d5d3a:	b2c0      	uxtb	r0, r0
   d5d3c:	2801      	cmp	r0, #1
   d5d3e:	d908      	bls.n	d5d52 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d5d40:	4620      	mov	r0, r4
   d5d42:	f7ff ff95 	bl	d5c70 <pinAvailable>
   d5d46:	b120      	cbz	r0, d5d52 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d5d48:	4620      	mov	r0, r4
}
   d5d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d5d4e:	f7fe bf99 	b.w	d4c84 <HAL_GPIO_Read>
}
   d5d52:	2000      	movs	r0, #0
   d5d54:	bd10      	pop	{r4, pc}

000d5d56 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d5d56:	b538      	push	{r3, r4, r5, lr}
   d5d58:	4604      	mov	r4, r0
   d5d5a:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d5d5c:	f7ff ff88 	bl	d5c70 <pinAvailable>
   d5d60:	b1f0      	cbz	r0, d5da0 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d5d62:	2104      	movs	r1, #4
   d5d64:	4620      	mov	r0, r4
   d5d66:	f7fe ff6d 	bl	d4c44 <HAL_Validate_Pin_Function>
   d5d6a:	2804      	cmp	r0, #4
   d5d6c:	d105      	bne.n	d5d7a <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d5d6e:	b2a9      	uxth	r1, r5
   d5d70:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
   d5d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
   d5d76:	f7fe bf8d 	b.w	d4c94 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d5d7a:	2102      	movs	r1, #2
   d5d7c:	4620      	mov	r0, r4
   d5d7e:	f7fe ff61 	bl	d4c44 <HAL_Validate_Pin_Function>
   d5d82:	2802      	cmp	r0, #2
   d5d84:	d10c      	bne.n	d5da0 <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d5d86:	4620      	mov	r0, r4
   d5d88:	f7fe ff6c 	bl	d4c64 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d5d8c:	2801      	cmp	r0, #1
   d5d8e:	d001      	beq.n	d5d94 <_Z11analogWritetm+0x3e>
   d5d90:	2804      	cmp	r0, #4
   d5d92:	d105      	bne.n	d5da0 <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d5d94:	4629      	mov	r1, r5
   d5d96:	4620      	mov	r0, r4
    }
}
   d5d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d5d9c:	f7fe bf82 	b.w	d4ca4 <HAL_PWM_Write_Ext>
   d5da0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5da4 <_Z17acquireWireBufferv>:
   d5da4:	b570      	push	{r4, r5, r6, lr}
   d5da6:	4604      	mov	r4, r0
   d5da8:	2514      	movs	r5, #20
   d5daa:	462a      	mov	r2, r5
   d5dac:	4e09      	ldr	r6, [pc, #36]	; (d5dd4 <_Z17acquireWireBufferv+0x30>)
   d5dae:	2100      	movs	r1, #0
   d5db0:	f000 fb73 	bl	d649a <memset>
   d5db4:	8025      	strh	r5, [r4, #0]
   d5db6:	2520      	movs	r5, #32
   d5db8:	4631      	mov	r1, r6
   d5dba:	60a5      	str	r5, [r4, #8]
   d5dbc:	6125      	str	r5, [r4, #16]
   d5dbe:	4628      	mov	r0, r5
   d5dc0:	f000 f84f 	bl	d5e62 <_ZnajRKSt9nothrow_t>
   d5dc4:	4631      	mov	r1, r6
   d5dc6:	6060      	str	r0, [r4, #4]
   d5dc8:	4628      	mov	r0, r5
   d5dca:	f000 f84a 	bl	d5e62 <_ZnajRKSt9nothrow_t>
   d5dce:	60e0      	str	r0, [r4, #12]
   d5dd0:	4620      	mov	r0, r4
   d5dd2:	bd70      	pop	{r4, r5, r6, pc}
   d5dd4:	000d683c 	.word	0x000d683c

000d5dd8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5dd8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5dda:	4d0e      	ldr	r5, [pc, #56]	; (d5e14 <_Z19__fetch_global_Wirev+0x3c>)
   d5ddc:	6829      	ldr	r1, [r5, #0]
   d5dde:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5de2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5de4:	d113      	bne.n	d5e0e <_Z19__fetch_global_Wirev+0x36>
   d5de6:	4628      	mov	r0, r5
   d5de8:	f7fe f959 	bl	d409e <__cxa_guard_acquire>
   d5dec:	b178      	cbz	r0, d5e0e <_Z19__fetch_global_Wirev+0x36>
   d5dee:	a801      	add	r0, sp, #4
   d5df0:	f7ff ffd8 	bl	d5da4 <_Z17acquireWireBufferv>
   d5df4:	aa01      	add	r2, sp, #4
   d5df6:	4621      	mov	r1, r4
   d5df8:	4807      	ldr	r0, [pc, #28]	; (d5e18 <_Z19__fetch_global_Wirev+0x40>)
   d5dfa:	f7ff f9ab 	bl	d5154 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d5dfe:	4628      	mov	r0, r5
   d5e00:	f7fe f952 	bl	d40a8 <__cxa_guard_release>
   d5e04:	4a05      	ldr	r2, [pc, #20]	; (d5e1c <_Z19__fetch_global_Wirev+0x44>)
   d5e06:	4906      	ldr	r1, [pc, #24]	; (d5e20 <_Z19__fetch_global_Wirev+0x48>)
   d5e08:	4803      	ldr	r0, [pc, #12]	; (d5e18 <_Z19__fetch_global_Wirev+0x40>)
   d5e0a:	f000 f80b 	bl	d5e24 <__aeabi_atexit>
	return wire;
}
   d5e0e:	4802      	ldr	r0, [pc, #8]	; (d5e18 <_Z19__fetch_global_Wirev+0x40>)
   d5e10:	b007      	add	sp, #28
   d5e12:	bd30      	pop	{r4, r5, pc}
   d5e14:	2003e734 	.word	0x2003e734
   d5e18:	2003e738 	.word	0x2003e738
   d5e1c:	2003e298 	.word	0x2003e298
   d5e20:	000d50fd 	.word	0x000d50fd

000d5e24 <__aeabi_atexit>:
   d5e24:	460b      	mov	r3, r1
   d5e26:	4601      	mov	r1, r0
   d5e28:	4618      	mov	r0, r3
   d5e2a:	f000 bb1d 	b.w	d6468 <__cxa_atexit>

000d5e2e <_ZdlPvj>:
   d5e2e:	f7fe b932 	b.w	d4096 <_ZdlPv>
	...

000d5e34 <_ZSt15get_new_handlerv>:
   d5e34:	4b02      	ldr	r3, [pc, #8]	; (d5e40 <_ZSt15get_new_handlerv+0xc>)
   d5e36:	6818      	ldr	r0, [r3, #0]
   d5e38:	f3bf 8f5f 	dmb	sy
   d5e3c:	4770      	bx	lr
   d5e3e:	bf00      	nop
   d5e40:	2003e74c 	.word	0x2003e74c

000d5e44 <_ZnwjRKSt9nothrow_t>:
   d5e44:	b510      	push	{r4, lr}
   d5e46:	2800      	cmp	r0, #0
   d5e48:	bf14      	ite	ne
   d5e4a:	4604      	movne	r4, r0
   d5e4c:	2401      	moveq	r4, #1
   d5e4e:	4620      	mov	r0, r4
   d5e50:	f7ff f8d4 	bl	d4ffc <malloc>
   d5e54:	b920      	cbnz	r0, d5e60 <_ZnwjRKSt9nothrow_t+0x1c>
   d5e56:	f7ff ffed 	bl	d5e34 <_ZSt15get_new_handlerv>
   d5e5a:	b108      	cbz	r0, d5e60 <_ZnwjRKSt9nothrow_t+0x1c>
   d5e5c:	4780      	blx	r0
   d5e5e:	e7f6      	b.n	d5e4e <_ZnwjRKSt9nothrow_t+0xa>
   d5e60:	bd10      	pop	{r4, pc}

000d5e62 <_ZnajRKSt9nothrow_t>:
   d5e62:	f7ff bfef 	b.w	d5e44 <_ZnwjRKSt9nothrow_t>
	...

000d5e68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5e68:	4b24      	ldr	r3, [pc, #144]	; (d5efc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5e6a:	681a      	ldr	r2, [r3, #0]
   d5e6c:	07d0      	lsls	r0, r2, #31
   d5e6e:	bf5c      	itt	pl
   d5e70:	2201      	movpl	r2, #1
   d5e72:	601a      	strpl	r2, [r3, #0]
   d5e74:	4b22      	ldr	r3, [pc, #136]	; (d5f00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5e76:	681a      	ldr	r2, [r3, #0]
   d5e78:	07d1      	lsls	r1, r2, #31
   d5e7a:	bf5c      	itt	pl
   d5e7c:	2201      	movpl	r2, #1
   d5e7e:	601a      	strpl	r2, [r3, #0]
   d5e80:	4b20      	ldr	r3, [pc, #128]	; (d5f04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5e82:	681a      	ldr	r2, [r3, #0]
   d5e84:	07d2      	lsls	r2, r2, #31
   d5e86:	bf5c      	itt	pl
   d5e88:	2201      	movpl	r2, #1
   d5e8a:	601a      	strpl	r2, [r3, #0]
   d5e8c:	4b1e      	ldr	r3, [pc, #120]	; (d5f08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5e8e:	681a      	ldr	r2, [r3, #0]
   d5e90:	07d0      	lsls	r0, r2, #31
   d5e92:	bf5c      	itt	pl
   d5e94:	2201      	movpl	r2, #1
   d5e96:	601a      	strpl	r2, [r3, #0]
   d5e98:	4b1c      	ldr	r3, [pc, #112]	; (d5f0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5e9a:	681a      	ldr	r2, [r3, #0]
   d5e9c:	07d1      	lsls	r1, r2, #31
   d5e9e:	bf5c      	itt	pl
   d5ea0:	2201      	movpl	r2, #1
   d5ea2:	601a      	strpl	r2, [r3, #0]
   d5ea4:	4b1a      	ldr	r3, [pc, #104]	; (d5f10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5ea6:	681a      	ldr	r2, [r3, #0]
   d5ea8:	07d2      	lsls	r2, r2, #31
   d5eaa:	bf5c      	itt	pl
   d5eac:	2201      	movpl	r2, #1
   d5eae:	601a      	strpl	r2, [r3, #0]
   d5eb0:	4b18      	ldr	r3, [pc, #96]	; (d5f14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5eb2:	681a      	ldr	r2, [r3, #0]
   d5eb4:	07d0      	lsls	r0, r2, #31
   d5eb6:	bf5c      	itt	pl
   d5eb8:	2201      	movpl	r2, #1
   d5eba:	601a      	strpl	r2, [r3, #0]
   d5ebc:	4b16      	ldr	r3, [pc, #88]	; (d5f18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5ebe:	681a      	ldr	r2, [r3, #0]
   d5ec0:	07d1      	lsls	r1, r2, #31
   d5ec2:	bf5c      	itt	pl
   d5ec4:	2201      	movpl	r2, #1
   d5ec6:	601a      	strpl	r2, [r3, #0]
   d5ec8:	4b14      	ldr	r3, [pc, #80]	; (d5f1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5eca:	681a      	ldr	r2, [r3, #0]
   d5ecc:	07d2      	lsls	r2, r2, #31
   d5ece:	bf5c      	itt	pl
   d5ed0:	2201      	movpl	r2, #1
   d5ed2:	601a      	strpl	r2, [r3, #0]
   d5ed4:	4b12      	ldr	r3, [pc, #72]	; (d5f20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5ed6:	681a      	ldr	r2, [r3, #0]
   d5ed8:	07d0      	lsls	r0, r2, #31
   d5eda:	bf5c      	itt	pl
   d5edc:	2201      	movpl	r2, #1
   d5ede:	601a      	strpl	r2, [r3, #0]
   d5ee0:	4b10      	ldr	r3, [pc, #64]	; (d5f24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5ee2:	681a      	ldr	r2, [r3, #0]
   d5ee4:	07d1      	lsls	r1, r2, #31
   d5ee6:	bf5c      	itt	pl
   d5ee8:	2201      	movpl	r2, #1
   d5eea:	601a      	strpl	r2, [r3, #0]
   d5eec:	4b0e      	ldr	r3, [pc, #56]	; (d5f28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5eee:	681a      	ldr	r2, [r3, #0]
   d5ef0:	07d2      	lsls	r2, r2, #31
   d5ef2:	bf5c      	itt	pl
   d5ef4:	2201      	movpl	r2, #1
   d5ef6:	601a      	strpl	r2, [r3, #0]
   d5ef8:	4770      	bx	lr
   d5efa:	bf00      	nop
   d5efc:	2003e77c 	.word	0x2003e77c
   d5f00:	2003e778 	.word	0x2003e778
   d5f04:	2003e774 	.word	0x2003e774
   d5f08:	2003e770 	.word	0x2003e770
   d5f0c:	2003e76c 	.word	0x2003e76c
   d5f10:	2003e768 	.word	0x2003e768
   d5f14:	2003e764 	.word	0x2003e764
   d5f18:	2003e760 	.word	0x2003e760
   d5f1c:	2003e75c 	.word	0x2003e75c
   d5f20:	2003e758 	.word	0x2003e758
   d5f24:	2003e754 	.word	0x2003e754
   d5f28:	2003e750 	.word	0x2003e750

000d5f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5f2c:	4b18      	ldr	r3, [pc, #96]	; (d5f90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5f2e:	681a      	ldr	r2, [r3, #0]
   d5f30:	07d1      	lsls	r1, r2, #31
   d5f32:	bf5c      	itt	pl
   d5f34:	2201      	movpl	r2, #1
   d5f36:	601a      	strpl	r2, [r3, #0]
   d5f38:	4b16      	ldr	r3, [pc, #88]	; (d5f94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5f3a:	681a      	ldr	r2, [r3, #0]
   d5f3c:	07d2      	lsls	r2, r2, #31
   d5f3e:	bf5c      	itt	pl
   d5f40:	2201      	movpl	r2, #1
   d5f42:	601a      	strpl	r2, [r3, #0]
   d5f44:	4b14      	ldr	r3, [pc, #80]	; (d5f98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5f46:	681a      	ldr	r2, [r3, #0]
   d5f48:	07d0      	lsls	r0, r2, #31
   d5f4a:	bf5c      	itt	pl
   d5f4c:	2201      	movpl	r2, #1
   d5f4e:	601a      	strpl	r2, [r3, #0]
   d5f50:	4b12      	ldr	r3, [pc, #72]	; (d5f9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5f52:	681a      	ldr	r2, [r3, #0]
   d5f54:	07d1      	lsls	r1, r2, #31
   d5f56:	bf5c      	itt	pl
   d5f58:	2201      	movpl	r2, #1
   d5f5a:	601a      	strpl	r2, [r3, #0]
   d5f5c:	4b10      	ldr	r3, [pc, #64]	; (d5fa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5f5e:	681a      	ldr	r2, [r3, #0]
   d5f60:	07d2      	lsls	r2, r2, #31
   d5f62:	bf5c      	itt	pl
   d5f64:	2201      	movpl	r2, #1
   d5f66:	601a      	strpl	r2, [r3, #0]
   d5f68:	4b0e      	ldr	r3, [pc, #56]	; (d5fa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5f6a:	681a      	ldr	r2, [r3, #0]
   d5f6c:	07d0      	lsls	r0, r2, #31
   d5f6e:	bf5c      	itt	pl
   d5f70:	2201      	movpl	r2, #1
   d5f72:	601a      	strpl	r2, [r3, #0]
   d5f74:	4b0c      	ldr	r3, [pc, #48]	; (d5fa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5f76:	681a      	ldr	r2, [r3, #0]
   d5f78:	07d1      	lsls	r1, r2, #31
   d5f7a:	bf5c      	itt	pl
   d5f7c:	2201      	movpl	r2, #1
   d5f7e:	601a      	strpl	r2, [r3, #0]
   d5f80:	4b0a      	ldr	r3, [pc, #40]	; (d5fac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5f82:	681a      	ldr	r2, [r3, #0]
   d5f84:	07d2      	lsls	r2, r2, #31
   d5f86:	bf5c      	itt	pl
   d5f88:	2201      	movpl	r2, #1
   d5f8a:	601a      	strpl	r2, [r3, #0]
   d5f8c:	4770      	bx	lr
   d5f8e:	bf00      	nop
   d5f90:	2003e79c 	.word	0x2003e79c
   d5f94:	2003e798 	.word	0x2003e798
   d5f98:	2003e794 	.word	0x2003e794
   d5f9c:	2003e790 	.word	0x2003e790
   d5fa0:	2003e78c 	.word	0x2003e78c
   d5fa4:	2003e788 	.word	0x2003e788
   d5fa8:	2003e784 	.word	0x2003e784
   d5fac:	2003e780 	.word	0x2003e780

000d5fb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5fb0:	4b18      	ldr	r3, [pc, #96]	; (d6014 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5fb2:	681a      	ldr	r2, [r3, #0]
   d5fb4:	07d1      	lsls	r1, r2, #31
   d5fb6:	bf5c      	itt	pl
   d5fb8:	2201      	movpl	r2, #1
   d5fba:	601a      	strpl	r2, [r3, #0]
   d5fbc:	4b16      	ldr	r3, [pc, #88]	; (d6018 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5fbe:	681a      	ldr	r2, [r3, #0]
   d5fc0:	07d2      	lsls	r2, r2, #31
   d5fc2:	bf5c      	itt	pl
   d5fc4:	2201      	movpl	r2, #1
   d5fc6:	601a      	strpl	r2, [r3, #0]
   d5fc8:	4b14      	ldr	r3, [pc, #80]	; (d601c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5fca:	681a      	ldr	r2, [r3, #0]
   d5fcc:	07d0      	lsls	r0, r2, #31
   d5fce:	bf5c      	itt	pl
   d5fd0:	2201      	movpl	r2, #1
   d5fd2:	601a      	strpl	r2, [r3, #0]
   d5fd4:	4b12      	ldr	r3, [pc, #72]	; (d6020 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5fd6:	681a      	ldr	r2, [r3, #0]
   d5fd8:	07d1      	lsls	r1, r2, #31
   d5fda:	bf5c      	itt	pl
   d5fdc:	2201      	movpl	r2, #1
   d5fde:	601a      	strpl	r2, [r3, #0]
   d5fe0:	4b10      	ldr	r3, [pc, #64]	; (d6024 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5fe2:	681a      	ldr	r2, [r3, #0]
   d5fe4:	07d2      	lsls	r2, r2, #31
   d5fe6:	bf5c      	itt	pl
   d5fe8:	2201      	movpl	r2, #1
   d5fea:	601a      	strpl	r2, [r3, #0]
   d5fec:	4b0e      	ldr	r3, [pc, #56]	; (d6028 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5fee:	681a      	ldr	r2, [r3, #0]
   d5ff0:	07d0      	lsls	r0, r2, #31
   d5ff2:	bf5c      	itt	pl
   d5ff4:	2201      	movpl	r2, #1
   d5ff6:	601a      	strpl	r2, [r3, #0]
   d5ff8:	4b0c      	ldr	r3, [pc, #48]	; (d602c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5ffa:	681a      	ldr	r2, [r3, #0]
   d5ffc:	07d1      	lsls	r1, r2, #31
   d5ffe:	bf5c      	itt	pl
   d6000:	2201      	movpl	r2, #1
   d6002:	601a      	strpl	r2, [r3, #0]
   d6004:	4b0a      	ldr	r3, [pc, #40]	; (d6030 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6006:	681a      	ldr	r2, [r3, #0]
   d6008:	07d2      	lsls	r2, r2, #31
   d600a:	bf5c      	itt	pl
   d600c:	2201      	movpl	r2, #1
   d600e:	601a      	strpl	r2, [r3, #0]
   d6010:	4770      	bx	lr
   d6012:	bf00      	nop
   d6014:	2003e7bc 	.word	0x2003e7bc
   d6018:	2003e7b8 	.word	0x2003e7b8
   d601c:	2003e7b4 	.word	0x2003e7b4
   d6020:	2003e7b0 	.word	0x2003e7b0
   d6024:	2003e7ac 	.word	0x2003e7ac
   d6028:	2003e7a8 	.word	0x2003e7a8
   d602c:	2003e7a4 	.word	0x2003e7a4
   d6030:	2003e7a0 	.word	0x2003e7a0

000d6034 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6034:	4b24      	ldr	r3, [pc, #144]	; (d60c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6036:	681a      	ldr	r2, [r3, #0]
   d6038:	07d0      	lsls	r0, r2, #31
   d603a:	bf5c      	itt	pl
   d603c:	2201      	movpl	r2, #1
   d603e:	601a      	strpl	r2, [r3, #0]
   d6040:	4b22      	ldr	r3, [pc, #136]	; (d60cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6042:	681a      	ldr	r2, [r3, #0]
   d6044:	07d1      	lsls	r1, r2, #31
   d6046:	bf5c      	itt	pl
   d6048:	2201      	movpl	r2, #1
   d604a:	601a      	strpl	r2, [r3, #0]
   d604c:	4b20      	ldr	r3, [pc, #128]	; (d60d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d604e:	681a      	ldr	r2, [r3, #0]
   d6050:	07d2      	lsls	r2, r2, #31
   d6052:	bf5c      	itt	pl
   d6054:	2201      	movpl	r2, #1
   d6056:	601a      	strpl	r2, [r3, #0]
   d6058:	4b1e      	ldr	r3, [pc, #120]	; (d60d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d605a:	681a      	ldr	r2, [r3, #0]
   d605c:	07d0      	lsls	r0, r2, #31
   d605e:	bf5c      	itt	pl
   d6060:	2201      	movpl	r2, #1
   d6062:	601a      	strpl	r2, [r3, #0]
   d6064:	4b1c      	ldr	r3, [pc, #112]	; (d60d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6066:	681a      	ldr	r2, [r3, #0]
   d6068:	07d1      	lsls	r1, r2, #31
   d606a:	bf5c      	itt	pl
   d606c:	2201      	movpl	r2, #1
   d606e:	601a      	strpl	r2, [r3, #0]
   d6070:	4b1a      	ldr	r3, [pc, #104]	; (d60dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6072:	681a      	ldr	r2, [r3, #0]
   d6074:	07d2      	lsls	r2, r2, #31
   d6076:	bf5c      	itt	pl
   d6078:	2201      	movpl	r2, #1
   d607a:	601a      	strpl	r2, [r3, #0]
   d607c:	4b18      	ldr	r3, [pc, #96]	; (d60e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d607e:	681a      	ldr	r2, [r3, #0]
   d6080:	07d0      	lsls	r0, r2, #31
   d6082:	bf5c      	itt	pl
   d6084:	2201      	movpl	r2, #1
   d6086:	601a      	strpl	r2, [r3, #0]
   d6088:	4b16      	ldr	r3, [pc, #88]	; (d60e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d608a:	681a      	ldr	r2, [r3, #0]
   d608c:	07d1      	lsls	r1, r2, #31
   d608e:	bf5c      	itt	pl
   d6090:	2201      	movpl	r2, #1
   d6092:	601a      	strpl	r2, [r3, #0]
   d6094:	4b14      	ldr	r3, [pc, #80]	; (d60e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6096:	681a      	ldr	r2, [r3, #0]
   d6098:	07d2      	lsls	r2, r2, #31
   d609a:	bf5c      	itt	pl
   d609c:	2201      	movpl	r2, #1
   d609e:	601a      	strpl	r2, [r3, #0]
   d60a0:	4b12      	ldr	r3, [pc, #72]	; (d60ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d60a2:	681a      	ldr	r2, [r3, #0]
   d60a4:	07d0      	lsls	r0, r2, #31
   d60a6:	bf5c      	itt	pl
   d60a8:	2201      	movpl	r2, #1
   d60aa:	601a      	strpl	r2, [r3, #0]
   d60ac:	4b10      	ldr	r3, [pc, #64]	; (d60f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d60ae:	681a      	ldr	r2, [r3, #0]
   d60b0:	07d1      	lsls	r1, r2, #31
   d60b2:	bf5c      	itt	pl
   d60b4:	2201      	movpl	r2, #1
   d60b6:	601a      	strpl	r2, [r3, #0]
   d60b8:	4b0e      	ldr	r3, [pc, #56]	; (d60f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d60ba:	681a      	ldr	r2, [r3, #0]
   d60bc:	07d2      	lsls	r2, r2, #31
   d60be:	bf5c      	itt	pl
   d60c0:	2201      	movpl	r2, #1
   d60c2:	601a      	strpl	r2, [r3, #0]
   d60c4:	4770      	bx	lr
   d60c6:	bf00      	nop
   d60c8:	2003e7ec 	.word	0x2003e7ec
   d60cc:	2003e7e8 	.word	0x2003e7e8
   d60d0:	2003e7e4 	.word	0x2003e7e4
   d60d4:	2003e7e0 	.word	0x2003e7e0
   d60d8:	2003e7dc 	.word	0x2003e7dc
   d60dc:	2003e7d8 	.word	0x2003e7d8
   d60e0:	2003e7d4 	.word	0x2003e7d4
   d60e4:	2003e7d0 	.word	0x2003e7d0
   d60e8:	2003e7cc 	.word	0x2003e7cc
   d60ec:	2003e7c8 	.word	0x2003e7c8
   d60f0:	2003e7c4 	.word	0x2003e7c4
   d60f4:	2003e7c0 	.word	0x2003e7c0

000d60f8 <__aeabi_drsub>:
   d60f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d60fc:	e002      	b.n	d6104 <__adddf3>
   d60fe:	bf00      	nop

000d6100 <__aeabi_dsub>:
   d6100:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6104 <__adddf3>:
   d6104:	b530      	push	{r4, r5, lr}
   d6106:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d610a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d610e:	ea94 0f05 	teq	r4, r5
   d6112:	bf08      	it	eq
   d6114:	ea90 0f02 	teqeq	r0, r2
   d6118:	bf1f      	itttt	ne
   d611a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d611e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6122:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6126:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d612a:	f000 80e2 	beq.w	d62f2 <__adddf3+0x1ee>
   d612e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6132:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6136:	bfb8      	it	lt
   d6138:	426d      	neglt	r5, r5
   d613a:	dd0c      	ble.n	d6156 <__adddf3+0x52>
   d613c:	442c      	add	r4, r5
   d613e:	ea80 0202 	eor.w	r2, r0, r2
   d6142:	ea81 0303 	eor.w	r3, r1, r3
   d6146:	ea82 0000 	eor.w	r0, r2, r0
   d614a:	ea83 0101 	eor.w	r1, r3, r1
   d614e:	ea80 0202 	eor.w	r2, r0, r2
   d6152:	ea81 0303 	eor.w	r3, r1, r3
   d6156:	2d36      	cmp	r5, #54	; 0x36
   d6158:	bf88      	it	hi
   d615a:	bd30      	pophi	{r4, r5, pc}
   d615c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6160:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6164:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6168:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d616c:	d002      	beq.n	d6174 <__adddf3+0x70>
   d616e:	4240      	negs	r0, r0
   d6170:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6174:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6178:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d617c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6180:	d002      	beq.n	d6188 <__adddf3+0x84>
   d6182:	4252      	negs	r2, r2
   d6184:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6188:	ea94 0f05 	teq	r4, r5
   d618c:	f000 80a7 	beq.w	d62de <__adddf3+0x1da>
   d6190:	f1a4 0401 	sub.w	r4, r4, #1
   d6194:	f1d5 0e20 	rsbs	lr, r5, #32
   d6198:	db0d      	blt.n	d61b6 <__adddf3+0xb2>
   d619a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d619e:	fa22 f205 	lsr.w	r2, r2, r5
   d61a2:	1880      	adds	r0, r0, r2
   d61a4:	f141 0100 	adc.w	r1, r1, #0
   d61a8:	fa03 f20e 	lsl.w	r2, r3, lr
   d61ac:	1880      	adds	r0, r0, r2
   d61ae:	fa43 f305 	asr.w	r3, r3, r5
   d61b2:	4159      	adcs	r1, r3
   d61b4:	e00e      	b.n	d61d4 <__adddf3+0xd0>
   d61b6:	f1a5 0520 	sub.w	r5, r5, #32
   d61ba:	f10e 0e20 	add.w	lr, lr, #32
   d61be:	2a01      	cmp	r2, #1
   d61c0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d61c4:	bf28      	it	cs
   d61c6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d61ca:	fa43 f305 	asr.w	r3, r3, r5
   d61ce:	18c0      	adds	r0, r0, r3
   d61d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d61d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d61d8:	d507      	bpl.n	d61ea <__adddf3+0xe6>
   d61da:	f04f 0e00 	mov.w	lr, #0
   d61de:	f1dc 0c00 	rsbs	ip, ip, #0
   d61e2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d61e6:	eb6e 0101 	sbc.w	r1, lr, r1
   d61ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d61ee:	d31b      	bcc.n	d6228 <__adddf3+0x124>
   d61f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d61f4:	d30c      	bcc.n	d6210 <__adddf3+0x10c>
   d61f6:	0849      	lsrs	r1, r1, #1
   d61f8:	ea5f 0030 	movs.w	r0, r0, rrx
   d61fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6200:	f104 0401 	add.w	r4, r4, #1
   d6204:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6208:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d620c:	f080 809a 	bcs.w	d6344 <__adddf3+0x240>
   d6210:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6214:	bf08      	it	eq
   d6216:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d621a:	f150 0000 	adcs.w	r0, r0, #0
   d621e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6222:	ea41 0105 	orr.w	r1, r1, r5
   d6226:	bd30      	pop	{r4, r5, pc}
   d6228:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d622c:	4140      	adcs	r0, r0
   d622e:	eb41 0101 	adc.w	r1, r1, r1
   d6232:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6236:	f1a4 0401 	sub.w	r4, r4, #1
   d623a:	d1e9      	bne.n	d6210 <__adddf3+0x10c>
   d623c:	f091 0f00 	teq	r1, #0
   d6240:	bf04      	itt	eq
   d6242:	4601      	moveq	r1, r0
   d6244:	2000      	moveq	r0, #0
   d6246:	fab1 f381 	clz	r3, r1
   d624a:	bf08      	it	eq
   d624c:	3320      	addeq	r3, #32
   d624e:	f1a3 030b 	sub.w	r3, r3, #11
   d6252:	f1b3 0220 	subs.w	r2, r3, #32
   d6256:	da0c      	bge.n	d6272 <__adddf3+0x16e>
   d6258:	320c      	adds	r2, #12
   d625a:	dd08      	ble.n	d626e <__adddf3+0x16a>
   d625c:	f102 0c14 	add.w	ip, r2, #20
   d6260:	f1c2 020c 	rsb	r2, r2, #12
   d6264:	fa01 f00c 	lsl.w	r0, r1, ip
   d6268:	fa21 f102 	lsr.w	r1, r1, r2
   d626c:	e00c      	b.n	d6288 <__adddf3+0x184>
   d626e:	f102 0214 	add.w	r2, r2, #20
   d6272:	bfd8      	it	le
   d6274:	f1c2 0c20 	rsble	ip, r2, #32
   d6278:	fa01 f102 	lsl.w	r1, r1, r2
   d627c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6280:	bfdc      	itt	le
   d6282:	ea41 010c 	orrle.w	r1, r1, ip
   d6286:	4090      	lslle	r0, r2
   d6288:	1ae4      	subs	r4, r4, r3
   d628a:	bfa2      	ittt	ge
   d628c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6290:	4329      	orrge	r1, r5
   d6292:	bd30      	popge	{r4, r5, pc}
   d6294:	ea6f 0404 	mvn.w	r4, r4
   d6298:	3c1f      	subs	r4, #31
   d629a:	da1c      	bge.n	d62d6 <__adddf3+0x1d2>
   d629c:	340c      	adds	r4, #12
   d629e:	dc0e      	bgt.n	d62be <__adddf3+0x1ba>
   d62a0:	f104 0414 	add.w	r4, r4, #20
   d62a4:	f1c4 0220 	rsb	r2, r4, #32
   d62a8:	fa20 f004 	lsr.w	r0, r0, r4
   d62ac:	fa01 f302 	lsl.w	r3, r1, r2
   d62b0:	ea40 0003 	orr.w	r0, r0, r3
   d62b4:	fa21 f304 	lsr.w	r3, r1, r4
   d62b8:	ea45 0103 	orr.w	r1, r5, r3
   d62bc:	bd30      	pop	{r4, r5, pc}
   d62be:	f1c4 040c 	rsb	r4, r4, #12
   d62c2:	f1c4 0220 	rsb	r2, r4, #32
   d62c6:	fa20 f002 	lsr.w	r0, r0, r2
   d62ca:	fa01 f304 	lsl.w	r3, r1, r4
   d62ce:	ea40 0003 	orr.w	r0, r0, r3
   d62d2:	4629      	mov	r1, r5
   d62d4:	bd30      	pop	{r4, r5, pc}
   d62d6:	fa21 f004 	lsr.w	r0, r1, r4
   d62da:	4629      	mov	r1, r5
   d62dc:	bd30      	pop	{r4, r5, pc}
   d62de:	f094 0f00 	teq	r4, #0
   d62e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d62e6:	bf06      	itte	eq
   d62e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d62ec:	3401      	addeq	r4, #1
   d62ee:	3d01      	subne	r5, #1
   d62f0:	e74e      	b.n	d6190 <__adddf3+0x8c>
   d62f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d62f6:	bf18      	it	ne
   d62f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d62fc:	d029      	beq.n	d6352 <__adddf3+0x24e>
   d62fe:	ea94 0f05 	teq	r4, r5
   d6302:	bf08      	it	eq
   d6304:	ea90 0f02 	teqeq	r0, r2
   d6308:	d005      	beq.n	d6316 <__adddf3+0x212>
   d630a:	ea54 0c00 	orrs.w	ip, r4, r0
   d630e:	bf04      	itt	eq
   d6310:	4619      	moveq	r1, r3
   d6312:	4610      	moveq	r0, r2
   d6314:	bd30      	pop	{r4, r5, pc}
   d6316:	ea91 0f03 	teq	r1, r3
   d631a:	bf1e      	ittt	ne
   d631c:	2100      	movne	r1, #0
   d631e:	2000      	movne	r0, #0
   d6320:	bd30      	popne	{r4, r5, pc}
   d6322:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6326:	d105      	bne.n	d6334 <__adddf3+0x230>
   d6328:	0040      	lsls	r0, r0, #1
   d632a:	4149      	adcs	r1, r1
   d632c:	bf28      	it	cs
   d632e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6332:	bd30      	pop	{r4, r5, pc}
   d6334:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6338:	bf3c      	itt	cc
   d633a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d633e:	bd30      	popcc	{r4, r5, pc}
   d6340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6344:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6348:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d634c:	f04f 0000 	mov.w	r0, #0
   d6350:	bd30      	pop	{r4, r5, pc}
   d6352:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6356:	bf1a      	itte	ne
   d6358:	4619      	movne	r1, r3
   d635a:	4610      	movne	r0, r2
   d635c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6360:	bf1c      	itt	ne
   d6362:	460b      	movne	r3, r1
   d6364:	4602      	movne	r2, r0
   d6366:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d636a:	bf06      	itte	eq
   d636c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6370:	ea91 0f03 	teqeq	r1, r3
   d6374:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6378:	bd30      	pop	{r4, r5, pc}
   d637a:	bf00      	nop

000d637c <__aeabi_ui2d>:
   d637c:	f090 0f00 	teq	r0, #0
   d6380:	bf04      	itt	eq
   d6382:	2100      	moveq	r1, #0
   d6384:	4770      	bxeq	lr
   d6386:	b530      	push	{r4, r5, lr}
   d6388:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d638c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6390:	f04f 0500 	mov.w	r5, #0
   d6394:	f04f 0100 	mov.w	r1, #0
   d6398:	e750      	b.n	d623c <__adddf3+0x138>
   d639a:	bf00      	nop

000d639c <__aeabi_i2d>:
   d639c:	f090 0f00 	teq	r0, #0
   d63a0:	bf04      	itt	eq
   d63a2:	2100      	moveq	r1, #0
   d63a4:	4770      	bxeq	lr
   d63a6:	b530      	push	{r4, r5, lr}
   d63a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d63ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d63b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d63b4:	bf48      	it	mi
   d63b6:	4240      	negmi	r0, r0
   d63b8:	f04f 0100 	mov.w	r1, #0
   d63bc:	e73e      	b.n	d623c <__adddf3+0x138>
   d63be:	bf00      	nop

000d63c0 <__aeabi_f2d>:
   d63c0:	0042      	lsls	r2, r0, #1
   d63c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d63c6:	ea4f 0131 	mov.w	r1, r1, rrx
   d63ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d63ce:	bf1f      	itttt	ne
   d63d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d63d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d63d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d63dc:	4770      	bxne	lr
   d63de:	f092 0f00 	teq	r2, #0
   d63e2:	bf14      	ite	ne
   d63e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d63e8:	4770      	bxeq	lr
   d63ea:	b530      	push	{r4, r5, lr}
   d63ec:	f44f 7460 	mov.w	r4, #896	; 0x380
   d63f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d63f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d63f8:	e720      	b.n	d623c <__adddf3+0x138>
   d63fa:	bf00      	nop

000d63fc <__aeabi_ul2d>:
   d63fc:	ea50 0201 	orrs.w	r2, r0, r1
   d6400:	bf08      	it	eq
   d6402:	4770      	bxeq	lr
   d6404:	b530      	push	{r4, r5, lr}
   d6406:	f04f 0500 	mov.w	r5, #0
   d640a:	e00a      	b.n	d6422 <__aeabi_l2d+0x16>

000d640c <__aeabi_l2d>:
   d640c:	ea50 0201 	orrs.w	r2, r0, r1
   d6410:	bf08      	it	eq
   d6412:	4770      	bxeq	lr
   d6414:	b530      	push	{r4, r5, lr}
   d6416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d641a:	d502      	bpl.n	d6422 <__aeabi_l2d+0x16>
   d641c:	4240      	negs	r0, r0
   d641e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6422:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6426:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d642a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d642e:	f43f aedc 	beq.w	d61ea <__adddf3+0xe6>
   d6432:	f04f 0203 	mov.w	r2, #3
   d6436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d643a:	bf18      	it	ne
   d643c:	3203      	addne	r2, #3
   d643e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6442:	bf18      	it	ne
   d6444:	3203      	addne	r2, #3
   d6446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d644a:	f1c2 0320 	rsb	r3, r2, #32
   d644e:	fa00 fc03 	lsl.w	ip, r0, r3
   d6452:	fa20 f002 	lsr.w	r0, r0, r2
   d6456:	fa01 fe03 	lsl.w	lr, r1, r3
   d645a:	ea40 000e 	orr.w	r0, r0, lr
   d645e:	fa21 f102 	lsr.w	r1, r1, r2
   d6462:	4414      	add	r4, r2
   d6464:	e6c1      	b.n	d61ea <__adddf3+0xe6>
   d6466:	bf00      	nop

000d6468 <__cxa_atexit>:
   d6468:	b510      	push	{r4, lr}
   d646a:	4c05      	ldr	r4, [pc, #20]	; (d6480 <__cxa_atexit+0x18>)
   d646c:	4613      	mov	r3, r2
   d646e:	b12c      	cbz	r4, d647c <__cxa_atexit+0x14>
   d6470:	460a      	mov	r2, r1
   d6472:	4601      	mov	r1, r0
   d6474:	2002      	movs	r0, #2
   d6476:	f3af 8000 	nop.w
   d647a:	bd10      	pop	{r4, pc}
   d647c:	4620      	mov	r0, r4
   d647e:	bd10      	pop	{r4, pc}
   d6480:	00000000 	.word	0x00000000

000d6484 <memcpy>:
   d6484:	b510      	push	{r4, lr}
   d6486:	1e43      	subs	r3, r0, #1
   d6488:	440a      	add	r2, r1
   d648a:	4291      	cmp	r1, r2
   d648c:	d004      	beq.n	d6498 <memcpy+0x14>
   d648e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6492:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6496:	e7f8      	b.n	d648a <memcpy+0x6>
   d6498:	bd10      	pop	{r4, pc}

000d649a <memset>:
   d649a:	4402      	add	r2, r0
   d649c:	4603      	mov	r3, r0
   d649e:	4293      	cmp	r3, r2
   d64a0:	d002      	beq.n	d64a8 <memset+0xe>
   d64a2:	f803 1b01 	strb.w	r1, [r3], #1
   d64a6:	e7fa      	b.n	d649e <memset+0x4>
   d64a8:	4770      	bx	lr
	...

000d64ac <srand>:
   d64ac:	b538      	push	{r3, r4, r5, lr}
   d64ae:	4b12      	ldr	r3, [pc, #72]	; (d64f8 <srand+0x4c>)
   d64b0:	681c      	ldr	r4, [r3, #0]
   d64b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d64b4:	4605      	mov	r5, r0
   d64b6:	b9d3      	cbnz	r3, d64ee <srand+0x42>
   d64b8:	2018      	movs	r0, #24
   d64ba:	f7fe fd9f 	bl	d4ffc <malloc>
   d64be:	f243 330e 	movw	r3, #13070	; 0x330e
   d64c2:	63a0      	str	r0, [r4, #56]	; 0x38
   d64c4:	8003      	strh	r3, [r0, #0]
   d64c6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d64ca:	8043      	strh	r3, [r0, #2]
   d64cc:	f241 2334 	movw	r3, #4660	; 0x1234
   d64d0:	8083      	strh	r3, [r0, #4]
   d64d2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d64d6:	80c3      	strh	r3, [r0, #6]
   d64d8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d64dc:	8103      	strh	r3, [r0, #8]
   d64de:	2305      	movs	r3, #5
   d64e0:	8143      	strh	r3, [r0, #10]
   d64e2:	230b      	movs	r3, #11
   d64e4:	8183      	strh	r3, [r0, #12]
   d64e6:	2201      	movs	r2, #1
   d64e8:	2300      	movs	r3, #0
   d64ea:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d64ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d64f0:	2200      	movs	r2, #0
   d64f2:	611d      	str	r5, [r3, #16]
   d64f4:	615a      	str	r2, [r3, #20]
   d64f6:	bd38      	pop	{r3, r4, r5, pc}
   d64f8:	2003e294 	.word	0x2003e294

000d64fc <strlen>:
   d64fc:	4603      	mov	r3, r0
   d64fe:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6502:	2a00      	cmp	r2, #0
   d6504:	d1fb      	bne.n	d64fe <strlen+0x2>
   d6506:	1a18      	subs	r0, r3, r0
   d6508:	3801      	subs	r0, #1
   d650a:	4770      	bx	lr

000d650c <dynalib_user>:
   d650c:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d651c:	0000 0000 7542 7474 6e6f 3120 6c20 6e6f     ....Button 1 lon
   d652c:	5067 6572 7373 7320 6f74 0070 7542 7474     gPress stop.Butt
   d653c:	6e6f 3120 6c20 6e6f 5067 6572 7373 7320     on 1 longPress s
   d654c:	6174 7472 5400 6d65 6570 6172 7574 6572     tart.Temperature
   d655c:	203a 6625 000a 0000                         : %f....

000d6564 <_ZTVN8particle13__SPISettingsE>:
	...
   d656c:	4509 000d 6564 6166 6c75 2074 4d00 4253     .E..default .MSB
   d657c:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   d658c:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   d659c:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
   d65ac:	4d20 444f 2545 3e64 0000 0000                MODE%d>....

000d65b8 <_ZTVN5spark13EthernetClassE>:
	...
   d65c0:	50dd 000d 50d3 000d 50c9 000d 50bf 000d     .P...P...P...P..
   d65d0:	50b3 000d 50a7 000d 509b 000d 5093 000d     .P...P...P...P..
   d65e0:	5089 000d 507f 000d 54dd 000d               .P...P...T..

000d65ec <_ZTV7TwoWire>:
	...
   d65f4:	50fd 000d 5147 000d 511f 000d 50ff 000d     .P..GQ...Q...P..
   d6604:	5127 000d 512f 000d 5137 000d 513f 000d     'Q../Q..7Q..?Q..

000d6614 <_ZTV9IPAddress>:
	...
   d661c:	5215 000d 5205 000d 5207 000d 6162 6475     .R...R...R..baud
   d662c:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d663c:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d664c:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d665c:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d666c:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d667c:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d668c:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d669c:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d66ac:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d66bc:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d66cc:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
   d66dc:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   d66ec:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d66fc:	726f 7000 6e61 6369 6100 6c6c 0000 0000     or.panic.all....

000d670c <_ZTVN5spark9MeshClassE>:
	...
   d6714:	5357 000d 534d 000d 5343 000d 5339 000d     WS..MS..CS..9S..
   d6724:	532d 000d 5321 000d 5315 000d 530d 000d     -S..!S...S...S..
   d6734:	5303 000d 52f9 000d 54dd 000d               .S...R...T..

000d6740 <_ZTVN5spark12NetworkClassE>:
	...
   d6748:	5475 000d 547f 000d 5489 000d 5493 000d     uT...T...T...T..
   d6758:	549d 000d 54a9 000d 54b5 000d 54c1 000d     .T...T...T...T..
   d6768:	54c9 000d 54d3 000d 54dd 000d               .T...T...T..

000d6774 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d6774:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
   d6784:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d6794:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d67a4:	0000 0000                                   ....

000d67a8 <_ZTV11USARTSerial>:
	...
   d67b0:	58d1 000d 5921 000d 592f 000d 55bd 000d     .X..!Y../Y...U..
   d67c0:	58e5 000d 5907 000d 58f3 000d 591b 000d     .X...Y...X...Y..
   d67d0:	58d3 000d 58d7 000d                         .X...X..

000d67d8 <_ZTV9USBSerial>:
	...
   d67e0:	59d9 000d 5a29 000d 5a37 000d 55bd 000d     .Y..)Z..7Z...U..
   d67f0:	5a15 000d 59db 000d 59f1 000d 5a23 000d     .Z...Y...Y..#Z..
   d6800:	5a07 000d 59d5 000d                         .Z...Y..

000d6808 <_ZTVN5spark9WiFiClassE>:
	...
   d6810:	5b43 000d 5b39 000d 5b2f 000d 5ae5 000d     C[..9[../[...Z..
   d6820:	5b23 000d 5b17 000d 5b0b 000d 5b03 000d     #[...[...[...[..
   d6830:	5af9 000d 5aef 000d 54dd 000d               .Z...Z...T..

000d683c <_ZSt7nothrow>:
   d683c:	0000 0000                                   ....

000d6840 <__sf_fake_stdin>:
	...

000d6860 <__sf_fake_stdout>:
	...

000d6880 <__sf_fake_stderr>:
	...
   d68a0:	0043                                        C.

000d68a2 <link_const_variable_data_end>:
	...

000d68a4 <link_constructors_location>:
   d68a4:	000d42f9 	.word	0x000d42f9
   d68a8:	000d44ef 	.word	0x000d44ef
   d68ac:	000d44f5 	.word	0x000d44f5
   d68b0:	000d4bbf 	.word	0x000d4bbf
   d68b4:	000d5045 	.word	0x000d5045
   d68b8:	000d50e9 	.word	0x000d50e9
   d68bc:	000d52e9 	.word	0x000d52e9
   d68c0:	000d5425 	.word	0x000d5425
   d68c4:	000d55a9 	.word	0x000d55a9
   d68c8:	000d5705 	.word	0x000d5705
   d68cc:	000d5889 	.word	0x000d5889
   d68d0:	000d58bd 	.word	0x000d58bd
   d68d4:	000d5b4d 	.word	0x000d5b4d
   d68d8:	000d5e69 	.word	0x000d5e69
   d68dc:	000d5f2d 	.word	0x000d5f2d
   d68e0:	000d5fb1 	.word	0x000d5fb1
   d68e4:	000d6035 	.word	0x000d6035

000d68e8 <link_constructors_end>:
	...
