
/Users/christianc/Documents/IoT/Capstone/LaserTest/target/1.5.2/argon/LaserTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003434  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d7450  000d7450  00007450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d7458  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  2003e204  000d745c  0001e204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000578  2003e278  2003e278  0002e278  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d74d0  000d74d0  000274d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d74f8  000d74f8  000274f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000f1883  00000000  00000000  000274fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00012f51  00000000  00000000  00118d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00021fc9  00000000  00000000  0012bcd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002868  00000000  00000000  0014dc99  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00004e18  00000000  00000000  00150501  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003865c  00000000  00000000  00155319  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002e9c2  00000000  00000000  0018d975  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010a1b5  00000000  00000000  001bc337  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000d834  00000000  00000000  002c64ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 ffa1 	bl	d6f74 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 ffa6 	bl	d6f8a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e204 	.word	0x2003e204
   d4048:	000d745c 	.word	0x000d745c
   d404c:	2003e278 	.word	0x2003e278
   d4050:	2003e278 	.word	0x2003e278
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 feeb 	bl	d5e34 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d7444 	.word	0x000d7444
   d4080:	000d7400 	.word	0x000d7400

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b85c 	b.w	d4140 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8f9 	bl	d4280 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 be91 	b.w	d5db8 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 bf45 	b.w	d4f24 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 bf43 	b.w	d4f24 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <_Z6click1v>:
  


void click1(){

  buttonState = !buttonState;
   d40b0:	4a02      	ldr	r2, [pc, #8]	; (d40bc <_Z6click1v+0xc>)
   d40b2:	7813      	ldrb	r3, [r2, #0]
   d40b4:	f083 0301 	eor.w	r3, r3, #1
   d40b8:	7013      	strb	r3, [r2, #0]
   d40ba:	4770      	bx	lr
   d40bc:	2003e36d 	.word	0x2003e36d

000d40c0 <_Z6click2v>:

}

void click2(){

  extraButtonState = !extraButtonState;
   d40c0:	4a02      	ldr	r2, [pc, #8]	; (d40cc <_Z6click2v+0xc>)
   d40c2:	7813      	ldrb	r3, [r2, #0]
   d40c4:	f083 0301 	eor.w	r3, r3, #1
   d40c8:	7013      	strb	r3, [r2, #0]
   d40ca:	4770      	bx	lr
   d40cc:	2003e384 	.word	0x2003e384

000d40d0 <_Z14longPressStop1v>:
  Serial.printf("Temperature: %f\n", temp);
  

} 

void longPressStop1() {
   d40d0:	b508      	push	{r3, lr}

  Serial.println("Button 1 longPress stop");
   d40d2:	f001 fdb5 	bl	d5c40 <_Z16_fetch_usbserialv>
   d40d6:	4904      	ldr	r1, [pc, #16]	; (d40e8 <_Z14longPressStop1v+0x18>)
   d40d8:	f001 fa3d 	bl	d5556 <_ZN5Print7printlnEPKc>
  analogWrite(D7, 0);
   d40dc:	2100      	movs	r1, #0
   d40de:	2007      	movs	r0, #7

}
   d40e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
} 

void longPressStop1() {

  Serial.println("Button 1 longPress stop");
  analogWrite(D7, 0);
   d40e4:	f001 bf45 	b.w	d5f72 <_Z11analogWritetm>
   d40e8:	000d7048 	.word	0x000d7048

000d40ec <_Z15longPressStart1v>:

  extraButtonState = !extraButtonState;

}

void longPressStart1() {
   d40ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  Serial.println("Button 1 longPress start");
   d40ee:	f001 fda7 	bl	d5c40 <_Z16_fetch_usbserialv>
   d40f2:	490c      	ldr	r1, [pc, #48]	; (d4124 <_Z15longPressStart1v+0x38>)
   d40f4:	f001 fa2f 	bl	d5556 <_ZN5Print7printlnEPKc>
  analogWrite(D7, 200);
   d40f8:	21c8      	movs	r1, #200	; 0xc8
   d40fa:	2007      	movs	r0, #7
   d40fc:	f001 ff39 	bl	d5f72 <_Z11analogWritetm>
  Serial.printf("Temperature: %f\n", temp);
   d4100:	f001 fd9e 	bl	d5c40 <_Z16_fetch_usbserialv>
   d4104:	4908      	ldr	r1, [pc, #32]	; (d4128 <_Z15longPressStart1v+0x3c>)
   d4106:	4604      	mov	r4, r0
   d4108:	4668      	mov	r0, sp
   d410a:	f001 fc3b 	bl	d5984 <_ZN6StringC1ERKS_>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d410e:	466b      	mov	r3, sp
   d4110:	4a06      	ldr	r2, [pc, #24]	; (d412c <_Z15longPressStart1v+0x40>)
   d4112:	2100      	movs	r1, #0
   d4114:	4620      	mov	r0, r4
   d4116:	f001 fa48 	bl	d55aa <_ZN5Print11printf_implEbPKcz>
   d411a:	4668      	mov	r0, sp
   d411c:	f001 fbac 	bl	d5878 <_ZN6StringD1Ev>
  

} 
   d4120:	b004      	add	sp, #16
   d4122:	bd10      	pop	{r4, pc}
   d4124:	000d7060 	.word	0x000d7060
   d4128:	2003e27c 	.word	0x2003e27c
   d412c:	000d7079 	.word	0x000d7079

000d4130 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4130:	b510      	push	{r4, lr}
   d4132:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d4134:	6800      	ldr	r0, [r0, #0]
   d4136:	b108      	cbz	r0, d413c <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4138:	f000 fef4 	bl	d4f24 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d413c:	4620      	mov	r0, r4
   d413e:	bd10      	pop	{r4, pc}

000d4140 <setup>:
byte data[8];
int i;
int u;
int n;

void setup() {
   d4140:	b510      	push	{r4, lr}

  Serial.begin(9600);
   d4142:	f001 fd7d 	bl	d5c40 <_Z16_fetch_usbserialv>
   d4146:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d414a:	f001 fd6d 	bl	d5c28 <_ZN9USBSerial5beginEl>

  bme.begin(0x76);
   d414e:	2176      	movs	r1, #118	; 0x76
   d4150:	4819      	ldr	r0, [pc, #100]	; (d41b8 <setup+0x78>)
  pinMode(buttonPin, INPUT_PULLDOWN);
  pinMode(extraButtonPin, INPUT_PULLDOWN);
  pinMode(A1, OUTPUT); //used for testing 
  pinMode(D7, OUTPUT); //used for testing
  
  button1.attachClick(click1);
   d4152:	4c1a      	ldr	r4, [pc, #104]	; (d41bc <setup+0x7c>)

void setup() {

  Serial.begin(9600);

  bme.begin(0x76);
   d4154:	f000 fc74 	bl	d4a40 <_ZN15Adafruit_BME2805beginEh>

  pinMode(laserPin, OUTPUT);
   d4158:	2101      	movs	r1, #1
   d415a:	200e      	movs	r0, #14
   d415c:	f001 fecc 	bl	d5ef8 <pinMode>
  pinMode(buttonPin, INPUT_PULLDOWN);
   d4160:	2103      	movs	r1, #3
   d4162:	2005      	movs	r0, #5
   d4164:	f001 fec8 	bl	d5ef8 <pinMode>
  pinMode(extraButtonPin, INPUT_PULLDOWN);
   d4168:	2103      	movs	r1, #3
   d416a:	2006      	movs	r0, #6
   d416c:	f001 fec4 	bl	d5ef8 <pinMode>
  pinMode(A1, OUTPUT); //used for testing 
   d4170:	2101      	movs	r1, #1
   d4172:	2012      	movs	r0, #18
   d4174:	f001 fec0 	bl	d5ef8 <pinMode>
  pinMode(D7, OUTPUT); //used for testing
   d4178:	2101      	movs	r1, #1
   d417a:	2007      	movs	r0, #7
   d417c:	f001 febc 	bl	d5ef8 <pinMode>
  
  button1.attachClick(click1);
   d4180:	4620      	mov	r0, r4
   d4182:	490f      	ldr	r1, [pc, #60]	; (d41c0 <setup+0x80>)
   d4184:	f000 fc98 	bl	d4ab8 <_ZN9OneButton11attachClickEPFvvE>
  button1.attachLongPressStart(longPressStart1);
   d4188:	4620      	mov	r0, r4
   d418a:	490e      	ldr	r1, [pc, #56]	; (d41c4 <setup+0x84>)
   d418c:	f000 fc96 	bl	d4abc <_ZN9OneButton20attachLongPressStartEPFvvE>
  button1.attachLongPressStop(longPressStop1);
   d4190:	4620      	mov	r0, r4
   d4192:	490d      	ldr	r1, [pc, #52]	; (d41c8 <setup+0x88>)
   d4194:	f000 fc94 	bl	d4ac0 <_ZN9OneButton19attachLongPressStopEPFvvE>
  button1.setClickTicks(250);
   d4198:	4620      	mov	r0, r4

  button2.attachClick(click2);
   d419a:	4c0c      	ldr	r4, [pc, #48]	; (d41cc <setup+0x8c>)
  pinMode(D7, OUTPUT); //used for testing
  
  button1.attachClick(click1);
  button1.attachLongPressStart(longPressStart1);
  button1.attachLongPressStop(longPressStop1);
  button1.setClickTicks(250);
   d419c:	21fa      	movs	r1, #250	; 0xfa
   d419e:	f000 fc89 	bl	d4ab4 <_ZN9OneButton13setClickTicksEi>

  button2.attachClick(click2);
   d41a2:	4620      	mov	r0, r4
   d41a4:	490a      	ldr	r1, [pc, #40]	; (d41d0 <setup+0x90>)
   d41a6:	f000 fc87 	bl	d4ab8 <_ZN9OneButton11attachClickEPFvvE>
  button2.setClickTicks(250);
   d41aa:	4620      	mov	r0, r4
   d41ac:	21fa      	movs	r1, #250	; 0xfa

}
   d41ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  button1.attachLongPressStart(longPressStart1);
  button1.attachLongPressStop(longPressStop1);
  button1.setClickTicks(250);

  button2.attachClick(click2);
  button2.setClickTicks(250);
   d41b2:	f000 bc7f 	b.w	d4ab4 <_ZN9OneButton13setClickTicksEi>
   d41b6:	bf00      	nop
   d41b8:	2003e388 	.word	0x2003e388
   d41bc:	2003e298 	.word	0x2003e298
   d41c0:	000d40b1 	.word	0x000d40b1
   d41c4:	000d40ed 	.word	0x000d40ed
   d41c8:	000d40d1 	.word	0x000d40d1
   d41cc:	2003e300 	.word	0x2003e300
   d41d0:	000d40c1 	.word	0x000d40c1

000d41d4 <_Z8beamZerov>:
  Serial.println("Button 1 longPress stop");
  analogWrite(D7, 0);

}

void beamZero() {
   d41d4:	b508      	push	{r3, lr}

  // Serial.printf("Array value is ZERO\n");
  digitalWrite(laserPin, HIGH);
   d41d6:	2101      	movs	r1, #1
   d41d8:	200e      	movs	r0, #14
   d41da:	f001 fe9e 	bl	d5f1a <digitalWrite>
  //Serial.printf("ZERO\n");
  delay(zeroTime);
   d41de:	4b07      	ldr	r3, [pc, #28]	; (d41fc <_Z8beamZerov+0x28>)
   d41e0:	6818      	ldr	r0, [r3, #0]
   d41e2:	f000 feb7 	bl	d4f54 <delay>
  digitalWrite(laserPin, LOW);
   d41e6:	200e      	movs	r0, #14
   d41e8:	2100      	movs	r1, #0
   d41ea:	f001 fe96 	bl	d5f1a <digitalWrite>
  delay(offDelay);
   d41ee:	4b04      	ldr	r3, [pc, #16]	; (d4200 <_Z8beamZerov+0x2c>)
   d41f0:	6818      	ldr	r0, [r3, #0]

}
   d41f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  // Serial.printf("Array value is ZERO\n");
  digitalWrite(laserPin, HIGH);
  //Serial.printf("ZERO\n");
  delay(zeroTime);
  digitalWrite(laserPin, LOW);
  delay(offDelay);
   d41f6:	f000 bead 	b.w	d4f54 <delay>
   d41fa:	bf00      	nop
   d41fc:	2003e20c 	.word	0x2003e20c
   d4200:	2003e204 	.word	0x2003e204

000d4204 <_Z7beamOnev>:

}

void beamOne() {
   d4204:	b508      	push	{r3, lr}

  //Serial.printf("Array value is ONE\n");
  digitalWrite(laserPin, HIGH);
   d4206:	2101      	movs	r1, #1
   d4208:	200e      	movs	r0, #14
   d420a:	f001 fe86 	bl	d5f1a <digitalWrite>
  //Serial.printf("ONE\n");
  delay(oneTime);
   d420e:	4b07      	ldr	r3, [pc, #28]	; (d422c <_Z7beamOnev+0x28>)
   d4210:	6818      	ldr	r0, [r3, #0]
   d4212:	f000 fe9f 	bl	d4f54 <delay>
  digitalWrite(laserPin, LOW);
   d4216:	200e      	movs	r0, #14
   d4218:	2100      	movs	r1, #0
   d421a:	f001 fe7e 	bl	d5f1a <digitalWrite>
  delay(offDelay);
   d421e:	4b04      	ldr	r3, [pc, #16]	; (d4230 <_Z7beamOnev+0x2c>)
   d4220:	6818      	ldr	r0, [r3, #0]

   d4222:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  //Serial.printf("Array value is ONE\n");
  digitalWrite(laserPin, HIGH);
  //Serial.printf("ONE\n");
  delay(oneTime);
  digitalWrite(laserPin, LOW);
  delay(offDelay);
   d4226:	f000 be95 	b.w	d4f54 <delay>
   d422a:	bf00      	nop
   d422c:	2003e208 	.word	0x2003e208
   d4230:	2003e204 	.word	0x2003e204

000d4234 <_Z9sendAsciiPh>:
  n++;
  Serial.printf("\ntemp_array: %s data: %i i: %i u: %i n: %i\n", temp_array, data, i, u, n);
  sendAscii(data);
}

void sendAscii(byte send_array[8]){
   d4234:	b570      	push	{r4, r5, r6, lr}
  for(i = 0; i < 8; i++){ 
   d4236:	4c0f      	ldr	r4, [pc, #60]	; (d4274 <_Z9sendAsciiPh+0x40>)
  n++;
  Serial.printf("\ntemp_array: %s data: %i i: %i u: %i n: %i\n", temp_array, data, i, u, n);
  sendAscii(data);
}

void sendAscii(byte send_array[8]){
   d4238:	4606      	mov	r6, r0
  for(i = 0; i < 8; i++){ 
   d423a:	2300      	movs	r3, #0
   d423c:	6023      	str	r3, [r4, #0]
   d423e:	6823      	ldr	r3, [r4, #0]
   d4240:	2b07      	cmp	r3, #7
   d4242:	dc15      	bgt.n	d4270 <_Z9sendAsciiPh+0x3c>
      // send_array[u] = 0 == 1;

      if(send_array[i] == 0){ //laser 
   d4244:	5cf5      	ldrb	r5, [r6, r3]
   d4246:	b935      	cbnz	r5, d4256 <_Z9sendAsciiPh+0x22>
      beamZero(); 
   d4248:	f7ff ffc4 	bl	d41d4 <_Z8beamZerov>
      Serial.printf("Zero");
   d424c:	f001 fcf8 	bl	d5c40 <_Z16_fetch_usbserialv>
   d4250:	4a09      	ldr	r2, [pc, #36]	; (d4278 <_Z9sendAsciiPh+0x44>)
   d4252:	4629      	mov	r1, r5
   d4254:	e007      	b.n	d4266 <_Z9sendAsciiPh+0x32>
      }
      else if(send_array[i] == 1){
   d4256:	2d01      	cmp	r5, #1
   d4258:	d107      	bne.n	d426a <_Z9sendAsciiPh+0x36>
      beamOne();
   d425a:	f7ff ffd3 	bl	d4204 <_Z7beamOnev>
      Serial.printf("One");
   d425e:	f001 fcef 	bl	d5c40 <_Z16_fetch_usbserialv>
   d4262:	4a06      	ldr	r2, [pc, #24]	; (d427c <_Z9sendAsciiPh+0x48>)
   d4264:	2100      	movs	r1, #0
   d4266:	f001 f9a0 	bl	d55aa <_ZN5Print11printf_implEbPKcz>
  Serial.printf("\ntemp_array: %s data: %i i: %i u: %i n: %i\n", temp_array, data, i, u, n);
  sendAscii(data);
}

void sendAscii(byte send_array[8]){
  for(i = 0; i < 8; i++){ 
   d426a:	6823      	ldr	r3, [r4, #0]
   d426c:	3301      	adds	r3, #1
   d426e:	e7e5      	b.n	d423c <_Z9sendAsciiPh+0x8>
   d4270:	bd70      	pop	{r4, r5, r6, pc}
   d4272:	bf00      	nop
   d4274:	2003e370 	.word	0x2003e370
   d4278:	000d708a 	.word	0x000d708a
   d427c:	000d708f 	.word	0x000d708f

000d4280 <loop>:
  button2.attachClick(click2);
  button2.setClickTicks(250);

}

void loop() {
   d4280:	b570      	push	{r4, r5, r6, lr}

  temp = String(bme.readTemperature());
   d4282:	481e      	ldr	r0, [pc, #120]	; (d42fc <loop+0x7c>)

  temp.toCharArray(temp_array, 5);

  for(i = 0; i < 8; i++){
    data[i] = temp_array[n] >> i && 0x01;
   d4284:	4c1e      	ldr	r4, [pc, #120]	; (d4300 <loop+0x80>)
   d4286:	4e1f      	ldr	r6, [pc, #124]	; (d4304 <loop+0x84>)
  button2.attachClick(click2);
  button2.setClickTicks(250);

}

void loop() {
   d4288:	b088      	sub	sp, #32

  temp = String(bme.readTemperature());
   d428a:	f000 f987 	bl	d459c <_ZN15Adafruit_BME28015readTemperatureEv>
   d428e:	2106      	movs	r1, #6
   d4290:	a804      	add	r0, sp, #16
   d4292:	f001 fb9b 	bl	d59cc <_ZN6StringC1Efi>
   d4296:	a904      	add	r1, sp, #16
   d4298:	481b      	ldr	r0, [pc, #108]	; (d4308 <loop+0x88>)
   d429a:	f001 fb7e 	bl	d599a <_ZN6StringaSEOS_>
   d429e:	a804      	add	r0, sp, #16
   d42a0:	f001 faea 	bl	d5878 <_ZN6StringD1Ev>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d42a4:	2300      	movs	r3, #0
   d42a6:	2205      	movs	r2, #5
   d42a8:	4916      	ldr	r1, [pc, #88]	; (d4304 <loop+0x84>)
   d42aa:	4817      	ldr	r0, [pc, #92]	; (d4308 <loop+0x88>)
   d42ac:	f001 fba8 	bl	d5a00 <_ZNK6String8getBytesEPhjj>

  temp.toCharArray(temp_array, 5);

  for(i = 0; i < 8; i++){
    data[i] = temp_array[n] >> i && 0x01;
   d42b0:	6822      	ldr	r2, [r4, #0]
   d42b2:	4916      	ldr	r1, [pc, #88]	; (d430c <loop+0x8c>)
   d42b4:	2300      	movs	r3, #0
   d42b6:	5cb0      	ldrb	r0, [r6, r2]
   d42b8:	4d14      	ldr	r5, [pc, #80]	; (d430c <loop+0x8c>)
   d42ba:	4118      	asrs	r0, r3
   d42bc:	bf14      	ite	ne
   d42be:	2001      	movne	r0, #1
   d42c0:	2000      	moveq	r0, #0
   d42c2:	5458      	strb	r0, [r3, r1]

  temp = String(bme.readTemperature());

  temp.toCharArray(temp_array, 5);

  for(i = 0; i < 8; i++){
   d42c4:	3301      	adds	r3, #1
   d42c6:	2b08      	cmp	r3, #8
   d42c8:	d1f5      	bne.n	d42b6 <loop+0x36>
   d42ca:	4e11      	ldr	r6, [pc, #68]	; (d4310 <loop+0x90>)
    data[i] = temp_array[n] >> i && 0x01;

  }
  n++;
   d42cc:	3201      	adds	r2, #1
   d42ce:	6033      	str	r3, [r6, #0]
   d42d0:	6022      	str	r2, [r4, #0]
  Serial.printf("\ntemp_array: %s data: %i i: %i u: %i n: %i\n", temp_array, data, i, u, n);
   d42d2:	f001 fcb5 	bl	d5c40 <_Z16_fetch_usbserialv>
   d42d6:	6823      	ldr	r3, [r4, #0]
   d42d8:	9303      	str	r3, [sp, #12]
   d42da:	4b0e      	ldr	r3, [pc, #56]	; (d4314 <loop+0x94>)
   d42dc:	4a0e      	ldr	r2, [pc, #56]	; (d4318 <loop+0x98>)
   d42de:	681b      	ldr	r3, [r3, #0]
   d42e0:	9302      	str	r3, [sp, #8]
   d42e2:	6833      	ldr	r3, [r6, #0]
   d42e4:	9301      	str	r3, [sp, #4]
   d42e6:	2100      	movs	r1, #0
   d42e8:	4b06      	ldr	r3, [pc, #24]	; (d4304 <loop+0x84>)
   d42ea:	9500      	str	r5, [sp, #0]
   d42ec:	f001 f95d 	bl	d55aa <_ZN5Print11printf_implEbPKcz>
  sendAscii(data);
   d42f0:	4628      	mov	r0, r5
   d42f2:	f7ff ff9f 	bl	d4234 <_Z9sendAsciiPh>
}
   d42f6:	b008      	add	sp, #32
   d42f8:	bd70      	pop	{r4, r5, r6, pc}
   d42fa:	bf00      	nop
   d42fc:	2003e388 	.word	0x2003e388
   d4300:	2003e37c 	.word	0x2003e37c
   d4304:	2003e368 	.word	0x2003e368
   d4308:	2003e27c 	.word	0x2003e27c
   d430c:	2003e374 	.word	0x2003e374
   d4310:	2003e370 	.word	0x2003e370
   d4314:	2003e380 	.word	0x2003e380
   d4318:	000d7093 	.word	0x000d7093

000d431c <_GLOBAL__sub_I_SystemMode>:
  //Serial.printf("ONE\n");
  delay(oneTime);
  digitalWrite(laserPin, LOW);
  delay(offDelay);

   d431c:	b570      	push	{r4, r5, r6, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d431e:	4d17      	ldr	r5, [pc, #92]	; (d437c <_GLOBAL__sub_I_SystemMode+0x60>)
 * Author: Christian Chavez
 * Date: 11-23-2020
 */


SYSTEM_MODE(SEMI_AUTOMATIC);
   d4320:	4e17      	ldr	r6, [pc, #92]	; (d4380 <_GLOBAL__sub_I_SystemMode+0x64>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4322:	f000 fc13 	bl	d4b4c <HAL_Pin_Map>
   d4326:	2400      	movs	r4, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4328:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d432c:	2002      	movs	r0, #2
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d432e:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4330:	602c      	str	r4, [r5, #0]
   d4332:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4334:	71ac      	strb	r4, [r5, #6]
   d4336:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4338:	f000 fd70 	bl	d4e1c <set_system_mode>
   d433c:	4632      	mov	r2, r6
   d433e:	4911      	ldr	r1, [pc, #68]	; (d4384 <_GLOBAL__sub_I_SystemMode+0x68>)
   d4340:	4628      	mov	r0, r5
   d4342:	f001 fe7d 	bl	d6040 <__aeabi_atexit>

const int laserPin = A5;
const int buttonPin = D5;
const int extraButtonPin = D6;

OneButton button1(buttonPin, false, false);
   d4346:	4623      	mov	r3, r4
   d4348:	4622      	mov	r2, r4
   d434a:	2105      	movs	r1, #5
   d434c:	480e      	ldr	r0, [pc, #56]	; (d4388 <_GLOBAL__sub_I_SystemMode+0x6c>)
   d434e:	f000 fb84 	bl	d4a5a <_ZN9OneButtonC1Eibb>
OneButton button2(extraButtonPin, false, false);
   d4352:	4622      	mov	r2, r4
   d4354:	4623      	mov	r3, r4
   d4356:	2106      	movs	r1, #6
unsigned int oneLastTime;

bool buttonState;
bool extraButtonState;

String temp;
   d4358:	4c0c      	ldr	r4, [pc, #48]	; (d438c <_GLOBAL__sub_I_SystemMode+0x70>)
const int laserPin = A5;
const int buttonPin = D5;
const int extraButtonPin = D6;

OneButton button1(buttonPin, false, false);
OneButton button2(extraButtonPin, false, false);
   d435a:	480d      	ldr	r0, [pc, #52]	; (d4390 <_GLOBAL__sub_I_SystemMode+0x74>)
   d435c:	f000 fb7d 	bl	d4a5a <_ZN9OneButtonC1Eibb>
Adafruit_BME280 bme;
   d4360:	480c      	ldr	r0, [pc, #48]	; (d4394 <_GLOBAL__sub_I_SystemMode+0x78>)
   d4362:	f000 f849 	bl	d43f8 <_ZN15Adafruit_BME280C1Ev>
unsigned int oneLastTime;

bool buttonState;
bool extraButtonState;

String temp;
   d4366:	490c      	ldr	r1, [pc, #48]	; (d4398 <_GLOBAL__sub_I_SystemMode+0x7c>)
   d4368:	4620      	mov	r0, r4
   d436a:	f001 facc 	bl	d5906 <_ZN6StringC1EPK19__FlashStringHelper>
   d436e:	4632      	mov	r2, r6
   d4370:	4620      	mov	r0, r4
   d4372:	490a      	ldr	r1, [pc, #40]	; (d439c <_GLOBAL__sub_I_SystemMode+0x80>)
  //Serial.printf("ONE\n");
  delay(oneTime);
  digitalWrite(laserPin, LOW);
  delay(offDelay);

   d4374:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
unsigned int oneLastTime;

bool buttonState;
bool extraButtonState;

String temp;
   d4378:	f001 be62 	b.w	d6040 <__aeabi_atexit>
   d437c:	2003e28c 	.word	0x2003e28c
   d4380:	2003e278 	.word	0x2003e278
   d4384:	000d4131 	.word	0x000d4131
   d4388:	2003e298 	.word	0x2003e298
   d438c:	2003e27c 	.word	0x2003e27c
   d4390:	2003e300 	.word	0x2003e300
   d4394:	2003e388 	.word	0x2003e388
   d4398:	000d722b 	.word	0x000d722b
   d439c:	000d5879 	.word	0x000d5879

000d43a0 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d43a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d43a2:	4602      	mov	r2, r0
   d43a4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d43a6:	7913      	ldrb	r3, [r2, #4]
   d43a8:	6895      	ldr	r5, [r2, #8]
   d43aa:	b133      	cbz	r3, d43ba <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d43ac:	b93d      	cbnz	r5, d43be <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d43ae:	490c      	ldr	r1, [pc, #48]	; (d43e0 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d43b0:	b004      	add	sp, #16
   d43b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d43b6:	f001 b8bb 	b.w	d5530 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d43ba:	4b0a      	ldr	r3, [pc, #40]	; (d43e4 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d43bc:	e000      	b.n	d43c0 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d43be:	4b0a      	ldr	r3, [pc, #40]	; (d43e8 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d43c0:	7b16      	ldrb	r6, [r2, #12]
   d43c2:	4c0a      	ldr	r4, [pc, #40]	; (d43ec <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d43c4:	490a      	ldr	r1, [pc, #40]	; (d43f0 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
   d43c6:	7b52      	ldrb	r2, [r2, #13]
   d43c8:	9202      	str	r2, [sp, #8]
   d43ca:	2e01      	cmp	r6, #1
   d43cc:	bf08      	it	eq
   d43ce:	4621      	moveq	r1, r4
   d43d0:	9101      	str	r1, [sp, #4]
   d43d2:	9500      	str	r5, [sp, #0]
   d43d4:	4a07      	ldr	r2, [pc, #28]	; (d43f4 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d43d6:	2100      	movs	r1, #0
   d43d8:	f001 f8e7 	bl	d55aa <_ZN5Print11printf_implEbPKcz>
  }
   d43dc:	b004      	add	sp, #16
   d43de:	bd70      	pop	{r4, r5, r6, pc}
   d43e0:	000d70dd 	.word	0x000d70dd
   d43e4:	000d722b 	.word	0x000d722b
   d43e8:	000d70cc 	.word	0x000d70cc
   d43ec:	000d70d5 	.word	0x000d70d5
   d43f0:	000d70d9 	.word	0x000d70d9
   d43f4:	000d70f3 	.word	0x000d70f3

000d43f8 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d43f8:	22ff      	movs	r2, #255	; 0xff
   d43fa:	7402      	strb	r2, [r0, #16]
   d43fc:	7442      	strb	r2, [r0, #17]
   d43fe:	7482      	strb	r2, [r0, #18]
   d4400:	74c2      	strb	r2, [r0, #19]
{ }
   d4402:	4770      	bx	lr

000d4404 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4404:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d4406:	4d09      	ldr	r5, [pc, #36]	; (d442c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d4408:	6829      	ldr	r1, [r5, #0]
   d440a:	f011 0401 	ands.w	r4, r1, #1
   d440e:	d10a      	bne.n	d4426 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4410:	4628      	mov	r0, r5
   d4412:	f7ff fe44 	bl	d409e <__cxa_guard_acquire>
   d4416:	b130      	cbz	r0, d4426 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4418:	4621      	mov	r1, r4
   d441a:	4805      	ldr	r0, [pc, #20]	; (d4430 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d441c:	f001 f91a 	bl	d5654 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4420:	4628      	mov	r0, r5
   d4422:	f7ff fe41 	bl	d40a8 <__cxa_guard_release>
        return instance;
    }
   d4426:	4802      	ldr	r0, [pc, #8]	; (d4430 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4428:	bd38      	pop	{r3, r4, r5, pc}
   d442a:	bf00      	nop
   d442c:	2003e3cc 	.word	0x2003e3cc
   d4430:	2003e3d0 	.word	0x2003e3d0

000d4434 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d4438:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d443c:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d443e:	4605      	mov	r5, r0
   d4440:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
   d4442:	d106      	bne.n	d4452 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4444:	f7ff ffde 	bl	d4404 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4448:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d444a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d444e:	f001 b9a5 	b.w	d579c <_ZN8SPIClass8transferEh>
   d4452:	2607      	movs	r6, #7
   d4454:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
   d4456:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
   d445a:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d445e:	2100      	movs	r1, #0
   d4460:	b280      	uxth	r0, r0
   d4462:	f001 fd5a 	bl	d5f1a <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d4466:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d446a:	fa08 f106 	lsl.w	r1, r8, r6
   d446e:	4039      	ands	r1, r7
   d4470:	b280      	uxth	r0, r0
   d4472:	f001 fd52 	bl	d5f1a <digitalWrite>
        digitalWrite(_sck, HIGH);
   d4476:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d447a:	2101      	movs	r1, #1
   d447c:	b280      	uxth	r0, r0
   d447e:	f001 fd4c 	bl	d5f1a <digitalWrite>
        if (digitalRead(_miso))
   d4482:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d4486:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4488:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d448a:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d448c:	f001 fd5e 	bl	d5f4c <digitalRead>
   d4490:	b108      	cbz	r0, d4496 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d4492:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
   d4496:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
   d449a:	d2de      	bcs.n	d445a <_ZN15Adafruit_BME2807spixferEh+0x26>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d449c:	4620      	mov	r0, r4
   d449e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d44a2 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   d44a2:	b508      	push	{r3, lr}
        instance().endTransaction();
   d44a4:	f7ff ffae 	bl	d4404 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
    }
   d44a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
        instance().endTransaction();
   d44ac:	f001 b8ed 	b.w	d568a <_ZN8SPIClass14endTransactionEv>

000d44b0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>:
        instance().usingInterrupt(arg);
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
   d44b0:	b510      	push	{r4, lr}
   d44b2:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d44b4:	f7ff ffa6 	bl	d4404 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d44b8:	4621      	mov	r1, r4
    }
   d44ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
   d44be:	f001 b8fd 	b.w	d56bc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
	...

000d44c4 <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d44c4:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
   d44c6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d44ca:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d44cc:	b085      	sub	sp, #20
   d44ce:	4604      	mov	r4, r0
   d44d0:	460d      	mov	r5, r1
    uint32_t value;

    if (_cs == -1) {
   d44d2:	d121      	bne.n	d4518 <_ZN15Adafruit_BME2806read24Eh+0x54>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d44d4:	7901      	ldrb	r1, [r0, #4]
   d44d6:	6800      	ldr	r0, [r0, #0]
   d44d8:	f000 fe19 	bl	d510e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d44dc:	6820      	ldr	r0, [r4, #0]
   d44de:	6803      	ldr	r3, [r0, #0]
   d44e0:	4629      	mov	r1, r5
   d44e2:	689b      	ldr	r3, [r3, #8]
   d44e4:	4798      	blx	r3
        _wire -> endTransmission();
   d44e6:	6820      	ldr	r0, [r4, #0]
   d44e8:	f000 fe19 	bl	d511e <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d44ec:	2203      	movs	r2, #3
   d44ee:	7921      	ldrb	r1, [r4, #4]
   d44f0:	6820      	ldr	r0, [r4, #0]
   d44f2:	f000 fe09 	bl	d5108 <_ZN7TwoWire11requestFromEhj>

        value = _wire -> read();
   d44f6:	6820      	ldr	r0, [r4, #0]
   d44f8:	6803      	ldr	r3, [r0, #0]
   d44fa:	695b      	ldr	r3, [r3, #20]
   d44fc:	4798      	blx	r3
        value <<= 8;
   d44fe:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4500:	6820      	ldr	r0, [r4, #0]
   d4502:	6803      	ldr	r3, [r0, #0]
   d4504:	695b      	ldr	r3, [r3, #20]
   d4506:	4798      	blx	r3
   d4508:	4328      	orrs	r0, r5
        value <<= 8;
   d450a:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d450c:	6820      	ldr	r0, [r4, #0]
   d450e:	6803      	ldr	r3, [r0, #0]
   d4510:	695b      	ldr	r3, [r3, #20]
   d4512:	4798      	blx	r3
   d4514:	4305      	orrs	r5, r0
   d4516:	e039      	b.n	d458c <_ZN15Adafruit_BME2806read24Eh+0xc8>
    } else {
        if (_sck == -1)
   d4518:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d451c:	3301      	adds	r3, #1
   d451e:	d10e      	bne.n	d453e <_ZN15Adafruit_BME2806read24Eh+0x7a>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d4520:	4b1c      	ldr	r3, [pc, #112]	; (d4594 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d4522:	4a1d      	ldr	r2, [pc, #116]	; (d4598 <_ZN15Adafruit_BME2806read24Eh+0xd4>)
   d4524:	9300      	str	r3, [sp, #0]
   d4526:	9202      	str	r2, [sp, #8]
   d4528:	2300      	movs	r3, #0
   d452a:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d452c:	4668      	mov	r0, sp
   d452e:	f88d 3004 	strb.w	r3, [sp, #4]
   d4532:	f88d 200c 	strb.w	r2, [sp, #12]
   d4536:	f88d 300d 	strb.w	r3, [sp, #13]
   d453a:	f7ff ffb9 	bl	d44b0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d453e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4542:	2100      	movs	r1, #0
   d4544:	b280      	uxth	r0, r0
   d4546:	f001 fce8 	bl	d5f1a <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d454a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d454e:	4620      	mov	r0, r4
   d4550:	f7ff ff70 	bl	d4434 <_ZN15Adafruit_BME2807spixferEh>

        value = spixfer(0);
   d4554:	2100      	movs	r1, #0
   d4556:	4620      	mov	r0, r4
   d4558:	f7ff ff6c 	bl	d4434 <_ZN15Adafruit_BME2807spixferEh>
        value <<= 8;
        value |= spixfer(0);
   d455c:	2100      	movs	r1, #0
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
        digitalWrite(_cs, LOW);
        spixfer(reg | 0x80); // read, bit 7 high

        value = spixfer(0);
        value <<= 8;
   d455e:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d4560:	4620      	mov	r0, r4
   d4562:	f7ff ff67 	bl	d4434 <_ZN15Adafruit_BME2807spixferEh>
   d4566:	4328      	orrs	r0, r5
        value <<= 8;
   d4568:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d456a:	2100      	movs	r1, #0
   d456c:	4620      	mov	r0, r4
   d456e:	f7ff ff61 	bl	d4434 <_ZN15Adafruit_BME2807spixferEh>
   d4572:	4305      	orrs	r5, r0

        digitalWrite(_cs, HIGH);
   d4574:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4578:	2101      	movs	r1, #1
   d457a:	b280      	uxth	r0, r0
   d457c:	f001 fccd 	bl	d5f1a <digitalWrite>
        if (_sck == -1)
   d4580:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4584:	3301      	adds	r3, #1
   d4586:	d101      	bne.n	d458c <_ZN15Adafruit_BME2806read24Eh+0xc8>
            SPI.endTransaction(); // release the SPI bus
   d4588:	f7ff ff8b 	bl	d44a2 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d458c:	4628      	mov	r0, r5
   d458e:	b005      	add	sp, #20
   d4590:	bd30      	pop	{r4, r5, pc}
   d4592:	bf00      	nop
   d4594:	000d70c8 	.word	0x000d70c8
   d4598:	0007a120 	.word	0x0007a120

000d459c <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d459c:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d459e:	21fa      	movs	r1, #250	; 0xfa
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d45a0:	4604      	mov	r4, r0
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d45a2:	f7ff ff8f 	bl	d44c4 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d45a6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d45aa:	d01e      	beq.n	d45ea <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d45ac:	8aa2      	ldrh	r2, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d45ae:	ed9f 7a10 	vldr	s14, [pc, #64]	; d45f0 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
             
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d45b2:	ebc2 2320 	rsb	r3, r2, r0, asr #8
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;
   d45b6:	0052      	lsls	r2, r2, #1
   d45b8:	ebc2 10e0 	rsb	r0, r2, r0, asr #7
   d45bc:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
   d45c0:	435b      	muls	r3, r3
   d45c2:	4350      	muls	r0, r2
   d45c4:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
   d45c8:	131b      	asrs	r3, r3, #12
   d45ca:	4353      	muls	r3, r2
   d45cc:	139b      	asrs	r3, r3, #14
   d45ce:	eb03 20e0 	add.w	r0, r3, r0, asr #11
   d45d2:	60e0      	str	r0, [r4, #12]

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d45d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d45d8:	3080      	adds	r0, #128	; 0x80
   d45da:	1200      	asrs	r0, r0, #8
   d45dc:	ee07 0a90 	vmov	s15, r0
   d45e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d45e4:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d45e8:	bd10      	pop	{r4, pc}
{
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    if (adc_T == 0x800000) // value in case temp measurement was disabled
        return NAN;
   d45ea:	ed9f 0a02 	vldr	s0, [pc, #8]	; d45f4 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
}
   d45ee:	bd10      	pop	{r4, pc}
   d45f0:	42c80000 	.word	0x42c80000
   d45f4:	7fc00000 	.word	0x7fc00000

000d45f8 <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d45f8:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d45fa:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d45fe:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4600:	b085      	sub	sp, #20
   d4602:	4604      	mov	r4, r0
   d4604:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
   d4606:	d11d      	bne.n	d4644 <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4608:	7901      	ldrb	r1, [r0, #4]
   d460a:	6800      	ldr	r0, [r0, #0]
   d460c:	f000 fd7f 	bl	d510e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4610:	6820      	ldr	r0, [r4, #0]
   d4612:	6803      	ldr	r3, [r0, #0]
   d4614:	4629      	mov	r1, r5
   d4616:	689b      	ldr	r3, [r3, #8]
   d4618:	4798      	blx	r3
        _wire -> endTransmission();
   d461a:	6820      	ldr	r0, [r4, #0]
   d461c:	f000 fd7f 	bl	d511e <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d4620:	2202      	movs	r2, #2
   d4622:	7921      	ldrb	r1, [r4, #4]
   d4624:	6820      	ldr	r0, [r4, #0]
   d4626:	f000 fd6f 	bl	d5108 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d462a:	6820      	ldr	r0, [r4, #0]
   d462c:	6803      	ldr	r3, [r0, #0]
   d462e:	695b      	ldr	r3, [r3, #20]
   d4630:	4798      	blx	r3
   d4632:	4605      	mov	r5, r0
   d4634:	6820      	ldr	r0, [r4, #0]
   d4636:	6803      	ldr	r3, [r0, #0]
   d4638:	695b      	ldr	r3, [r3, #20]
   d463a:	4798      	blx	r3
   d463c:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4640:	b285      	uxth	r5, r0
   d4642:	e035      	b.n	d46b0 <_ZN15Adafruit_BME2806read16Eh+0xb8>
    } else {
        if (_sck == -1)
   d4644:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4648:	3301      	adds	r3, #1
   d464a:	d10e      	bne.n	d466a <_ZN15Adafruit_BME2806read16Eh+0x72>
   d464c:	4b1a      	ldr	r3, [pc, #104]	; (d46b8 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d464e:	4a1b      	ldr	r2, [pc, #108]	; (d46bc <_ZN15Adafruit_BME2806read16Eh+0xc4>)
   d4650:	9300      	str	r3, [sp, #0]
   d4652:	9202      	str	r2, [sp, #8]
   d4654:	2300      	movs	r3, #0
   d4656:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4658:	4668      	mov	r0, sp
   d465a:	f88d 3004 	strb.w	r3, [sp, #4]
   d465e:	f88d 200c 	strb.w	r2, [sp, #12]
   d4662:	f88d 300d 	strb.w	r3, [sp, #13]
   d4666:	f7ff ff23 	bl	d44b0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d466a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d466e:	2100      	movs	r1, #0
   d4670:	b280      	uxth	r0, r0
   d4672:	f001 fc52 	bl	d5f1a <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4676:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d467a:	4620      	mov	r0, r4
   d467c:	f7ff feda 	bl	d4434 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d4680:	2100      	movs	r1, #0
   d4682:	4620      	mov	r0, r4
   d4684:	f7ff fed6 	bl	d4434 <_ZN15Adafruit_BME2807spixferEh>
   d4688:	2100      	movs	r1, #0
   d468a:	4605      	mov	r5, r0
   d468c:	4620      	mov	r0, r4
   d468e:	f7ff fed1 	bl	d4434 <_ZN15Adafruit_BME2807spixferEh>
   d4692:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4696:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d4698:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d469c:	2101      	movs	r1, #1
   d469e:	b280      	uxth	r0, r0
   d46a0:	f001 fc3b 	bl	d5f1a <digitalWrite>
        if (_sck == -1)
   d46a4:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d46a8:	3301      	adds	r3, #1
   d46aa:	d101      	bne.n	d46b0 <_ZN15Adafruit_BME2806read16Eh+0xb8>
            SPI.endTransaction(); // release the SPI bus
   d46ac:	f7ff fef9 	bl	d44a2 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d46b0:	4628      	mov	r0, r5
   d46b2:	b005      	add	sp, #20
   d46b4:	bd30      	pop	{r4, r5, pc}
   d46b6:	bf00      	nop
   d46b8:	000d70c8 	.word	0x000d70c8
   d46bc:	0007a120 	.word	0x0007a120

000d46c0 <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d46c0:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d46c2:	f7ff ff99 	bl	d45f8 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d46c6:	ba40      	rev16	r0, r0
}
   d46c8:	b280      	uxth	r0, r0
   d46ca:	bd08      	pop	{r3, pc}

000d46cc <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d46cc:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   d46ce:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d46d2:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d46d4:	b085      	sub	sp, #20
   d46d6:	4604      	mov	r4, r0
   d46d8:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
   d46da:	d116      	bne.n	d470a <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d46dc:	7901      	ldrb	r1, [r0, #4]
   d46de:	6800      	ldr	r0, [r0, #0]
   d46e0:	f000 fd15 	bl	d510e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d46e4:	6820      	ldr	r0, [r4, #0]
   d46e6:	6803      	ldr	r3, [r0, #0]
   d46e8:	4629      	mov	r1, r5
   d46ea:	689b      	ldr	r3, [r3, #8]
   d46ec:	4798      	blx	r3
        _wire -> endTransmission();
   d46ee:	6820      	ldr	r0, [r4, #0]
   d46f0:	f000 fd15 	bl	d511e <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d46f4:	2201      	movs	r2, #1
   d46f6:	7921      	ldrb	r1, [r4, #4]
   d46f8:	6820      	ldr	r0, [r4, #0]
   d46fa:	f000 fd05 	bl	d5108 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d46fe:	6820      	ldr	r0, [r4, #0]
   d4700:	6803      	ldr	r3, [r0, #0]
   d4702:	695b      	ldr	r3, [r3, #20]
   d4704:	4798      	blx	r3
   d4706:	b2c5      	uxtb	r5, r0
   d4708:	e02e      	b.n	d4768 <_ZN15Adafruit_BME2805read8Eh+0x9c>
    } else {
        if (_sck == -1)
   d470a:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d470e:	3301      	adds	r3, #1
   d4710:	d10e      	bne.n	d4730 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d4712:	4b17      	ldr	r3, [pc, #92]	; (d4770 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d4714:	4a17      	ldr	r2, [pc, #92]	; (d4774 <_ZN15Adafruit_BME2805read8Eh+0xa8>)
   d4716:	9300      	str	r3, [sp, #0]
   d4718:	9202      	str	r2, [sp, #8]
   d471a:	2300      	movs	r3, #0
   d471c:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d471e:	4668      	mov	r0, sp
   d4720:	f88d 3004 	strb.w	r3, [sp, #4]
   d4724:	f88d 200c 	strb.w	r2, [sp, #12]
   d4728:	f88d 300d 	strb.w	r3, [sp, #13]
   d472c:	f7ff fec0 	bl	d44b0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4730:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4734:	2100      	movs	r1, #0
   d4736:	b280      	uxth	r0, r0
   d4738:	f001 fbef 	bl	d5f1a <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d473c:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4740:	4620      	mov	r0, r4
   d4742:	f7ff fe77 	bl	d4434 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d4746:	2100      	movs	r1, #0
   d4748:	4620      	mov	r0, r4
   d474a:	f7ff fe73 	bl	d4434 <_ZN15Adafruit_BME2807spixferEh>
   d474e:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d4750:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4754:	2101      	movs	r1, #1
   d4756:	b280      	uxth	r0, r0
   d4758:	f001 fbdf 	bl	d5f1a <digitalWrite>
        if (_sck == -1)
   d475c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4760:	3301      	adds	r3, #1
   d4762:	d101      	bne.n	d4768 <_ZN15Adafruit_BME2805read8Eh+0x9c>
            SPI.endTransaction(); // release the SPI bus
   d4764:	f7ff fe9d 	bl	d44a2 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
    return value;
}
   d4768:	4628      	mov	r0, r5
   d476a:	b005      	add	sp, #20
   d476c:	bd30      	pop	{r4, r5, pc}
   d476e:	bf00      	nop
   d4770:	000d70c8 	.word	0x000d70c8
   d4774:	0007a120 	.word	0x0007a120

000d4778 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d4778:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d477a:	21f3      	movs	r1, #243	; 0xf3
   d477c:	f7ff ffa6 	bl	d46cc <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d4780:	f000 0001 	and.w	r0, r0, #1
   d4784:	bd08      	pop	{r3, pc}

000d4786 <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d4786:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4788:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d478a:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d478c:	f7ff ff98 	bl	d46c0 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4790:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4792:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4794:	4620      	mov	r0, r4
   d4796:	f7ff ff93 	bl	d46c0 <_ZN15Adafruit_BME2809read16_LEEh>
   d479a:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d479c:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d479e:	4620      	mov	r0, r4
   d47a0:	f7ff ff8e 	bl	d46c0 <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d47a4:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d47a6:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d47a8:	4620      	mov	r0, r4
   d47aa:	f7ff ff89 	bl	d46c0 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d47ae:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d47b0:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d47b2:	4620      	mov	r0, r4
   d47b4:	f7ff ff84 	bl	d46c0 <_ZN15Adafruit_BME2809read16_LEEh>
   d47b8:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d47ba:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d47bc:	4620      	mov	r0, r4
   d47be:	f7ff ff7f 	bl	d46c0 <_ZN15Adafruit_BME2809read16_LEEh>
   d47c2:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d47c4:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d47c6:	4620      	mov	r0, r4
   d47c8:	f7ff ff7a 	bl	d46c0 <_ZN15Adafruit_BME2809read16_LEEh>
   d47cc:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d47ce:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d47d0:	4620      	mov	r0, r4
   d47d2:	f7ff ff75 	bl	d46c0 <_ZN15Adafruit_BME2809read16_LEEh>
   d47d6:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d47d8:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d47da:	4620      	mov	r0, r4
   d47dc:	f7ff ff70 	bl	d46c0 <_ZN15Adafruit_BME2809read16_LEEh>
   d47e0:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d47e2:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d47e4:	4620      	mov	r0, r4
   d47e6:	f7ff ff6b 	bl	d46c0 <_ZN15Adafruit_BME2809read16_LEEh>
   d47ea:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d47ec:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d47ee:	4620      	mov	r0, r4
   d47f0:	f7ff ff66 	bl	d46c0 <_ZN15Adafruit_BME2809read16_LEEh>
   d47f4:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d47f6:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d47f8:	4620      	mov	r0, r4
   d47fa:	f7ff ff61 	bl	d46c0 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d47fe:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d4800:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4802:	4620      	mov	r0, r4
   d4804:	f7ff ff62 	bl	d46cc <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4808:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d480a:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d480e:	4620      	mov	r0, r4
   d4810:	f7ff ff56 	bl	d46c0 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4814:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d4816:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4818:	4620      	mov	r0, r4
   d481a:	f7ff ff57 	bl	d46cc <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d481e:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4820:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d4824:	4620      	mov	r0, r4
   d4826:	f7ff ff51 	bl	d46cc <_ZN15Adafruit_BME2805read8Eh>
   d482a:	21e5      	movs	r1, #229	; 0xe5
   d482c:	4605      	mov	r5, r0
   d482e:	4620      	mov	r0, r4
   d4830:	f7ff ff4c 	bl	d46cc <_ZN15Adafruit_BME2805read8Eh>
   d4834:	f000 000f 	and.w	r0, r0, #15
   d4838:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d483c:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d483e:	21e6      	movs	r1, #230	; 0xe6
   d4840:	4620      	mov	r0, r4
   d4842:	f7ff ff43 	bl	d46cc <_ZN15Adafruit_BME2805read8Eh>
   d4846:	21e5      	movs	r1, #229	; 0xe5
   d4848:	4605      	mov	r5, r0
   d484a:	4620      	mov	r0, r4
   d484c:	f7ff ff3e 	bl	d46cc <_ZN15Adafruit_BME2805read8Eh>
   d4850:	1100      	asrs	r0, r0, #4
   d4852:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d4856:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d4858:	21e7      	movs	r1, #231	; 0xe7
   d485a:	4620      	mov	r0, r4
   d485c:	f7ff ff36 	bl	d46cc <_ZN15Adafruit_BME2805read8Eh>
   d4860:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   d4864:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4868 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4868:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d486a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d486e:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4870:	4604      	mov	r4, r0
   d4872:	460e      	mov	r6, r1
   d4874:	4615      	mov	r5, r2
    if (_cs == -1) {
   d4876:	d111      	bne.n	d489c <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4878:	7901      	ldrb	r1, [r0, #4]
   d487a:	6800      	ldr	r0, [r0, #0]
   d487c:	f000 fc47 	bl	d510e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4880:	6820      	ldr	r0, [r4, #0]
   d4882:	6803      	ldr	r3, [r0, #0]
   d4884:	4631      	mov	r1, r6
   d4886:	689b      	ldr	r3, [r3, #8]
   d4888:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d488a:	6820      	ldr	r0, [r4, #0]
   d488c:	6803      	ldr	r3, [r0, #0]
   d488e:	4629      	mov	r1, r5
   d4890:	689b      	ldr	r3, [r3, #8]
   d4892:	4798      	blx	r3
        _wire -> endTransmission();
   d4894:	6820      	ldr	r0, [r4, #0]
   d4896:	f000 fc42 	bl	d511e <_ZN7TwoWire15endTransmissionEv>
   d489a:	e02d      	b.n	d48f8 <_ZN15Adafruit_BME2806write8Ehh+0x90>
    } else {
        if (_sck == -1)
   d489c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d48a0:	3301      	adds	r3, #1
   d48a2:	d10e      	bne.n	d48c2 <_ZN15Adafruit_BME2806write8Ehh+0x5a>
   d48a4:	4b15      	ldr	r3, [pc, #84]	; (d48fc <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d48a6:	4a16      	ldr	r2, [pc, #88]	; (d4900 <_ZN15Adafruit_BME2806write8Ehh+0x98>)
   d48a8:	9300      	str	r3, [sp, #0]
   d48aa:	9202      	str	r2, [sp, #8]
   d48ac:	2300      	movs	r3, #0
   d48ae:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d48b0:	4668      	mov	r0, sp
   d48b2:	f88d 3004 	strb.w	r3, [sp, #4]
   d48b6:	f88d 200c 	strb.w	r2, [sp, #12]
   d48ba:	f88d 300d 	strb.w	r3, [sp, #13]
   d48be:	f7ff fdf7 	bl	d44b0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d48c2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d48c6:	2100      	movs	r1, #0
   d48c8:	b280      	uxth	r0, r0
   d48ca:	f001 fb26 	bl	d5f1a <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d48ce:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d48d2:	4620      	mov	r0, r4
   d48d4:	f7ff fdae 	bl	d4434 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d48d8:	4629      	mov	r1, r5
   d48da:	4620      	mov	r0, r4
   d48dc:	f7ff fdaa 	bl	d4434 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d48e0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d48e4:	2101      	movs	r1, #1
   d48e6:	b280      	uxth	r0, r0
   d48e8:	f001 fb17 	bl	d5f1a <digitalWrite>
    if (_sck == -1)
   d48ec:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d48f0:	3301      	adds	r3, #1
   d48f2:	d101      	bne.n	d48f8 <_ZN15Adafruit_BME2806write8Ehh+0x90>
        SPI.endTransaction(); // release the SPI bus
   d48f4:	f7ff fdd5 	bl	d44a2 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
}
   d48f8:	b004      	add	sp, #16
   d48fa:	bd70      	pop	{r4, r5, r6, pc}
   d48fc:	000d70c8 	.word	0x000d70c8
   d4900:	0007a120 	.word	0x0007a120

000d4904 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.mode     = mode;
   d4906:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d490a:	f89d 6018 	ldrb.w	r6, [sp, #24]
   d490e:	f89d e01c 	ldrb.w	lr, [sp, #28]
   d4912:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.mode     = mode;
   d4916:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
   d491a:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
   d491e:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
   d4922:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
   d4926:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
   d492a:	f366 1347 	bfi	r3, r6, #5, #3
   d492e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
   d4932:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d4936:	f36e 03c5 	bfi	r3, lr, #3, #3
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d493a:	4604      	mov	r4, r0
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
   d493c:	f367 0302 	bfi	r3, r7, #0, #3
   d4940:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d4944:	f006 0207 	and.w	r2, r6, #7
   d4948:	21f2      	movs	r1, #242	; 0xf2
   d494a:	f7ff ff8d 	bl	d4868 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d494e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d4952:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4956:	f002 0107 	and.w	r1, r2, #7
   d495a:	009b      	lsls	r3, r3, #2
   d495c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4960:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d4964:	4620      	mov	r0, r4
   d4966:	21f5      	movs	r1, #245	; 0xf5
   d4968:	f7ff ff7e 	bl	d4868 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d496c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4970:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4974:	f002 0107 	and.w	r1, r2, #7
   d4978:	009b      	lsls	r3, r3, #2
   d497a:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d497e:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d4982:	4620      	mov	r0, r4
   d4984:	21f4      	movs	r1, #244	; 0xf4
}
   d4986:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d498a:	f7ff bf6d 	b.w	d4868 <_ZN15Adafruit_BME2806write8Ehh>

000d498e <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d498e:	b530      	push	{r4, r5, lr}
   d4990:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4992:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d4996:	1c42      	adds	r2, r0, #1
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4998:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d499a:	d103      	bne.n	d49a4 <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
   d499c:	6820      	ldr	r0, [r4, #0]
   d499e:	f000 fb7f 	bl	d50a0 <_ZN7TwoWire5beginEv>
   d49a2:	e022      	b.n	d49ea <_ZN15Adafruit_BME2804initEv+0x5c>
    } else {
        digitalWrite(_cs, HIGH);
   d49a4:	2101      	movs	r1, #1
   d49a6:	b280      	uxth	r0, r0
   d49a8:	f001 fab7 	bl	d5f1a <digitalWrite>
        pinMode(_cs, OUTPUT);
   d49ac:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d49b0:	2101      	movs	r1, #1
   d49b2:	b280      	uxth	r0, r0
   d49b4:	f001 faa0 	bl	d5ef8 <pinMode>
        if (_sck == -1) {
   d49b8:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d49bc:	1c43      	adds	r3, r0, #1
   d49be:	d104      	bne.n	d49ca <_ZN15Adafruit_BME2804initEv+0x3c>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d49c0:	f7ff fd20 	bl	d4404 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d49c4:	f000 fe50 	bl	d5668 <_ZN8SPIClass5beginEv>
   d49c8:	e00f      	b.n	d49ea <_ZN15Adafruit_BME2804initEv+0x5c>
            // hardware SPI
            SPI.begin();
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
   d49ca:	2101      	movs	r1, #1
   d49cc:	b280      	uxth	r0, r0
   d49ce:	f001 fa93 	bl	d5ef8 <pinMode>
            pinMode(_mosi, OUTPUT);
   d49d2:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d49d6:	2101      	movs	r1, #1
   d49d8:	b280      	uxth	r0, r0
   d49da:	f001 fa8d 	bl	d5ef8 <pinMode>
            pinMode(_miso, INPUT);
   d49de:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d49e2:	2100      	movs	r1, #0
   d49e4:	b280      	uxth	r0, r0
   d49e6:	f001 fa87 	bl	d5ef8 <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d49ea:	21d0      	movs	r1, #208	; 0xd0
   d49ec:	4620      	mov	r0, r4
   d49ee:	f7ff fe6d 	bl	d46cc <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d49f2:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d49f4:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d49f6:	d120      	bne.n	d4a3a <_ZN15Adafruit_BME2804initEv+0xac>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d49f8:	4620      	mov	r0, r4
   d49fa:	22b6      	movs	r2, #182	; 0xb6
   d49fc:	21e0      	movs	r1, #224	; 0xe0
   d49fe:	f7ff ff33 	bl	d4868 <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
   d4a02:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4a06:	f000 faa5 	bl	d4f54 <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
   d4a0a:	4620      	mov	r0, r4
   d4a0c:	f7ff feb4 	bl	d4778 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d4a10:	4605      	mov	r5, r0
   d4a12:	b108      	cbz	r0, d4a18 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d4a14:	2064      	movs	r0, #100	; 0x64
   d4a16:	e7f6      	b.n	d4a06 <_ZN15Adafruit_BME2804initEv+0x78>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d4a18:	4620      	mov	r0, r4
   d4a1a:	f7ff feb4 	bl	d4786 <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
   d4a1e:	2305      	movs	r3, #5
   d4a20:	9300      	str	r3, [sp, #0]
   d4a22:	461a      	mov	r2, r3
   d4a24:	2103      	movs	r1, #3
   d4a26:	4620      	mov	r0, r4
   d4a28:	9502      	str	r5, [sp, #8]
   d4a2a:	9501      	str	r5, [sp, #4]
   d4a2c:	f7ff ff6a 	bl	d4904 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
   d4a30:	2064      	movs	r0, #100	; 0x64
   d4a32:	f000 fa8f 	bl	d4f54 <delay>
   d4a36:	2001      	movs	r0, #1
   d4a38:	e000      	b.n	d4a3c <_ZN15Adafruit_BME2804initEv+0xae>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
   d4a3a:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
   d4a3c:	b005      	add	sp, #20
   d4a3e:	bd30      	pop	{r4, r5, pc}

000d4a40 <_ZN15Adafruit_BME2805beginEh>:
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d4a40:	b510      	push	{r4, lr}
	_i2caddr = addr;
   d4a42:	7101      	strb	r1, [r0, #4]
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d4a44:	4604      	mov	r4, r0
	_i2caddr = addr;
	_wire = &Wire;
   d4a46:	f001 fad5 	bl	d5ff4 <_Z19__fetch_global_Wirev>
   d4a4a:	6020      	str	r0, [r4, #0]
	return init();
   d4a4c:	4620      	mov	r0, r4
}
   d4a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
	_i2caddr = addr;
	_wire = &Wire;
	return init();
   d4a52:	f7ff bf9c 	b.w	d498e <_ZN15Adafruit_BME2804initEv>

000d4a56 <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d4a56:	f000 b879 	b.w	d4b4c <HAL_Pin_Map>

000d4a5a <_ZN9OneButtonC1Eibb>:
 * Initialize the OneButton library.
 * @param pin The pin to be used for input from a momentary button.
 * @param activeLow Set to true when the input level is LOW when the button is pressed, Default is true.
 * @param pullupActive Activate the internal pullup when available. Default is true.
 */
OneButton::OneButton(int pin, boolean activeLow, bool pullupActive)
   d4a5a:	b538      	push	{r3, r4, r5, lr}
   d4a5c:	4604      	mov	r4, r0
   d4a5e:	4608      	mov	r0, r1
   d4a60:	2132      	movs	r1, #50	; 0x32
   d4a62:	6061      	str	r1, [r4, #4]
   d4a64:	f44f 7116 	mov.w	r1, #600	; 0x258
   d4a68:	2500      	movs	r5, #0
   d4a6a:	60a1      	str	r1, [r4, #8]
   d4a6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4a70:	60e1      	str	r1, [r4, #12]
   d4a72:	7525      	strb	r5, [r4, #20]
   d4a74:	61a5      	str	r5, [r4, #24]
   d4a76:	61e5      	str	r5, [r4, #28]
   d4a78:	6225      	str	r5, [r4, #32]
   d4a7a:	6265      	str	r5, [r4, #36]	; 0x24
   d4a7c:	62a5      	str	r5, [r4, #40]	; 0x28
   d4a7e:	62e5      	str	r5, [r4, #44]	; 0x2c
   d4a80:	6325      	str	r5, [r4, #48]	; 0x30
   d4a82:	6365      	str	r5, [r4, #52]	; 0x34
   d4a84:	63a5      	str	r5, [r4, #56]	; 0x38
   d4a86:	63e5      	str	r5, [r4, #60]	; 0x3c
   d4a88:	6425      	str	r5, [r4, #64]	; 0x40
   d4a8a:	6465      	str	r5, [r4, #68]	; 0x44
   d4a8c:	64a5      	str	r5, [r4, #72]	; 0x48
   d4a8e:	6525      	str	r5, [r4, #80]	; 0x50
   d4a90:	6565      	str	r5, [r4, #84]	; 0x54
   d4a92:	65a5      	str	r5, [r4, #88]	; 0x58
   d4a94:	65e5      	str	r5, [r4, #92]	; 0x5c
{
  // OneButton();
  _pin = pin;
   d4a96:	6020      	str	r0, [r4, #0]

  if (activeLow) {
   d4a98:	b10a      	cbz	r2, d4a9e <_ZN9OneButtonC1Eibb+0x44>
    // the button connects the input pin to GND when pressed.
    _buttonPressed = LOW;
   d4a9a:	6125      	str	r5, [r4, #16]
   d4a9c:	e001      	b.n	d4aa2 <_ZN9OneButtonC1Eibb+0x48>

  } else {
    // the button connects the input pin to VCC when pressed.
    _buttonPressed = HIGH;
   d4a9e:	2201      	movs	r2, #1
   d4aa0:	6122      	str	r2, [r4, #16]
   d4aa2:	b280      	uxth	r0, r0
  } // if

  if (pullupActive) {
   d4aa4:	b10b      	cbz	r3, d4aaa <_ZN9OneButtonC1Eibb+0x50>
    // use the given pin as input and activate internal PULLUP resistor.
    pinMode(pin, INPUT_PULLUP);
   d4aa6:	2102      	movs	r1, #2
   d4aa8:	e000      	b.n	d4aac <_ZN9OneButtonC1Eibb+0x52>
  } else {
    // use the given pin as input
    pinMode(pin, INPUT);
   d4aaa:	4619      	mov	r1, r3
   d4aac:	f001 fa24 	bl	d5ef8 <pinMode>
  } // if
} // OneButton
   d4ab0:	4620      	mov	r0, r4
   d4ab2:	bd38      	pop	{r3, r4, r5, pc}

000d4ab4 <_ZN9OneButton13setClickTicksEi>:

// explicitly set the number of millisec that have to pass by before a click is
// detected.
void OneButton::setClickTicks(int ticks)
{
  _clickTicks = ticks;
   d4ab4:	6081      	str	r1, [r0, #8]
   d4ab6:	4770      	bx	lr

000d4ab8 <_ZN9OneButton11attachClickEPFvvE>:


// save function for click event
void OneButton::attachClick(callbackFunction newFunction)
{
  _clickFunc = newFunction;
   d4ab8:	6181      	str	r1, [r0, #24]
   d4aba:	4770      	bx	lr

000d4abc <_ZN9OneButton20attachLongPressStartEPFvvE>:
} // attachPressStart

// save function for longPressStart event
void OneButton::attachLongPressStart(callbackFunction newFunction)
{
  _longPressStartFunc = newFunction;
   d4abc:	6381      	str	r1, [r0, #56]	; 0x38
   d4abe:	4770      	bx	lr

000d4ac0 <_ZN9OneButton19attachLongPressStopEPFvvE>:
} // attachLongPressStart

// save function for longPressStop event
void OneButton::attachLongPressStop(callbackFunction newFunction)
{
  _longPressStopFunc = newFunction;
   d4ac0:	6441      	str	r1, [r0, #68]	; 0x44
   d4ac2:	4770      	bx	lr

000d4ac4 <_GLOBAL__sub_I__ZN9OneButtonC2Ev>:
   d4ac4:	f000 b842 	b.w	d4b4c <HAL_Pin_Map>

000d4ac8 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   d4ac8:	b508      	push	{r3, lr}
   d4aca:	f000 f83f 	bl	d4b4c <HAL_Pin_Map>
  #define pinHI(_pin) (PIN_MAP2[_pin].gpio_peripheral->BSRRL = PIN_MAP2[_pin].gpio_pin)
#elif (PLATFORM_ID == 12) || (PLATFORM_ID == 13) || (PLATFORM_ID == 14) // Argon (12), Boron (13), Xenon (14)
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "pinmap_impl.h"
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d4ace:	f000 f83d 	bl	d4b4c <HAL_Pin_Map>
   d4ad2:	4b01      	ldr	r3, [pc, #4]	; (d4ad8 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
   d4ad4:	6018      	str	r0, [r3, #0]
   d4ad6:	bd08      	pop	{r3, pc}
   d4ad8:	2003e3d8 	.word	0x2003e3d8

000d4adc <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4adc:	b508      	push	{r3, lr}
   d4ade:	4b02      	ldr	r3, [pc, #8]	; (d4ae8 <os_thread_is_current+0xc>)
   d4ae0:	681b      	ldr	r3, [r3, #0]
   d4ae2:	689b      	ldr	r3, [r3, #8]
   d4ae4:	9301      	str	r3, [sp, #4]
   d4ae6:	bd08      	pop	{r3, pc}
   d4ae8:	00030248 	.word	0x00030248

000d4aec <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4aec:	b508      	push	{r3, lr}
   d4aee:	4b02      	ldr	r3, [pc, #8]	; (d4af8 <os_thread_join+0xc>)
   d4af0:	681b      	ldr	r3, [r3, #0]
   d4af2:	691b      	ldr	r3, [r3, #16]
   d4af4:	9301      	str	r3, [sp, #4]
   d4af6:	bd08      	pop	{r3, pc}
   d4af8:	00030248 	.word	0x00030248

000d4afc <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4afc:	b508      	push	{r3, lr}
   d4afe:	4b02      	ldr	r3, [pc, #8]	; (d4b08 <os_thread_cleanup+0xc>)
   d4b00:	681b      	ldr	r3, [r3, #0]
   d4b02:	695b      	ldr	r3, [r3, #20]
   d4b04:	9301      	str	r3, [sp, #4]
   d4b06:	bd08      	pop	{r3, pc}
   d4b08:	00030248 	.word	0x00030248

000d4b0c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4b0c:	b508      	push	{r3, lr}
   d4b0e:	4b02      	ldr	r3, [pc, #8]	; (d4b18 <os_mutex_recursive_create+0xc>)
   d4b10:	681b      	ldr	r3, [r3, #0]
   d4b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4b14:	9301      	str	r3, [sp, #4]
   d4b16:	bd08      	pop	{r3, pc}
   d4b18:	00030248 	.word	0x00030248

000d4b1c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4b1c:	b508      	push	{r3, lr}
   d4b1e:	4b02      	ldr	r3, [pc, #8]	; (d4b28 <os_mutex_recursive_destroy+0xc>)
   d4b20:	681b      	ldr	r3, [r3, #0]
   d4b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4b24:	9301      	str	r3, [sp, #4]
   d4b26:	bd08      	pop	{r3, pc}
   d4b28:	00030248 	.word	0x00030248

000d4b2c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4b2c:	b508      	push	{r3, lr}
   d4b2e:	4b02      	ldr	r3, [pc, #8]	; (d4b38 <HAL_RNG_GetRandomNumber+0xc>)
   d4b30:	681b      	ldr	r3, [r3, #0]
   d4b32:	685b      	ldr	r3, [r3, #4]
   d4b34:	9301      	str	r3, [sp, #4]
   d4b36:	bd08      	pop	{r3, pc}
   d4b38:	00030218 	.word	0x00030218

000d4b3c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4b3c:	b508      	push	{r3, lr}
   d4b3e:	4b02      	ldr	r3, [pc, #8]	; (d4b48 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4b40:	681b      	ldr	r3, [r3, #0]
   d4b42:	695b      	ldr	r3, [r3, #20]
   d4b44:	9301      	str	r3, [sp, #4]
   d4b46:	bd08      	pop	{r3, pc}
   d4b48:	00030218 	.word	0x00030218

000d4b4c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4b4c:	b508      	push	{r3, lr}
   d4b4e:	4b02      	ldr	r3, [pc, #8]	; (d4b58 <HAL_Pin_Map+0xc>)
   d4b50:	681b      	ldr	r3, [r3, #0]
   d4b52:	681b      	ldr	r3, [r3, #0]
   d4b54:	9301      	str	r3, [sp, #4]
   d4b56:	bd08      	pop	{r3, pc}
   d4b58:	0003022c 	.word	0x0003022c

000d4b5c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4b5c:	b508      	push	{r3, lr}
   d4b5e:	4b02      	ldr	r3, [pc, #8]	; (d4b68 <HAL_Validate_Pin_Function+0xc>)
   d4b60:	681b      	ldr	r3, [r3, #0]
   d4b62:	685b      	ldr	r3, [r3, #4]
   d4b64:	9301      	str	r3, [sp, #4]
   d4b66:	bd08      	pop	{r3, pc}
   d4b68:	0003022c 	.word	0x0003022c

000d4b6c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4b6c:	b508      	push	{r3, lr}
   d4b6e:	4b02      	ldr	r3, [pc, #8]	; (d4b78 <HAL_Pin_Mode+0xc>)
   d4b70:	681b      	ldr	r3, [r3, #0]
   d4b72:	689b      	ldr	r3, [r3, #8]
   d4b74:	9301      	str	r3, [sp, #4]
   d4b76:	bd08      	pop	{r3, pc}
   d4b78:	0003022c 	.word	0x0003022c

000d4b7c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4b7c:	b508      	push	{r3, lr}
   d4b7e:	4b02      	ldr	r3, [pc, #8]	; (d4b88 <HAL_Get_Pin_Mode+0xc>)
   d4b80:	681b      	ldr	r3, [r3, #0]
   d4b82:	68db      	ldr	r3, [r3, #12]
   d4b84:	9301      	str	r3, [sp, #4]
   d4b86:	bd08      	pop	{r3, pc}
   d4b88:	0003022c 	.word	0x0003022c

000d4b8c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4b8c:	b508      	push	{r3, lr}
   d4b8e:	4b02      	ldr	r3, [pc, #8]	; (d4b98 <HAL_GPIO_Write+0xc>)
   d4b90:	681b      	ldr	r3, [r3, #0]
   d4b92:	691b      	ldr	r3, [r3, #16]
   d4b94:	9301      	str	r3, [sp, #4]
   d4b96:	bd08      	pop	{r3, pc}
   d4b98:	0003022c 	.word	0x0003022c

000d4b9c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4b9c:	b508      	push	{r3, lr}
   d4b9e:	4b02      	ldr	r3, [pc, #8]	; (d4ba8 <HAL_GPIO_Read+0xc>)
   d4ba0:	681b      	ldr	r3, [r3, #0]
   d4ba2:	695b      	ldr	r3, [r3, #20]
   d4ba4:	9301      	str	r3, [sp, #4]
   d4ba6:	bd08      	pop	{r3, pc}
   d4ba8:	0003022c 	.word	0x0003022c

000d4bac <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d4bac:	b508      	push	{r3, lr}
   d4bae:	4b02      	ldr	r3, [pc, #8]	; (d4bb8 <HAL_DAC_Write+0xc>)
   d4bb0:	681b      	ldr	r3, [r3, #0]
   d4bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4bb4:	9301      	str	r3, [sp, #4]
   d4bb6:	bd08      	pop	{r3, pc}
   d4bb8:	0003022c 	.word	0x0003022c

000d4bbc <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
   d4bbc:	b508      	push	{r3, lr}
   d4bbe:	4b02      	ldr	r3, [pc, #8]	; (d4bc8 <HAL_PWM_Write_Ext+0xc>)
   d4bc0:	681b      	ldr	r3, [r3, #0]
   d4bc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d4bc4:	9301      	str	r3, [sp, #4]
   d4bc6:	bd08      	pop	{r3, pc}
   d4bc8:	0003022c 	.word	0x0003022c

000d4bcc <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4bcc:	b508      	push	{r3, lr}
   d4bce:	4b02      	ldr	r3, [pc, #8]	; (d4bd8 <HAL_I2C_Begin+0xc>)
   d4bd0:	681b      	ldr	r3, [r3, #0]
   d4bd2:	68db      	ldr	r3, [r3, #12]
   d4bd4:	9301      	str	r3, [sp, #4]
   d4bd6:	bd08      	pop	{r3, pc}
   d4bd8:	00030228 	.word	0x00030228

000d4bdc <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4bdc:	b508      	push	{r3, lr}
   d4bde:	4b02      	ldr	r3, [pc, #8]	; (d4be8 <HAL_I2C_Begin_Transmission+0xc>)
   d4be0:	681b      	ldr	r3, [r3, #0]
   d4be2:	699b      	ldr	r3, [r3, #24]
   d4be4:	9301      	str	r3, [sp, #4]
   d4be6:	bd08      	pop	{r3, pc}
   d4be8:	00030228 	.word	0x00030228

000d4bec <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4bec:	b508      	push	{r3, lr}
   d4bee:	4b02      	ldr	r3, [pc, #8]	; (d4bf8 <HAL_I2C_End_Transmission+0xc>)
   d4bf0:	681b      	ldr	r3, [r3, #0]
   d4bf2:	69db      	ldr	r3, [r3, #28]
   d4bf4:	9301      	str	r3, [sp, #4]
   d4bf6:	bd08      	pop	{r3, pc}
   d4bf8:	00030228 	.word	0x00030228

000d4bfc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4bfc:	b508      	push	{r3, lr}
   d4bfe:	4b02      	ldr	r3, [pc, #8]	; (d4c08 <HAL_I2C_Write_Data+0xc>)
   d4c00:	681b      	ldr	r3, [r3, #0]
   d4c02:	6a1b      	ldr	r3, [r3, #32]
   d4c04:	9301      	str	r3, [sp, #4]
   d4c06:	bd08      	pop	{r3, pc}
   d4c08:	00030228 	.word	0x00030228

000d4c0c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4c0c:	b508      	push	{r3, lr}
   d4c0e:	4b02      	ldr	r3, [pc, #8]	; (d4c18 <HAL_I2C_Available_Data+0xc>)
   d4c10:	681b      	ldr	r3, [r3, #0]
   d4c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4c14:	9301      	str	r3, [sp, #4]
   d4c16:	bd08      	pop	{r3, pc}
   d4c18:	00030228 	.word	0x00030228

000d4c1c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4c1c:	b508      	push	{r3, lr}
   d4c1e:	4b02      	ldr	r3, [pc, #8]	; (d4c28 <HAL_I2C_Read_Data+0xc>)
   d4c20:	681b      	ldr	r3, [r3, #0]
   d4c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4c24:	9301      	str	r3, [sp, #4]
   d4c26:	bd08      	pop	{r3, pc}
   d4c28:	00030228 	.word	0x00030228

000d4c2c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4c2c:	b508      	push	{r3, lr}
   d4c2e:	4b02      	ldr	r3, [pc, #8]	; (d4c38 <HAL_I2C_Peek_Data+0xc>)
   d4c30:	681b      	ldr	r3, [r3, #0]
   d4c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4c34:	9301      	str	r3, [sp, #4]
   d4c36:	bd08      	pop	{r3, pc}
   d4c38:	00030228 	.word	0x00030228

000d4c3c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4c3c:	b508      	push	{r3, lr}
   d4c3e:	4b02      	ldr	r3, [pc, #8]	; (d4c48 <HAL_I2C_Flush_Data+0xc>)
   d4c40:	681b      	ldr	r3, [r3, #0]
   d4c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c44:	9301      	str	r3, [sp, #4]
   d4c46:	bd08      	pop	{r3, pc}
   d4c48:	00030228 	.word	0x00030228

000d4c4c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4c4c:	b508      	push	{r3, lr}
   d4c4e:	4b02      	ldr	r3, [pc, #8]	; (d4c58 <HAL_I2C_Is_Enabled+0xc>)
   d4c50:	681b      	ldr	r3, [r3, #0]
   d4c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c54:	9301      	str	r3, [sp, #4]
   d4c56:	bd08      	pop	{r3, pc}
   d4c58:	00030228 	.word	0x00030228

000d4c5c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4c5c:	b508      	push	{r3, lr}
   d4c5e:	4b02      	ldr	r3, [pc, #8]	; (d4c68 <HAL_I2C_Init+0xc>)
   d4c60:	681b      	ldr	r3, [r3, #0]
   d4c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4c64:	9301      	str	r3, [sp, #4]
   d4c66:	bd08      	pop	{r3, pc}
   d4c68:	00030228 	.word	0x00030228

000d4c6c <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d4c6c:	b508      	push	{r3, lr}
   d4c6e:	4b02      	ldr	r3, [pc, #8]	; (d4c78 <HAL_I2C_Request_Data_Ex+0xc>)
   d4c70:	681b      	ldr	r3, [r3, #0]
   d4c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4c74:	9301      	str	r3, [sp, #4]
   d4c76:	bd08      	pop	{r3, pc}
   d4c78:	00030228 	.word	0x00030228

000d4c7c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4c7c:	b508      	push	{r3, lr}
   d4c7e:	4b02      	ldr	r3, [pc, #8]	; (d4c88 <inet_inet_ntop+0xc>)
   d4c80:	681b      	ldr	r3, [r3, #0]
   d4c82:	695b      	ldr	r3, [r3, #20]
   d4c84:	9301      	str	r3, [sp, #4]
   d4c86:	bd08      	pop	{r3, pc}
   d4c88:	00030264 	.word	0x00030264

000d4c8c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4c8c:	b508      	push	{r3, lr}
   d4c8e:	4b02      	ldr	r3, [pc, #8]	; (d4c98 <netdb_freeaddrinfo+0xc>)
   d4c90:	681b      	ldr	r3, [r3, #0]
   d4c92:	689b      	ldr	r3, [r3, #8]
   d4c94:	9301      	str	r3, [sp, #4]
   d4c96:	bd08      	pop	{r3, pc}
   d4c98:	00030268 	.word	0x00030268

000d4c9c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4c9c:	b508      	push	{r3, lr}
   d4c9e:	4b02      	ldr	r3, [pc, #8]	; (d4ca8 <netdb_getaddrinfo+0xc>)
   d4ca0:	681b      	ldr	r3, [r3, #0]
   d4ca2:	68db      	ldr	r3, [r3, #12]
   d4ca4:	9301      	str	r3, [sp, #4]
   d4ca6:	bd08      	pop	{r3, pc}
   d4ca8:	00030268 	.word	0x00030268

000d4cac <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d4cac:	b508      	push	{r3, lr}
   d4cae:	4b02      	ldr	r3, [pc, #8]	; (d4cb8 <HAL_SPI_Begin+0xc>)
   d4cb0:	681b      	ldr	r3, [r3, #0]
   d4cb2:	681b      	ldr	r3, [r3, #0]
   d4cb4:	9301      	str	r3, [sp, #4]
   d4cb6:	bd08      	pop	{r3, pc}
   d4cb8:	00030230 	.word	0x00030230

000d4cbc <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d4cbc:	b508      	push	{r3, lr}
   d4cbe:	4b02      	ldr	r3, [pc, #8]	; (d4cc8 <HAL_SPI_Send_Receive_Data+0xc>)
   d4cc0:	681b      	ldr	r3, [r3, #0]
   d4cc2:	695b      	ldr	r3, [r3, #20]
   d4cc4:	9301      	str	r3, [sp, #4]
   d4cc6:	bd08      	pop	{r3, pc}
   d4cc8:	00030230 	.word	0x00030230

000d4ccc <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4ccc:	b508      	push	{r3, lr}
   d4cce:	4b02      	ldr	r3, [pc, #8]	; (d4cd8 <HAL_SPI_Init+0xc>)
   d4cd0:	681b      	ldr	r3, [r3, #0]
   d4cd2:	69db      	ldr	r3, [r3, #28]
   d4cd4:	9301      	str	r3, [sp, #4]
   d4cd6:	bd08      	pop	{r3, pc}
   d4cd8:	00030230 	.word	0x00030230

000d4cdc <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4cdc:	b508      	push	{r3, lr}
   d4cde:	4b02      	ldr	r3, [pc, #8]	; (d4ce8 <HAL_SPI_Is_Enabled+0xc>)
   d4ce0:	681b      	ldr	r3, [r3, #0]
   d4ce2:	6a1b      	ldr	r3, [r3, #32]
   d4ce4:	9301      	str	r3, [sp, #4]
   d4ce6:	bd08      	pop	{r3, pc}
   d4ce8:	00030230 	.word	0x00030230

000d4cec <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d4cec:	b508      	push	{r3, lr}
   d4cee:	4b02      	ldr	r3, [pc, #8]	; (d4cf8 <HAL_SPI_Info+0xc>)
   d4cf0:	681b      	ldr	r3, [r3, #0]
   d4cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4cf4:	9301      	str	r3, [sp, #4]
   d4cf6:	bd08      	pop	{r3, pc}
   d4cf8:	00030230 	.word	0x00030230

000d4cfc <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d4cfc:	b508      	push	{r3, lr}
   d4cfe:	4b02      	ldr	r3, [pc, #8]	; (d4d08 <HAL_SPI_Set_Settings+0xc>)
   d4d00:	681b      	ldr	r3, [r3, #0]
   d4d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4d04:	9301      	str	r3, [sp, #4]
   d4d06:	bd08      	pop	{r3, pc}
   d4d08:	00030230 	.word	0x00030230

000d4d0c <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d4d0c:	b508      	push	{r3, lr}
   d4d0e:	4b02      	ldr	r3, [pc, #8]	; (d4d18 <HAL_SPI_Acquire+0xc>)
   d4d10:	681b      	ldr	r3, [r3, #0]
   d4d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4d14:	9301      	str	r3, [sp, #4]
   d4d16:	bd08      	pop	{r3, pc}
   d4d18:	00030230 	.word	0x00030230

000d4d1c <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d4d1c:	b508      	push	{r3, lr}
   d4d1e:	4b02      	ldr	r3, [pc, #8]	; (d4d28 <HAL_SPI_Release+0xc>)
   d4d20:	681b      	ldr	r3, [r3, #0]
   d4d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4d24:	9301      	str	r3, [sp, #4]
   d4d26:	bd08      	pop	{r3, pc}
   d4d28:	00030230 	.word	0x00030230

000d4d2c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4d2c:	b508      	push	{r3, lr}
   d4d2e:	4b02      	ldr	r3, [pc, #8]	; (d4d38 <HAL_USART_Init+0xc>)
   d4d30:	681b      	ldr	r3, [r3, #0]
   d4d32:	681b      	ldr	r3, [r3, #0]
   d4d34:	9301      	str	r3, [sp, #4]
   d4d36:	bd08      	pop	{r3, pc}
   d4d38:	0003023c 	.word	0x0003023c

000d4d3c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4d3c:	b508      	push	{r3, lr}
   d4d3e:	4b02      	ldr	r3, [pc, #8]	; (d4d48 <HAL_USART_Write_Data+0xc>)
   d4d40:	681b      	ldr	r3, [r3, #0]
   d4d42:	68db      	ldr	r3, [r3, #12]
   d4d44:	9301      	str	r3, [sp, #4]
   d4d46:	bd08      	pop	{r3, pc}
   d4d48:	0003023c 	.word	0x0003023c

000d4d4c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4d4c:	b508      	push	{r3, lr}
   d4d4e:	4b02      	ldr	r3, [pc, #8]	; (d4d58 <HAL_USART_Available_Data+0xc>)
   d4d50:	681b      	ldr	r3, [r3, #0]
   d4d52:	691b      	ldr	r3, [r3, #16]
   d4d54:	9301      	str	r3, [sp, #4]
   d4d56:	bd08      	pop	{r3, pc}
   d4d58:	0003023c 	.word	0x0003023c

000d4d5c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4d5c:	b508      	push	{r3, lr}
   d4d5e:	4b02      	ldr	r3, [pc, #8]	; (d4d68 <HAL_USART_Read_Data+0xc>)
   d4d60:	681b      	ldr	r3, [r3, #0]
   d4d62:	695b      	ldr	r3, [r3, #20]
   d4d64:	9301      	str	r3, [sp, #4]
   d4d66:	bd08      	pop	{r3, pc}
   d4d68:	0003023c 	.word	0x0003023c

000d4d6c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4d6c:	b508      	push	{r3, lr}
   d4d6e:	4b02      	ldr	r3, [pc, #8]	; (d4d78 <HAL_USART_Peek_Data+0xc>)
   d4d70:	681b      	ldr	r3, [r3, #0]
   d4d72:	699b      	ldr	r3, [r3, #24]
   d4d74:	9301      	str	r3, [sp, #4]
   d4d76:	bd08      	pop	{r3, pc}
   d4d78:	0003023c 	.word	0x0003023c

000d4d7c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4d7c:	b508      	push	{r3, lr}
   d4d7e:	4b02      	ldr	r3, [pc, #8]	; (d4d88 <HAL_USART_Flush_Data+0xc>)
   d4d80:	681b      	ldr	r3, [r3, #0]
   d4d82:	69db      	ldr	r3, [r3, #28]
   d4d84:	9301      	str	r3, [sp, #4]
   d4d86:	bd08      	pop	{r3, pc}
   d4d88:	0003023c 	.word	0x0003023c

000d4d8c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4d8c:	b508      	push	{r3, lr}
   d4d8e:	4b02      	ldr	r3, [pc, #8]	; (d4d98 <HAL_USART_Is_Enabled+0xc>)
   d4d90:	681b      	ldr	r3, [r3, #0]
   d4d92:	6a1b      	ldr	r3, [r3, #32]
   d4d94:	9301      	str	r3, [sp, #4]
   d4d96:	bd08      	pop	{r3, pc}
   d4d98:	0003023c 	.word	0x0003023c

000d4d9c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4d9c:	b508      	push	{r3, lr}
   d4d9e:	4b02      	ldr	r3, [pc, #8]	; (d4da8 <HAL_USART_Available_Data_For_Write+0xc>)
   d4da0:	681b      	ldr	r3, [r3, #0]
   d4da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4da4:	9301      	str	r3, [sp, #4]
   d4da6:	bd08      	pop	{r3, pc}
   d4da8:	0003023c 	.word	0x0003023c

000d4dac <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4dac:	b508      	push	{r3, lr}
   d4dae:	4b02      	ldr	r3, [pc, #8]	; (d4db8 <HAL_USB_USART_Init+0xc>)
   d4db0:	681b      	ldr	r3, [r3, #0]
   d4db2:	681b      	ldr	r3, [r3, #0]
   d4db4:	9301      	str	r3, [sp, #4]
   d4db6:	bd08      	pop	{r3, pc}
   d4db8:	0003024c 	.word	0x0003024c

000d4dbc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4dbc:	b508      	push	{r3, lr}
   d4dbe:	4b02      	ldr	r3, [pc, #8]	; (d4dc8 <HAL_USB_USART_Begin+0xc>)
   d4dc0:	681b      	ldr	r3, [r3, #0]
   d4dc2:	685b      	ldr	r3, [r3, #4]
   d4dc4:	9301      	str	r3, [sp, #4]
   d4dc6:	bd08      	pop	{r3, pc}
   d4dc8:	0003024c 	.word	0x0003024c

000d4dcc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4dcc:	b508      	push	{r3, lr}
   d4dce:	4b02      	ldr	r3, [pc, #8]	; (d4dd8 <HAL_USB_USART_Available_Data+0xc>)
   d4dd0:	681b      	ldr	r3, [r3, #0]
   d4dd2:	691b      	ldr	r3, [r3, #16]
   d4dd4:	9301      	str	r3, [sp, #4]
   d4dd6:	bd08      	pop	{r3, pc}
   d4dd8:	0003024c 	.word	0x0003024c

000d4ddc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4ddc:	b508      	push	{r3, lr}
   d4dde:	4b02      	ldr	r3, [pc, #8]	; (d4de8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4de0:	681b      	ldr	r3, [r3, #0]
   d4de2:	695b      	ldr	r3, [r3, #20]
   d4de4:	9301      	str	r3, [sp, #4]
   d4de6:	bd08      	pop	{r3, pc}
   d4de8:	0003024c 	.word	0x0003024c

000d4dec <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4dec:	b508      	push	{r3, lr}
   d4dee:	4b02      	ldr	r3, [pc, #8]	; (d4df8 <HAL_USB_USART_Receive_Data+0xc>)
   d4df0:	681b      	ldr	r3, [r3, #0]
   d4df2:	699b      	ldr	r3, [r3, #24]
   d4df4:	9301      	str	r3, [sp, #4]
   d4df6:	bd08      	pop	{r3, pc}
   d4df8:	0003024c 	.word	0x0003024c

000d4dfc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4dfc:	b508      	push	{r3, lr}
   d4dfe:	4b02      	ldr	r3, [pc, #8]	; (d4e08 <HAL_USB_USART_Send_Data+0xc>)
   d4e00:	681b      	ldr	r3, [r3, #0]
   d4e02:	69db      	ldr	r3, [r3, #28]
   d4e04:	9301      	str	r3, [sp, #4]
   d4e06:	bd08      	pop	{r3, pc}
   d4e08:	0003024c 	.word	0x0003024c

000d4e0c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4e0c:	b508      	push	{r3, lr}
   d4e0e:	4b02      	ldr	r3, [pc, #8]	; (d4e18 <HAL_USB_USART_Flush_Data+0xc>)
   d4e10:	681b      	ldr	r3, [r3, #0]
   d4e12:	6a1b      	ldr	r3, [r3, #32]
   d4e14:	9301      	str	r3, [sp, #4]
   d4e16:	bd08      	pop	{r3, pc}
   d4e18:	0003024c 	.word	0x0003024c

000d4e1c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4e1c:	b508      	push	{r3, lr}
   d4e1e:	4b02      	ldr	r3, [pc, #8]	; (d4e28 <set_system_mode+0xc>)
   d4e20:	681b      	ldr	r3, [r3, #0]
   d4e22:	685b      	ldr	r3, [r3, #4]
   d4e24:	9301      	str	r3, [sp, #4]
   d4e26:	bd08      	pop	{r3, pc}
   d4e28:	00030220 	.word	0x00030220

000d4e2c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4e2c:	b508      	push	{r3, lr}
   d4e2e:	4b02      	ldr	r3, [pc, #8]	; (d4e38 <system_delay_ms+0xc>)
   d4e30:	681b      	ldr	r3, [r3, #0]
   d4e32:	695b      	ldr	r3, [r3, #20]
   d4e34:	9301      	str	r3, [sp, #4]
   d4e36:	bd08      	pop	{r3, pc}
   d4e38:	00030220 	.word	0x00030220

000d4e3c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4e3c:	b508      	push	{r3, lr}
   d4e3e:	4b03      	ldr	r3, [pc, #12]	; (d4e4c <system_ctrl_set_app_request_handler+0x10>)
   d4e40:	681b      	ldr	r3, [r3, #0]
   d4e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4e46:	9301      	str	r3, [sp, #4]
   d4e48:	bd08      	pop	{r3, pc}
   d4e4a:	0000      	.short	0x0000
   d4e4c:	00030220 	.word	0x00030220

000d4e50 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4e50:	b508      	push	{r3, lr}
   d4e52:	4b03      	ldr	r3, [pc, #12]	; (d4e60 <system_ctrl_set_result+0x10>)
   d4e54:	681b      	ldr	r3, [r3, #0]
   d4e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4e5a:	9301      	str	r3, [sp, #4]
   d4e5c:	bd08      	pop	{r3, pc}
   d4e5e:	0000      	.short	0x0000
   d4e60:	00030220 	.word	0x00030220

000d4e64 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4e64:	b508      	push	{r3, lr}
   d4e66:	4b02      	ldr	r3, [pc, #8]	; (d4e70 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4e68:	681b      	ldr	r3, [r3, #0]
   d4e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4e6c:	9301      	str	r3, [sp, #4]
   d4e6e:	bd08      	pop	{r3, pc}
   d4e70:	00030244 	.word	0x00030244

000d4e74 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4e74:	b508      	push	{r3, lr}
   d4e76:	4b02      	ldr	r3, [pc, #8]	; (d4e80 <network_connect+0xc>)
   d4e78:	681b      	ldr	r3, [r3, #0]
   d4e7a:	685b      	ldr	r3, [r3, #4]
   d4e7c:	9301      	str	r3, [sp, #4]
   d4e7e:	bd08      	pop	{r3, pc}
   d4e80:	00030240 	.word	0x00030240

000d4e84 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4e84:	b508      	push	{r3, lr}
   d4e86:	4b02      	ldr	r3, [pc, #8]	; (d4e90 <network_connecting+0xc>)
   d4e88:	681b      	ldr	r3, [r3, #0]
   d4e8a:	689b      	ldr	r3, [r3, #8]
   d4e8c:	9301      	str	r3, [sp, #4]
   d4e8e:	bd08      	pop	{r3, pc}
   d4e90:	00030240 	.word	0x00030240

000d4e94 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4e94:	b508      	push	{r3, lr}
   d4e96:	4b02      	ldr	r3, [pc, #8]	; (d4ea0 <network_disconnect+0xc>)
   d4e98:	681b      	ldr	r3, [r3, #0]
   d4e9a:	68db      	ldr	r3, [r3, #12]
   d4e9c:	9301      	str	r3, [sp, #4]
   d4e9e:	bd08      	pop	{r3, pc}
   d4ea0:	00030240 	.word	0x00030240

000d4ea4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4ea4:	b508      	push	{r3, lr}
   d4ea6:	4b02      	ldr	r3, [pc, #8]	; (d4eb0 <network_ready+0xc>)
   d4ea8:	681b      	ldr	r3, [r3, #0]
   d4eaa:	691b      	ldr	r3, [r3, #16]
   d4eac:	9301      	str	r3, [sp, #4]
   d4eae:	bd08      	pop	{r3, pc}
   d4eb0:	00030240 	.word	0x00030240

000d4eb4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4eb4:	b508      	push	{r3, lr}
   d4eb6:	4b02      	ldr	r3, [pc, #8]	; (d4ec0 <network_on+0xc>)
   d4eb8:	681b      	ldr	r3, [r3, #0]
   d4eba:	695b      	ldr	r3, [r3, #20]
   d4ebc:	9301      	str	r3, [sp, #4]
   d4ebe:	bd08      	pop	{r3, pc}
   d4ec0:	00030240 	.word	0x00030240

000d4ec4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4ec4:	b508      	push	{r3, lr}
   d4ec6:	4b02      	ldr	r3, [pc, #8]	; (d4ed0 <network_off+0xc>)
   d4ec8:	681b      	ldr	r3, [r3, #0]
   d4eca:	699b      	ldr	r3, [r3, #24]
   d4ecc:	9301      	str	r3, [sp, #4]
   d4ece:	bd08      	pop	{r3, pc}
   d4ed0:	00030240 	.word	0x00030240

000d4ed4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4ed4:	b508      	push	{r3, lr}
   d4ed6:	4b02      	ldr	r3, [pc, #8]	; (d4ee0 <network_listen+0xc>)
   d4ed8:	681b      	ldr	r3, [r3, #0]
   d4eda:	69db      	ldr	r3, [r3, #28]
   d4edc:	9301      	str	r3, [sp, #4]
   d4ede:	bd08      	pop	{r3, pc}
   d4ee0:	00030240 	.word	0x00030240

000d4ee4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4ee4:	b508      	push	{r3, lr}
   d4ee6:	4b02      	ldr	r3, [pc, #8]	; (d4ef0 <network_listening+0xc>)
   d4ee8:	681b      	ldr	r3, [r3, #0]
   d4eea:	6a1b      	ldr	r3, [r3, #32]
   d4eec:	9301      	str	r3, [sp, #4]
   d4eee:	bd08      	pop	{r3, pc}
   d4ef0:	00030240 	.word	0x00030240

000d4ef4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4ef4:	b508      	push	{r3, lr}
   d4ef6:	4b02      	ldr	r3, [pc, #8]	; (d4f00 <network_set_listen_timeout+0xc>)
   d4ef8:	681b      	ldr	r3, [r3, #0]
   d4efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4efc:	9301      	str	r3, [sp, #4]
   d4efe:	bd08      	pop	{r3, pc}
   d4f00:	00030240 	.word	0x00030240

000d4f04 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4f04:	b508      	push	{r3, lr}
   d4f06:	4b02      	ldr	r3, [pc, #8]	; (d4f10 <network_get_listen_timeout+0xc>)
   d4f08:	681b      	ldr	r3, [r3, #0]
   d4f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4f0c:	9301      	str	r3, [sp, #4]
   d4f0e:	bd08      	pop	{r3, pc}
   d4f10:	00030240 	.word	0x00030240

000d4f14 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4f14:	b508      	push	{r3, lr}
   d4f16:	4b02      	ldr	r3, [pc, #8]	; (d4f20 <malloc+0xc>)
   d4f18:	681b      	ldr	r3, [r3, #0]
   d4f1a:	681b      	ldr	r3, [r3, #0]
   d4f1c:	9301      	str	r3, [sp, #4]
   d4f1e:	bd08      	pop	{r3, pc}
   d4f20:	0003021c 	.word	0x0003021c

000d4f24 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4f24:	b508      	push	{r3, lr}
   d4f26:	4b02      	ldr	r3, [pc, #8]	; (d4f30 <free+0xc>)
   d4f28:	681b      	ldr	r3, [r3, #0]
   d4f2a:	685b      	ldr	r3, [r3, #4]
   d4f2c:	9301      	str	r3, [sp, #4]
   d4f2e:	bd08      	pop	{r3, pc}
   d4f30:	0003021c 	.word	0x0003021c

000d4f34 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4f34:	b508      	push	{r3, lr}
   d4f36:	4b02      	ldr	r3, [pc, #8]	; (d4f40 <realloc+0xc>)
   d4f38:	681b      	ldr	r3, [r3, #0]
   d4f3a:	689b      	ldr	r3, [r3, #8]
   d4f3c:	9301      	str	r3, [sp, #4]
   d4f3e:	bd08      	pop	{r3, pc}
   d4f40:	0003021c 	.word	0x0003021c

000d4f44 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4f44:	b508      	push	{r3, lr}
   d4f46:	4b02      	ldr	r3, [pc, #8]	; (d4f50 <vsnprintf+0xc>)
   d4f48:	681b      	ldr	r3, [r3, #0]
   d4f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4f4c:	9301      	str	r3, [sp, #4]
   d4f4e:	bd08      	pop	{r3, pc}
   d4f50:	0003021c 	.word	0x0003021c

000d4f54 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4f54:	2100      	movs	r1, #0
   d4f56:	f7ff bf69 	b.w	d4e2c <system_delay_ms>

000d4f5a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4f5a:	b510      	push	{r4, lr}
   d4f5c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4f5e:	6800      	ldr	r0, [r0, #0]
   d4f60:	b108      	cbz	r0, d4f66 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4f62:	f7ff fddb 	bl	d4b1c <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4f66:	4620      	mov	r0, r4
   d4f68:	bd10      	pop	{r4, pc}
	...

000d4f6c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4f6c:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4f6e:	4c06      	ldr	r4, [pc, #24]	; (d4f88 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4f70:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4f72:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4f74:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4f76:	f7ff fdc9 	bl	d4b0c <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4f7a:	4620      	mov	r0, r4
   d4f7c:	4a03      	ldr	r2, [pc, #12]	; (d4f8c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4f7e:	4904      	ldr	r1, [pc, #16]	; (d4f90 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4f84:	f001 b85c 	b.w	d6040 <__aeabi_atexit>
   d4f88:	2003e3dc 	.word	0x2003e3dc
   d4f8c:	2003e278 	.word	0x2003e278
   d4f90:	000d4f5b 	.word	0x000d4f5b

000d4f94 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4f94:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4f96:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4f98:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4f9a:	b113      	cbz	r3, d4fa2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4f9c:	2203      	movs	r2, #3
   d4f9e:	4601      	mov	r1, r0
   d4fa0:	4798      	blx	r3
    }
   d4fa2:	4620      	mov	r0, r4
   d4fa4:	bd10      	pop	{r4, pc}

000d4fa6 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4fa6:	2200      	movs	r2, #0
   d4fa8:	4611      	mov	r1, r2
   d4faa:	6840      	ldr	r0, [r0, #4]
   d4fac:	f7ff bf9a 	b.w	d4ee4 <network_listening>

000d4fb0 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4fb0:	2200      	movs	r2, #0
   d4fb2:	4611      	mov	r1, r2
   d4fb4:	6840      	ldr	r0, [r0, #4]
   d4fb6:	f7ff bfa5 	b.w	d4f04 <network_get_listen_timeout>

000d4fba <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4fba:	2200      	movs	r2, #0
   d4fbc:	6840      	ldr	r0, [r0, #4]
   d4fbe:	f7ff bf99 	b.w	d4ef4 <network_set_listen_timeout>

000d4fc2 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4fc2:	2200      	movs	r2, #0
   d4fc4:	f081 0101 	eor.w	r1, r1, #1
   d4fc8:	6840      	ldr	r0, [r0, #4]
   d4fca:	f7ff bf83 	b.w	d4ed4 <network_listen>

000d4fce <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4fce:	2300      	movs	r3, #0
   d4fd0:	461a      	mov	r2, r3
   d4fd2:	4619      	mov	r1, r3
   d4fd4:	6840      	ldr	r0, [r0, #4]
   d4fd6:	f7ff bf75 	b.w	d4ec4 <network_off>

000d4fda <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4fda:	2300      	movs	r3, #0
   d4fdc:	461a      	mov	r2, r3
   d4fde:	4619      	mov	r1, r3
   d4fe0:	6840      	ldr	r0, [r0, #4]
   d4fe2:	f7ff bf67 	b.w	d4eb4 <network_on>

000d4fe6 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4fe6:	2200      	movs	r2, #0
   d4fe8:	4611      	mov	r1, r2
   d4fea:	6840      	ldr	r0, [r0, #4]
   d4fec:	f7ff bf5a 	b.w	d4ea4 <network_ready>

000d4ff0 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4ff0:	2200      	movs	r2, #0
   d4ff2:	4611      	mov	r1, r2
   d4ff4:	6840      	ldr	r0, [r0, #4]
   d4ff6:	f7ff bf45 	b.w	d4e84 <network_connecting>

000d4ffa <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4ffa:	2200      	movs	r2, #0
   d4ffc:	2102      	movs	r1, #2
   d4ffe:	6840      	ldr	r0, [r0, #4]
   d5000:	f7ff bf48 	b.w	d4e94 <network_disconnect>

000d5004 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5004:	2300      	movs	r3, #0
   d5006:	461a      	mov	r2, r3
   d5008:	6840      	ldr	r0, [r0, #4]
   d500a:	f7ff bf33 	b.w	d4e74 <network_connect>
	...

000d5010 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5010:	4b02      	ldr	r3, [pc, #8]	; (d501c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5012:	2203      	movs	r2, #3
   d5014:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5016:	4a02      	ldr	r2, [pc, #8]	; (d5020 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5018:	601a      	str	r2, [r3, #0]
   d501a:	4770      	bx	lr
   d501c:	2003e3e0 	.word	0x2003e3e0
   d5020:	000d711c 	.word	0x000d711c

000d5024 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5024:	4770      	bx	lr

000d5026 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5028:	4606      	mov	r6, r0
   d502a:	4615      	mov	r5, r2
   d502c:	460c      	mov	r4, r1
   d502e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5030:	42bc      	cmp	r4, r7
   d5032:	d006      	beq.n	d5042 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5034:	6833      	ldr	r3, [r6, #0]
   d5036:	f814 1b01 	ldrb.w	r1, [r4], #1
   d503a:	689b      	ldr	r3, [r3, #8]
   d503c:	4630      	mov	r0, r6
   d503e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5040:	e7f6      	b.n	d5030 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5042:	4628      	mov	r0, r5
   d5044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5046 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5046:	2200      	movs	r2, #0
   d5048:	7c00      	ldrb	r0, [r0, #16]
   d504a:	f7ff bdd7 	b.w	d4bfc <HAL_I2C_Write_Data>

000d504e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d504e:	2100      	movs	r1, #0
   d5050:	7c00      	ldrb	r0, [r0, #16]
   d5052:	f7ff bddb 	b.w	d4c0c <HAL_I2C_Available_Data>

000d5056 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5056:	2100      	movs	r1, #0
   d5058:	7c00      	ldrb	r0, [r0, #16]
   d505a:	f7ff bddf 	b.w	d4c1c <HAL_I2C_Read_Data>

000d505e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d505e:	2100      	movs	r1, #0
   d5060:	7c00      	ldrb	r0, [r0, #16]
   d5062:	f7ff bde3 	b.w	d4c2c <HAL_I2C_Peek_Data>

000d5066 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5066:	2100      	movs	r1, #0
   d5068:	7c00      	ldrb	r0, [r0, #16]
   d506a:	f7ff bde7 	b.w	d4c3c <HAL_I2C_Flush_Data>

000d506e <_ZN7TwoWireD0Ev>:
   d506e:	b510      	push	{r4, lr}
   d5070:	2114      	movs	r1, #20
   d5072:	4604      	mov	r4, r0
   d5074:	f000 ffe9 	bl	d604a <_ZdlPvj>
   d5078:	4620      	mov	r0, r4
   d507a:	bd10      	pop	{r4, pc}

000d507c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d507c:	b510      	push	{r4, lr}
   d507e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5080:	2300      	movs	r3, #0
   d5082:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5084:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5088:	60a3      	str	r3, [r4, #8]
   d508a:	4b04      	ldr	r3, [pc, #16]	; (d509c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d508c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d508e:	4608      	mov	r0, r1
   d5090:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d5092:	4611      	mov	r1, r2
   d5094:	f7ff fde2 	bl	d4c5c <HAL_I2C_Init>
}
   d5098:	4620      	mov	r0, r4
   d509a:	bd10      	pop	{r4, pc}
   d509c:	000d7150 	.word	0x000d7150

000d50a0 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d50a0:	2300      	movs	r3, #0
   d50a2:	461a      	mov	r2, r3
   d50a4:	4619      	mov	r1, r3
   d50a6:	7c00      	ldrb	r0, [r0, #16]
   d50a8:	f7ff bd90 	b.w	d4bcc <HAL_I2C_Begin>

000d50ac <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d50ac:	b570      	push	{r4, r5, r6, lr}
   d50ae:	460c      	mov	r4, r1
   d50b0:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d50b2:	2514      	movs	r5, #20
   d50b4:	4606      	mov	r6, r0
   d50b6:	462a      	mov	r2, r5
   d50b8:	2100      	movs	r1, #0
   d50ba:	a801      	add	r0, sp, #4
   d50bc:	f001 ff65 	bl	d6f8a <memset>
   d50c0:	7823      	ldrb	r3, [r4, #0]
   d50c2:	f88d 3008 	strb.w	r3, [sp, #8]
   d50c6:	6863      	ldr	r3, [r4, #4]
   d50c8:	9303      	str	r3, [sp, #12]
   d50ca:	68e3      	ldr	r3, [r4, #12]
   d50cc:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d50ce:	2200      	movs	r2, #0
   d50d0:	7a23      	ldrb	r3, [r4, #8]
   d50d2:	7c30      	ldrb	r0, [r6, #16]
   d50d4:	f8ad 5004 	strh.w	r5, [sp, #4]
   d50d8:	a901      	add	r1, sp, #4
   d50da:	9305      	str	r3, [sp, #20]
   d50dc:	f7ff fdc6 	bl	d4c6c <HAL_I2C_Request_Data_Ex>
}
   d50e0:	b006      	add	sp, #24
   d50e2:	bd70      	pop	{r4, r5, r6, pc}

000d50e4 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d50e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d50e6:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d50e8:	f88d 1000 	strb.w	r1, [sp]
   d50ec:	f04f 0164 	mov.w	r1, #100	; 0x64
   d50f0:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d50f2:	bf18      	it	ne
   d50f4:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d50f6:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d50f8:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d50fa:	f88d 3008 	strb.w	r3, [sp, #8]
   d50fe:	f7ff ffd5 	bl	d50ac <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d5102:	b005      	add	sp, #20
   d5104:	f85d fb04 	ldr.w	pc, [sp], #4

000d5108 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d5108:	2301      	movs	r3, #1
   d510a:	f7ff bfeb 	b.w	d50e4 <_ZN7TwoWire11requestFromEhjh>

000d510e <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d510e:	2200      	movs	r2, #0
   d5110:	7c00      	ldrb	r0, [r0, #16]
   d5112:	f7ff bd63 	b.w	d4bdc <HAL_I2C_Begin_Transmission>

000d5116 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5116:	2200      	movs	r2, #0
   d5118:	7c00      	ldrb	r0, [r0, #16]
   d511a:	f7ff bd67 	b.w	d4bec <HAL_I2C_End_Transmission>

000d511e <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d511e:	2101      	movs	r1, #1
   d5120:	f7ff bff9 	b.w	d5116 <_ZN7TwoWire15endTransmissionEh>

000d5124 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5124:	2100      	movs	r1, #0
   d5126:	7c00      	ldrb	r0, [r0, #16]
   d5128:	f7ff bd90 	b.w	d4c4c <HAL_I2C_Is_Enabled>

000d512c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d512c:	4770      	bx	lr

000d512e <_ZN9IPAddressD0Ev>:
   d512e:	b510      	push	{r4, lr}
   d5130:	2118      	movs	r1, #24
   d5132:	4604      	mov	r4, r0
   d5134:	f000 ff89 	bl	d604a <_ZdlPvj>
   d5138:	4620      	mov	r0, r4
   d513a:	bd10      	pop	{r4, pc}

000d513c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d513c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d513e:	7d03      	ldrb	r3, [r0, #20]
   d5140:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5142:	b08d      	sub	sp, #52	; 0x34
   d5144:	460e      	mov	r6, r1
   d5146:	f100 0704 	add.w	r7, r0, #4
   d514a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d514e:	d002      	beq.n	d5156 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5150:	f100 0508 	add.w	r5, r0, #8
   d5154:	e018      	b.n	d5188 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5156:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5158:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d515a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d515e:	232f      	movs	r3, #47	; 0x2f
   d5160:	462a      	mov	r2, r5
   d5162:	200a      	movs	r0, #10
   d5164:	f7ff fd8a 	bl	d4c7c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5168:	4628      	mov	r0, r5
   d516a:	f001 ff47 	bl	d6ffc <strlen>
   d516e:	6833      	ldr	r3, [r6, #0]
   d5170:	4602      	mov	r2, r0
   d5172:	68db      	ldr	r3, [r3, #12]
   d5174:	4629      	mov	r1, r5
   d5176:	4630      	mov	r0, r6
   d5178:	4798      	blx	r3
   d517a:	e00f      	b.n	d519c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d517c:	b124      	cbz	r4, d5188 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d517e:	212e      	movs	r1, #46	; 0x2e
   d5180:	4630      	mov	r0, r6
   d5182:	f000 f9d9 	bl	d5538 <_ZN5Print5printEc>
   d5186:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5188:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d518c:	220a      	movs	r2, #10
   d518e:	4630      	mov	r0, r6
   d5190:	f000 f9eb 	bl	d556a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5194:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5196:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5198:	d1f0      	bne.n	d517c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d519a:	4620      	mov	r0, r4
    }
    return n;
}
   d519c:	b00d      	add	sp, #52	; 0x34
   d519e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d51a0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d51a0:	b510      	push	{r4, lr}
   d51a2:	4b05      	ldr	r3, [pc, #20]	; (d51b8 <_ZN9IPAddressC1Ev+0x18>)
   d51a4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d51a6:	2211      	movs	r2, #17
   d51a8:	f840 3b04 	str.w	r3, [r0], #4
   d51ac:	2100      	movs	r1, #0
   d51ae:	f001 feec 	bl	d6f8a <memset>
{
    clear();
}
   d51b2:	4620      	mov	r0, r4
   d51b4:	bd10      	pop	{r4, pc}
   d51b6:	bf00      	nop
   d51b8:	000d7178 	.word	0x000d7178

000d51bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d51bc:	4603      	mov	r3, r0
   d51be:	4a07      	ldr	r2, [pc, #28]	; (d51dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d51c0:	b510      	push	{r4, lr}
   d51c2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d51c6:	f101 0210 	add.w	r2, r1, #16
   d51ca:	f851 4b04 	ldr.w	r4, [r1], #4
   d51ce:	f843 4b04 	str.w	r4, [r3], #4
   d51d2:	4291      	cmp	r1, r2
   d51d4:	d1f9      	bne.n	d51ca <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d51d6:	780a      	ldrb	r2, [r1, #0]
   d51d8:	701a      	strb	r2, [r3, #0]
}
   d51da:	bd10      	pop	{r4, pc}
   d51dc:	000d7178 	.word	0x000d7178

000d51e0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d51e0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d51e2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d51e6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d51ea:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d51ee:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d51f2:	2304      	movs	r3, #4
   d51f4:	6041      	str	r1, [r0, #4]
   d51f6:	7503      	strb	r3, [r0, #20]
   d51f8:	bd10      	pop	{r4, pc}

000d51fa <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d51fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d51fc:	780d      	ldrb	r5, [r1, #0]
   d51fe:	788b      	ldrb	r3, [r1, #2]
   d5200:	784a      	ldrb	r2, [r1, #1]
   d5202:	78c9      	ldrb	r1, [r1, #3]
   d5204:	9100      	str	r1, [sp, #0]
   d5206:	4629      	mov	r1, r5
   d5208:	f7ff ffea 	bl	d51e0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d520c:	b003      	add	sp, #12
   d520e:	bd30      	pop	{r4, r5, pc}

000d5210 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5210:	4b01      	ldr	r3, [pc, #4]	; (d5218 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5212:	4a02      	ldr	r2, [pc, #8]	; (d521c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5214:	601a      	str	r2, [r3, #0]
   d5216:	4770      	bx	lr
   d5218:	2003e3e8 	.word	0x2003e3e8
   d521c:	000d71f7 	.word	0x000d71f7

000d5220 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5220:	2200      	movs	r2, #0
   d5222:	4611      	mov	r1, r2
   d5224:	6840      	ldr	r0, [r0, #4]
   d5226:	f7ff be5d 	b.w	d4ee4 <network_listening>

000d522a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d522a:	2200      	movs	r2, #0
   d522c:	4611      	mov	r1, r2
   d522e:	6840      	ldr	r0, [r0, #4]
   d5230:	f7ff be68 	b.w	d4f04 <network_get_listen_timeout>

000d5234 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5234:	2200      	movs	r2, #0
   d5236:	6840      	ldr	r0, [r0, #4]
   d5238:	f7ff be5c 	b.w	d4ef4 <network_set_listen_timeout>

000d523c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d523c:	2200      	movs	r2, #0
   d523e:	f081 0101 	eor.w	r1, r1, #1
   d5242:	6840      	ldr	r0, [r0, #4]
   d5244:	f7ff be46 	b.w	d4ed4 <network_listen>

000d5248 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5248:	2300      	movs	r3, #0
   d524a:	461a      	mov	r2, r3
   d524c:	2101      	movs	r1, #1
   d524e:	6840      	ldr	r0, [r0, #4]
   d5250:	f7ff be38 	b.w	d4ec4 <network_off>

000d5254 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5254:	2300      	movs	r3, #0
   d5256:	461a      	mov	r2, r3
   d5258:	4619      	mov	r1, r3
   d525a:	6840      	ldr	r0, [r0, #4]
   d525c:	f7ff be2a 	b.w	d4eb4 <network_on>

000d5260 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5260:	2200      	movs	r2, #0
   d5262:	4611      	mov	r1, r2
   d5264:	6840      	ldr	r0, [r0, #4]
   d5266:	f7ff be1d 	b.w	d4ea4 <network_ready>

000d526a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d526a:	2200      	movs	r2, #0
   d526c:	4611      	mov	r1, r2
   d526e:	6840      	ldr	r0, [r0, #4]
   d5270:	f7ff be08 	b.w	d4e84 <network_connecting>

000d5274 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5274:	2200      	movs	r2, #0
   d5276:	2102      	movs	r1, #2
   d5278:	6840      	ldr	r0, [r0, #4]
   d527a:	f7ff be0b 	b.w	d4e94 <network_disconnect>

000d527e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d527e:	2300      	movs	r3, #0
   d5280:	461a      	mov	r2, r3
   d5282:	6840      	ldr	r0, [r0, #4]
   d5284:	f7ff bdf6 	b.w	d4e74 <network_connect>

000d5288 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5288:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d528a:	4605      	mov	r5, r0
   d528c:	b188      	cbz	r0, d52b2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d528e:	6804      	ldr	r4, [r0, #0]
   d5290:	b14c      	cbz	r4, d52a6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5292:	68a3      	ldr	r3, [r4, #8]
   d5294:	b11b      	cbz	r3, d529e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5296:	2203      	movs	r2, #3
   d5298:	4621      	mov	r1, r4
   d529a:	4620      	mov	r0, r4
   d529c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d529e:	2110      	movs	r1, #16
   d52a0:	4620      	mov	r0, r4
   d52a2:	f000 fed2 	bl	d604a <_ZdlPvj>
   d52a6:	4628      	mov	r0, r5
   d52a8:	2114      	movs	r1, #20
      }
   d52aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d52ae:	f000 becc 	b.w	d604a <_ZdlPvj>
   d52b2:	bd38      	pop	{r3, r4, r5, pc}

000d52b4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d52b4:	b110      	cbz	r0, d52bc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d52b6:	6803      	ldr	r3, [r0, #0]
   d52b8:	685b      	ldr	r3, [r3, #4]
   d52ba:	4718      	bx	r3
   d52bc:	4770      	bx	lr

000d52be <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d52be:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d52c0:	6803      	ldr	r3, [r0, #0]
   d52c2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d52c4:	b1bb      	cbz	r3, d52f6 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d52c6:	6858      	ldr	r0, [r3, #4]
   d52c8:	f7ff fc08 	bl	d4adc <os_thread_is_current>
   d52cc:	b978      	cbnz	r0, d52ee <_ZN6ThreadD1Ev+0x30>
   d52ce:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d52d0:	7c5a      	ldrb	r2, [r3, #17]
   d52d2:	b912      	cbnz	r2, d52da <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d52d4:	6858      	ldr	r0, [r3, #4]
   d52d6:	f7ff fc09 	bl	d4aec <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d52da:	6823      	ldr	r3, [r4, #0]
   d52dc:	6858      	ldr	r0, [r3, #4]
   d52de:	f7ff fc0d 	bl	d4afc <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d52e2:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d52e4:	2300      	movs	r3, #0
   d52e6:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d52e8:	b128      	cbz	r0, d52f6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d52ea:	f7ff ffcd 	bl	d5288 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d52ee:	6820      	ldr	r0, [r4, #0]
   d52f0:	b108      	cbz	r0, d52f6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d52f2:	f7ff ffc9 	bl	d5288 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d52f6:	4620      	mov	r0, r4
   d52f8:	bd10      	pop	{r4, pc}

000d52fa <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d52fa:	b538      	push	{r3, r4, r5, lr}
   d52fc:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d52fe:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5302:	b108      	cbz	r0, d5308 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5304:	f7fe fec9 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5308:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d530c:	b108      	cbz	r0, d5312 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d530e:	f7ff fc05 	bl	d4b1c <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5312:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5316:	b135      	cbz	r5, d5326 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5318:	4628      	mov	r0, r5
   d531a:	f7ff ffd0 	bl	d52be <_ZN6ThreadD1Ev>
   d531e:	2104      	movs	r1, #4
   d5320:	4628      	mov	r0, r5
   d5322:	f000 fe92 	bl	d604a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5326:	6820      	ldr	r0, [r4, #0]
   d5328:	b108      	cbz	r0, d532e <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d532a:	f7ff ffc3 	bl	d52b4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d532e:	4620      	mov	r0, r4
   d5330:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5334 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5334:	b510      	push	{r4, lr}
   d5336:	4b04      	ldr	r3, [pc, #16]	; (d5348 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5338:	4604      	mov	r4, r0
   d533a:	f840 3b08 	str.w	r3, [r0], #8
   d533e:	f7ff ffdc 	bl	d52fa <_ZN5spark11MeshPublishD1Ev>
   d5342:	4620      	mov	r0, r4
   d5344:	bd10      	pop	{r4, pc}
   d5346:	bf00      	nop
   d5348:	000d7270 	.word	0x000d7270

000d534c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d534c:	b538      	push	{r3, r4, r5, lr}
   d534e:	4c0e      	ldr	r4, [pc, #56]	; (d5388 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5350:	4b0e      	ldr	r3, [pc, #56]	; (d538c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5352:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5354:	2500      	movs	r5, #0
   d5356:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5358:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d535c:	6063      	str	r3, [r4, #4]
   d535e:	60a5      	str	r5, [r4, #8]
   d5360:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5364:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5368:	f7ff fbd0 	bl	d4b0c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d536c:	4b08      	ldr	r3, [pc, #32]	; (d5390 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d536e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5372:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5376:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5378:	4620      	mov	r0, r4
   d537a:	4a06      	ldr	r2, [pc, #24]	; (d5394 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d537c:	4906      	ldr	r1, [pc, #24]	; (d5398 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d537e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5382:	f000 be5d 	b.w	d6040 <__aeabi_atexit>
   d5386:	bf00      	nop
   d5388:	2003e3ec 	.word	0x2003e3ec
   d538c:	000d72a4 	.word	0x000d72a4
   d5390:	000d7270 	.word	0x000d7270
   d5394:	2003e278 	.word	0x2003e278
   d5398:	000d5335 	.word	0x000d5335

000d539c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d539c:	2300      	movs	r3, #0
   d539e:	461a      	mov	r2, r3
   d53a0:	6840      	ldr	r0, [r0, #4]
   d53a2:	f7ff bd67 	b.w	d4e74 <network_connect>

000d53a6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d53a6:	2200      	movs	r2, #0
   d53a8:	2102      	movs	r1, #2
   d53aa:	6840      	ldr	r0, [r0, #4]
   d53ac:	f7ff bd72 	b.w	d4e94 <network_disconnect>

000d53b0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d53b0:	2200      	movs	r2, #0
   d53b2:	4611      	mov	r1, r2
   d53b4:	6840      	ldr	r0, [r0, #4]
   d53b6:	f7ff bd65 	b.w	d4e84 <network_connecting>

000d53ba <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d53ba:	2200      	movs	r2, #0
   d53bc:	4611      	mov	r1, r2
   d53be:	6840      	ldr	r0, [r0, #4]
   d53c0:	f7ff bd70 	b.w	d4ea4 <network_ready>

000d53c4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d53c4:	2300      	movs	r3, #0
   d53c6:	461a      	mov	r2, r3
   d53c8:	4619      	mov	r1, r3
   d53ca:	6840      	ldr	r0, [r0, #4]
   d53cc:	f7ff bd72 	b.w	d4eb4 <network_on>

000d53d0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d53d0:	2300      	movs	r3, #0
   d53d2:	461a      	mov	r2, r3
   d53d4:	4619      	mov	r1, r3
   d53d6:	6840      	ldr	r0, [r0, #4]
   d53d8:	f7ff bd74 	b.w	d4ec4 <network_off>

000d53dc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d53dc:	2200      	movs	r2, #0
   d53de:	f081 0101 	eor.w	r1, r1, #1
   d53e2:	6840      	ldr	r0, [r0, #4]
   d53e4:	f7ff bd76 	b.w	d4ed4 <network_listen>

000d53e8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d53e8:	2200      	movs	r2, #0
   d53ea:	6840      	ldr	r0, [r0, #4]
   d53ec:	f7ff bd82 	b.w	d4ef4 <network_set_listen_timeout>

000d53f0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d53f0:	2200      	movs	r2, #0
   d53f2:	4611      	mov	r1, r2
   d53f4:	6840      	ldr	r0, [r0, #4]
   d53f6:	f7ff bd85 	b.w	d4f04 <network_get_listen_timeout>

000d53fa <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d53fa:	2200      	movs	r2, #0
   d53fc:	4611      	mov	r1, r2
   d53fe:	6840      	ldr	r0, [r0, #4]
   d5400:	f7ff bd70 	b.w	d4ee4 <network_listening>

000d5404 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5408:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d540a:	b095      	sub	sp, #84	; 0x54
   d540c:	4616      	mov	r6, r2
   d540e:	460d      	mov	r5, r1
   d5410:	4607      	mov	r7, r0
    IPAddress addr;
   d5412:	f7ff fec5 	bl	d51a0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5416:	4621      	mov	r1, r4
   d5418:	2220      	movs	r2, #32
   d541a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d541c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d541e:	f001 fdb4 	bl	d6f8a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5422:	2340      	movs	r3, #64	; 0x40
   d5424:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5426:	4621      	mov	r1, r4
   d5428:	466b      	mov	r3, sp
   d542a:	aa0c      	add	r2, sp, #48	; 0x30
   d542c:	4630      	mov	r0, r6
   d542e:	f7ff fc35 	bl	d4c9c <netdb_getaddrinfo>
    if (!r) {
   d5432:	4604      	mov	r4, r0
   d5434:	2800      	cmp	r0, #0
   d5436:	d144      	bne.n	d54c2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5438:	4602      	mov	r2, r0
   d543a:	2101      	movs	r1, #1
   d543c:	6868      	ldr	r0, [r5, #4]
   d543e:	f7ff fd31 	bl	d4ea4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5442:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5444:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5446:	4622      	mov	r2, r4
   d5448:	6868      	ldr	r0, [r5, #4]
   d544a:	f7ff fd2b 	bl	d4ea4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d544e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5450:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5452:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5454:	2e00      	cmp	r6, #0
   d5456:	d034      	beq.n	d54c2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5458:	2900      	cmp	r1, #0
   d545a:	d132      	bne.n	d54c2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d545c:	6873      	ldr	r3, [r6, #4]
   d545e:	2b02      	cmp	r3, #2
   d5460:	d002      	beq.n	d5468 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5462:	2b0a      	cmp	r3, #10
   d5464:	d009      	beq.n	d547a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5466:	e02a      	b.n	d54be <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5468:	f1b8 0f00 	cmp.w	r8, #0
   d546c:	d027      	beq.n	d54be <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d546e:	6971      	ldr	r1, [r6, #20]
   d5470:	4638      	mov	r0, r7
   d5472:	3104      	adds	r1, #4
   d5474:	f7ff fec1 	bl	d51fa <_ZN9IPAddressaSEPKh>
   d5478:	e020      	b.n	d54bc <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d547a:	f1b9 0f00 	cmp.w	r9, #0
   d547e:	d01e      	beq.n	d54be <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5480:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5482:	2211      	movs	r2, #17
   d5484:	a801      	add	r0, sp, #4
   d5486:	f001 fd80 	bl	d6f8a <memset>
                    a.v = 6;
   d548a:	2306      	movs	r3, #6
   d548c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5490:	ad01      	add	r5, sp, #4
   d5492:	f104 0308 	add.w	r3, r4, #8
   d5496:	3418      	adds	r4, #24
   d5498:	6818      	ldr	r0, [r3, #0]
   d549a:	6859      	ldr	r1, [r3, #4]
   d549c:	462a      	mov	r2, r5
   d549e:	c203      	stmia	r2!, {r0, r1}
   d54a0:	3308      	adds	r3, #8
   d54a2:	42a3      	cmp	r3, r4
   d54a4:	4615      	mov	r5, r2
   d54a6:	d1f7      	bne.n	d5498 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d54a8:	a901      	add	r1, sp, #4
   d54aa:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d54ac:	ad07      	add	r5, sp, #28
   d54ae:	f7ff fe85 	bl	d51bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d54b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d54b4:	1d3c      	adds	r4, r7, #4
   d54b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d54b8:	682b      	ldr	r3, [r5, #0]
   d54ba:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d54bc:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d54be:	69f6      	ldr	r6, [r6, #28]
   d54c0:	e7c8      	b.n	d5454 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d54c2:	9800      	ldr	r0, [sp, #0]
   d54c4:	f7ff fbe2 	bl	d4c8c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d54c8:	4638      	mov	r0, r7
   d54ca:	b015      	add	sp, #84	; 0x54
   d54cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d54d0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d54d0:	4b02      	ldr	r3, [pc, #8]	; (d54dc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d54d2:	4a03      	ldr	r2, [pc, #12]	; (d54e0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d54d4:	601a      	str	r2, [r3, #0]
   d54d6:	2200      	movs	r2, #0
   d54d8:	605a      	str	r2, [r3, #4]
   d54da:	4770      	bx	lr
   d54dc:	2003e5c0 	.word	0x2003e5c0
   d54e0:	000d72a4 	.word	0x000d72a4

000d54e4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d54e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d54e6:	4606      	mov	r6, r0
   d54e8:	460d      	mov	r5, r1
   d54ea:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d54ec:	2400      	movs	r4, #0
  while (size--) {
   d54ee:	42bd      	cmp	r5, r7
   d54f0:	d00c      	beq.n	d550c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d54f2:	6833      	ldr	r3, [r6, #0]
   d54f4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d54f8:	689b      	ldr	r3, [r3, #8]
   d54fa:	4630      	mov	r0, r6
   d54fc:	4798      	blx	r3
     if (chunk>=0)
   d54fe:	2800      	cmp	r0, #0
   d5500:	db01      	blt.n	d5506 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5502:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5504:	e7f3      	b.n	d54ee <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5506:	2c00      	cmp	r4, #0
   d5508:	bf08      	it	eq
   d550a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d550c:	4620      	mov	r0, r4
   d550e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5510 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5510:	b570      	push	{r4, r5, r6, lr}
   d5512:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5514:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5516:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5518:	b149      	cbz	r1, d552e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d551a:	f001 fd6f 	bl	d6ffc <strlen>
   d551e:	682b      	ldr	r3, [r5, #0]
   d5520:	4602      	mov	r2, r0
   d5522:	4621      	mov	r1, r4
   d5524:	4628      	mov	r0, r5
   d5526:	68db      	ldr	r3, [r3, #12]
    }
   d5528:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d552c:	4718      	bx	r3
    }
   d552e:	bd70      	pop	{r4, r5, r6, pc}

000d5530 <_ZN5Print5printEPKc>:
   d5530:	b508      	push	{r3, lr}
   d5532:	f7ff ffed 	bl	d5510 <_ZN5Print5writeEPKc>
   d5536:	bd08      	pop	{r3, pc}

000d5538 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5538:	6803      	ldr	r3, [r0, #0]
   d553a:	689b      	ldr	r3, [r3, #8]
   d553c:	4718      	bx	r3

000d553e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d553e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5540:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5542:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5544:	f7ff fff8 	bl	d5538 <_ZN5Print5printEc>
  n += print('\n');
   d5548:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d554a:	4604      	mov	r4, r0
  n += print('\n');
   d554c:	4628      	mov	r0, r5
   d554e:	f7ff fff3 	bl	d5538 <_ZN5Print5printEc>
  return n;
}
   d5552:	4420      	add	r0, r4
   d5554:	bd38      	pop	{r3, r4, r5, pc}

000d5556 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5556:	b538      	push	{r3, r4, r5, lr}
   d5558:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d555a:	f7ff ffd9 	bl	d5510 <_ZN5Print5writeEPKc>
   d555e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5560:	4628      	mov	r0, r5
   d5562:	f7ff ffec 	bl	d553e <_ZN5Print7printlnEv>
  return n;
}
   d5566:	4420      	add	r0, r4
   d5568:	bd38      	pop	{r3, r4, r5, pc}

000d556a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d556a:	b530      	push	{r4, r5, lr}
   d556c:	b08b      	sub	sp, #44	; 0x2c
   d556e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5570:	2100      	movs	r1, #0
   d5572:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5576:	2a01      	cmp	r2, #1
   d5578:	bf98      	it	ls
   d557a:	220a      	movls	r2, #10
   d557c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5580:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5584:	fb05 3312 	mls	r3, r5, r2, r3
   d5588:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d558c:	2b09      	cmp	r3, #9
   d558e:	bf94      	ite	ls
   d5590:	3330      	addls	r3, #48	; 0x30
   d5592:	3337      	addhi	r3, #55	; 0x37
   d5594:	b2db      	uxtb	r3, r3
   d5596:	4621      	mov	r1, r4
   d5598:	f804 3901 	strb.w	r3, [r4], #-1
   d559c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d559e:	2d00      	cmp	r5, #0
   d55a0:	d1ee      	bne.n	d5580 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d55a2:	f7ff ffb5 	bl	d5510 <_ZN5Print5writeEPKc>
}
   d55a6:	b00b      	add	sp, #44	; 0x2c
   d55a8:	bd30      	pop	{r4, r5, pc}

000d55aa <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d55aa:	b40c      	push	{r2, r3}
   d55ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d55b0:	b087      	sub	sp, #28
   d55b2:	af00      	add	r7, sp, #0
   d55b4:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d55b8:	4605      	mov	r5, r0
   d55ba:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d55be:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d55c0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d55c2:	4623      	mov	r3, r4
   d55c4:	464a      	mov	r2, r9
   d55c6:	2114      	movs	r1, #20
   d55c8:	1d38      	adds	r0, r7, #4
   d55ca:	f7ff fcbb 	bl	d4f44 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d55ce:	2813      	cmp	r0, #19
   d55d0:	d805      	bhi.n	d55de <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d55d2:	1d39      	adds	r1, r7, #4
   d55d4:	4628      	mov	r0, r5
   d55d6:	f7ff ff9b 	bl	d5510 <_ZN5Print5writeEPKc>
   d55da:	4604      	mov	r4, r0
   d55dc:	e013      	b.n	d5606 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d55de:	f100 0308 	add.w	r3, r0, #8
   d55e2:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d55e6:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d55e8:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d55ec:	1c41      	adds	r1, r0, #1
   d55ee:	4623      	mov	r3, r4
   d55f0:	464a      	mov	r2, r9
   d55f2:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d55f4:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d55f6:	f7ff fca5 	bl	d4f44 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d55fa:	4669      	mov	r1, sp
   d55fc:	4628      	mov	r0, r5
   d55fe:	f7ff ff87 	bl	d5510 <_ZN5Print5writeEPKc>
   d5602:	4604      	mov	r4, r0
   d5604:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d5606:	b11e      	cbz	r6, d5610 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d5608:	4628      	mov	r0, r5
   d560a:	f7ff ff98 	bl	d553e <_ZN5Print7printlnEv>
   d560e:	4404      	add	r4, r0
    return n;
}
   d5610:	4620      	mov	r0, r4
   d5612:	371c      	adds	r7, #28
   d5614:	46bd      	mov	sp, r7
   d5616:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d561a:	b002      	add	sp, #8
   d561c:	4770      	bx	lr

000d561e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d561e:	b510      	push	{r4, lr}
   d5620:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5622:	f7ff fcb7 	bl	d4f94 <_ZNSt14_Function_baseD1Ev>
   d5626:	4620      	mov	r0, r4
   d5628:	bd10      	pop	{r4, pc}
	...

000d562c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d562c:	4803      	ldr	r0, [pc, #12]	; (d563c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d562e:	4a04      	ldr	r2, [pc, #16]	; (d5640 <_GLOBAL__sub_I_RGB+0x14>)
   d5630:	4904      	ldr	r1, [pc, #16]	; (d5644 <_GLOBAL__sub_I_RGB+0x18>)
   d5632:	2300      	movs	r3, #0
   d5634:	6083      	str	r3, [r0, #8]
   d5636:	f000 bd03 	b.w	d6040 <__aeabi_atexit>
   d563a:	bf00      	nop
   d563c:	2003e5c8 	.word	0x2003e5c8
   d5640:	2003e278 	.word	0x2003e278
   d5644:	000d561f 	.word	0x000d561f

000d5648 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d5648:	2100      	movs	r1, #0
   d564a:	f7ff bb5f 	b.w	d4d0c <HAL_SPI_Acquire>

000d564e <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d564e:	2100      	movs	r1, #0
   d5650:	f7ff bb64 	b.w	d4d1c <HAL_SPI_Release>

000d5654 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5654:	b510      	push	{r4, lr}
   d5656:	4604      	mov	r4, r0
{
    _spi = spi;
   d5658:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d565a:	4608      	mov	r0, r1
   d565c:	f7ff fb36 	bl	d4ccc <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5660:	2300      	movs	r3, #0
   d5662:	6063      	str	r3, [r4, #4]
}
   d5664:	4620      	mov	r0, r4
   d5666:	bd10      	pop	{r4, pc}

000d5668 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5668:	b510      	push	{r4, lr}
   d566a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d566c:	7800      	ldrb	r0, [r0, #0]
   d566e:	f7ff ffeb 	bl	d5648 <_ZN8SPIClass4lockEv.isra.0>
   d5672:	b948      	cbnz	r0, d5688 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d5674:	7820      	ldrb	r0, [r4, #0]
   d5676:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d567a:	f7ff fb17 	bl	d4cac <HAL_SPI_Begin>
        unlock();
   d567e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d5684:	f7ff bfe3 	b.w	d564e <_ZN8SPIClass6unlockEv.isra.1>
   d5688:	bd10      	pop	{r4, pc}

000d568a <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d568a:	7800      	ldrb	r0, [r0, #0]
   d568c:	f7ff bfdf 	b.w	d564e <_ZN8SPIClass6unlockEv.isra.1>

000d5690 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5690:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d5692:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5694:	6018      	str	r0, [r3, #0]
   d5696:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5698:	6818      	ldr	r0, [r3, #0]
   d569a:	4288      	cmp	r0, r1
   d569c:	b2e5      	uxtb	r5, r4
   d569e:	d906      	bls.n	d56ae <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d56a0:	3401      	adds	r4, #1
   d56a2:	2c08      	cmp	r4, #8
   d56a4:	d002      	beq.n	d56ac <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d56a6:	0840      	lsrs	r0, r0, #1
   d56a8:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d56aa:	e7f5      	b.n	d5698 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d56ac:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d56ae:	4b02      	ldr	r3, [pc, #8]	; (d56b8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d56b0:	5d5b      	ldrb	r3, [r3, r5]
   d56b2:	7013      	strb	r3, [r2, #0]
   d56b4:	bd30      	pop	{r4, r5, pc}
   d56b6:	bf00      	nop
   d56b8:	000d72d0 	.word	0x000d72d0

000d56bc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d56bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d56c0:	4607      	mov	r7, r0
   d56c2:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d56c4:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d56c6:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d56c8:	f7ff ffbe 	bl	d5648 <_ZN8SPIClass4lockEv.isra.0>
   d56cc:	2800      	cmp	r0, #0
   d56ce:	db62      	blt.n	d5796 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d56d0:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d56d2:	2214      	movs	r2, #20
   d56d4:	2100      	movs	r1, #0
   d56d6:	a809      	add	r0, sp, #36	; 0x24
   d56d8:	f001 fc57 	bl	d6f8a <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d56dc:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d56de:	4620      	mov	r0, r4
   d56e0:	2200      	movs	r2, #0
   d56e2:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d56e4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d56e8:	f7ff fb00 	bl	d4cec <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d56ec:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d56f0:	b154      	cbz	r4, d5708 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d56f2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d56f6:	b935      	cbnz	r5, d5706 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d56f8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d56fc:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d5700:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d5704:	e003      	b.n	d570e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d5706:	2400      	movs	r4, #0
   d5708:	46a1      	mov	r9, r4
   d570a:	46a0      	mov	r8, r4
   d570c:	2501      	movs	r5, #1
   d570e:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d5710:	b105      	cbz	r5, d5714 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d5712:	b9bb      	cbnz	r3, d5744 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d5714:	429d      	cmp	r5, r3
   d5716:	d10b      	bne.n	d5730 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d5718:	68b2      	ldr	r2, [r6, #8]
   d571a:	4542      	cmp	r2, r8
   d571c:	d108      	bne.n	d5730 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d571e:	f88d 9020 	strb.w	r9, [sp, #32]
   d5722:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d5726:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d572a:	89b2      	ldrh	r2, [r6, #12]
   d572c:	4291      	cmp	r1, r2
   d572e:	d009      	beq.n	d5744 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d5730:	b153      	cbz	r3, d5748 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d5732:	2400      	movs	r4, #0
   d5734:	7838      	ldrb	r0, [r7, #0]
   d5736:	9401      	str	r4, [sp, #4]
   d5738:	9400      	str	r4, [sp, #0]
   d573a:	4623      	mov	r3, r4
   d573c:	4622      	mov	r2, r4
   d573e:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d5740:	f7ff fadc 	bl	d4cfc <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d5744:	2000      	movs	r0, #0
   d5746:	e026      	b.n	d5796 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d5748:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d574c:	68b1      	ldr	r1, [r6, #8]
   d574e:	980a      	ldr	r0, [sp, #40]	; 0x28
   d5750:	ab04      	add	r3, sp, #16
   d5752:	f10d 020f 	add.w	r2, sp, #15
   d5756:	f7ff ff9b 	bl	d5690 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d575a:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d575c:	b105      	cbz	r5, d5760 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d575e:	b9b1      	cbnz	r1, d578e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d5760:	42a9      	cmp	r1, r5
   d5762:	d008      	beq.n	d5776 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d5764:	2400      	movs	r4, #0
   d5766:	7838      	ldrb	r0, [r7, #0]
   d5768:	9401      	str	r4, [sp, #4]
   d576a:	7b74      	ldrb	r4, [r6, #13]
   d576c:	7b33      	ldrb	r3, [r6, #12]
   d576e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d5772:	9400      	str	r4, [sp, #0]
   d5774:	e7e4      	b.n	d5740 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d5776:	68b3      	ldr	r3, [r6, #8]
   d5778:	4543      	cmp	r3, r8
   d577a:	d3f3      	bcc.n	d5764 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d577c:	f88d 9020 	strb.w	r9, [sp, #32]
   d5780:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d5784:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5788:	89b3      	ldrh	r3, [r6, #12]
   d578a:	429a      	cmp	r2, r3
   d578c:	d1ea      	bne.n	d5764 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d578e:	9b04      	ldr	r3, [sp, #16]
   d5790:	4543      	cmp	r3, r8
   d5792:	d1e7      	bne.n	d5764 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d5794:	e7d6      	b.n	d5744 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d5796:	b00f      	add	sp, #60	; 0x3c
   d5798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d579c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d579c:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d579e:	7800      	ldrb	r0, [r0, #0]
   d57a0:	f7ff fa8c 	bl	d4cbc <HAL_SPI_Send_Receive_Data>
}
   d57a4:	b2c0      	uxtb	r0, r0
   d57a6:	bd08      	pop	{r3, pc}

000d57a8 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d57a8:	7800      	ldrb	r0, [r0, #0]
   d57aa:	f7ff ba97 	b.w	d4cdc <HAL_SPI_Is_Enabled>
	...

000d57b0 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d57b0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d57b4:	ec59 8b10 	vmov	r8, r9, d0
   d57b8:	4607      	mov	r7, r0
   d57ba:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   d57bc:	2200      	movs	r2, #0
   d57be:	2300      	movs	r3, #0
   d57c0:	ee10 0a10 	vmov	r0, s0
   d57c4:	4649      	mov	r1, r9
   d57c6:	f001 f9cf 	bl	d6b68 <__aeabi_dcmplt>
   d57ca:	b128      	cbz	r0, d57d8 <_Z4dtoadhPc+0x28>
        val = -val;
   d57cc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d57d0:	4699      	mov	r9, r3
        *sout++ = '-';
   d57d2:	232d      	movs	r3, #45	; 0x2d
   d57d4:	7033      	strb	r3, [r6, #0]
   d57d6:	3601      	adds	r6, #1
   d57d8:	2300      	movs	r3, #0
    }
    long scale = 1;
   d57da:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d57dc:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d57de:	b2d9      	uxtb	r1, r3
   d57e0:	428f      	cmp	r7, r1
   d57e2:	d902      	bls.n	d57ea <_Z4dtoadhPc+0x3a>
        scale *= 10;
   d57e4:	4354      	muls	r4, r2
   d57e6:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d57e8:	e7f9      	b.n	d57de <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   d57ea:	4620      	mov	r0, r4
   d57ec:	f000 fee4 	bl	d65b8 <__aeabi_i2d>
   d57f0:	4642      	mov	r2, r8
   d57f2:	464b      	mov	r3, r9
   d57f4:	f000 ff46 	bl	d6684 <__aeabi_dmul>
   d57f8:	4682      	mov	sl, r0
   d57fa:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   d57fc:	f001 fa14 	bl	d6c28 <__aeabi_d2ulz>
   d5800:	4680      	mov	r8, r0
   d5802:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   d5804:	f000 ff08 	bl	d6618 <__aeabi_ul2d>
   d5808:	4602      	mov	r2, r0
   d580a:	460b      	mov	r3, r1
   d580c:	4650      	mov	r0, sl
   d580e:	4659      	mov	r1, fp
   d5810:	f000 fd84 	bl	d631c <__aeabi_dsub>
   d5814:	2200      	movs	r2, #0
   d5816:	4b17      	ldr	r3, [pc, #92]	; (d5874 <_Z4dtoadhPc+0xc4>)
   d5818:	f001 f9ba 	bl	d6b90 <__aeabi_dcmpge>
   d581c:	b118      	cbz	r0, d5826 <_Z4dtoadhPc+0x76>
        fixed++;
   d581e:	f118 0801 	adds.w	r8, r8, #1
   d5822:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d5826:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d5828:	4622      	mov	r2, r4
   d582a:	462b      	mov	r3, r5
   d582c:	4640      	mov	r0, r8
   d582e:	4649      	mov	r1, r9
   d5830:	f001 f9e2 	bl	d6bf8 <__aeabi_uldivmod>
   d5834:	2301      	movs	r3, #1
   d5836:	220a      	movs	r2, #10
   d5838:	4631      	mov	r1, r6
   d583a:	f000 fa76 	bl	d5d2a <ultoa>
    if (prec) {
   d583e:	b1af      	cbz	r7, d586c <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   d5840:	4630      	mov	r0, r6
   d5842:	f001 fbdb 	bl	d6ffc <strlen>
        *sout++ = '.';
   d5846:	232e      	movs	r3, #46	; 0x2e
   d5848:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   d584a:	3001      	adds	r0, #1
   d584c:	4406      	add	r6, r0
   d584e:	4622      	mov	r2, r4
   d5850:	462b      	mov	r3, r5
   d5852:	4640      	mov	r0, r8
   d5854:	4649      	mov	r1, r9
   d5856:	f001 f9cf 	bl	d6bf8 <__aeabi_uldivmod>
   d585a:	463b      	mov	r3, r7
   d585c:	4610      	mov	r0, r2
   d585e:	4631      	mov	r1, r6
   d5860:	220a      	movs	r2, #10
    }
}
   d5862:	b001      	add	sp, #4
   d5864:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   d5868:	f000 ba5f 	b.w	d5d2a <ultoa>
    }
}
   d586c:	b001      	add	sp, #4
   d586e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5872:	bf00      	nop
   d5874:	3fe00000 	.word	0x3fe00000

000d5878 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5878:	b510      	push	{r4, lr}
   d587a:	4604      	mov	r4, r0
{
	free(buffer);
   d587c:	6800      	ldr	r0, [r0, #0]
   d587e:	f7ff fb51 	bl	d4f24 <free>
}
   d5882:	4620      	mov	r0, r4
   d5884:	bd10      	pop	{r4, pc}

000d5886 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5886:	b510      	push	{r4, lr}
   d5888:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d588a:	6800      	ldr	r0, [r0, #0]
   d588c:	b108      	cbz	r0, d5892 <_ZN6String10invalidateEv+0xc>
   d588e:	f7ff fb49 	bl	d4f24 <free>
	buffer = NULL;
   d5892:	2300      	movs	r3, #0
   d5894:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5896:	60a3      	str	r3, [r4, #8]
   d5898:	6063      	str	r3, [r4, #4]
   d589a:	bd10      	pop	{r4, pc}

000d589c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d589c:	b538      	push	{r3, r4, r5, lr}
   d589e:	4604      	mov	r4, r0
   d58a0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d58a2:	6800      	ldr	r0, [r0, #0]
   d58a4:	3101      	adds	r1, #1
   d58a6:	f7ff fb45 	bl	d4f34 <realloc>
	if (newbuffer) {
   d58aa:	b110      	cbz	r0, d58b2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d58ac:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d58b0:	2001      	movs	r0, #1
	}
	return 0;
}
   d58b2:	bd38      	pop	{r3, r4, r5, pc}

000d58b4 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d58b4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d58b6:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d58b8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d58ba:	b113      	cbz	r3, d58c2 <_ZN6String7reserveEj+0xe>
   d58bc:	6843      	ldr	r3, [r0, #4]
   d58be:	428b      	cmp	r3, r1
   d58c0:	d207      	bcs.n	d58d2 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d58c2:	4620      	mov	r0, r4
   d58c4:	f7ff ffea 	bl	d589c <_ZN6String12changeBufferEj>
   d58c8:	b120      	cbz	r0, d58d4 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d58ca:	68a3      	ldr	r3, [r4, #8]
   d58cc:	b90b      	cbnz	r3, d58d2 <_ZN6String7reserveEj+0x1e>
   d58ce:	6822      	ldr	r2, [r4, #0]
   d58d0:	7013      	strb	r3, [r2, #0]
   d58d2:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d58d4:	bd10      	pop	{r4, pc}

000d58d6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d58d6:	b570      	push	{r4, r5, r6, lr}
   d58d8:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d58da:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d58dc:	4604      	mov	r4, r0
   d58de:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d58e0:	f7ff ffe8 	bl	d58b4 <_ZN6String7reserveEj>
   d58e4:	b918      	cbnz	r0, d58ee <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d58e6:	4620      	mov	r0, r4
   d58e8:	f7ff ffcd 	bl	d5886 <_ZN6String10invalidateEv>
		return *this;
   d58ec:	e009      	b.n	d5902 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d58ee:	462a      	mov	r2, r5
   d58f0:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d58f2:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d58f4:	6820      	ldr	r0, [r4, #0]
   d58f6:	f001 fb3d 	bl	d6f74 <memcpy>
	buffer[len] = 0;
   d58fa:	6822      	ldr	r2, [r4, #0]
   d58fc:	68a3      	ldr	r3, [r4, #8]
   d58fe:	2100      	movs	r1, #0
   d5900:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5902:	4620      	mov	r0, r4
   d5904:	bd70      	pop	{r4, r5, r6, pc}

000d5906 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5906:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5908:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d590a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d590c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d590e:	6043      	str	r3, [r0, #4]
	len = 0;
   d5910:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5912:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5914:	460d      	mov	r5, r1
   d5916:	b139      	cbz	r1, d5928 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5918:	4608      	mov	r0, r1
   d591a:	f001 fb6f 	bl	d6ffc <strlen>
   d591e:	4629      	mov	r1, r5
   d5920:	4602      	mov	r2, r0
   d5922:	4620      	mov	r0, r4
   d5924:	f7ff ffd7 	bl	d58d6 <_ZN6String4copyEPKcj>
}
   d5928:	4620      	mov	r0, r4
   d592a:	bd38      	pop	{r3, r4, r5, pc}

000d592c <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d592c:	b538      	push	{r3, r4, r5, lr}
   d592e:	4605      	mov	r5, r0
	if (buffer) {
   d5930:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5932:	460c      	mov	r4, r1
	if (buffer) {
   d5934:	b160      	cbz	r0, d5950 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d5936:	686a      	ldr	r2, [r5, #4]
   d5938:	688b      	ldr	r3, [r1, #8]
   d593a:	429a      	cmp	r2, r3
   d593c:	d306      	bcc.n	d594c <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d593e:	6809      	ldr	r1, [r1, #0]
   d5940:	f001 fb54 	bl	d6fec <strcpy>
			len = rhs.len;
   d5944:	68a3      	ldr	r3, [r4, #8]
   d5946:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d5948:	2300      	movs	r3, #0
   d594a:	e00a      	b.n	d5962 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d594c:	f7ff faea 	bl	d4f24 <free>
		}
	}
	buffer = rhs.buffer;
   d5950:	6823      	ldr	r3, [r4, #0]
   d5952:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d5954:	6863      	ldr	r3, [r4, #4]
   d5956:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d5958:	68a3      	ldr	r3, [r4, #8]
   d595a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d595c:	2300      	movs	r3, #0
   d595e:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d5960:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d5962:	60a3      	str	r3, [r4, #8]
   d5964:	bd38      	pop	{r3, r4, r5, pc}

000d5966 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5966:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d5968:	b510      	push	{r4, lr}
   d596a:	460b      	mov	r3, r1
   d596c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d596e:	d007      	beq.n	d5980 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5970:	6809      	ldr	r1, [r1, #0]
   d5972:	b119      	cbz	r1, d597c <_ZN6StringaSERKS_+0x16>
   d5974:	689a      	ldr	r2, [r3, #8]
   d5976:	f7ff ffae 	bl	d58d6 <_ZN6String4copyEPKcj>
   d597a:	e001      	b.n	d5980 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d597c:	f7ff ff83 	bl	d5886 <_ZN6String10invalidateEv>

	return *this;
}
   d5980:	4620      	mov	r0, r4
   d5982:	bd10      	pop	{r4, pc}

000d5984 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5984:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5986:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5988:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d598a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d598c:	6043      	str	r3, [r0, #4]
	len = 0;
   d598e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5990:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5992:	f7ff ffe8 	bl	d5966 <_ZN6StringaSERKS_>
}
   d5996:	4620      	mov	r0, r4
   d5998:	bd10      	pop	{r4, pc}

000d599a <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d599a:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d599c:	b510      	push	{r4, lr}
   d599e:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d59a0:	d001      	beq.n	d59a6 <_ZN6StringaSEOS_+0xc>
   d59a2:	f7ff ffc3 	bl	d592c <_ZN6String4moveERS_>
	return *this;
}
   d59a6:	4620      	mov	r0, r4
   d59a8:	bd10      	pop	{r4, pc}

000d59aa <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d59aa:	b538      	push	{r3, r4, r5, lr}
   d59ac:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d59ae:	460c      	mov	r4, r1
   d59b0:	b141      	cbz	r1, d59c4 <_ZN6StringaSEPKc+0x1a>
   d59b2:	4608      	mov	r0, r1
   d59b4:	f001 fb22 	bl	d6ffc <strlen>
   d59b8:	4621      	mov	r1, r4
   d59ba:	4602      	mov	r2, r0
   d59bc:	4628      	mov	r0, r5
   d59be:	f7ff ff8a 	bl	d58d6 <_ZN6String4copyEPKcj>
   d59c2:	e001      	b.n	d59c8 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d59c4:	f7ff ff5f 	bl	d5886 <_ZN6String10invalidateEv>

	return *this;
}
   d59c8:	4628      	mov	r0, r5
   d59ca:	bd38      	pop	{r3, r4, r5, pc}

000d59cc <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d59cc:	b530      	push	{r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d59ce:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d59d0:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d59d2:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d59d4:	6043      	str	r3, [r0, #4]
	len = 0;
   d59d6:	6083      	str	r3, [r0, #8]
	flags = 0;
   d59d8:	7303      	strb	r3, [r0, #12]
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d59da:	4604      	mov	r4, r0
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d59dc:	ee10 0a10 	vmov	r0, s0
   d59e0:	b2cd      	uxtb	r5, r1
   d59e2:	f000 fdfb 	bl	d65dc <__aeabi_f2d>
   d59e6:	ec41 0b10 	vmov	d0, r0, r1
   d59ea:	a901      	add	r1, sp, #4
   d59ec:	4628      	mov	r0, r5
   d59ee:	f7ff fedf 	bl	d57b0 <_Z4dtoadhPc>
        *this = buf;
   d59f2:	a901      	add	r1, sp, #4
   d59f4:	4620      	mov	r0, r4
   d59f6:	f7ff ffd8 	bl	d59aa <_ZN6StringaSEPKc>
}
   d59fa:	4620      	mov	r0, r4
   d59fc:	b00b      	add	sp, #44	; 0x2c
   d59fe:	bd30      	pop	{r4, r5, pc}

000d5a00 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d5a00:	b570      	push	{r4, r5, r6, lr}
   d5a02:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d5a04:	b19a      	cbz	r2, d5a2e <_ZNK6String8getBytesEPhjj+0x2e>
   d5a06:	b191      	cbz	r1, d5a2e <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d5a08:	6885      	ldr	r5, [r0, #8]
   d5a0a:	429d      	cmp	r5, r3
   d5a0c:	d802      	bhi.n	d5a14 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d5a0e:	2300      	movs	r3, #0
   d5a10:	700b      	strb	r3, [r1, #0]
		return;
   d5a12:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d5a14:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d5a16:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d5a18:	6801      	ldr	r1, [r0, #0]
   d5a1a:	42ac      	cmp	r4, r5
   d5a1c:	bf28      	it	cs
   d5a1e:	462c      	movcs	r4, r5
   d5a20:	4419      	add	r1, r3
   d5a22:	4622      	mov	r2, r4
   d5a24:	4630      	mov	r0, r6
   d5a26:	f001 faf1 	bl	d700c <strncpy>
	buf[n] = 0;
   d5a2a:	2300      	movs	r3, #0
   d5a2c:	5533      	strb	r3, [r6, r4]
   d5a2e:	bd70      	pop	{r4, r5, r6, pc}

000d5a30 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5a30:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5a32:	4c09      	ldr	r4, [pc, #36]	; (d5a58 <_GLOBAL__sub_I_System+0x28>)
   d5a34:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5a36:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5a3a:	6020      	str	r0, [r4, #0]
   d5a3c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5a3e:	71a0      	strb	r0, [r4, #6]
   d5a40:	8120      	strh	r0, [r4, #8]
   d5a42:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5a44:	f7ff f9ea 	bl	d4e1c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5a48:	4620      	mov	r0, r4
   d5a4a:	4a04      	ldr	r2, [pc, #16]	; (d5a5c <_GLOBAL__sub_I_System+0x2c>)
   d5a4c:	4904      	ldr	r1, [pc, #16]	; (d5a60 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5a52:	f000 baf5 	b.w	d6040 <__aeabi_atexit>
   d5a56:	bf00      	nop
   d5a58:	2003e5d8 	.word	0x2003e5d8
   d5a5c:	2003e278 	.word	0x2003e278
   d5a60:	000d4131 	.word	0x000d4131

000d5a64 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5a64:	4b02      	ldr	r3, [pc, #8]	; (d5a70 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5a66:	681a      	ldr	r2, [r3, #0]
   d5a68:	4b02      	ldr	r3, [pc, #8]	; (d5a74 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5a6a:	601a      	str	r2, [r3, #0]
   d5a6c:	4770      	bx	lr
   d5a6e:	bf00      	nop
   d5a70:	2003e210 	.word	0x2003e210
   d5a74:	2003e5e4 	.word	0x2003e5e4

000d5a78 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5a78:	4770      	bx	lr

000d5a7a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5a7a:	7441      	strb	r1, [r0, #17]
   d5a7c:	4770      	bx	lr

000d5a7e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5a7e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5a80:	7c00      	ldrb	r0, [r0, #16]
   d5a82:	f7ff f98b 	bl	d4d9c <HAL_USART_Available_Data_For_Write>
}
   d5a86:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5a8a:	bd08      	pop	{r3, pc}

000d5a8c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5a8c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5a8e:	7c00      	ldrb	r0, [r0, #16]
   d5a90:	f7ff f95c 	bl	d4d4c <HAL_USART_Available_Data>
}
   d5a94:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5a98:	bd08      	pop	{r3, pc}

000d5a9a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5a9a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5a9c:	7c00      	ldrb	r0, [r0, #16]
   d5a9e:	f7ff f965 	bl	d4d6c <HAL_USART_Peek_Data>
}
   d5aa2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5aa6:	bf28      	it	cs
   d5aa8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5aac:	bd08      	pop	{r3, pc}

000d5aae <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5aae:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5ab0:	7c00      	ldrb	r0, [r0, #16]
   d5ab2:	f7ff f953 	bl	d4d5c <HAL_USART_Read_Data>
}
   d5ab6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5aba:	bf28      	it	cs
   d5abc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5ac0:	bd08      	pop	{r3, pc}

000d5ac2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5ac2:	7c00      	ldrb	r0, [r0, #16]
   d5ac4:	f7ff b95a 	b.w	d4d7c <HAL_USART_Flush_Data>

000d5ac8 <_ZN11USARTSerialD0Ev>:
   d5ac8:	b510      	push	{r4, lr}
   d5aca:	2114      	movs	r1, #20
   d5acc:	4604      	mov	r4, r0
   d5ace:	f000 fabc 	bl	d604a <_ZdlPvj>
   d5ad2:	4620      	mov	r0, r4
   d5ad4:	bd10      	pop	{r4, pc}

000d5ad6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5ad6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5ad8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5ada:	4604      	mov	r4, r0
   d5adc:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5ade:	b925      	cbnz	r5, d5aea <_ZN11USARTSerial5writeEh+0x14>
   d5ae0:	7c00      	ldrb	r0, [r0, #16]
   d5ae2:	f7ff f95b 	bl	d4d9c <HAL_USART_Available_Data_For_Write>
   d5ae6:	2800      	cmp	r0, #0
   d5ae8:	dd05      	ble.n	d5af6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5aea:	4631      	mov	r1, r6
   d5aec:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5aee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5af2:	f7ff b923 	b.w	d4d3c <HAL_USART_Write_Data>
  }
  return 0;
}
   d5af6:	4628      	mov	r0, r5
   d5af8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5afc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5afc:	b510      	push	{r4, lr}
   d5afe:	4604      	mov	r4, r0
   d5b00:	4608      	mov	r0, r1
   d5b02:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5b04:	2200      	movs	r2, #0
   d5b06:	6062      	str	r2, [r4, #4]
   d5b08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5b0c:	60a2      	str	r2, [r4, #8]
   d5b0e:	4a05      	ldr	r2, [pc, #20]	; (d5b24 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5b10:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5b12:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5b14:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5b16:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5b18:	461a      	mov	r2, r3
   d5b1a:	f7ff f907 	bl	d4d2c <HAL_USART_Init>
}
   d5b1e:	4620      	mov	r0, r4
   d5b20:	bd10      	pop	{r4, pc}
   d5b22:	bf00      	nop
   d5b24:	000d730c 	.word	0x000d730c

000d5b28 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5b28:	7c00      	ldrb	r0, [r0, #16]
   d5b2a:	f7ff b92f 	b.w	d4d8c <HAL_USART_Is_Enabled>
	...

000d5b30 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5b30:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5b32:	4d0c      	ldr	r5, [pc, #48]	; (d5b64 <_Z22__fetch_global_Serial1v+0x34>)
   d5b34:	6829      	ldr	r1, [r5, #0]
   d5b36:	f011 0401 	ands.w	r4, r1, #1
   d5b3a:	d111      	bne.n	d5b60 <_Z22__fetch_global_Serial1v+0x30>
   d5b3c:	4628      	mov	r0, r5
   d5b3e:	f7fe faae 	bl	d409e <__cxa_guard_acquire>
   d5b42:	b168      	cbz	r0, d5b60 <_Z22__fetch_global_Serial1v+0x30>
   d5b44:	4a08      	ldr	r2, [pc, #32]	; (d5b68 <_Z22__fetch_global_Serial1v+0x38>)
   d5b46:	4b09      	ldr	r3, [pc, #36]	; (d5b6c <_Z22__fetch_global_Serial1v+0x3c>)
   d5b48:	4809      	ldr	r0, [pc, #36]	; (d5b70 <_Z22__fetch_global_Serial1v+0x40>)
   d5b4a:	4621      	mov	r1, r4
   d5b4c:	f7ff ffd6 	bl	d5afc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5b50:	4628      	mov	r0, r5
   d5b52:	f7fe faa9 	bl	d40a8 <__cxa_guard_release>
   d5b56:	4a07      	ldr	r2, [pc, #28]	; (d5b74 <_Z22__fetch_global_Serial1v+0x44>)
   d5b58:	4907      	ldr	r1, [pc, #28]	; (d5b78 <_Z22__fetch_global_Serial1v+0x48>)
   d5b5a:	4805      	ldr	r0, [pc, #20]	; (d5b70 <_Z22__fetch_global_Serial1v+0x40>)
   d5b5c:	f000 fa70 	bl	d6040 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5b60:	4803      	ldr	r0, [pc, #12]	; (d5b70 <_Z22__fetch_global_Serial1v+0x40>)
   d5b62:	bd38      	pop	{r3, r4, r5, pc}
   d5b64:	2003e680 	.word	0x2003e680
   d5b68:	2003e684 	.word	0x2003e684
   d5b6c:	2003e5fc 	.word	0x2003e5fc
   d5b70:	2003e5e8 	.word	0x2003e5e8
   d5b74:	2003e278 	.word	0x2003e278
   d5b78:	000d5a79 	.word	0x000d5a79

000d5b7c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5b7c:	7441      	strb	r1, [r0, #17]
   d5b7e:	4770      	bx	lr

000d5b80 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5b80:	4770      	bx	lr

000d5b82 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5b82:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5b84:	2100      	movs	r1, #0
   d5b86:	7c00      	ldrb	r0, [r0, #16]
   d5b88:	f7ff f930 	bl	d4dec <HAL_USB_USART_Receive_Data>
}
   d5b8c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5b90:	bf28      	it	cs
   d5b92:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5b96:	bd08      	pop	{r3, pc}

000d5b98 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5b98:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5b9a:	2101      	movs	r1, #1
   d5b9c:	7c00      	ldrb	r0, [r0, #16]
   d5b9e:	f7ff f925 	bl	d4dec <HAL_USB_USART_Receive_Data>
}
   d5ba2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5ba6:	bf28      	it	cs
   d5ba8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5bac:	bd08      	pop	{r3, pc}

000d5bae <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5bae:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5bb0:	7c00      	ldrb	r0, [r0, #16]
   d5bb2:	f7ff f913 	bl	d4ddc <HAL_USB_USART_Available_Data_For_Write>
}
   d5bb6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5bba:	bd08      	pop	{r3, pc}

000d5bbc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5bbc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5bbe:	7c00      	ldrb	r0, [r0, #16]
   d5bc0:	f7ff f904 	bl	d4dcc <HAL_USB_USART_Available_Data>
}
   d5bc4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5bc8:	bd08      	pop	{r3, pc}

000d5bca <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5bca:	7c00      	ldrb	r0, [r0, #16]
   d5bcc:	f7ff b91e 	b.w	d4e0c <HAL_USB_USART_Flush_Data>

000d5bd0 <_ZN9USBSerialD0Ev>:
   d5bd0:	b510      	push	{r4, lr}
   d5bd2:	2114      	movs	r1, #20
   d5bd4:	4604      	mov	r4, r0
   d5bd6:	f000 fa38 	bl	d604a <_ZdlPvj>
   d5bda:	4620      	mov	r0, r4
   d5bdc:	bd10      	pop	{r4, pc}

000d5bde <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5bde:	b538      	push	{r3, r4, r5, lr}
   d5be0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5be2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5be4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5be6:	f7ff f8f9 	bl	d4ddc <HAL_USB_USART_Available_Data_For_Write>
   d5bea:	2800      	cmp	r0, #0
   d5bec:	dc01      	bgt.n	d5bf2 <_ZN9USBSerial5writeEh+0x14>
   d5bee:	7c60      	ldrb	r0, [r4, #17]
   d5bf0:	b128      	cbz	r0, d5bfe <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5bf2:	4629      	mov	r1, r5
   d5bf4:	7c20      	ldrb	r0, [r4, #16]
   d5bf6:	f7ff f901 	bl	d4dfc <HAL_USB_USART_Send_Data>
   d5bfa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5bfe:	bd38      	pop	{r3, r4, r5, pc}

000d5c00 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5c00:	b510      	push	{r4, lr}
   d5c02:	4604      	mov	r4, r0
   d5c04:	2300      	movs	r3, #0
   d5c06:	6063      	str	r3, [r4, #4]
   d5c08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5c0c:	60a3      	str	r3, [r4, #8]
   d5c0e:	4b05      	ldr	r3, [pc, #20]	; (d5c24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5c10:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5c12:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5c14:	4608      	mov	r0, r1
{
  _serial = serial;
   d5c16:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5c18:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5c1a:	4611      	mov	r1, r2
   d5c1c:	f7ff f8c6 	bl	d4dac <HAL_USB_USART_Init>
}
   d5c20:	4620      	mov	r0, r4
   d5c22:	bd10      	pop	{r4, pc}
   d5c24:	000d733c 	.word	0x000d733c

000d5c28 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5c28:	2200      	movs	r2, #0
   d5c2a:	7c00      	ldrb	r0, [r0, #16]
   d5c2c:	f7ff b8c6 	b.w	d4dbc <HAL_USB_USART_Begin>

000d5c30 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5c30:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5c32:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5c34:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5c36:	2100      	movs	r1, #0
   d5c38:	f001 f9a7 	bl	d6f8a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5c3c:	4620      	mov	r0, r4
   d5c3e:	bd10      	pop	{r4, pc}

000d5c40 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5c40:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5c42:	4d0e      	ldr	r5, [pc, #56]	; (d5c7c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5c44:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5c46:	a801      	add	r0, sp, #4
   d5c48:	f7ff fff2 	bl	d5c30 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5c4c:	6829      	ldr	r1, [r5, #0]
   d5c4e:	f011 0401 	ands.w	r4, r1, #1
   d5c52:	d110      	bne.n	d5c76 <_Z16_fetch_usbserialv+0x36>
   d5c54:	4628      	mov	r0, r5
   d5c56:	f7fe fa22 	bl	d409e <__cxa_guard_acquire>
   d5c5a:	b160      	cbz	r0, d5c76 <_Z16_fetch_usbserialv+0x36>
   d5c5c:	aa01      	add	r2, sp, #4
   d5c5e:	4621      	mov	r1, r4
   d5c60:	4807      	ldr	r0, [pc, #28]	; (d5c80 <_Z16_fetch_usbserialv+0x40>)
   d5c62:	f7ff ffcd 	bl	d5c00 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5c66:	4628      	mov	r0, r5
   d5c68:	f7fe fa1e 	bl	d40a8 <__cxa_guard_release>
   d5c6c:	4a05      	ldr	r2, [pc, #20]	; (d5c84 <_Z16_fetch_usbserialv+0x44>)
   d5c6e:	4906      	ldr	r1, [pc, #24]	; (d5c88 <_Z16_fetch_usbserialv+0x48>)
   d5c70:	4803      	ldr	r0, [pc, #12]	; (d5c80 <_Z16_fetch_usbserialv+0x40>)
   d5c72:	f000 f9e5 	bl	d6040 <__aeabi_atexit>
	return _usbserial;
}
   d5c76:	4802      	ldr	r0, [pc, #8]	; (d5c80 <_Z16_fetch_usbserialv+0x40>)
   d5c78:	b007      	add	sp, #28
   d5c7a:	bd30      	pop	{r4, r5, pc}
   d5c7c:	2003e708 	.word	0x2003e708
   d5c80:	2003e70c 	.word	0x2003e70c
   d5c84:	2003e278 	.word	0x2003e278
   d5c88:	000d5b81 	.word	0x000d5b81

000d5c8c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5c8c:	2200      	movs	r2, #0
   d5c8e:	4611      	mov	r1, r2
   d5c90:	6840      	ldr	r0, [r0, #4]
   d5c92:	f7ff b907 	b.w	d4ea4 <network_ready>

000d5c96 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5c96:	2200      	movs	r2, #0
   d5c98:	4611      	mov	r1, r2
   d5c9a:	6840      	ldr	r0, [r0, #4]
   d5c9c:	f7ff b922 	b.w	d4ee4 <network_listening>

000d5ca0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5ca0:	2200      	movs	r2, #0
   d5ca2:	4611      	mov	r1, r2
   d5ca4:	6840      	ldr	r0, [r0, #4]
   d5ca6:	f7ff b92d 	b.w	d4f04 <network_get_listen_timeout>

000d5caa <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5caa:	2200      	movs	r2, #0
   d5cac:	6840      	ldr	r0, [r0, #4]
   d5cae:	f7ff b921 	b.w	d4ef4 <network_set_listen_timeout>

000d5cb2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5cb2:	2200      	movs	r2, #0
   d5cb4:	f081 0101 	eor.w	r1, r1, #1
   d5cb8:	6840      	ldr	r0, [r0, #4]
   d5cba:	f7ff b90b 	b.w	d4ed4 <network_listen>

000d5cbe <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5cbe:	2300      	movs	r3, #0
   d5cc0:	461a      	mov	r2, r3
   d5cc2:	4619      	mov	r1, r3
   d5cc4:	6840      	ldr	r0, [r0, #4]
   d5cc6:	f7ff b8fd 	b.w	d4ec4 <network_off>

000d5cca <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5cca:	2300      	movs	r3, #0
   d5ccc:	461a      	mov	r2, r3
   d5cce:	4619      	mov	r1, r3
   d5cd0:	6840      	ldr	r0, [r0, #4]
   d5cd2:	f7ff b8ef 	b.w	d4eb4 <network_on>

000d5cd6 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5cd6:	2200      	movs	r2, #0
   d5cd8:	4611      	mov	r1, r2
   d5cda:	6840      	ldr	r0, [r0, #4]
   d5cdc:	f7ff b8d2 	b.w	d4e84 <network_connecting>

000d5ce0 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5ce0:	2200      	movs	r2, #0
   d5ce2:	2102      	movs	r1, #2
   d5ce4:	6840      	ldr	r0, [r0, #4]
   d5ce6:	f7ff b8d5 	b.w	d4e94 <network_disconnect>

000d5cea <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5cea:	2300      	movs	r3, #0
   d5cec:	461a      	mov	r2, r3
   d5cee:	6840      	ldr	r0, [r0, #4]
   d5cf0:	f7ff b8c0 	b.w	d4e74 <network_connect>

000d5cf4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5cf4:	4b02      	ldr	r3, [pc, #8]	; (d5d00 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5cf6:	2204      	movs	r2, #4
   d5cf8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5cfa:	4a02      	ldr	r2, [pc, #8]	; (d5d04 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5cfc:	601a      	str	r2, [r3, #0]
   d5cfe:	4770      	bx	lr
   d5d00:	2003e720 	.word	0x2003e720
   d5d04:	000d736c 	.word	0x000d736c

000d5d08 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d5d08:	b510      	push	{r4, lr}
   d5d0a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d5d0c:	f001 f976 	bl	d6ffc <strlen>
   d5d10:	3801      	subs	r0, #1
   d5d12:	1823      	adds	r3, r4, r0
   d5d14:	4620      	mov	r0, r4
	while(i<j){
   d5d16:	4298      	cmp	r0, r3
   d5d18:	d206      	bcs.n	d5d28 <_Z11str_reversePc+0x20>
		c = *i;
   d5d1a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d5d1c:	7819      	ldrb	r1, [r3, #0]
   d5d1e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d5d22:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d5d26:	e7f6      	b.n	d5d16 <_Z11str_reversePc+0xe>
   d5d28:	bd10      	pop	{r4, pc}

000d5d2a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5d2a:	b570      	push	{r4, r5, r6, lr}
   d5d2c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d5d2e:	1e91      	subs	r1, r2, #2
   d5d30:	2922      	cmp	r1, #34	; 0x22
   d5d32:	d820      	bhi.n	d5d76 <ultoa+0x4c>
   d5d34:	4625      	mov	r5, r4
   d5d36:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5d38:	b910      	cbnz	r0, d5d40 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5d3a:	4423      	add	r3, r4
            *ptr++ = '0';
   d5d3c:	2230      	movs	r2, #48	; 0x30
   d5d3e:	e00e      	b.n	d5d5e <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d5d40:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d5d44:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d5d48:	b2c1      	uxtb	r1, r0
   d5d4a:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d5d4e:	2809      	cmp	r0, #9
                *ptr += '0';
   d5d50:	bf94      	ite	ls
   d5d52:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d5d54:	3157      	addhi	r1, #87	; 0x57
   d5d56:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d5d5a:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5d5c:	e7eb      	b.n	d5d36 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5d5e:	4299      	cmp	r1, r3
   d5d60:	d202      	bcs.n	d5d68 <ultoa+0x3e>
            *ptr++ = '0';
   d5d62:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5d66:	e7fa      	b.n	d5d5e <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d5d68:	2300      	movs	r3, #0
	str_reverse(buffer);
   d5d6a:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d5d6c:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d5d6e:	f7ff ffcb 	bl	d5d08 <_Z11str_reversePc>
	return buffer;
   d5d72:	4620      	mov	r0, r4
   d5d74:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d5d76:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d5d78:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5d7c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5d7c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5d7e:	4b0c      	ldr	r3, [pc, #48]	; (d5db0 <serialEventRun+0x34>)
   d5d80:	b133      	cbz	r3, d5d90 <serialEventRun+0x14>
   d5d82:	f7ff ff5d 	bl	d5c40 <_Z16_fetch_usbserialv>
   d5d86:	6803      	ldr	r3, [r0, #0]
   d5d88:	691b      	ldr	r3, [r3, #16]
   d5d8a:	4798      	blx	r3
   d5d8c:	2800      	cmp	r0, #0
   d5d8e:	dc09      	bgt.n	d5da4 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5d90:	4b08      	ldr	r3, [pc, #32]	; (d5db4 <serialEventRun+0x38>)
   d5d92:	b163      	cbz	r3, d5dae <serialEventRun+0x32>
   d5d94:	f7ff fecc 	bl	d5b30 <_Z22__fetch_global_Serial1v>
   d5d98:	6803      	ldr	r3, [r0, #0]
   d5d9a:	691b      	ldr	r3, [r3, #16]
   d5d9c:	4798      	blx	r3
   d5d9e:	2800      	cmp	r0, #0
   d5da0:	dc03      	bgt.n	d5daa <serialEventRun+0x2e>
   d5da2:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5da4:	f3af 8000 	nop.w
   d5da8:	e7f2      	b.n	d5d90 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5daa:	f3af 8000 	nop.w
   d5dae:	bd08      	pop	{r3, pc}
	...

000d5db8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5db8:	b508      	push	{r3, lr}
	serialEventRun();
   d5dba:	f7ff ffdf 	bl	d5d7c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5dbe:	f7fe febd 	bl	d4b3c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5dc2:	4b01      	ldr	r3, [pc, #4]	; (d5dc8 <_post_loop+0x10>)
   d5dc4:	6018      	str	r0, [r3, #0]
   d5dc6:	bd08      	pop	{r3, pc}
   d5dc8:	2003e730 	.word	0x2003e730

000d5dcc <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5dcc:	4802      	ldr	r0, [pc, #8]	; (d5dd8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5dce:	4a03      	ldr	r2, [pc, #12]	; (d5ddc <_Z33system_initialize_user_backup_ramv+0x10>)
   d5dd0:	4903      	ldr	r1, [pc, #12]	; (d5de0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5dd2:	1a12      	subs	r2, r2, r0
   d5dd4:	f001 b8ce 	b.w	d6f74 <memcpy>
   d5dd8:	2003f400 	.word	0x2003f400
   d5ddc:	2003f404 	.word	0x2003f404
   d5de0:	000d7458 	.word	0x000d7458

000d5de4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5de4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5de6:	2300      	movs	r3, #0
   d5de8:	9300      	str	r3, [sp, #0]
   d5dea:	461a      	mov	r2, r3
   d5dec:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5df0:	f7ff f82e 	bl	d4e50 <system_ctrl_set_result>
}
   d5df4:	b003      	add	sp, #12
   d5df6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5dfc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5dfc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5dfe:	8843      	ldrh	r3, [r0, #2]
   d5e00:	2b0a      	cmp	r3, #10
   d5e02:	d008      	beq.n	d5e16 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5e04:	2b50      	cmp	r3, #80	; 0x50
   d5e06:	d109      	bne.n	d5e1c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5e08:	4b09      	ldr	r3, [pc, #36]	; (d5e30 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5e0a:	681b      	ldr	r3, [r3, #0]
   d5e0c:	b13b      	cbz	r3, d5e1e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5e0e:	b003      	add	sp, #12
   d5e10:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5e14:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5e16:	f7ff ffe5 	bl	d5de4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5e1a:	e006      	b.n	d5e2a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5e1c:	2300      	movs	r3, #0
   d5e1e:	9300      	str	r3, [sp, #0]
   d5e20:	461a      	mov	r2, r3
   d5e22:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5e26:	f7ff f813 	bl	d4e50 <system_ctrl_set_result>
        break;
    }
}
   d5e2a:	b003      	add	sp, #12
   d5e2c:	f85d fb04 	ldr.w	pc, [sp], #4
   d5e30:	2003e728 	.word	0x2003e728

000d5e34 <module_user_init_hook>:

void module_user_init_hook()
{
   d5e34:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5e36:	4c10      	ldr	r4, [pc, #64]	; (d5e78 <module_user_init_hook+0x44>)
   d5e38:	4d10      	ldr	r5, [pc, #64]	; (d5e7c <module_user_init_hook+0x48>)
   d5e3a:	6823      	ldr	r3, [r4, #0]
   d5e3c:	42ab      	cmp	r3, r5
   d5e3e:	4b10      	ldr	r3, [pc, #64]	; (d5e80 <module_user_init_hook+0x4c>)
   d5e40:	bf0c      	ite	eq
   d5e42:	2201      	moveq	r2, #1
   d5e44:	2200      	movne	r2, #0
   d5e46:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5e48:	d002      	beq.n	d5e50 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d5e4a:	f7ff ffbf 	bl	d5dcc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5e4e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5e50:	f7fe fe6c 	bl	d4b2c <HAL_RNG_GetRandomNumber>
   d5e54:	4604      	mov	r4, r0
    srand(seed);
   d5e56:	f001 f8a1 	bl	d6f9c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5e5a:	4b0a      	ldr	r3, [pc, #40]	; (d5e84 <module_user_init_hook+0x50>)
   d5e5c:	b113      	cbz	r3, d5e64 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5e5e:	4620      	mov	r0, r4
   d5e60:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5e64:	2100      	movs	r1, #0
   d5e66:	4807      	ldr	r0, [pc, #28]	; (d5e84 <module_user_init_hook+0x50>)
   d5e68:	f7fe fffc 	bl	d4e64 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5e6c:	2100      	movs	r1, #0
   d5e6e:	4806      	ldr	r0, [pc, #24]	; (d5e88 <module_user_init_hook+0x54>)
}
   d5e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5e74:	f7fe bfe2 	b.w	d4e3c <system_ctrl_set_app_request_handler>
   d5e78:	2003f400 	.word	0x2003f400
   d5e7c:	9a271c1e 	.word	0x9a271c1e
   d5e80:	2003e72c 	.word	0x2003e72c
   d5e84:	00000000 	.word	0x00000000
   d5e88:	000d5dfd 	.word	0x000d5dfd

000d5e8c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5e8c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5e8e:	4e18      	ldr	r6, [pc, #96]	; (d5ef0 <pinAvailable+0x64>)
   d5e90:	6831      	ldr	r1, [r6, #0]
   d5e92:	f011 0501 	ands.w	r5, r1, #1
   d5e96:	4604      	mov	r4, r0
   d5e98:	d10a      	bne.n	d5eb0 <pinAvailable+0x24>
   d5e9a:	4630      	mov	r0, r6
   d5e9c:	f7fe f8ff 	bl	d409e <__cxa_guard_acquire>
   d5ea0:	b130      	cbz	r0, d5eb0 <pinAvailable+0x24>
   d5ea2:	4629      	mov	r1, r5
   d5ea4:	4813      	ldr	r0, [pc, #76]	; (d5ef4 <pinAvailable+0x68>)
   d5ea6:	f7ff fbd5 	bl	d5654 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5eaa:	4630      	mov	r0, r6
   d5eac:	f7fe f8fc 	bl	d40a8 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d5eb0:	4810      	ldr	r0, [pc, #64]	; (d5ef4 <pinAvailable+0x68>)
   d5eb2:	f7ff fc79 	bl	d57a8 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5eb6:	b128      	cbz	r0, d5ec4 <pinAvailable+0x38>
   d5eb8:	f1a4 030b 	sub.w	r3, r4, #11
   d5ebc:	2b02      	cmp	r3, #2
   d5ebe:	d801      	bhi.n	d5ec4 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d5ec0:	2000      	movs	r0, #0
   d5ec2:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5ec4:	f000 f896 	bl	d5ff4 <_Z19__fetch_global_Wirev>
   d5ec8:	f7ff f92c 	bl	d5124 <_ZN7TwoWire9isEnabledEv>
   d5ecc:	b108      	cbz	r0, d5ed2 <pinAvailable+0x46>
   d5ece:	2c01      	cmp	r4, #1
   d5ed0:	d9f6      	bls.n	d5ec0 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5ed2:	f7ff fe2d 	bl	d5b30 <_Z22__fetch_global_Serial1v>
   d5ed6:	f7ff fe27 	bl	d5b28 <_ZN11USARTSerial9isEnabledEv>
   d5eda:	b118      	cbz	r0, d5ee4 <pinAvailable+0x58>
   d5edc:	f1a4 0309 	sub.w	r3, r4, #9
   d5ee0:	2b01      	cmp	r3, #1
   d5ee2:	d9ed      	bls.n	d5ec0 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5ee4:	2c23      	cmp	r4, #35	; 0x23
   d5ee6:	bf8c      	ite	hi
   d5ee8:	2000      	movhi	r0, #0
   d5eea:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5eec:	bd70      	pop	{r4, r5, r6, pc}
   d5eee:	bf00      	nop
   d5ef0:	2003e3cc 	.word	0x2003e3cc
   d5ef4:	2003e3d0 	.word	0x2003e3d0

000d5ef8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5ef8:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5efa:	b538      	push	{r3, r4, r5, lr}
   d5efc:	4604      	mov	r4, r0
   d5efe:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5f00:	d80a      	bhi.n	d5f18 <pinMode+0x20>
   d5f02:	29ff      	cmp	r1, #255	; 0xff
   d5f04:	d008      	beq.n	d5f18 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5f06:	f7ff ffc1 	bl	d5e8c <pinAvailable>
   d5f0a:	b128      	cbz	r0, d5f18 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5f0c:	4629      	mov	r1, r5
   d5f0e:	4620      	mov	r0, r4
}
   d5f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5f14:	f7fe be2a 	b.w	d4b6c <HAL_Pin_Mode>
   d5f18:	bd38      	pop	{r3, r4, r5, pc}

000d5f1a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5f1a:	b538      	push	{r3, r4, r5, lr}
   d5f1c:	4604      	mov	r4, r0
   d5f1e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5f20:	f7fe fe2c 	bl	d4b7c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5f24:	28ff      	cmp	r0, #255	; 0xff
   d5f26:	d010      	beq.n	d5f4a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5f28:	2806      	cmp	r0, #6
   d5f2a:	d804      	bhi.n	d5f36 <digitalWrite+0x1c>
   d5f2c:	234d      	movs	r3, #77	; 0x4d
   d5f2e:	fa23 f000 	lsr.w	r0, r3, r0
   d5f32:	07c3      	lsls	r3, r0, #31
   d5f34:	d409      	bmi.n	d5f4a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5f36:	4620      	mov	r0, r4
   d5f38:	f7ff ffa8 	bl	d5e8c <pinAvailable>
   d5f3c:	b128      	cbz	r0, d5f4a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5f3e:	4629      	mov	r1, r5
   d5f40:	4620      	mov	r0, r4
}
   d5f42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5f46:	f7fe be21 	b.w	d4b8c <HAL_GPIO_Write>
   d5f4a:	bd38      	pop	{r3, r4, r5, pc}

000d5f4c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d5f4c:	b510      	push	{r4, lr}
   d5f4e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5f50:	f7fe fe14 	bl	d4b7c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d5f54:	3804      	subs	r0, #4
   d5f56:	b2c0      	uxtb	r0, r0
   d5f58:	2801      	cmp	r0, #1
   d5f5a:	d908      	bls.n	d5f6e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d5f5c:	4620      	mov	r0, r4
   d5f5e:	f7ff ff95 	bl	d5e8c <pinAvailable>
   d5f62:	b120      	cbz	r0, d5f6e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d5f64:	4620      	mov	r0, r4
}
   d5f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d5f6a:	f7fe be17 	b.w	d4b9c <HAL_GPIO_Read>
}
   d5f6e:	2000      	movs	r0, #0
   d5f70:	bd10      	pop	{r4, pc}

000d5f72 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d5f72:	b538      	push	{r3, r4, r5, lr}
   d5f74:	4604      	mov	r4, r0
   d5f76:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d5f78:	f7ff ff88 	bl	d5e8c <pinAvailable>
   d5f7c:	b1f0      	cbz	r0, d5fbc <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d5f7e:	2104      	movs	r1, #4
   d5f80:	4620      	mov	r0, r4
   d5f82:	f7fe fdeb 	bl	d4b5c <HAL_Validate_Pin_Function>
   d5f86:	2804      	cmp	r0, #4
   d5f88:	d105      	bne.n	d5f96 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d5f8a:	b2a9      	uxth	r1, r5
   d5f8c:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
   d5f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
   d5f92:	f7fe be0b 	b.w	d4bac <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d5f96:	2102      	movs	r1, #2
   d5f98:	4620      	mov	r0, r4
   d5f9a:	f7fe fddf 	bl	d4b5c <HAL_Validate_Pin_Function>
   d5f9e:	2802      	cmp	r0, #2
   d5fa0:	d10c      	bne.n	d5fbc <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d5fa2:	4620      	mov	r0, r4
   d5fa4:	f7fe fdea 	bl	d4b7c <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d5fa8:	2801      	cmp	r0, #1
   d5faa:	d001      	beq.n	d5fb0 <_Z11analogWritetm+0x3e>
   d5fac:	2804      	cmp	r0, #4
   d5fae:	d105      	bne.n	d5fbc <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d5fb0:	4629      	mov	r1, r5
   d5fb2:	4620      	mov	r0, r4
    }
}
   d5fb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d5fb8:	f7fe be00 	b.w	d4bbc <HAL_PWM_Write_Ext>
   d5fbc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5fc0 <_Z17acquireWireBufferv>:
   d5fc0:	b570      	push	{r4, r5, r6, lr}
   d5fc2:	4604      	mov	r4, r0
   d5fc4:	2514      	movs	r5, #20
   d5fc6:	462a      	mov	r2, r5
   d5fc8:	4e09      	ldr	r6, [pc, #36]	; (d5ff0 <_Z17acquireWireBufferv+0x30>)
   d5fca:	2100      	movs	r1, #0
   d5fcc:	f000 ffdd 	bl	d6f8a <memset>
   d5fd0:	8025      	strh	r5, [r4, #0]
   d5fd2:	2520      	movs	r5, #32
   d5fd4:	4631      	mov	r1, r6
   d5fd6:	60a5      	str	r5, [r4, #8]
   d5fd8:	6125      	str	r5, [r4, #16]
   d5fda:	4628      	mov	r0, r5
   d5fdc:	f000 f84f 	bl	d607e <_ZnajRKSt9nothrow_t>
   d5fe0:	4631      	mov	r1, r6
   d5fe2:	6060      	str	r0, [r4, #4]
   d5fe4:	4628      	mov	r0, r5
   d5fe6:	f000 f84a 	bl	d607e <_ZnajRKSt9nothrow_t>
   d5fea:	60e0      	str	r0, [r4, #12]
   d5fec:	4620      	mov	r0, r4
   d5fee:	bd70      	pop	{r4, r5, r6, pc}
   d5ff0:	000d7398 	.word	0x000d7398

000d5ff4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5ff4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5ff6:	4d0e      	ldr	r5, [pc, #56]	; (d6030 <_Z19__fetch_global_Wirev+0x3c>)
   d5ff8:	6829      	ldr	r1, [r5, #0]
   d5ffa:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5ffe:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6000:	d113      	bne.n	d602a <_Z19__fetch_global_Wirev+0x36>
   d6002:	4628      	mov	r0, r5
   d6004:	f7fe f84b 	bl	d409e <__cxa_guard_acquire>
   d6008:	b178      	cbz	r0, d602a <_Z19__fetch_global_Wirev+0x36>
   d600a:	a801      	add	r0, sp, #4
   d600c:	f7ff ffd8 	bl	d5fc0 <_Z17acquireWireBufferv>
   d6010:	aa01      	add	r2, sp, #4
   d6012:	4621      	mov	r1, r4
   d6014:	4807      	ldr	r0, [pc, #28]	; (d6034 <_Z19__fetch_global_Wirev+0x40>)
   d6016:	f7ff f831 	bl	d507c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d601a:	4628      	mov	r0, r5
   d601c:	f7fe f844 	bl	d40a8 <__cxa_guard_release>
   d6020:	4a05      	ldr	r2, [pc, #20]	; (d6038 <_Z19__fetch_global_Wirev+0x44>)
   d6022:	4906      	ldr	r1, [pc, #24]	; (d603c <_Z19__fetch_global_Wirev+0x48>)
   d6024:	4803      	ldr	r0, [pc, #12]	; (d6034 <_Z19__fetch_global_Wirev+0x40>)
   d6026:	f000 f80b 	bl	d6040 <__aeabi_atexit>
	return wire;
}
   d602a:	4802      	ldr	r0, [pc, #8]	; (d6034 <_Z19__fetch_global_Wirev+0x40>)
   d602c:	b007      	add	sp, #28
   d602e:	bd30      	pop	{r4, r5, pc}
   d6030:	2003e734 	.word	0x2003e734
   d6034:	2003e738 	.word	0x2003e738
   d6038:	2003e278 	.word	0x2003e278
   d603c:	000d5025 	.word	0x000d5025

000d6040 <__aeabi_atexit>:
   d6040:	460b      	mov	r3, r1
   d6042:	4601      	mov	r1, r0
   d6044:	4618      	mov	r0, r3
   d6046:	f000 bf87 	b.w	d6f58 <__cxa_atexit>

000d604a <_ZdlPvj>:
   d604a:	f7fe b824 	b.w	d4096 <_ZdlPv>
	...

000d6050 <_ZSt15get_new_handlerv>:
   d6050:	4b02      	ldr	r3, [pc, #8]	; (d605c <_ZSt15get_new_handlerv+0xc>)
   d6052:	6818      	ldr	r0, [r3, #0]
   d6054:	f3bf 8f5f 	dmb	sy
   d6058:	4770      	bx	lr
   d605a:	bf00      	nop
   d605c:	2003e74c 	.word	0x2003e74c

000d6060 <_ZnwjRKSt9nothrow_t>:
   d6060:	b510      	push	{r4, lr}
   d6062:	2800      	cmp	r0, #0
   d6064:	bf14      	ite	ne
   d6066:	4604      	movne	r4, r0
   d6068:	2401      	moveq	r4, #1
   d606a:	4620      	mov	r0, r4
   d606c:	f7fe ff52 	bl	d4f14 <malloc>
   d6070:	b920      	cbnz	r0, d607c <_ZnwjRKSt9nothrow_t+0x1c>
   d6072:	f7ff ffed 	bl	d6050 <_ZSt15get_new_handlerv>
   d6076:	b108      	cbz	r0, d607c <_ZnwjRKSt9nothrow_t+0x1c>
   d6078:	4780      	blx	r0
   d607a:	e7f6      	b.n	d606a <_ZnwjRKSt9nothrow_t+0xa>
   d607c:	bd10      	pop	{r4, pc}

000d607e <_ZnajRKSt9nothrow_t>:
   d607e:	f7ff bfef 	b.w	d6060 <_ZnwjRKSt9nothrow_t>
	...

000d6084 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6084:	4b24      	ldr	r3, [pc, #144]	; (d6118 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6086:	681a      	ldr	r2, [r3, #0]
   d6088:	07d0      	lsls	r0, r2, #31
   d608a:	bf5c      	itt	pl
   d608c:	2201      	movpl	r2, #1
   d608e:	601a      	strpl	r2, [r3, #0]
   d6090:	4b22      	ldr	r3, [pc, #136]	; (d611c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6092:	681a      	ldr	r2, [r3, #0]
   d6094:	07d1      	lsls	r1, r2, #31
   d6096:	bf5c      	itt	pl
   d6098:	2201      	movpl	r2, #1
   d609a:	601a      	strpl	r2, [r3, #0]
   d609c:	4b20      	ldr	r3, [pc, #128]	; (d6120 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d609e:	681a      	ldr	r2, [r3, #0]
   d60a0:	07d2      	lsls	r2, r2, #31
   d60a2:	bf5c      	itt	pl
   d60a4:	2201      	movpl	r2, #1
   d60a6:	601a      	strpl	r2, [r3, #0]
   d60a8:	4b1e      	ldr	r3, [pc, #120]	; (d6124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d60aa:	681a      	ldr	r2, [r3, #0]
   d60ac:	07d0      	lsls	r0, r2, #31
   d60ae:	bf5c      	itt	pl
   d60b0:	2201      	movpl	r2, #1
   d60b2:	601a      	strpl	r2, [r3, #0]
   d60b4:	4b1c      	ldr	r3, [pc, #112]	; (d6128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d60b6:	681a      	ldr	r2, [r3, #0]
   d60b8:	07d1      	lsls	r1, r2, #31
   d60ba:	bf5c      	itt	pl
   d60bc:	2201      	movpl	r2, #1
   d60be:	601a      	strpl	r2, [r3, #0]
   d60c0:	4b1a      	ldr	r3, [pc, #104]	; (d612c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d60c2:	681a      	ldr	r2, [r3, #0]
   d60c4:	07d2      	lsls	r2, r2, #31
   d60c6:	bf5c      	itt	pl
   d60c8:	2201      	movpl	r2, #1
   d60ca:	601a      	strpl	r2, [r3, #0]
   d60cc:	4b18      	ldr	r3, [pc, #96]	; (d6130 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d60ce:	681a      	ldr	r2, [r3, #0]
   d60d0:	07d0      	lsls	r0, r2, #31
   d60d2:	bf5c      	itt	pl
   d60d4:	2201      	movpl	r2, #1
   d60d6:	601a      	strpl	r2, [r3, #0]
   d60d8:	4b16      	ldr	r3, [pc, #88]	; (d6134 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d60da:	681a      	ldr	r2, [r3, #0]
   d60dc:	07d1      	lsls	r1, r2, #31
   d60de:	bf5c      	itt	pl
   d60e0:	2201      	movpl	r2, #1
   d60e2:	601a      	strpl	r2, [r3, #0]
   d60e4:	4b14      	ldr	r3, [pc, #80]	; (d6138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d60e6:	681a      	ldr	r2, [r3, #0]
   d60e8:	07d2      	lsls	r2, r2, #31
   d60ea:	bf5c      	itt	pl
   d60ec:	2201      	movpl	r2, #1
   d60ee:	601a      	strpl	r2, [r3, #0]
   d60f0:	4b12      	ldr	r3, [pc, #72]	; (d613c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d60f2:	681a      	ldr	r2, [r3, #0]
   d60f4:	07d0      	lsls	r0, r2, #31
   d60f6:	bf5c      	itt	pl
   d60f8:	2201      	movpl	r2, #1
   d60fa:	601a      	strpl	r2, [r3, #0]
   d60fc:	4b10      	ldr	r3, [pc, #64]	; (d6140 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d60fe:	681a      	ldr	r2, [r3, #0]
   d6100:	07d1      	lsls	r1, r2, #31
   d6102:	bf5c      	itt	pl
   d6104:	2201      	movpl	r2, #1
   d6106:	601a      	strpl	r2, [r3, #0]
   d6108:	4b0e      	ldr	r3, [pc, #56]	; (d6144 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d610a:	681a      	ldr	r2, [r3, #0]
   d610c:	07d2      	lsls	r2, r2, #31
   d610e:	bf5c      	itt	pl
   d6110:	2201      	movpl	r2, #1
   d6112:	601a      	strpl	r2, [r3, #0]
   d6114:	4770      	bx	lr
   d6116:	bf00      	nop
   d6118:	2003e77c 	.word	0x2003e77c
   d611c:	2003e778 	.word	0x2003e778
   d6120:	2003e774 	.word	0x2003e774
   d6124:	2003e770 	.word	0x2003e770
   d6128:	2003e76c 	.word	0x2003e76c
   d612c:	2003e768 	.word	0x2003e768
   d6130:	2003e764 	.word	0x2003e764
   d6134:	2003e760 	.word	0x2003e760
   d6138:	2003e75c 	.word	0x2003e75c
   d613c:	2003e758 	.word	0x2003e758
   d6140:	2003e754 	.word	0x2003e754
   d6144:	2003e750 	.word	0x2003e750

000d6148 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6148:	4b18      	ldr	r3, [pc, #96]	; (d61ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d614a:	681a      	ldr	r2, [r3, #0]
   d614c:	07d1      	lsls	r1, r2, #31
   d614e:	bf5c      	itt	pl
   d6150:	2201      	movpl	r2, #1
   d6152:	601a      	strpl	r2, [r3, #0]
   d6154:	4b16      	ldr	r3, [pc, #88]	; (d61b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6156:	681a      	ldr	r2, [r3, #0]
   d6158:	07d2      	lsls	r2, r2, #31
   d615a:	bf5c      	itt	pl
   d615c:	2201      	movpl	r2, #1
   d615e:	601a      	strpl	r2, [r3, #0]
   d6160:	4b14      	ldr	r3, [pc, #80]	; (d61b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6162:	681a      	ldr	r2, [r3, #0]
   d6164:	07d0      	lsls	r0, r2, #31
   d6166:	bf5c      	itt	pl
   d6168:	2201      	movpl	r2, #1
   d616a:	601a      	strpl	r2, [r3, #0]
   d616c:	4b12      	ldr	r3, [pc, #72]	; (d61b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d616e:	681a      	ldr	r2, [r3, #0]
   d6170:	07d1      	lsls	r1, r2, #31
   d6172:	bf5c      	itt	pl
   d6174:	2201      	movpl	r2, #1
   d6176:	601a      	strpl	r2, [r3, #0]
   d6178:	4b10      	ldr	r3, [pc, #64]	; (d61bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d617a:	681a      	ldr	r2, [r3, #0]
   d617c:	07d2      	lsls	r2, r2, #31
   d617e:	bf5c      	itt	pl
   d6180:	2201      	movpl	r2, #1
   d6182:	601a      	strpl	r2, [r3, #0]
   d6184:	4b0e      	ldr	r3, [pc, #56]	; (d61c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6186:	681a      	ldr	r2, [r3, #0]
   d6188:	07d0      	lsls	r0, r2, #31
   d618a:	bf5c      	itt	pl
   d618c:	2201      	movpl	r2, #1
   d618e:	601a      	strpl	r2, [r3, #0]
   d6190:	4b0c      	ldr	r3, [pc, #48]	; (d61c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6192:	681a      	ldr	r2, [r3, #0]
   d6194:	07d1      	lsls	r1, r2, #31
   d6196:	bf5c      	itt	pl
   d6198:	2201      	movpl	r2, #1
   d619a:	601a      	strpl	r2, [r3, #0]
   d619c:	4b0a      	ldr	r3, [pc, #40]	; (d61c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d619e:	681a      	ldr	r2, [r3, #0]
   d61a0:	07d2      	lsls	r2, r2, #31
   d61a2:	bf5c      	itt	pl
   d61a4:	2201      	movpl	r2, #1
   d61a6:	601a      	strpl	r2, [r3, #0]
   d61a8:	4770      	bx	lr
   d61aa:	bf00      	nop
   d61ac:	2003e79c 	.word	0x2003e79c
   d61b0:	2003e798 	.word	0x2003e798
   d61b4:	2003e794 	.word	0x2003e794
   d61b8:	2003e790 	.word	0x2003e790
   d61bc:	2003e78c 	.word	0x2003e78c
   d61c0:	2003e788 	.word	0x2003e788
   d61c4:	2003e784 	.word	0x2003e784
   d61c8:	2003e780 	.word	0x2003e780

000d61cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d61cc:	4b18      	ldr	r3, [pc, #96]	; (d6230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d61ce:	681a      	ldr	r2, [r3, #0]
   d61d0:	07d1      	lsls	r1, r2, #31
   d61d2:	bf5c      	itt	pl
   d61d4:	2201      	movpl	r2, #1
   d61d6:	601a      	strpl	r2, [r3, #0]
   d61d8:	4b16      	ldr	r3, [pc, #88]	; (d6234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d61da:	681a      	ldr	r2, [r3, #0]
   d61dc:	07d2      	lsls	r2, r2, #31
   d61de:	bf5c      	itt	pl
   d61e0:	2201      	movpl	r2, #1
   d61e2:	601a      	strpl	r2, [r3, #0]
   d61e4:	4b14      	ldr	r3, [pc, #80]	; (d6238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d61e6:	681a      	ldr	r2, [r3, #0]
   d61e8:	07d0      	lsls	r0, r2, #31
   d61ea:	bf5c      	itt	pl
   d61ec:	2201      	movpl	r2, #1
   d61ee:	601a      	strpl	r2, [r3, #0]
   d61f0:	4b12      	ldr	r3, [pc, #72]	; (d623c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d61f2:	681a      	ldr	r2, [r3, #0]
   d61f4:	07d1      	lsls	r1, r2, #31
   d61f6:	bf5c      	itt	pl
   d61f8:	2201      	movpl	r2, #1
   d61fa:	601a      	strpl	r2, [r3, #0]
   d61fc:	4b10      	ldr	r3, [pc, #64]	; (d6240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d61fe:	681a      	ldr	r2, [r3, #0]
   d6200:	07d2      	lsls	r2, r2, #31
   d6202:	bf5c      	itt	pl
   d6204:	2201      	movpl	r2, #1
   d6206:	601a      	strpl	r2, [r3, #0]
   d6208:	4b0e      	ldr	r3, [pc, #56]	; (d6244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d620a:	681a      	ldr	r2, [r3, #0]
   d620c:	07d0      	lsls	r0, r2, #31
   d620e:	bf5c      	itt	pl
   d6210:	2201      	movpl	r2, #1
   d6212:	601a      	strpl	r2, [r3, #0]
   d6214:	4b0c      	ldr	r3, [pc, #48]	; (d6248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6216:	681a      	ldr	r2, [r3, #0]
   d6218:	07d1      	lsls	r1, r2, #31
   d621a:	bf5c      	itt	pl
   d621c:	2201      	movpl	r2, #1
   d621e:	601a      	strpl	r2, [r3, #0]
   d6220:	4b0a      	ldr	r3, [pc, #40]	; (d624c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6222:	681a      	ldr	r2, [r3, #0]
   d6224:	07d2      	lsls	r2, r2, #31
   d6226:	bf5c      	itt	pl
   d6228:	2201      	movpl	r2, #1
   d622a:	601a      	strpl	r2, [r3, #0]
   d622c:	4770      	bx	lr
   d622e:	bf00      	nop
   d6230:	2003e7bc 	.word	0x2003e7bc
   d6234:	2003e7b8 	.word	0x2003e7b8
   d6238:	2003e7b4 	.word	0x2003e7b4
   d623c:	2003e7b0 	.word	0x2003e7b0
   d6240:	2003e7ac 	.word	0x2003e7ac
   d6244:	2003e7a8 	.word	0x2003e7a8
   d6248:	2003e7a4 	.word	0x2003e7a4
   d624c:	2003e7a0 	.word	0x2003e7a0

000d6250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6250:	4b24      	ldr	r3, [pc, #144]	; (d62e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6252:	681a      	ldr	r2, [r3, #0]
   d6254:	07d0      	lsls	r0, r2, #31
   d6256:	bf5c      	itt	pl
   d6258:	2201      	movpl	r2, #1
   d625a:	601a      	strpl	r2, [r3, #0]
   d625c:	4b22      	ldr	r3, [pc, #136]	; (d62e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d625e:	681a      	ldr	r2, [r3, #0]
   d6260:	07d1      	lsls	r1, r2, #31
   d6262:	bf5c      	itt	pl
   d6264:	2201      	movpl	r2, #1
   d6266:	601a      	strpl	r2, [r3, #0]
   d6268:	4b20      	ldr	r3, [pc, #128]	; (d62ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d626a:	681a      	ldr	r2, [r3, #0]
   d626c:	07d2      	lsls	r2, r2, #31
   d626e:	bf5c      	itt	pl
   d6270:	2201      	movpl	r2, #1
   d6272:	601a      	strpl	r2, [r3, #0]
   d6274:	4b1e      	ldr	r3, [pc, #120]	; (d62f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6276:	681a      	ldr	r2, [r3, #0]
   d6278:	07d0      	lsls	r0, r2, #31
   d627a:	bf5c      	itt	pl
   d627c:	2201      	movpl	r2, #1
   d627e:	601a      	strpl	r2, [r3, #0]
   d6280:	4b1c      	ldr	r3, [pc, #112]	; (d62f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6282:	681a      	ldr	r2, [r3, #0]
   d6284:	07d1      	lsls	r1, r2, #31
   d6286:	bf5c      	itt	pl
   d6288:	2201      	movpl	r2, #1
   d628a:	601a      	strpl	r2, [r3, #0]
   d628c:	4b1a      	ldr	r3, [pc, #104]	; (d62f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d628e:	681a      	ldr	r2, [r3, #0]
   d6290:	07d2      	lsls	r2, r2, #31
   d6292:	bf5c      	itt	pl
   d6294:	2201      	movpl	r2, #1
   d6296:	601a      	strpl	r2, [r3, #0]
   d6298:	4b18      	ldr	r3, [pc, #96]	; (d62fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d629a:	681a      	ldr	r2, [r3, #0]
   d629c:	07d0      	lsls	r0, r2, #31
   d629e:	bf5c      	itt	pl
   d62a0:	2201      	movpl	r2, #1
   d62a2:	601a      	strpl	r2, [r3, #0]
   d62a4:	4b16      	ldr	r3, [pc, #88]	; (d6300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d62a6:	681a      	ldr	r2, [r3, #0]
   d62a8:	07d1      	lsls	r1, r2, #31
   d62aa:	bf5c      	itt	pl
   d62ac:	2201      	movpl	r2, #1
   d62ae:	601a      	strpl	r2, [r3, #0]
   d62b0:	4b14      	ldr	r3, [pc, #80]	; (d6304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d62b2:	681a      	ldr	r2, [r3, #0]
   d62b4:	07d2      	lsls	r2, r2, #31
   d62b6:	bf5c      	itt	pl
   d62b8:	2201      	movpl	r2, #1
   d62ba:	601a      	strpl	r2, [r3, #0]
   d62bc:	4b12      	ldr	r3, [pc, #72]	; (d6308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d62be:	681a      	ldr	r2, [r3, #0]
   d62c0:	07d0      	lsls	r0, r2, #31
   d62c2:	bf5c      	itt	pl
   d62c4:	2201      	movpl	r2, #1
   d62c6:	601a      	strpl	r2, [r3, #0]
   d62c8:	4b10      	ldr	r3, [pc, #64]	; (d630c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d62ca:	681a      	ldr	r2, [r3, #0]
   d62cc:	07d1      	lsls	r1, r2, #31
   d62ce:	bf5c      	itt	pl
   d62d0:	2201      	movpl	r2, #1
   d62d2:	601a      	strpl	r2, [r3, #0]
   d62d4:	4b0e      	ldr	r3, [pc, #56]	; (d6310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d62d6:	681a      	ldr	r2, [r3, #0]
   d62d8:	07d2      	lsls	r2, r2, #31
   d62da:	bf5c      	itt	pl
   d62dc:	2201      	movpl	r2, #1
   d62de:	601a      	strpl	r2, [r3, #0]
   d62e0:	4770      	bx	lr
   d62e2:	bf00      	nop
   d62e4:	2003e7ec 	.word	0x2003e7ec
   d62e8:	2003e7e8 	.word	0x2003e7e8
   d62ec:	2003e7e4 	.word	0x2003e7e4
   d62f0:	2003e7e0 	.word	0x2003e7e0
   d62f4:	2003e7dc 	.word	0x2003e7dc
   d62f8:	2003e7d8 	.word	0x2003e7d8
   d62fc:	2003e7d4 	.word	0x2003e7d4
   d6300:	2003e7d0 	.word	0x2003e7d0
   d6304:	2003e7cc 	.word	0x2003e7cc
   d6308:	2003e7c8 	.word	0x2003e7c8
   d630c:	2003e7c4 	.word	0x2003e7c4
   d6310:	2003e7c0 	.word	0x2003e7c0

000d6314 <__aeabi_drsub>:
   d6314:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6318:	e002      	b.n	d6320 <__adddf3>
   d631a:	bf00      	nop

000d631c <__aeabi_dsub>:
   d631c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6320 <__adddf3>:
   d6320:	b530      	push	{r4, r5, lr}
   d6322:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6326:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d632a:	ea94 0f05 	teq	r4, r5
   d632e:	bf08      	it	eq
   d6330:	ea90 0f02 	teqeq	r0, r2
   d6334:	bf1f      	itttt	ne
   d6336:	ea54 0c00 	orrsne.w	ip, r4, r0
   d633a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d633e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6342:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6346:	f000 80e2 	beq.w	d650e <__adddf3+0x1ee>
   d634a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d634e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6352:	bfb8      	it	lt
   d6354:	426d      	neglt	r5, r5
   d6356:	dd0c      	ble.n	d6372 <__adddf3+0x52>
   d6358:	442c      	add	r4, r5
   d635a:	ea80 0202 	eor.w	r2, r0, r2
   d635e:	ea81 0303 	eor.w	r3, r1, r3
   d6362:	ea82 0000 	eor.w	r0, r2, r0
   d6366:	ea83 0101 	eor.w	r1, r3, r1
   d636a:	ea80 0202 	eor.w	r2, r0, r2
   d636e:	ea81 0303 	eor.w	r3, r1, r3
   d6372:	2d36      	cmp	r5, #54	; 0x36
   d6374:	bf88      	it	hi
   d6376:	bd30      	pophi	{r4, r5, pc}
   d6378:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d637c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6380:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6384:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6388:	d002      	beq.n	d6390 <__adddf3+0x70>
   d638a:	4240      	negs	r0, r0
   d638c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6390:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6394:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6398:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d639c:	d002      	beq.n	d63a4 <__adddf3+0x84>
   d639e:	4252      	negs	r2, r2
   d63a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d63a4:	ea94 0f05 	teq	r4, r5
   d63a8:	f000 80a7 	beq.w	d64fa <__adddf3+0x1da>
   d63ac:	f1a4 0401 	sub.w	r4, r4, #1
   d63b0:	f1d5 0e20 	rsbs	lr, r5, #32
   d63b4:	db0d      	blt.n	d63d2 <__adddf3+0xb2>
   d63b6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d63ba:	fa22 f205 	lsr.w	r2, r2, r5
   d63be:	1880      	adds	r0, r0, r2
   d63c0:	f141 0100 	adc.w	r1, r1, #0
   d63c4:	fa03 f20e 	lsl.w	r2, r3, lr
   d63c8:	1880      	adds	r0, r0, r2
   d63ca:	fa43 f305 	asr.w	r3, r3, r5
   d63ce:	4159      	adcs	r1, r3
   d63d0:	e00e      	b.n	d63f0 <__adddf3+0xd0>
   d63d2:	f1a5 0520 	sub.w	r5, r5, #32
   d63d6:	f10e 0e20 	add.w	lr, lr, #32
   d63da:	2a01      	cmp	r2, #1
   d63dc:	fa03 fc0e 	lsl.w	ip, r3, lr
   d63e0:	bf28      	it	cs
   d63e2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d63e6:	fa43 f305 	asr.w	r3, r3, r5
   d63ea:	18c0      	adds	r0, r0, r3
   d63ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d63f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d63f4:	d507      	bpl.n	d6406 <__adddf3+0xe6>
   d63f6:	f04f 0e00 	mov.w	lr, #0
   d63fa:	f1dc 0c00 	rsbs	ip, ip, #0
   d63fe:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6402:	eb6e 0101 	sbc.w	r1, lr, r1
   d6406:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d640a:	d31b      	bcc.n	d6444 <__adddf3+0x124>
   d640c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6410:	d30c      	bcc.n	d642c <__adddf3+0x10c>
   d6412:	0849      	lsrs	r1, r1, #1
   d6414:	ea5f 0030 	movs.w	r0, r0, rrx
   d6418:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d641c:	f104 0401 	add.w	r4, r4, #1
   d6420:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6424:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6428:	f080 809a 	bcs.w	d6560 <__adddf3+0x240>
   d642c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6430:	bf08      	it	eq
   d6432:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6436:	f150 0000 	adcs.w	r0, r0, #0
   d643a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d643e:	ea41 0105 	orr.w	r1, r1, r5
   d6442:	bd30      	pop	{r4, r5, pc}
   d6444:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6448:	4140      	adcs	r0, r0
   d644a:	eb41 0101 	adc.w	r1, r1, r1
   d644e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6452:	f1a4 0401 	sub.w	r4, r4, #1
   d6456:	d1e9      	bne.n	d642c <__adddf3+0x10c>
   d6458:	f091 0f00 	teq	r1, #0
   d645c:	bf04      	itt	eq
   d645e:	4601      	moveq	r1, r0
   d6460:	2000      	moveq	r0, #0
   d6462:	fab1 f381 	clz	r3, r1
   d6466:	bf08      	it	eq
   d6468:	3320      	addeq	r3, #32
   d646a:	f1a3 030b 	sub.w	r3, r3, #11
   d646e:	f1b3 0220 	subs.w	r2, r3, #32
   d6472:	da0c      	bge.n	d648e <__adddf3+0x16e>
   d6474:	320c      	adds	r2, #12
   d6476:	dd08      	ble.n	d648a <__adddf3+0x16a>
   d6478:	f102 0c14 	add.w	ip, r2, #20
   d647c:	f1c2 020c 	rsb	r2, r2, #12
   d6480:	fa01 f00c 	lsl.w	r0, r1, ip
   d6484:	fa21 f102 	lsr.w	r1, r1, r2
   d6488:	e00c      	b.n	d64a4 <__adddf3+0x184>
   d648a:	f102 0214 	add.w	r2, r2, #20
   d648e:	bfd8      	it	le
   d6490:	f1c2 0c20 	rsble	ip, r2, #32
   d6494:	fa01 f102 	lsl.w	r1, r1, r2
   d6498:	fa20 fc0c 	lsr.w	ip, r0, ip
   d649c:	bfdc      	itt	le
   d649e:	ea41 010c 	orrle.w	r1, r1, ip
   d64a2:	4090      	lslle	r0, r2
   d64a4:	1ae4      	subs	r4, r4, r3
   d64a6:	bfa2      	ittt	ge
   d64a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d64ac:	4329      	orrge	r1, r5
   d64ae:	bd30      	popge	{r4, r5, pc}
   d64b0:	ea6f 0404 	mvn.w	r4, r4
   d64b4:	3c1f      	subs	r4, #31
   d64b6:	da1c      	bge.n	d64f2 <__adddf3+0x1d2>
   d64b8:	340c      	adds	r4, #12
   d64ba:	dc0e      	bgt.n	d64da <__adddf3+0x1ba>
   d64bc:	f104 0414 	add.w	r4, r4, #20
   d64c0:	f1c4 0220 	rsb	r2, r4, #32
   d64c4:	fa20 f004 	lsr.w	r0, r0, r4
   d64c8:	fa01 f302 	lsl.w	r3, r1, r2
   d64cc:	ea40 0003 	orr.w	r0, r0, r3
   d64d0:	fa21 f304 	lsr.w	r3, r1, r4
   d64d4:	ea45 0103 	orr.w	r1, r5, r3
   d64d8:	bd30      	pop	{r4, r5, pc}
   d64da:	f1c4 040c 	rsb	r4, r4, #12
   d64de:	f1c4 0220 	rsb	r2, r4, #32
   d64e2:	fa20 f002 	lsr.w	r0, r0, r2
   d64e6:	fa01 f304 	lsl.w	r3, r1, r4
   d64ea:	ea40 0003 	orr.w	r0, r0, r3
   d64ee:	4629      	mov	r1, r5
   d64f0:	bd30      	pop	{r4, r5, pc}
   d64f2:	fa21 f004 	lsr.w	r0, r1, r4
   d64f6:	4629      	mov	r1, r5
   d64f8:	bd30      	pop	{r4, r5, pc}
   d64fa:	f094 0f00 	teq	r4, #0
   d64fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6502:	bf06      	itte	eq
   d6504:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6508:	3401      	addeq	r4, #1
   d650a:	3d01      	subne	r5, #1
   d650c:	e74e      	b.n	d63ac <__adddf3+0x8c>
   d650e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6512:	bf18      	it	ne
   d6514:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6518:	d029      	beq.n	d656e <__adddf3+0x24e>
   d651a:	ea94 0f05 	teq	r4, r5
   d651e:	bf08      	it	eq
   d6520:	ea90 0f02 	teqeq	r0, r2
   d6524:	d005      	beq.n	d6532 <__adddf3+0x212>
   d6526:	ea54 0c00 	orrs.w	ip, r4, r0
   d652a:	bf04      	itt	eq
   d652c:	4619      	moveq	r1, r3
   d652e:	4610      	moveq	r0, r2
   d6530:	bd30      	pop	{r4, r5, pc}
   d6532:	ea91 0f03 	teq	r1, r3
   d6536:	bf1e      	ittt	ne
   d6538:	2100      	movne	r1, #0
   d653a:	2000      	movne	r0, #0
   d653c:	bd30      	popne	{r4, r5, pc}
   d653e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6542:	d105      	bne.n	d6550 <__adddf3+0x230>
   d6544:	0040      	lsls	r0, r0, #1
   d6546:	4149      	adcs	r1, r1
   d6548:	bf28      	it	cs
   d654a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d654e:	bd30      	pop	{r4, r5, pc}
   d6550:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6554:	bf3c      	itt	cc
   d6556:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d655a:	bd30      	popcc	{r4, r5, pc}
   d655c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6560:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6564:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6568:	f04f 0000 	mov.w	r0, #0
   d656c:	bd30      	pop	{r4, r5, pc}
   d656e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6572:	bf1a      	itte	ne
   d6574:	4619      	movne	r1, r3
   d6576:	4610      	movne	r0, r2
   d6578:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d657c:	bf1c      	itt	ne
   d657e:	460b      	movne	r3, r1
   d6580:	4602      	movne	r2, r0
   d6582:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6586:	bf06      	itte	eq
   d6588:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d658c:	ea91 0f03 	teqeq	r1, r3
   d6590:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6594:	bd30      	pop	{r4, r5, pc}
   d6596:	bf00      	nop

000d6598 <__aeabi_ui2d>:
   d6598:	f090 0f00 	teq	r0, #0
   d659c:	bf04      	itt	eq
   d659e:	2100      	moveq	r1, #0
   d65a0:	4770      	bxeq	lr
   d65a2:	b530      	push	{r4, r5, lr}
   d65a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d65a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d65ac:	f04f 0500 	mov.w	r5, #0
   d65b0:	f04f 0100 	mov.w	r1, #0
   d65b4:	e750      	b.n	d6458 <__adddf3+0x138>
   d65b6:	bf00      	nop

000d65b8 <__aeabi_i2d>:
   d65b8:	f090 0f00 	teq	r0, #0
   d65bc:	bf04      	itt	eq
   d65be:	2100      	moveq	r1, #0
   d65c0:	4770      	bxeq	lr
   d65c2:	b530      	push	{r4, r5, lr}
   d65c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d65c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d65cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d65d0:	bf48      	it	mi
   d65d2:	4240      	negmi	r0, r0
   d65d4:	f04f 0100 	mov.w	r1, #0
   d65d8:	e73e      	b.n	d6458 <__adddf3+0x138>
   d65da:	bf00      	nop

000d65dc <__aeabi_f2d>:
   d65dc:	0042      	lsls	r2, r0, #1
   d65de:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d65e2:	ea4f 0131 	mov.w	r1, r1, rrx
   d65e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d65ea:	bf1f      	itttt	ne
   d65ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d65f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d65f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d65f8:	4770      	bxne	lr
   d65fa:	f092 0f00 	teq	r2, #0
   d65fe:	bf14      	ite	ne
   d6600:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6604:	4770      	bxeq	lr
   d6606:	b530      	push	{r4, r5, lr}
   d6608:	f44f 7460 	mov.w	r4, #896	; 0x380
   d660c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6614:	e720      	b.n	d6458 <__adddf3+0x138>
   d6616:	bf00      	nop

000d6618 <__aeabi_ul2d>:
   d6618:	ea50 0201 	orrs.w	r2, r0, r1
   d661c:	bf08      	it	eq
   d661e:	4770      	bxeq	lr
   d6620:	b530      	push	{r4, r5, lr}
   d6622:	f04f 0500 	mov.w	r5, #0
   d6626:	e00a      	b.n	d663e <__aeabi_l2d+0x16>

000d6628 <__aeabi_l2d>:
   d6628:	ea50 0201 	orrs.w	r2, r0, r1
   d662c:	bf08      	it	eq
   d662e:	4770      	bxeq	lr
   d6630:	b530      	push	{r4, r5, lr}
   d6632:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6636:	d502      	bpl.n	d663e <__aeabi_l2d+0x16>
   d6638:	4240      	negs	r0, r0
   d663a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d663e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6642:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6646:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d664a:	f43f aedc 	beq.w	d6406 <__adddf3+0xe6>
   d664e:	f04f 0203 	mov.w	r2, #3
   d6652:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6656:	bf18      	it	ne
   d6658:	3203      	addne	r2, #3
   d665a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d665e:	bf18      	it	ne
   d6660:	3203      	addne	r2, #3
   d6662:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6666:	f1c2 0320 	rsb	r3, r2, #32
   d666a:	fa00 fc03 	lsl.w	ip, r0, r3
   d666e:	fa20 f002 	lsr.w	r0, r0, r2
   d6672:	fa01 fe03 	lsl.w	lr, r1, r3
   d6676:	ea40 000e 	orr.w	r0, r0, lr
   d667a:	fa21 f102 	lsr.w	r1, r1, r2
   d667e:	4414      	add	r4, r2
   d6680:	e6c1      	b.n	d6406 <__adddf3+0xe6>
   d6682:	bf00      	nop

000d6684 <__aeabi_dmul>:
   d6684:	b570      	push	{r4, r5, r6, lr}
   d6686:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d668a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d668e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6692:	bf1d      	ittte	ne
   d6694:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6698:	ea94 0f0c 	teqne	r4, ip
   d669c:	ea95 0f0c 	teqne	r5, ip
   d66a0:	f000 f8de 	bleq	d6860 <__aeabi_dmul+0x1dc>
   d66a4:	442c      	add	r4, r5
   d66a6:	ea81 0603 	eor.w	r6, r1, r3
   d66aa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d66ae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d66b2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d66b6:	bf18      	it	ne
   d66b8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d66bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d66c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d66c4:	d038      	beq.n	d6738 <__aeabi_dmul+0xb4>
   d66c6:	fba0 ce02 	umull	ip, lr, r0, r2
   d66ca:	f04f 0500 	mov.w	r5, #0
   d66ce:	fbe1 e502 	umlal	lr, r5, r1, r2
   d66d2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d66d6:	fbe0 e503 	umlal	lr, r5, r0, r3
   d66da:	f04f 0600 	mov.w	r6, #0
   d66de:	fbe1 5603 	umlal	r5, r6, r1, r3
   d66e2:	f09c 0f00 	teq	ip, #0
   d66e6:	bf18      	it	ne
   d66e8:	f04e 0e01 	orrne.w	lr, lr, #1
   d66ec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d66f0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d66f4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d66f8:	d204      	bcs.n	d6704 <__aeabi_dmul+0x80>
   d66fa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d66fe:	416d      	adcs	r5, r5
   d6700:	eb46 0606 	adc.w	r6, r6, r6
   d6704:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6708:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d670c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6710:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6714:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6718:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d671c:	bf88      	it	hi
   d671e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6722:	d81e      	bhi.n	d6762 <__aeabi_dmul+0xde>
   d6724:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6728:	bf08      	it	eq
   d672a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d672e:	f150 0000 	adcs.w	r0, r0, #0
   d6732:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6736:	bd70      	pop	{r4, r5, r6, pc}
   d6738:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d673c:	ea46 0101 	orr.w	r1, r6, r1
   d6740:	ea40 0002 	orr.w	r0, r0, r2
   d6744:	ea81 0103 	eor.w	r1, r1, r3
   d6748:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d674c:	bfc2      	ittt	gt
   d674e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6752:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6756:	bd70      	popgt	{r4, r5, r6, pc}
   d6758:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d675c:	f04f 0e00 	mov.w	lr, #0
   d6760:	3c01      	subs	r4, #1
   d6762:	f300 80ab 	bgt.w	d68bc <__aeabi_dmul+0x238>
   d6766:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d676a:	bfde      	ittt	le
   d676c:	2000      	movle	r0, #0
   d676e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6772:	bd70      	pople	{r4, r5, r6, pc}
   d6774:	f1c4 0400 	rsb	r4, r4, #0
   d6778:	3c20      	subs	r4, #32
   d677a:	da35      	bge.n	d67e8 <__aeabi_dmul+0x164>
   d677c:	340c      	adds	r4, #12
   d677e:	dc1b      	bgt.n	d67b8 <__aeabi_dmul+0x134>
   d6780:	f104 0414 	add.w	r4, r4, #20
   d6784:	f1c4 0520 	rsb	r5, r4, #32
   d6788:	fa00 f305 	lsl.w	r3, r0, r5
   d678c:	fa20 f004 	lsr.w	r0, r0, r4
   d6790:	fa01 f205 	lsl.w	r2, r1, r5
   d6794:	ea40 0002 	orr.w	r0, r0, r2
   d6798:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d679c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d67a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d67a4:	fa21 f604 	lsr.w	r6, r1, r4
   d67a8:	eb42 0106 	adc.w	r1, r2, r6
   d67ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d67b0:	bf08      	it	eq
   d67b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d67b6:	bd70      	pop	{r4, r5, r6, pc}
   d67b8:	f1c4 040c 	rsb	r4, r4, #12
   d67bc:	f1c4 0520 	rsb	r5, r4, #32
   d67c0:	fa00 f304 	lsl.w	r3, r0, r4
   d67c4:	fa20 f005 	lsr.w	r0, r0, r5
   d67c8:	fa01 f204 	lsl.w	r2, r1, r4
   d67cc:	ea40 0002 	orr.w	r0, r0, r2
   d67d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d67d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d67d8:	f141 0100 	adc.w	r1, r1, #0
   d67dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d67e0:	bf08      	it	eq
   d67e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d67e6:	bd70      	pop	{r4, r5, r6, pc}
   d67e8:	f1c4 0520 	rsb	r5, r4, #32
   d67ec:	fa00 f205 	lsl.w	r2, r0, r5
   d67f0:	ea4e 0e02 	orr.w	lr, lr, r2
   d67f4:	fa20 f304 	lsr.w	r3, r0, r4
   d67f8:	fa01 f205 	lsl.w	r2, r1, r5
   d67fc:	ea43 0302 	orr.w	r3, r3, r2
   d6800:	fa21 f004 	lsr.w	r0, r1, r4
   d6804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6808:	fa21 f204 	lsr.w	r2, r1, r4
   d680c:	ea20 0002 	bic.w	r0, r0, r2
   d6810:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6814:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6818:	bf08      	it	eq
   d681a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d681e:	bd70      	pop	{r4, r5, r6, pc}
   d6820:	f094 0f00 	teq	r4, #0
   d6824:	d10f      	bne.n	d6846 <__aeabi_dmul+0x1c2>
   d6826:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d682a:	0040      	lsls	r0, r0, #1
   d682c:	eb41 0101 	adc.w	r1, r1, r1
   d6830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6834:	bf08      	it	eq
   d6836:	3c01      	subeq	r4, #1
   d6838:	d0f7      	beq.n	d682a <__aeabi_dmul+0x1a6>
   d683a:	ea41 0106 	orr.w	r1, r1, r6
   d683e:	f095 0f00 	teq	r5, #0
   d6842:	bf18      	it	ne
   d6844:	4770      	bxne	lr
   d6846:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d684a:	0052      	lsls	r2, r2, #1
   d684c:	eb43 0303 	adc.w	r3, r3, r3
   d6850:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6854:	bf08      	it	eq
   d6856:	3d01      	subeq	r5, #1
   d6858:	d0f7      	beq.n	d684a <__aeabi_dmul+0x1c6>
   d685a:	ea43 0306 	orr.w	r3, r3, r6
   d685e:	4770      	bx	lr
   d6860:	ea94 0f0c 	teq	r4, ip
   d6864:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6868:	bf18      	it	ne
   d686a:	ea95 0f0c 	teqne	r5, ip
   d686e:	d00c      	beq.n	d688a <__aeabi_dmul+0x206>
   d6870:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6874:	bf18      	it	ne
   d6876:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d687a:	d1d1      	bne.n	d6820 <__aeabi_dmul+0x19c>
   d687c:	ea81 0103 	eor.w	r1, r1, r3
   d6880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6884:	f04f 0000 	mov.w	r0, #0
   d6888:	bd70      	pop	{r4, r5, r6, pc}
   d688a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d688e:	bf06      	itte	eq
   d6890:	4610      	moveq	r0, r2
   d6892:	4619      	moveq	r1, r3
   d6894:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6898:	d019      	beq.n	d68ce <__aeabi_dmul+0x24a>
   d689a:	ea94 0f0c 	teq	r4, ip
   d689e:	d102      	bne.n	d68a6 <__aeabi_dmul+0x222>
   d68a0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d68a4:	d113      	bne.n	d68ce <__aeabi_dmul+0x24a>
   d68a6:	ea95 0f0c 	teq	r5, ip
   d68aa:	d105      	bne.n	d68b8 <__aeabi_dmul+0x234>
   d68ac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d68b0:	bf1c      	itt	ne
   d68b2:	4610      	movne	r0, r2
   d68b4:	4619      	movne	r1, r3
   d68b6:	d10a      	bne.n	d68ce <__aeabi_dmul+0x24a>
   d68b8:	ea81 0103 	eor.w	r1, r1, r3
   d68bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d68c0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d68c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d68c8:	f04f 0000 	mov.w	r0, #0
   d68cc:	bd70      	pop	{r4, r5, r6, pc}
   d68ce:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d68d2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d68d6:	bd70      	pop	{r4, r5, r6, pc}

000d68d8 <__aeabi_ddiv>:
   d68d8:	b570      	push	{r4, r5, r6, lr}
   d68da:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d68de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d68e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d68e6:	bf1d      	ittte	ne
   d68e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d68ec:	ea94 0f0c 	teqne	r4, ip
   d68f0:	ea95 0f0c 	teqne	r5, ip
   d68f4:	f000 f8a7 	bleq	d6a46 <__aeabi_ddiv+0x16e>
   d68f8:	eba4 0405 	sub.w	r4, r4, r5
   d68fc:	ea81 0e03 	eor.w	lr, r1, r3
   d6900:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6904:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6908:	f000 8088 	beq.w	d6a1c <__aeabi_ddiv+0x144>
   d690c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6910:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6914:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6918:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d691c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6920:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6924:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6928:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d692c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6930:	429d      	cmp	r5, r3
   d6932:	bf08      	it	eq
   d6934:	4296      	cmpeq	r6, r2
   d6936:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d693a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d693e:	d202      	bcs.n	d6946 <__aeabi_ddiv+0x6e>
   d6940:	085b      	lsrs	r3, r3, #1
   d6942:	ea4f 0232 	mov.w	r2, r2, rrx
   d6946:	1ab6      	subs	r6, r6, r2
   d6948:	eb65 0503 	sbc.w	r5, r5, r3
   d694c:	085b      	lsrs	r3, r3, #1
   d694e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6952:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6956:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d695a:	ebb6 0e02 	subs.w	lr, r6, r2
   d695e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6962:	bf22      	ittt	cs
   d6964:	1ab6      	subcs	r6, r6, r2
   d6966:	4675      	movcs	r5, lr
   d6968:	ea40 000c 	orrcs.w	r0, r0, ip
   d696c:	085b      	lsrs	r3, r3, #1
   d696e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6972:	ebb6 0e02 	subs.w	lr, r6, r2
   d6976:	eb75 0e03 	sbcs.w	lr, r5, r3
   d697a:	bf22      	ittt	cs
   d697c:	1ab6      	subcs	r6, r6, r2
   d697e:	4675      	movcs	r5, lr
   d6980:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6984:	085b      	lsrs	r3, r3, #1
   d6986:	ea4f 0232 	mov.w	r2, r2, rrx
   d698a:	ebb6 0e02 	subs.w	lr, r6, r2
   d698e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6992:	bf22      	ittt	cs
   d6994:	1ab6      	subcs	r6, r6, r2
   d6996:	4675      	movcs	r5, lr
   d6998:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d699c:	085b      	lsrs	r3, r3, #1
   d699e:	ea4f 0232 	mov.w	r2, r2, rrx
   d69a2:	ebb6 0e02 	subs.w	lr, r6, r2
   d69a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d69aa:	bf22      	ittt	cs
   d69ac:	1ab6      	subcs	r6, r6, r2
   d69ae:	4675      	movcs	r5, lr
   d69b0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d69b4:	ea55 0e06 	orrs.w	lr, r5, r6
   d69b8:	d018      	beq.n	d69ec <__aeabi_ddiv+0x114>
   d69ba:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d69be:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d69c2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d69c6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d69ca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d69ce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d69d2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d69d6:	d1c0      	bne.n	d695a <__aeabi_ddiv+0x82>
   d69d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d69dc:	d10b      	bne.n	d69f6 <__aeabi_ddiv+0x11e>
   d69de:	ea41 0100 	orr.w	r1, r1, r0
   d69e2:	f04f 0000 	mov.w	r0, #0
   d69e6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d69ea:	e7b6      	b.n	d695a <__aeabi_ddiv+0x82>
   d69ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d69f0:	bf04      	itt	eq
   d69f2:	4301      	orreq	r1, r0
   d69f4:	2000      	moveq	r0, #0
   d69f6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d69fa:	bf88      	it	hi
   d69fc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6a00:	f63f aeaf 	bhi.w	d6762 <__aeabi_dmul+0xde>
   d6a04:	ebb5 0c03 	subs.w	ip, r5, r3
   d6a08:	bf04      	itt	eq
   d6a0a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6a0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6a12:	f150 0000 	adcs.w	r0, r0, #0
   d6a16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6a1a:	bd70      	pop	{r4, r5, r6, pc}
   d6a1c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6a20:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6a24:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6a28:	bfc2      	ittt	gt
   d6a2a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6a2e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6a32:	bd70      	popgt	{r4, r5, r6, pc}
   d6a34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6a38:	f04f 0e00 	mov.w	lr, #0
   d6a3c:	3c01      	subs	r4, #1
   d6a3e:	e690      	b.n	d6762 <__aeabi_dmul+0xde>
   d6a40:	ea45 0e06 	orr.w	lr, r5, r6
   d6a44:	e68d      	b.n	d6762 <__aeabi_dmul+0xde>
   d6a46:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6a4a:	ea94 0f0c 	teq	r4, ip
   d6a4e:	bf08      	it	eq
   d6a50:	ea95 0f0c 	teqeq	r5, ip
   d6a54:	f43f af3b 	beq.w	d68ce <__aeabi_dmul+0x24a>
   d6a58:	ea94 0f0c 	teq	r4, ip
   d6a5c:	d10a      	bne.n	d6a74 <__aeabi_ddiv+0x19c>
   d6a5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6a62:	f47f af34 	bne.w	d68ce <__aeabi_dmul+0x24a>
   d6a66:	ea95 0f0c 	teq	r5, ip
   d6a6a:	f47f af25 	bne.w	d68b8 <__aeabi_dmul+0x234>
   d6a6e:	4610      	mov	r0, r2
   d6a70:	4619      	mov	r1, r3
   d6a72:	e72c      	b.n	d68ce <__aeabi_dmul+0x24a>
   d6a74:	ea95 0f0c 	teq	r5, ip
   d6a78:	d106      	bne.n	d6a88 <__aeabi_ddiv+0x1b0>
   d6a7a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6a7e:	f43f aefd 	beq.w	d687c <__aeabi_dmul+0x1f8>
   d6a82:	4610      	mov	r0, r2
   d6a84:	4619      	mov	r1, r3
   d6a86:	e722      	b.n	d68ce <__aeabi_dmul+0x24a>
   d6a88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6a8c:	bf18      	it	ne
   d6a8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6a92:	f47f aec5 	bne.w	d6820 <__aeabi_dmul+0x19c>
   d6a96:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6a9a:	f47f af0d 	bne.w	d68b8 <__aeabi_dmul+0x234>
   d6a9e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6aa2:	f47f aeeb 	bne.w	d687c <__aeabi_dmul+0x1f8>
   d6aa6:	e712      	b.n	d68ce <__aeabi_dmul+0x24a>

000d6aa8 <__gedf2>:
   d6aa8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d6aac:	e006      	b.n	d6abc <__cmpdf2+0x4>
   d6aae:	bf00      	nop

000d6ab0 <__ledf2>:
   d6ab0:	f04f 0c01 	mov.w	ip, #1
   d6ab4:	e002      	b.n	d6abc <__cmpdf2+0x4>
   d6ab6:	bf00      	nop

000d6ab8 <__cmpdf2>:
   d6ab8:	f04f 0c01 	mov.w	ip, #1
   d6abc:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6acc:	bf18      	it	ne
   d6ace:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6ad2:	d01b      	beq.n	d6b0c <__cmpdf2+0x54>
   d6ad4:	b001      	add	sp, #4
   d6ad6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6ada:	bf0c      	ite	eq
   d6adc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6ae0:	ea91 0f03 	teqne	r1, r3
   d6ae4:	bf02      	ittt	eq
   d6ae6:	ea90 0f02 	teqeq	r0, r2
   d6aea:	2000      	moveq	r0, #0
   d6aec:	4770      	bxeq	lr
   d6aee:	f110 0f00 	cmn.w	r0, #0
   d6af2:	ea91 0f03 	teq	r1, r3
   d6af6:	bf58      	it	pl
   d6af8:	4299      	cmppl	r1, r3
   d6afa:	bf08      	it	eq
   d6afc:	4290      	cmpeq	r0, r2
   d6afe:	bf2c      	ite	cs
   d6b00:	17d8      	asrcs	r0, r3, #31
   d6b02:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6b06:	f040 0001 	orr.w	r0, r0, #1
   d6b0a:	4770      	bx	lr
   d6b0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6b14:	d102      	bne.n	d6b1c <__cmpdf2+0x64>
   d6b16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6b1a:	d107      	bne.n	d6b2c <__cmpdf2+0x74>
   d6b1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6b24:	d1d6      	bne.n	d6ad4 <__cmpdf2+0x1c>
   d6b26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6b2a:	d0d3      	beq.n	d6ad4 <__cmpdf2+0x1c>
   d6b2c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6b30:	4770      	bx	lr
   d6b32:	bf00      	nop

000d6b34 <__aeabi_cdrcmple>:
   d6b34:	4684      	mov	ip, r0
   d6b36:	4610      	mov	r0, r2
   d6b38:	4662      	mov	r2, ip
   d6b3a:	468c      	mov	ip, r1
   d6b3c:	4619      	mov	r1, r3
   d6b3e:	4663      	mov	r3, ip
   d6b40:	e000      	b.n	d6b44 <__aeabi_cdcmpeq>
   d6b42:	bf00      	nop

000d6b44 <__aeabi_cdcmpeq>:
   d6b44:	b501      	push	{r0, lr}
   d6b46:	f7ff ffb7 	bl	d6ab8 <__cmpdf2>
   d6b4a:	2800      	cmp	r0, #0
   d6b4c:	bf48      	it	mi
   d6b4e:	f110 0f00 	cmnmi.w	r0, #0
   d6b52:	bd01      	pop	{r0, pc}

000d6b54 <__aeabi_dcmpeq>:
   d6b54:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6b58:	f7ff fff4 	bl	d6b44 <__aeabi_cdcmpeq>
   d6b5c:	bf0c      	ite	eq
   d6b5e:	2001      	moveq	r0, #1
   d6b60:	2000      	movne	r0, #0
   d6b62:	f85d fb08 	ldr.w	pc, [sp], #8
   d6b66:	bf00      	nop

000d6b68 <__aeabi_dcmplt>:
   d6b68:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6b6c:	f7ff ffea 	bl	d6b44 <__aeabi_cdcmpeq>
   d6b70:	bf34      	ite	cc
   d6b72:	2001      	movcc	r0, #1
   d6b74:	2000      	movcs	r0, #0
   d6b76:	f85d fb08 	ldr.w	pc, [sp], #8
   d6b7a:	bf00      	nop

000d6b7c <__aeabi_dcmple>:
   d6b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6b80:	f7ff ffe0 	bl	d6b44 <__aeabi_cdcmpeq>
   d6b84:	bf94      	ite	ls
   d6b86:	2001      	movls	r0, #1
   d6b88:	2000      	movhi	r0, #0
   d6b8a:	f85d fb08 	ldr.w	pc, [sp], #8
   d6b8e:	bf00      	nop

000d6b90 <__aeabi_dcmpge>:
   d6b90:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6b94:	f7ff ffce 	bl	d6b34 <__aeabi_cdrcmple>
   d6b98:	bf94      	ite	ls
   d6b9a:	2001      	movls	r0, #1
   d6b9c:	2000      	movhi	r0, #0
   d6b9e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6ba2:	bf00      	nop

000d6ba4 <__aeabi_dcmpgt>:
   d6ba4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6ba8:	f7ff ffc4 	bl	d6b34 <__aeabi_cdrcmple>
   d6bac:	bf34      	ite	cc
   d6bae:	2001      	movcc	r0, #1
   d6bb0:	2000      	movcs	r0, #0
   d6bb2:	f85d fb08 	ldr.w	pc, [sp], #8
   d6bb6:	bf00      	nop

000d6bb8 <__aeabi_d2uiz>:
   d6bb8:	004a      	lsls	r2, r1, #1
   d6bba:	d211      	bcs.n	d6be0 <__aeabi_d2uiz+0x28>
   d6bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6bc0:	d211      	bcs.n	d6be6 <__aeabi_d2uiz+0x2e>
   d6bc2:	d50d      	bpl.n	d6be0 <__aeabi_d2uiz+0x28>
   d6bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6bcc:	d40e      	bmi.n	d6bec <__aeabi_d2uiz+0x34>
   d6bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6bda:	fa23 f002 	lsr.w	r0, r3, r2
   d6bde:	4770      	bx	lr
   d6be0:	f04f 0000 	mov.w	r0, #0
   d6be4:	4770      	bx	lr
   d6be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6bea:	d102      	bne.n	d6bf2 <__aeabi_d2uiz+0x3a>
   d6bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6bf0:	4770      	bx	lr
   d6bf2:	f04f 0000 	mov.w	r0, #0
   d6bf6:	4770      	bx	lr

000d6bf8 <__aeabi_uldivmod>:
   d6bf8:	b953      	cbnz	r3, d6c10 <__aeabi_uldivmod+0x18>
   d6bfa:	b94a      	cbnz	r2, d6c10 <__aeabi_uldivmod+0x18>
   d6bfc:	2900      	cmp	r1, #0
   d6bfe:	bf08      	it	eq
   d6c00:	2800      	cmpeq	r0, #0
   d6c02:	bf1c      	itt	ne
   d6c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d6c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d6c0c:	f000 b9a2 	b.w	d6f54 <__aeabi_idiv0>
   d6c10:	f1ad 0c08 	sub.w	ip, sp, #8
   d6c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d6c18:	f000 f82a 	bl	d6c70 <__udivmoddi4>
   d6c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
   d6c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6c24:	b004      	add	sp, #16
   d6c26:	4770      	bx	lr

000d6c28 <__aeabi_d2ulz>:
   d6c28:	b5d0      	push	{r4, r6, r7, lr}
   d6c2a:	2200      	movs	r2, #0
   d6c2c:	4b0e      	ldr	r3, [pc, #56]	; (d6c68 <__aeabi_d2ulz+0x40>)
   d6c2e:	4606      	mov	r6, r0
   d6c30:	460f      	mov	r7, r1
   d6c32:	f7ff fd27 	bl	d6684 <__aeabi_dmul>
   d6c36:	f7ff ffbf 	bl	d6bb8 <__aeabi_d2uiz>
   d6c3a:	4604      	mov	r4, r0
   d6c3c:	f7ff fcac 	bl	d6598 <__aeabi_ui2d>
   d6c40:	2200      	movs	r2, #0
   d6c42:	4b0a      	ldr	r3, [pc, #40]	; (d6c6c <__aeabi_d2ulz+0x44>)
   d6c44:	f7ff fd1e 	bl	d6684 <__aeabi_dmul>
   d6c48:	4602      	mov	r2, r0
   d6c4a:	460b      	mov	r3, r1
   d6c4c:	4630      	mov	r0, r6
   d6c4e:	4639      	mov	r1, r7
   d6c50:	f7ff fb64 	bl	d631c <__aeabi_dsub>
   d6c54:	f7ff ffb0 	bl	d6bb8 <__aeabi_d2uiz>
   d6c58:	4623      	mov	r3, r4
   d6c5a:	2200      	movs	r2, #0
   d6c5c:	ea42 0200 	orr.w	r2, r2, r0
   d6c60:	4610      	mov	r0, r2
   d6c62:	4619      	mov	r1, r3
   d6c64:	bdd0      	pop	{r4, r6, r7, pc}
   d6c66:	bf00      	nop
   d6c68:	3df00000 	.word	0x3df00000
   d6c6c:	41f00000 	.word	0x41f00000

000d6c70 <__udivmoddi4>:
   d6c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6c74:	468c      	mov	ip, r1
   d6c76:	460e      	mov	r6, r1
   d6c78:	4604      	mov	r4, r0
   d6c7a:	9d08      	ldr	r5, [sp, #32]
   d6c7c:	2b00      	cmp	r3, #0
   d6c7e:	d150      	bne.n	d6d22 <__udivmoddi4+0xb2>
   d6c80:	428a      	cmp	r2, r1
   d6c82:	4617      	mov	r7, r2
   d6c84:	d96c      	bls.n	d6d60 <__udivmoddi4+0xf0>
   d6c86:	fab2 fe82 	clz	lr, r2
   d6c8a:	f1be 0f00 	cmp.w	lr, #0
   d6c8e:	d00b      	beq.n	d6ca8 <__udivmoddi4+0x38>
   d6c90:	f1ce 0420 	rsb	r4, lr, #32
   d6c94:	fa20 f404 	lsr.w	r4, r0, r4
   d6c98:	fa01 f60e 	lsl.w	r6, r1, lr
   d6c9c:	ea44 0c06 	orr.w	ip, r4, r6
   d6ca0:	fa02 f70e 	lsl.w	r7, r2, lr
   d6ca4:	fa00 f40e 	lsl.w	r4, r0, lr
   d6ca8:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d6cac:	0c22      	lsrs	r2, r4, #16
   d6cae:	fbbc f0f9 	udiv	r0, ip, r9
   d6cb2:	fa1f f887 	uxth.w	r8, r7
   d6cb6:	fb09 c610 	mls	r6, r9, r0, ip
   d6cba:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d6cbe:	fb00 f308 	mul.w	r3, r0, r8
   d6cc2:	42b3      	cmp	r3, r6
   d6cc4:	d909      	bls.n	d6cda <__udivmoddi4+0x6a>
   d6cc6:	19f6      	adds	r6, r6, r7
   d6cc8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d6ccc:	f080 8122 	bcs.w	d6f14 <__udivmoddi4+0x2a4>
   d6cd0:	42b3      	cmp	r3, r6
   d6cd2:	f240 811f 	bls.w	d6f14 <__udivmoddi4+0x2a4>
   d6cd6:	3802      	subs	r0, #2
   d6cd8:	443e      	add	r6, r7
   d6cda:	1af6      	subs	r6, r6, r3
   d6cdc:	b2a2      	uxth	r2, r4
   d6cde:	fbb6 f3f9 	udiv	r3, r6, r9
   d6ce2:	fb09 6613 	mls	r6, r9, r3, r6
   d6ce6:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d6cea:	fb03 f808 	mul.w	r8, r3, r8
   d6cee:	45a0      	cmp	r8, r4
   d6cf0:	d909      	bls.n	d6d06 <__udivmoddi4+0x96>
   d6cf2:	19e4      	adds	r4, r4, r7
   d6cf4:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d6cf8:	f080 810a 	bcs.w	d6f10 <__udivmoddi4+0x2a0>
   d6cfc:	45a0      	cmp	r8, r4
   d6cfe:	f240 8107 	bls.w	d6f10 <__udivmoddi4+0x2a0>
   d6d02:	3b02      	subs	r3, #2
   d6d04:	443c      	add	r4, r7
   d6d06:	ebc8 0404 	rsb	r4, r8, r4
   d6d0a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d6d0e:	2100      	movs	r1, #0
   d6d10:	2d00      	cmp	r5, #0
   d6d12:	d062      	beq.n	d6dda <__udivmoddi4+0x16a>
   d6d14:	fa24 f40e 	lsr.w	r4, r4, lr
   d6d18:	2300      	movs	r3, #0
   d6d1a:	602c      	str	r4, [r5, #0]
   d6d1c:	606b      	str	r3, [r5, #4]
   d6d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6d22:	428b      	cmp	r3, r1
   d6d24:	d907      	bls.n	d6d36 <__udivmoddi4+0xc6>
   d6d26:	2d00      	cmp	r5, #0
   d6d28:	d055      	beq.n	d6dd6 <__udivmoddi4+0x166>
   d6d2a:	2100      	movs	r1, #0
   d6d2c:	e885 0041 	stmia.w	r5, {r0, r6}
   d6d30:	4608      	mov	r0, r1
   d6d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6d36:	fab3 f183 	clz	r1, r3
   d6d3a:	2900      	cmp	r1, #0
   d6d3c:	f040 8090 	bne.w	d6e60 <__udivmoddi4+0x1f0>
   d6d40:	42b3      	cmp	r3, r6
   d6d42:	d302      	bcc.n	d6d4a <__udivmoddi4+0xda>
   d6d44:	4282      	cmp	r2, r0
   d6d46:	f200 80f8 	bhi.w	d6f3a <__udivmoddi4+0x2ca>
   d6d4a:	1a84      	subs	r4, r0, r2
   d6d4c:	eb66 0603 	sbc.w	r6, r6, r3
   d6d50:	2001      	movs	r0, #1
   d6d52:	46b4      	mov	ip, r6
   d6d54:	2d00      	cmp	r5, #0
   d6d56:	d040      	beq.n	d6dda <__udivmoddi4+0x16a>
   d6d58:	e885 1010 	stmia.w	r5, {r4, ip}
   d6d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6d60:	b912      	cbnz	r2, d6d68 <__udivmoddi4+0xf8>
   d6d62:	2701      	movs	r7, #1
   d6d64:	fbb7 f7f2 	udiv	r7, r7, r2
   d6d68:	fab7 fe87 	clz	lr, r7
   d6d6c:	f1be 0f00 	cmp.w	lr, #0
   d6d70:	d135      	bne.n	d6dde <__udivmoddi4+0x16e>
   d6d72:	1bf3      	subs	r3, r6, r7
   d6d74:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d6d78:	fa1f fc87 	uxth.w	ip, r7
   d6d7c:	2101      	movs	r1, #1
   d6d7e:	fbb3 f0f8 	udiv	r0, r3, r8
   d6d82:	0c22      	lsrs	r2, r4, #16
   d6d84:	fb08 3610 	mls	r6, r8, r0, r3
   d6d88:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d6d8c:	fb0c f300 	mul.w	r3, ip, r0
   d6d90:	42b3      	cmp	r3, r6
   d6d92:	d907      	bls.n	d6da4 <__udivmoddi4+0x134>
   d6d94:	19f6      	adds	r6, r6, r7
   d6d96:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d6d9a:	d202      	bcs.n	d6da2 <__udivmoddi4+0x132>
   d6d9c:	42b3      	cmp	r3, r6
   d6d9e:	f200 80ce 	bhi.w	d6f3e <__udivmoddi4+0x2ce>
   d6da2:	4610      	mov	r0, r2
   d6da4:	1af6      	subs	r6, r6, r3
   d6da6:	b2a2      	uxth	r2, r4
   d6da8:	fbb6 f3f8 	udiv	r3, r6, r8
   d6dac:	fb08 6613 	mls	r6, r8, r3, r6
   d6db0:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d6db4:	fb0c fc03 	mul.w	ip, ip, r3
   d6db8:	45a4      	cmp	ip, r4
   d6dba:	d907      	bls.n	d6dcc <__udivmoddi4+0x15c>
   d6dbc:	19e4      	adds	r4, r4, r7
   d6dbe:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d6dc2:	d202      	bcs.n	d6dca <__udivmoddi4+0x15a>
   d6dc4:	45a4      	cmp	ip, r4
   d6dc6:	f200 80b5 	bhi.w	d6f34 <__udivmoddi4+0x2c4>
   d6dca:	4613      	mov	r3, r2
   d6dcc:	ebcc 0404 	rsb	r4, ip, r4
   d6dd0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d6dd4:	e79c      	b.n	d6d10 <__udivmoddi4+0xa0>
   d6dd6:	4629      	mov	r1, r5
   d6dd8:	4628      	mov	r0, r5
   d6dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6dde:	f1ce 0120 	rsb	r1, lr, #32
   d6de2:	fa06 f30e 	lsl.w	r3, r6, lr
   d6de6:	fa07 f70e 	lsl.w	r7, r7, lr
   d6dea:	fa20 f901 	lsr.w	r9, r0, r1
   d6dee:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d6df2:	40ce      	lsrs	r6, r1
   d6df4:	ea49 0903 	orr.w	r9, r9, r3
   d6df8:	fbb6 faf8 	udiv	sl, r6, r8
   d6dfc:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d6e00:	fb08 661a 	mls	r6, r8, sl, r6
   d6e04:	fa1f fc87 	uxth.w	ip, r7
   d6e08:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d6e0c:	fb0a f20c 	mul.w	r2, sl, ip
   d6e10:	429a      	cmp	r2, r3
   d6e12:	fa00 f40e 	lsl.w	r4, r0, lr
   d6e16:	d90a      	bls.n	d6e2e <__udivmoddi4+0x1be>
   d6e18:	19db      	adds	r3, r3, r7
   d6e1a:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
   d6e1e:	f080 8087 	bcs.w	d6f30 <__udivmoddi4+0x2c0>
   d6e22:	429a      	cmp	r2, r3
   d6e24:	f240 8084 	bls.w	d6f30 <__udivmoddi4+0x2c0>
   d6e28:	f1aa 0a02 	sub.w	sl, sl, #2
   d6e2c:	443b      	add	r3, r7
   d6e2e:	1a9b      	subs	r3, r3, r2
   d6e30:	fa1f f989 	uxth.w	r9, r9
   d6e34:	fbb3 f1f8 	udiv	r1, r3, r8
   d6e38:	fb08 3311 	mls	r3, r8, r1, r3
   d6e3c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d6e40:	fb01 f60c 	mul.w	r6, r1, ip
   d6e44:	429e      	cmp	r6, r3
   d6e46:	d907      	bls.n	d6e58 <__udivmoddi4+0x1e8>
   d6e48:	19db      	adds	r3, r3, r7
   d6e4a:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   d6e4e:	d26b      	bcs.n	d6f28 <__udivmoddi4+0x2b8>
   d6e50:	429e      	cmp	r6, r3
   d6e52:	d969      	bls.n	d6f28 <__udivmoddi4+0x2b8>
   d6e54:	3902      	subs	r1, #2
   d6e56:	443b      	add	r3, r7
   d6e58:	1b9b      	subs	r3, r3, r6
   d6e5a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d6e5e:	e78e      	b.n	d6d7e <__udivmoddi4+0x10e>
   d6e60:	f1c1 0e20 	rsb	lr, r1, #32
   d6e64:	fa22 f40e 	lsr.w	r4, r2, lr
   d6e68:	408b      	lsls	r3, r1
   d6e6a:	4323      	orrs	r3, r4
   d6e6c:	fa20 f70e 	lsr.w	r7, r0, lr
   d6e70:	fa06 f401 	lsl.w	r4, r6, r1
   d6e74:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d6e78:	fa26 f60e 	lsr.w	r6, r6, lr
   d6e7c:	433c      	orrs	r4, r7
   d6e7e:	fbb6 f9fc 	udiv	r9, r6, ip
   d6e82:	0c27      	lsrs	r7, r4, #16
   d6e84:	fb0c 6619 	mls	r6, ip, r9, r6
   d6e88:	fa1f f883 	uxth.w	r8, r3
   d6e8c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d6e90:	fb09 f708 	mul.w	r7, r9, r8
   d6e94:	42b7      	cmp	r7, r6
   d6e96:	fa02 f201 	lsl.w	r2, r2, r1
   d6e9a:	fa00 fa01 	lsl.w	sl, r0, r1
   d6e9e:	d908      	bls.n	d6eb2 <__udivmoddi4+0x242>
   d6ea0:	18f6      	adds	r6, r6, r3
   d6ea2:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d6ea6:	d241      	bcs.n	d6f2c <__udivmoddi4+0x2bc>
   d6ea8:	42b7      	cmp	r7, r6
   d6eaa:	d93f      	bls.n	d6f2c <__udivmoddi4+0x2bc>
   d6eac:	f1a9 0902 	sub.w	r9, r9, #2
   d6eb0:	441e      	add	r6, r3
   d6eb2:	1bf6      	subs	r6, r6, r7
   d6eb4:	b2a0      	uxth	r0, r4
   d6eb6:	fbb6 f4fc 	udiv	r4, r6, ip
   d6eba:	fb0c 6614 	mls	r6, ip, r4, r6
   d6ebe:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d6ec2:	fb04 f808 	mul.w	r8, r4, r8
   d6ec6:	45b8      	cmp	r8, r7
   d6ec8:	d907      	bls.n	d6eda <__udivmoddi4+0x26a>
   d6eca:	18ff      	adds	r7, r7, r3
   d6ecc:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
   d6ed0:	d228      	bcs.n	d6f24 <__udivmoddi4+0x2b4>
   d6ed2:	45b8      	cmp	r8, r7
   d6ed4:	d926      	bls.n	d6f24 <__udivmoddi4+0x2b4>
   d6ed6:	3c02      	subs	r4, #2
   d6ed8:	441f      	add	r7, r3
   d6eda:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d6ede:	ebc8 0707 	rsb	r7, r8, r7
   d6ee2:	fba0 8902 	umull	r8, r9, r0, r2
   d6ee6:	454f      	cmp	r7, r9
   d6ee8:	4644      	mov	r4, r8
   d6eea:	464e      	mov	r6, r9
   d6eec:	d314      	bcc.n	d6f18 <__udivmoddi4+0x2a8>
   d6eee:	d029      	beq.n	d6f44 <__udivmoddi4+0x2d4>
   d6ef0:	b365      	cbz	r5, d6f4c <__udivmoddi4+0x2dc>
   d6ef2:	ebba 0304 	subs.w	r3, sl, r4
   d6ef6:	eb67 0706 	sbc.w	r7, r7, r6
   d6efa:	fa07 fe0e 	lsl.w	lr, r7, lr
   d6efe:	40cb      	lsrs	r3, r1
   d6f00:	40cf      	lsrs	r7, r1
   d6f02:	ea4e 0303 	orr.w	r3, lr, r3
   d6f06:	e885 0088 	stmia.w	r5, {r3, r7}
   d6f0a:	2100      	movs	r1, #0
   d6f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6f10:	4613      	mov	r3, r2
   d6f12:	e6f8      	b.n	d6d06 <__udivmoddi4+0x96>
   d6f14:	4610      	mov	r0, r2
   d6f16:	e6e0      	b.n	d6cda <__udivmoddi4+0x6a>
   d6f18:	ebb8 0402 	subs.w	r4, r8, r2
   d6f1c:	eb69 0603 	sbc.w	r6, r9, r3
   d6f20:	3801      	subs	r0, #1
   d6f22:	e7e5      	b.n	d6ef0 <__udivmoddi4+0x280>
   d6f24:	4604      	mov	r4, r0
   d6f26:	e7d8      	b.n	d6eda <__udivmoddi4+0x26a>
   d6f28:	4611      	mov	r1, r2
   d6f2a:	e795      	b.n	d6e58 <__udivmoddi4+0x1e8>
   d6f2c:	4681      	mov	r9, r0
   d6f2e:	e7c0      	b.n	d6eb2 <__udivmoddi4+0x242>
   d6f30:	468a      	mov	sl, r1
   d6f32:	e77c      	b.n	d6e2e <__udivmoddi4+0x1be>
   d6f34:	3b02      	subs	r3, #2
   d6f36:	443c      	add	r4, r7
   d6f38:	e748      	b.n	d6dcc <__udivmoddi4+0x15c>
   d6f3a:	4608      	mov	r0, r1
   d6f3c:	e70a      	b.n	d6d54 <__udivmoddi4+0xe4>
   d6f3e:	3802      	subs	r0, #2
   d6f40:	443e      	add	r6, r7
   d6f42:	e72f      	b.n	d6da4 <__udivmoddi4+0x134>
   d6f44:	45c2      	cmp	sl, r8
   d6f46:	d3e7      	bcc.n	d6f18 <__udivmoddi4+0x2a8>
   d6f48:	463e      	mov	r6, r7
   d6f4a:	e7d1      	b.n	d6ef0 <__udivmoddi4+0x280>
   d6f4c:	4629      	mov	r1, r5
   d6f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6f52:	bf00      	nop

000d6f54 <__aeabi_idiv0>:
   d6f54:	4770      	bx	lr
   d6f56:	bf00      	nop

000d6f58 <__cxa_atexit>:
   d6f58:	b510      	push	{r4, lr}
   d6f5a:	4c05      	ldr	r4, [pc, #20]	; (d6f70 <__cxa_atexit+0x18>)
   d6f5c:	4613      	mov	r3, r2
   d6f5e:	b12c      	cbz	r4, d6f6c <__cxa_atexit+0x14>
   d6f60:	460a      	mov	r2, r1
   d6f62:	4601      	mov	r1, r0
   d6f64:	2002      	movs	r0, #2
   d6f66:	f3af 8000 	nop.w
   d6f6a:	bd10      	pop	{r4, pc}
   d6f6c:	4620      	mov	r0, r4
   d6f6e:	bd10      	pop	{r4, pc}
   d6f70:	00000000 	.word	0x00000000

000d6f74 <memcpy>:
   d6f74:	b510      	push	{r4, lr}
   d6f76:	1e43      	subs	r3, r0, #1
   d6f78:	440a      	add	r2, r1
   d6f7a:	4291      	cmp	r1, r2
   d6f7c:	d004      	beq.n	d6f88 <memcpy+0x14>
   d6f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6f82:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6f86:	e7f8      	b.n	d6f7a <memcpy+0x6>
   d6f88:	bd10      	pop	{r4, pc}

000d6f8a <memset>:
   d6f8a:	4402      	add	r2, r0
   d6f8c:	4603      	mov	r3, r0
   d6f8e:	4293      	cmp	r3, r2
   d6f90:	d002      	beq.n	d6f98 <memset+0xe>
   d6f92:	f803 1b01 	strb.w	r1, [r3], #1
   d6f96:	e7fa      	b.n	d6f8e <memset+0x4>
   d6f98:	4770      	bx	lr
	...

000d6f9c <srand>:
   d6f9c:	b538      	push	{r3, r4, r5, lr}
   d6f9e:	4b12      	ldr	r3, [pc, #72]	; (d6fe8 <srand+0x4c>)
   d6fa0:	681c      	ldr	r4, [r3, #0]
   d6fa2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6fa4:	4605      	mov	r5, r0
   d6fa6:	b9d3      	cbnz	r3, d6fde <srand+0x42>
   d6fa8:	2018      	movs	r0, #24
   d6faa:	f7fd ffb3 	bl	d4f14 <malloc>
   d6fae:	f243 330e 	movw	r3, #13070	; 0x330e
   d6fb2:	63a0      	str	r0, [r4, #56]	; 0x38
   d6fb4:	8003      	strh	r3, [r0, #0]
   d6fb6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6fba:	8043      	strh	r3, [r0, #2]
   d6fbc:	f241 2334 	movw	r3, #4660	; 0x1234
   d6fc0:	8083      	strh	r3, [r0, #4]
   d6fc2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6fc6:	80c3      	strh	r3, [r0, #6]
   d6fc8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6fcc:	8103      	strh	r3, [r0, #8]
   d6fce:	2305      	movs	r3, #5
   d6fd0:	8143      	strh	r3, [r0, #10]
   d6fd2:	230b      	movs	r3, #11
   d6fd4:	8183      	strh	r3, [r0, #12]
   d6fd6:	2201      	movs	r2, #1
   d6fd8:	2300      	movs	r3, #0
   d6fda:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6fde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6fe0:	2200      	movs	r2, #0
   d6fe2:	611d      	str	r5, [r3, #16]
   d6fe4:	615a      	str	r2, [r3, #20]
   d6fe6:	bd38      	pop	{r3, r4, r5, pc}
   d6fe8:	2003e274 	.word	0x2003e274

000d6fec <strcpy>:
   d6fec:	4603      	mov	r3, r0
   d6fee:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6ff2:	f803 2b01 	strb.w	r2, [r3], #1
   d6ff6:	2a00      	cmp	r2, #0
   d6ff8:	d1f9      	bne.n	d6fee <strcpy+0x2>
   d6ffa:	4770      	bx	lr

000d6ffc <strlen>:
   d6ffc:	4603      	mov	r3, r0
   d6ffe:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7002:	2a00      	cmp	r2, #0
   d7004:	d1fb      	bne.n	d6ffe <strlen+0x2>
   d7006:	1a18      	subs	r0, r3, r0
   d7008:	3801      	subs	r0, #1
   d700a:	4770      	bx	lr

000d700c <strncpy>:
   d700c:	b510      	push	{r4, lr}
   d700e:	4603      	mov	r3, r0
   d7010:	b142      	cbz	r2, d7024 <strncpy+0x18>
   d7012:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7016:	f803 4b01 	strb.w	r4, [r3], #1
   d701a:	3a01      	subs	r2, #1
   d701c:	2c00      	cmp	r4, #0
   d701e:	d1f7      	bne.n	d7010 <strncpy+0x4>
   d7020:	441a      	add	r2, r3
   d7022:	e000      	b.n	d7026 <strncpy+0x1a>
   d7024:	bd10      	pop	{r4, pc}
   d7026:	4293      	cmp	r3, r2
   d7028:	d002      	beq.n	d7030 <strncpy+0x24>
   d702a:	f803 4b01 	strb.w	r4, [r3], #1
   d702e:	e7fa      	b.n	d7026 <strncpy+0x1a>
   d7030:	bd10      	pop	{r4, pc}

000d7032 <link_code_end>:
	...

000d7034 <dynalib_user>:
   d7034:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d7044:	0000 0000 7542 7474 6e6f 3120 6c20 6e6f     ....Button 1 lon
   d7054:	5067 6572 7373 7320 6f74 0070 7542 7474     gPress stop.Butt
   d7064:	6e6f 3120 6c20 6e6f 5067 6572 7373 7320     on 1 longPress s
   d7074:	6174 7472 5400 6d65 6570 6172 7574 6572     tart.Temperature
   d7084:	203a 6625 000a 655a 6f72 4f00 656e 0a00     : %f..Zero.One..
   d7094:	6574 706d 615f 7272 7961 203a 7325 6420     temp_array: %s d
   d70a4:	7461 3a61 2520 2069 3a69 2520 2069 3a75     ata: %i i: %i u:
   d70b4:	2520 2069 3a6e 2520 0a69 0000                %i n: %i...

000d70c0 <_ZTVN8particle13__SPISettingsE>:
	...
   d70c8:	43a1 000d 6564 6166 6c75 2074 4d00 4253     .C..default .MSB
   d70d8:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   d70e8:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   d70f8:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
   d7108:	4d20 444f 2545 3e64 0000 0000                MODE%d>....

000d7114 <_ZTVN5spark13EthernetClassE>:
	...
   d711c:	5005 000d 4ffb 000d 4ff1 000d 4fe7 000d     .P...O...O...O..
   d712c:	4fdb 000d 4fcf 000d 4fc3 000d 4fbb 000d     .O...O...O...O..
   d713c:	4fb1 000d 4fa7 000d 5405 000d               .O...O...T..

000d7148 <_ZTV7TwoWire>:
	...
   d7150:	5025 000d 506f 000d 5047 000d 5027 000d     %P..oP..GP..'P..
   d7160:	504f 000d 5057 000d 505f 000d 5067 000d     OP..WP.._P..gP..

000d7170 <_ZTV9IPAddress>:
	...
   d7178:	513d 000d 512d 000d 512f 000d 6162 6475     =Q..-Q../Q..baud
   d7188:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d7198:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d71a8:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d71b8:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d71c8:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d71d8:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d71e8:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d71f8:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d7208:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d7218:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d7228:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
   d7238:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   d7248:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d7258:	726f 7000 6e61 6369 6100 6c6c 0000 0000     or.panic.all....

000d7268 <_ZTVN5spark9MeshClassE>:
	...
   d7270:	527f 000d 5275 000d 526b 000d 5261 000d     .R..uR..kR..aR..
   d7280:	5255 000d 5249 000d 523d 000d 5235 000d     UR..IR..=R..5R..
   d7290:	522b 000d 5221 000d 5405 000d               +R..!R...T..

000d729c <_ZTVN5spark12NetworkClassE>:
	...
   d72a4:	539d 000d 53a7 000d 53b1 000d 53bb 000d     .S...S...S...S..
   d72b4:	53c5 000d 53d1 000d 53dd 000d 53e9 000d     .S...S...S...S..
   d72c4:	53f1 000d 53fb 000d 5405 000d               .S...S...T..

000d72d0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d72d0:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
   d72e0:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d72f0:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d7300:	0000 0000                                   ....

000d7304 <_ZTV11USARTSerial>:
	...
   d730c:	5a79 000d 5ac9 000d 5ad7 000d 54e5 000d     yZ...Z...Z...T..
   d731c:	5a8d 000d 5aaf 000d 5a9b 000d 5ac3 000d     .Z...Z...Z...Z..
   d732c:	5a7b 000d 5a7f 000d                         {Z...Z..

000d7334 <_ZTV9USBSerial>:
	...
   d733c:	5b81 000d 5bd1 000d 5bdf 000d 54e5 000d     .[...[...[...T..
   d734c:	5bbd 000d 5b83 000d 5b99 000d 5bcb 000d     .[...[...[...[..
   d735c:	5baf 000d 5b7d 000d                         .[..}[..

000d7364 <_ZTVN5spark9WiFiClassE>:
	...
   d736c:	5ceb 000d 5ce1 000d 5cd7 000d 5c8d 000d     .\...\...\...\..
   d737c:	5ccb 000d 5cbf 000d 5cb3 000d 5cab 000d     .\...\...\...\..
   d738c:	5ca1 000d 5c97 000d 5405 000d               .\...\...T..

000d7398 <_ZSt7nothrow>:
   d7398:	0000 0000                                   ....

000d739c <__sf_fake_stdin>:
	...

000d73bc <__sf_fake_stdout>:
	...

000d73dc <__sf_fake_stderr>:
	...
   d73fc:	0043                                        C.

000d73fe <link_const_variable_data_end>:
	...

000d7400 <link_constructors_location>:
   d7400:	000d431d 	.word	0x000d431d
   d7404:	000d4a57 	.word	0x000d4a57
   d7408:	000d4ac5 	.word	0x000d4ac5
   d740c:	000d4ac9 	.word	0x000d4ac9
   d7410:	000d4f6d 	.word	0x000d4f6d
   d7414:	000d5011 	.word	0x000d5011
   d7418:	000d5211 	.word	0x000d5211
   d741c:	000d534d 	.word	0x000d534d
   d7420:	000d54d1 	.word	0x000d54d1
   d7424:	000d562d 	.word	0x000d562d
   d7428:	000d5a31 	.word	0x000d5a31
   d742c:	000d5a65 	.word	0x000d5a65
   d7430:	000d5cf5 	.word	0x000d5cf5
   d7434:	000d6085 	.word	0x000d6085
   d7438:	000d6149 	.word	0x000d6149
   d743c:	000d61cd 	.word	0x000d61cd
   d7440:	000d6251 	.word	0x000d6251

000d7444 <link_constructors_end>:
	...
