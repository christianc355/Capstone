
/Users/christianc/Documents/IoT/Capstone/LaserTest/target/1.5.2/argon/LaserTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004754  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d8770  000d8770  00008770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d8778  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000484  2003ddd0  000d877c  0001ddd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000059c  2003e254  2003e254  0002e254  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d8c00  000d8c00  00028c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d8c28  000d8c28  00028c28  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0010372a  00000000  00000000  00028c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000149cd  00000000  00000000  0012c356  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000251d3  00000000  00000000  00140d23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002ba8  00000000  00000000  00165ef6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000051b0  00000000  00000000  00168a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003b9cd  00000000  00000000  0016dc4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00033d18  00000000  00000000  001a961b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010b84c  00000000  00000000  001dd333  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000e190  00000000  00000000  002e8b80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fe5f 	bl	d7cf0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fe64 	bl	d7d06 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003ddd0 	.word	0x2003ddd0
   d4048:	000d877c 	.word	0x000d877c
   d404c:	2003e254 	.word	0x2003e254
   d4050:	2003e254 	.word	0x2003e254
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fd87 	bl	d6b6c <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d876c 	.word	0x000d876c
   d4080:	000d8720 	.word	0x000d8720

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b8b0 	b.w	d41e8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f949 	bl	d4320 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 bd2d 	b.w	d6af0 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f001 bd65 	b.w	d5b64 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f001 bd63 	b.w	d5b64 <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f001 fcc8 	bl	d5a3c <panic_>
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d571d 	.word	0x000d571d

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_Z6click1v>:



void click1(){

  buttonState = !buttonState;
   d40c4:	4a02      	ldr	r2, [pc, #8]	; (d40d0 <_Z6click1v+0xc>)
   d40c6:	7813      	ldrb	r3, [r2, #0]
   d40c8:	f083 0301 	eor.w	r3, r3, #1
   d40cc:	7013      	strb	r3, [r2, #0]
   d40ce:	4770      	bx	lr
   d40d0:	2003e3c8 	.word	0x2003e3c8

000d40d4 <_Z6click2v>:

}

void click2(){

  extraButtonState = !extraButtonState;
   d40d4:	4a02      	ldr	r2, [pc, #8]	; (d40e0 <_Z6click2v+0xc>)
   d40d6:	7813      	ldrb	r3, [r2, #0]
   d40d8:	f083 0301 	eor.w	r3, r3, #1
   d40dc:	7013      	strb	r3, [r2, #0]
   d40de:	4770      	bx	lr
   d40e0:	2003e380 	.word	0x2003e380

000d40e4 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40e4:	4770      	bx	lr
	...

000d40e8 <_Z14longPressStop1v>:
  Serial.printf("Temperature: %f\n", temp);
  

} 

void longPressStop1() {
   d40e8:	b508      	push	{r3, lr}

  Serial.println("Button 1 longPress stop");
   d40ea:	f002 fc45 	bl	d6978 <_Z16_fetch_usbserialv>
   d40ee:	4904      	ldr	r1, [pc, #16]	; (d4100 <_Z14longPressStop1v+0x18>)
   d40f0:	f002 f855 	bl	d619e <_ZN5Print7printlnEPKc>
  analogWrite(D7, 0);
   d40f4:	2100      	movs	r1, #0
   d40f6:	2007      	movs	r0, #7

}
   d40f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
} 

void longPressStop1() {

  Serial.println("Button 1 longPress stop");
  analogWrite(D7, 0);
   d40fc:	f002 bdd5 	b.w	d6caa <_Z11analogWritetm>
   d4100:	000d7dc4 	.word	0x000d7dc4

000d4104 <_Z15longPressStart1v>:

  extraButtonState = !extraButtonState;

}

void longPressStart1() {
   d4104:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  Serial.println("Button 1 longPress start");
   d4106:	f002 fc37 	bl	d6978 <_Z16_fetch_usbserialv>
   d410a:	490c      	ldr	r1, [pc, #48]	; (d413c <_Z15longPressStart1v+0x38>)
   d410c:	f002 f847 	bl	d619e <_ZN5Print7printlnEPKc>
  analogWrite(D7, 200);
   d4110:	21c8      	movs	r1, #200	; 0xc8
   d4112:	2007      	movs	r0, #7
   d4114:	f002 fdc9 	bl	d6caa <_Z11analogWritetm>
  Serial.printf("Temperature: %f\n", temp);
   d4118:	f002 fc2e 	bl	d6978 <_Z16_fetch_usbserialv>
   d411c:	4908      	ldr	r1, [pc, #32]	; (d4140 <_Z15longPressStart1v+0x3c>)
   d411e:	4604      	mov	r4, r0
   d4120:	4668      	mov	r0, sp
   d4122:	f002 facb 	bl	d66bc <_ZN6StringC1ERKS_>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4126:	466b      	mov	r3, sp
   d4128:	4a06      	ldr	r2, [pc, #24]	; (d4144 <_Z15longPressStart1v+0x40>)
   d412a:	2100      	movs	r1, #0
   d412c:	4620      	mov	r0, r4
   d412e:	f002 f860 	bl	d61f2 <_ZN5Print11printf_implEbPKcz>
   d4132:	4668      	mov	r0, sp
   d4134:	f002 fa3c 	bl	d65b0 <_ZN6StringD1Ev>
  

} 
   d4138:	b004      	add	sp, #16
   d413a:	bd10      	pop	{r4, pc}
   d413c:	000d7ddc 	.word	0x000d7ddc
   d4140:	2003e258 	.word	0x2003e258
   d4144:	000d7df5 	.word	0x000d7df5

000d4148 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4148:	b510      	push	{r4, lr}
   d414a:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d414c:	6800      	ldr	r0, [r0, #0]
   d414e:	b108      	cbz	r0, d4154 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4150:	f001 fd08 	bl	d5b64 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4154:	4620      	mov	r0, r4
   d4156:	bd10      	pop	{r4, pc}

000d4158 <_Z8beamZerov>:
  Serial.println("Button 1 longPress stop");
  analogWrite(D7, 0);

}

void beamZero() {
   d4158:	b508      	push	{r3, lr}

  // Serial.printf("Array value is ZERO\n");
  digitalWrite(laserPin, HIGH);
   d415a:	2101      	movs	r1, #1
   d415c:	200e      	movs	r0, #14
   d415e:	f002 fd78 	bl	d6c52 <digitalWrite>
  //Serial.printf("ZERO\n");
  delay(zeroTime);
   d4162:	4b07      	ldr	r3, [pc, #28]	; (d4180 <_Z8beamZerov+0x28>)
   d4164:	6818      	ldr	r0, [r3, #0]
   d4166:	f001 fd15 	bl	d5b94 <delay>
  digitalWrite(laserPin, LOW);
   d416a:	200e      	movs	r0, #14
   d416c:	2100      	movs	r1, #0
   d416e:	f002 fd70 	bl	d6c52 <digitalWrite>
  delay(offDelay);
   d4172:	4b04      	ldr	r3, [pc, #16]	; (d4184 <_Z8beamZerov+0x2c>)
   d4174:	6818      	ldr	r0, [r3, #0]

}
   d4176:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  // Serial.printf("Array value is ZERO\n");
  digitalWrite(laserPin, HIGH);
  //Serial.printf("ZERO\n");
  delay(zeroTime);
  digitalWrite(laserPin, LOW);
  delay(offDelay);
   d417a:	f001 bd0b 	b.w	d5b94 <delay>
   d417e:	bf00      	nop
   d4180:	2003ddd8 	.word	0x2003ddd8
   d4184:	2003ddd0 	.word	0x2003ddd0

000d4188 <_Z7beamOnev>:

}

void beamOne() {
   d4188:	b508      	push	{r3, lr}

  //Serial.printf("Array value is ONE\n");
  digitalWrite(laserPin, HIGH);
   d418a:	2101      	movs	r1, #1
   d418c:	200e      	movs	r0, #14
   d418e:	f002 fd60 	bl	d6c52 <digitalWrite>
  //Serial.printf("ONE\n");
  delay(oneTime);
   d4192:	4b07      	ldr	r3, [pc, #28]	; (d41b0 <_Z7beamOnev+0x28>)
   d4194:	6818      	ldr	r0, [r3, #0]
   d4196:	f001 fcfd 	bl	d5b94 <delay>
  digitalWrite(laserPin, LOW);
   d419a:	200e      	movs	r0, #14
   d419c:	2100      	movs	r1, #0
   d419e:	f002 fd58 	bl	d6c52 <digitalWrite>
  delay(offDelay);
   d41a2:	4b04      	ldr	r3, [pc, #16]	; (d41b4 <_Z7beamOnev+0x2c>)
   d41a4:	6818      	ldr	r0, [r3, #0]

   d41a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  //Serial.printf("Array value is ONE\n");
  digitalWrite(laserPin, HIGH);
  //Serial.printf("ONE\n");
  delay(oneTime);
  digitalWrite(laserPin, LOW);
  delay(offDelay);
   d41aa:	f001 bcf3 	b.w	d5b94 <delay>
   d41ae:	bf00      	nop
   d41b0:	2003ddd4 	.word	0x2003ddd4
   d41b4:	2003ddd0 	.word	0x2003ddd0

000d41b8 <_Z10sendReturnv>:
      Serial.printf("1");
      }
  }
}

void sendReturn(){
   d41b8:	b508      	push	{r3, lr}
  //00001101 \n
  beamZero();
   d41ba:	f7ff ffcd 	bl	d4158 <_Z8beamZerov>
  beamZero();
   d41be:	f7ff ffcb 	bl	d4158 <_Z8beamZerov>
  beamZero();
   d41c2:	f7ff ffc9 	bl	d4158 <_Z8beamZerov>
  beamZero();
   d41c6:	f7ff ffc7 	bl	d4158 <_Z8beamZerov>
  beamOne();
   d41ca:	f7ff ffdd 	bl	d4188 <_Z7beamOnev>
  beamOne();
   d41ce:	f7ff ffdb 	bl	d4188 <_Z7beamOnev>
  beamZero();
   d41d2:	f7ff ffc1 	bl	d4158 <_Z8beamZerov>
  beamOne();

}
   d41d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  beamZero();
  beamZero();
  beamOne();
  beamOne();
  beamZero();
  beamOne();
   d41da:	f7ff bfd5 	b.w	d4188 <_Z7beamOnev>

000d41de <_ZN5Print6printfIIEEEjPKcDpT_>:
   d41de:	460a      	mov	r2, r1
   d41e0:	2100      	movs	r1, #0
   d41e2:	f002 b806 	b.w	d61f2 <_ZN5Print11printf_implEbPKcz>
	...

000d41e8 <setup>:
byte data[8];
int i;
int n;


void setup() {
   d41e8:	b510      	push	{r4, lr}

  Serial.begin(9600);
   d41ea:	f002 fbc5 	bl	d6978 <_Z16_fetch_usbserialv>
   d41ee:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41f2:	f002 fbb5 	bl	d6960 <_ZN9USBSerial5beginEl>

  bme.begin(0x76);
   d41f6:	2176      	movs	r1, #118	; 0x76
   d41f8:	482d      	ldr	r0, [pc, #180]	; (d42b0 <setup+0xc8>)
  pinMode(buttonPin, INPUT_PULLDOWN);
  pinMode(extraButtonPin, INPUT_PULLDOWN);
  pinMode(A1, OUTPUT); //used for testing 
  pinMode(D7, OUTPUT); //used for testing
  
  button1.attachClick(click1);
   d41fa:	4c2e      	ldr	r4, [pc, #184]	; (d42b4 <setup+0xcc>)

void setup() {

  Serial.begin(9600);

  bme.begin(0x76);
   d41fc:	f000 fccc 	bl	d4b98 <_ZN15Adafruit_BME2805beginEh>

  pinMode(laserPin, OUTPUT);
   d4200:	2101      	movs	r1, #1
   d4202:	200e      	movs	r0, #14
   d4204:	f002 fd14 	bl	d6c30 <pinMode>
  pinMode(buttonPin, INPUT_PULLDOWN);
   d4208:	2103      	movs	r1, #3
   d420a:	2005      	movs	r0, #5
   d420c:	f002 fd10 	bl	d6c30 <pinMode>
  pinMode(extraButtonPin, INPUT_PULLDOWN);
   d4210:	2103      	movs	r1, #3
   d4212:	2006      	movs	r0, #6
   d4214:	f002 fd0c 	bl	d6c30 <pinMode>
  pinMode(A1, OUTPUT); //used for testing 
   d4218:	2101      	movs	r1, #1
   d421a:	2012      	movs	r0, #18
   d421c:	f002 fd08 	bl	d6c30 <pinMode>
  pinMode(D7, OUTPUT); //used for testing
   d4220:	2101      	movs	r1, #1
   d4222:	2007      	movs	r0, #7
   d4224:	f002 fd04 	bl	d6c30 <pinMode>
  
  button1.attachClick(click1);
   d4228:	4620      	mov	r0, r4
   d422a:	4923      	ldr	r1, [pc, #140]	; (d42b8 <setup+0xd0>)
   d422c:	f001 fa33 	bl	d5696 <_ZN9OneButton11attachClickEPFvvE>
  button1.attachLongPressStart(longPressStart1);
   d4230:	4620      	mov	r0, r4
   d4232:	4922      	ldr	r1, [pc, #136]	; (d42bc <setup+0xd4>)
   d4234:	f001 fa31 	bl	d569a <_ZN9OneButton20attachLongPressStartEPFvvE>
  button1.attachLongPressStop(longPressStop1);
   d4238:	4620      	mov	r0, r4
   d423a:	4921      	ldr	r1, [pc, #132]	; (d42c0 <setup+0xd8>)
   d423c:	f001 fa2f 	bl	d569e <_ZN9OneButton19attachLongPressStopEPFvvE>
  button1.setClickTicks(250);
   d4240:	4620      	mov	r0, r4

  button2.attachClick(click2);
   d4242:	4c20      	ldr	r4, [pc, #128]	; (d42c4 <setup+0xdc>)
  pinMode(D7, OUTPUT); //used for testing
  
  button1.attachClick(click1);
  button1.attachLongPressStart(longPressStart1);
  button1.attachLongPressStop(longPressStop1);
  button1.setClickTicks(250);
   d4244:	21fa      	movs	r1, #250	; 0xfa
   d4246:	f001 fa24 	bl	d5692 <_ZN9OneButton13setClickTicksEi>

  button2.attachClick(click2);
   d424a:	4620      	mov	r0, r4
   d424c:	491e      	ldr	r1, [pc, #120]	; (d42c8 <setup+0xe0>)
   d424e:	f001 fa22 	bl	d5696 <_ZN9OneButton11attachClickEPFvvE>
  button2.setClickTicks(250);
   d4252:	4620      	mov	r0, r4

  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d4254:	4c1d      	ldr	r4, [pc, #116]	; (d42cc <setup+0xe4>)
  button1.attachLongPressStart(longPressStart1);
  button1.attachLongPressStop(longPressStop1);
  button1.setClickTicks(250);

  button2.attachClick(click2);
  button2.setClickTicks(250);
   d4256:	21fa      	movs	r1, #250	; 0xfa
   d4258:	f001 fa1b 	bl	d5692 <_ZN9OneButton13setClickTicksEi>

  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d425c:	223c      	movs	r2, #60	; 0x3c
   d425e:	2102      	movs	r1, #2
   d4260:	4620      	mov	r0, r4
   d4262:	f001 f897 	bl	d5394 <_ZN16Adafruit_SSD13065beginEhh>
  display.display();
   d4266:	4620      	mov	r0, r4
   d4268:	f001 f966 	bl	d5538 <_ZN16Adafruit_SSD13067displayEv>

  display.clearDisplay();
   d426c:	4620      	mov	r0, r4
   d426e:	f001 f841 	bl	d52f4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  // display.setRotation(1);
  display.setTextSize(2);
   d4272:	4620      	mov	r0, r4
   d4274:	2102      	movs	r1, #2
   d4276:	f000 fe55 	bl	d4f24 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   d427a:	2101      	movs	r1, #1
   d427c:	4620      	mov	r0, r4
   d427e:	f000 fe56 	bl	d4f2e <_ZN12Adafruit_GFX12setTextColorEt>

  delay(1000);
   d4282:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4286:	f001 fc85 	bl	d5b94 <delay>
  display.printf("SYSTEM\nREADY...\n");
   d428a:	4911      	ldr	r1, [pc, #68]	; (d42d0 <setup+0xe8>)
   d428c:	4620      	mov	r0, r4
   d428e:	f7ff ffa6 	bl	d41de <_ZN5Print6printfIIEEEjPKcDpT_>
  display.display();
   d4292:	4620      	mov	r0, r4
   d4294:	f001 f950 	bl	d5538 <_ZN16Adafruit_SSD13067displayEv>
  Serial.printf("System Ready...\n");
   d4298:	f002 fb6e 	bl	d6978 <_Z16_fetch_usbserialv>
   d429c:	490d      	ldr	r1, [pc, #52]	; (d42d4 <setup+0xec>)
   d429e:	f7ff ff9e 	bl	d41de <_ZN5Print6printfIIEEEjPKcDpT_>
  delay(3000);
   d42a2:	f640 30b8 	movw	r0, #3000	; 0xbb8


}
   d42a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  delay(1000);
  display.printf("SYSTEM\nREADY...\n");
  display.display();
  Serial.printf("System Ready...\n");
  delay(3000);
   d42aa:	f001 bc73 	b.w	d5b94 <delay>
   d42ae:	bf00      	nop
   d42b0:	2003e384 	.word	0x2003e384
   d42b4:	2003e274 	.word	0x2003e274
   d42b8:	000d40c5 	.word	0x000d40c5
   d42bc:	000d4105 	.word	0x000d4105
   d42c0:	000d40e9 	.word	0x000d40e9
   d42c4:	2003e2dc 	.word	0x2003e2dc
   d42c8:	000d40d5 	.word	0x000d40d5
   d42cc:	2003e34c 	.word	0x2003e34c
   d42d0:	000d7e06 	.word	0x000d7e06
   d42d4:	000d7e17 	.word	0x000d7e17

000d42d8 <_Z9sendAsciiPh>:
    sendAscii(data);
  }
  sendReturn();
}

void sendAscii(byte send_array[8]){
   d42d8:	b538      	push	{r3, r4, r5, lr}
  for(i = 0; i < 8; i++){ 
   d42da:	4c0e      	ldr	r4, [pc, #56]	; (d4314 <_Z9sendAsciiPh+0x3c>)
    sendAscii(data);
  }
  sendReturn();
}

void sendAscii(byte send_array[8]){
   d42dc:	4605      	mov	r5, r0
  for(i = 0; i < 8; i++){ 
   d42de:	2300      	movs	r3, #0
   d42e0:	6023      	str	r3, [r4, #0]
   d42e2:	6823      	ldr	r3, [r4, #0]
   d42e4:	2b07      	cmp	r3, #7
   d42e6:	dc13      	bgt.n	d4310 <_Z9sendAsciiPh+0x38>

      if(send_array[i] == 0){ //laser 
   d42e8:	5ceb      	ldrb	r3, [r5, r3]
   d42ea:	b92b      	cbnz	r3, d42f8 <_Z9sendAsciiPh+0x20>
      beamZero(); 
   d42ec:	f7ff ff34 	bl	d4158 <_Z8beamZerov>
      //Serial.printf("Zero ");
      Serial.printf("0");
   d42f0:	f002 fb42 	bl	d6978 <_Z16_fetch_usbserialv>
   d42f4:	4908      	ldr	r1, [pc, #32]	; (d4318 <_Z9sendAsciiPh+0x40>)
   d42f6:	e006      	b.n	d4306 <_Z9sendAsciiPh+0x2e>
      }
      else if(send_array[i] == 1){
   d42f8:	2b01      	cmp	r3, #1
   d42fa:	d106      	bne.n	d430a <_Z9sendAsciiPh+0x32>
      beamOne();
   d42fc:	f7ff ff44 	bl	d4188 <_Z7beamOnev>
      //Serial.printf("One ");
      Serial.printf("1");
   d4300:	f002 fb3a 	bl	d6978 <_Z16_fetch_usbserialv>
   d4304:	4905      	ldr	r1, [pc, #20]	; (d431c <_Z9sendAsciiPh+0x44>)
   d4306:	f7ff ff6a 	bl	d41de <_ZN5Print6printfIIEEEjPKcDpT_>
  }
  sendReturn();
}

void sendAscii(byte send_array[8]){
  for(i = 0; i < 8; i++){ 
   d430a:	6823      	ldr	r3, [r4, #0]
   d430c:	3301      	adds	r3, #1
   d430e:	e7e7      	b.n	d42e0 <_Z9sendAsciiPh+0x8>
   d4310:	bd38      	pop	{r3, r4, r5, pc}
   d4312:	bf00      	nop
   d4314:	2003e378 	.word	0x2003e378
   d4318:	000d7e28 	.word	0x000d7e28
   d431c:	000d84ba 	.word	0x000d84ba

000d4320 <loop>:
  delay(3000);


}

void loop() {
   d4320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  temp = String(bme.readTemperature());
   d4324:	483c      	ldr	r0, [pc, #240]	; (d4418 <loop+0xf8>)

  temp.toCharArray(temp_array, 7);
  Serial.printf("Temperature: %.2f\n", realTemp);
  for(n = 0; n < 5; n++){
    for(i = 0; i < 8; i++){
      data[i] = temp_array[n] >> i & 0x01;
   d4326:	4e3d      	ldr	r6, [pc, #244]	; (d441c <loop+0xfc>)
  delay(3000);


}

void loop() {
   d4328:	b08a      	sub	sp, #40	; 0x28

  temp = String(bme.readTemperature());
   d432a:	f000 f9e3 	bl	d46f4 <_ZN15Adafruit_BME28015readTemperatureEv>
   d432e:	2106      	movs	r1, #6
   d4330:	a806      	add	r0, sp, #24
   d4332:	f002 f9e7 	bl	d6704 <_ZN6StringC1Efi>
   d4336:	a906      	add	r1, sp, #24
   d4338:	4839      	ldr	r0, [pc, #228]	; (d4420 <loop+0x100>)
   d433a:	f002 f9ca 	bl	d66d2 <_ZN6StringaSEOS_>
   d433e:	a806      	add	r0, sp, #24
   d4340:	f002 f936 	bl	d65b0 <_ZN6StringD1Ev>
  float realTemp = bme.readTemperature();
   d4344:	4834      	ldr	r0, [pc, #208]	; (d4418 <loop+0xf8>)
   d4346:	f000 f9d5 	bl	d46f4 <_ZN15Adafruit_BME28015readTemperatureEv>
  display.clearDisplay();
   d434a:	4836      	ldr	r0, [pc, #216]	; (d4424 <loop+0x104>)
}

void loop() {

  temp = String(bme.readTemperature());
  float realTemp = bme.readTemperature();
   d434c:	ed8d 0a05 	vstr	s0, [sp, #20]
  display.clearDisplay();
   d4350:	f000 ffd0 	bl	d52f4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setCursor(0,0);
   d4354:	2200      	movs	r2, #0
   d4356:	4611      	mov	r1, r2
   d4358:	4832      	ldr	r0, [pc, #200]	; (d4424 <loop+0x104>)
   d435a:	f000 fde0 	bl	d4f1e <_ZN12Adafruit_GFX9setCursorEss>
  display.display();
   d435e:	4831      	ldr	r0, [pc, #196]	; (d4424 <loop+0x104>)
   d4360:	f001 f8ea 	bl	d5538 <_ZN16Adafruit_SSD13067displayEv>
   d4364:	ed9d 0a05 	vldr	s0, [sp, #20]
   d4368:	ee10 0a10 	vmov	r0, s0
   d436c:	f002 fff4 	bl	d7358 <__aeabi_f2d>
   d4370:	23f7      	movs	r3, #247	; 0xf7
   d4372:	4604      	mov	r4, r0
   d4374:	460d      	mov	r5, r1
   d4376:	9302      	str	r3, [sp, #8]
   d4378:	e9cd 4500 	strd	r4, r5, [sp]
   d437c:	4a2a      	ldr	r2, [pc, #168]	; (d4428 <loop+0x108>)
   d437e:	4829      	ldr	r0, [pc, #164]	; (d4424 <loop+0x104>)
   d4380:	2100      	movs	r1, #0
   d4382:	f001 ff36 	bl	d61f2 <_ZN5Print11printf_implEbPKcz>
  display.printf("SENDING\nDATA:\n%.2f%cC",realTemp, char(247));
  display.display();
   d4386:	4827      	ldr	r0, [pc, #156]	; (d4424 <loop+0x104>)
   d4388:	f001 f8d6 	bl	d5538 <_ZN16Adafruit_SSD13067displayEv>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d438c:	2300      	movs	r3, #0
   d438e:	2207      	movs	r2, #7
   d4390:	4926      	ldr	r1, [pc, #152]	; (d442c <loop+0x10c>)
   d4392:	4823      	ldr	r0, [pc, #140]	; (d4420 <loop+0x100>)
   d4394:	f002 f9d0 	bl	d6738 <_ZNK6String8getBytesEPhjj>

  temp.toCharArray(temp_array, 7);
  Serial.printf("Temperature: %.2f\n", realTemp);
   d4398:	f002 faee 	bl	d6978 <_Z16_fetch_usbserialv>
   d439c:	e9cd 4500 	strd	r4, r5, [sp]
   d43a0:	4a23      	ldr	r2, [pc, #140]	; (d4430 <loop+0x110>)
  for(n = 0; n < 5; n++){
   d43a2:	4c24      	ldr	r4, [pc, #144]	; (d4434 <loop+0x114>)
    for(i = 0; i < 8; i++){
   d43a4:	4d24      	ldr	r5, [pc, #144]	; (d4438 <loop+0x118>)
   d43a6:	2100      	movs	r1, #0
   d43a8:	f001 ff23 	bl	d61f2 <_ZN5Print11printf_implEbPKcz>
  display.printf("SENDING\nDATA:\n%.2f%cC",realTemp, char(247));
  display.display();

  temp.toCharArray(temp_array, 7);
  Serial.printf("Temperature: %.2f\n", realTemp);
  for(n = 0; n < 5; n++){
   d43ac:	2300      	movs	r3, #0
   d43ae:	6023      	str	r3, [r4, #0]
   d43b0:	462f      	mov	r7, r5
   d43b2:	6823      	ldr	r3, [r4, #0]
   d43b4:	2b04      	cmp	r3, #4
   d43b6:	dc29      	bgt.n	d440c <loop+0xec>
    for(i = 0; i < 8; i++){
   d43b8:	2300      	movs	r3, #0
      data[i] = temp_array[n] >> i & 0x01;
   d43ba:	f8df 8070 	ldr.w	r8, [pc, #112]	; d442c <loop+0x10c>
  display.display();

  temp.toCharArray(temp_array, 7);
  Serial.printf("Temperature: %.2f\n", realTemp);
  for(n = 0; n < 5; n++){
    for(i = 0; i < 8; i++){
   d43be:	602b      	str	r3, [r5, #0]
   d43c0:	683a      	ldr	r2, [r7, #0]
   d43c2:	2a07      	cmp	r2, #7
   d43c4:	dc1b      	bgt.n	d43fe <loop+0xde>
      data[i] = temp_array[n] >> i & 0x01;
   d43c6:	6823      	ldr	r3, [r4, #0]
   d43c8:	f818 3003 	ldrb.w	r3, [r8, r3]
   d43cc:	4113      	asrs	r3, r2
   d43ce:	f003 0301 	and.w	r3, r3, #1
   d43d2:	54b3      	strb	r3, [r6, r2]
      Serial.printf("temp_array: %x data: %i i: %i n: %i\n", temp_array[n], data[i], i, n);
   d43d4:	f002 fad0 	bl	d6978 <_Z16_fetch_usbserialv>
   d43d8:	682a      	ldr	r2, [r5, #0]
   d43da:	6821      	ldr	r1, [r4, #0]
   d43dc:	9201      	str	r2, [sp, #4]
   d43de:	5cb2      	ldrb	r2, [r6, r2]
   d43e0:	f818 3001 	ldrb.w	r3, [r8, r1]
   d43e4:	9102      	str	r1, [sp, #8]
   d43e6:	9200      	str	r2, [sp, #0]
   d43e8:	2100      	movs	r1, #0
   d43ea:	4a14      	ldr	r2, [pc, #80]	; (d443c <loop+0x11c>)
   d43ec:	f001 ff01 	bl	d61f2 <_ZN5Print11printf_implEbPKcz>
      delay(10);
   d43f0:	200a      	movs	r0, #10
   d43f2:	f001 fbcf 	bl	d5b94 <delay>
  display.display();

  temp.toCharArray(temp_array, 7);
  Serial.printf("Temperature: %.2f\n", realTemp);
  for(n = 0; n < 5; n++){
    for(i = 0; i < 8; i++){
   d43f6:	682b      	ldr	r3, [r5, #0]
   d43f8:	3301      	adds	r3, #1
   d43fa:	602b      	str	r3, [r5, #0]
   d43fc:	e7e0      	b.n	d43c0 <loop+0xa0>
      data[i] = temp_array[n] >> i & 0x01;
      Serial.printf("temp_array: %x data: %i i: %i n: %i\n", temp_array[n], data[i], i, n);
      delay(10);
    }
    sendAscii(data);
   d43fe:	4807      	ldr	r0, [pc, #28]	; (d441c <loop+0xfc>)
   d4400:	f7ff ff6a 	bl	d42d8 <_Z9sendAsciiPh>
  display.printf("SENDING\nDATA:\n%.2f%cC",realTemp, char(247));
  display.display();

  temp.toCharArray(temp_array, 7);
  Serial.printf("Temperature: %.2f\n", realTemp);
  for(n = 0; n < 5; n++){
   d4404:	6823      	ldr	r3, [r4, #0]
   d4406:	3301      	adds	r3, #1
   d4408:	6023      	str	r3, [r4, #0]
   d440a:	e7d2      	b.n	d43b2 <loop+0x92>
      Serial.printf("temp_array: %x data: %i i: %i n: %i\n", temp_array[n], data[i], i, n);
      delay(10);
    }
    sendAscii(data);
  }
  sendReturn();
   d440c:	f7ff fed4 	bl	d41b8 <_Z10sendReturnv>
}
   d4410:	b00a      	add	sp, #40	; 0x28
   d4412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4416:	bf00      	nop
   d4418:	2003e384 	.word	0x2003e384
   d441c:	2003e370 	.word	0x2003e370
   d4420:	2003e258 	.word	0x2003e258
   d4424:	2003e34c 	.word	0x2003e34c
   d4428:	000d7e2a 	.word	0x000d7e2a
   d442c:	2003e344 	.word	0x2003e344
   d4430:	000d7e40 	.word	0x000d7e40
   d4434:	2003e37c 	.word	0x2003e37c
   d4438:	2003e378 	.word	0x2003e378
   d443c:	000d7e53 	.word	0x000d7e53

000d4440 <_ZN16Adafruit_SSD1306D0Ev>:
   d4440:	b510      	push	{r4, lr}
   d4442:	2124      	movs	r1, #36	; 0x24
   d4444:	4604      	mov	r4, r0
   d4446:	f002 fcbe 	bl	d6dc6 <_ZdlPvj>
   d444a:	4620      	mov	r0, r4
   d444c:	bd10      	pop	{r4, pc}
	...

000d4450 <_GLOBAL__sub_I_SystemMode>:
  //Serial.printf("ONE\n");
  delay(oneTime);
  digitalWrite(laserPin, LOW);
  delay(offDelay);

   d4450:	b570      	push	{r4, r5, r6, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4452:	4d1e      	ldr	r5, [pc, #120]	; (d44cc <_GLOBAL__sub_I_SystemMode+0x7c>)
 * Author: Christian Chavez
 * Date: 11-23-2020
 */


SYSTEM_MODE(SEMI_AUTOMATIC);
   d4454:	4e1e      	ldr	r6, [pc, #120]	; (d44d0 <_GLOBAL__sub_I_SystemMode+0x80>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4456:	f001 f971 	bl	d573c <HAL_Pin_Map>
   d445a:	2400      	movs	r4, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d445c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4460:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4462:	602c      	str	r4, [r5, #0]
   d4464:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4466:	71ac      	strb	r4, [r5, #6]
   d4468:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d446a:	2002      	movs	r0, #2
   d446c:	f001 faee 	bl	d5a4c <set_system_mode>
   d4470:	4632      	mov	r2, r6
   d4472:	4918      	ldr	r1, [pc, #96]	; (d44d4 <_GLOBAL__sub_I_SystemMode+0x84>)
   d4474:	4628      	mov	r0, r5
#include <Adafruit_BME280.h>
#include <Adafruit_SSD1306.h>

#define OLED_RESET D4

Adafruit_SSD1306 display(OLED_RESET);
   d4476:	4d18      	ldr	r5, [pc, #96]	; (d44d8 <_GLOBAL__sub_I_SystemMode+0x88>)
 * Author: Christian Chavez
 * Date: 11-23-2020
 */


SYSTEM_MODE(SEMI_AUTOMATIC);
   d4478:	f002 fca0 	bl	d6dbc <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
   d447c:	4621      	mov	r1, r4
   d447e:	2001      	movs	r0, #1
   d4480:	f001 faf4 	bl	d5a6c <system_thread_set_state>
#include <Adafruit_BME280.h>
#include <Adafruit_SSD1306.h>

#define OLED_RESET D4

Adafruit_SSD1306 display(OLED_RESET);
   d4484:	2104      	movs	r1, #4
   d4486:	4628      	mov	r0, r5
   d4488:	f000 ff1e 	bl	d52c8 <_ZN16Adafruit_SSD1306C1Ea>
   d448c:	4632      	mov	r2, r6
   d448e:	4913      	ldr	r1, [pc, #76]	; (d44dc <_GLOBAL__sub_I_SystemMode+0x8c>)
   d4490:	4628      	mov	r0, r5
   d4492:	f002 fc93 	bl	d6dbc <__aeabi_atexit>

const int laserPin = A5;
const int buttonPin = D5;
const int extraButtonPin = D6;

OneButton button1(buttonPin, false, false);
   d4496:	4623      	mov	r3, r4
   d4498:	4622      	mov	r2, r4
   d449a:	2105      	movs	r1, #5
   d449c:	4810      	ldr	r0, [pc, #64]	; (d44e0 <_GLOBAL__sub_I_SystemMode+0x90>)
   d449e:	f001 f8cb 	bl	d5638 <_ZN9OneButtonC1Eibb>
OneButton button2(extraButtonPin, false, false);
   d44a2:	4622      	mov	r2, r4
   d44a4:	4623      	mov	r3, r4
   d44a6:	2106      	movs	r1, #6
unsigned int oneLastTime;

bool buttonState;
bool extraButtonState;

String temp;
   d44a8:	4c0e      	ldr	r4, [pc, #56]	; (d44e4 <_GLOBAL__sub_I_SystemMode+0x94>)
const int laserPin = A5;
const int buttonPin = D5;
const int extraButtonPin = D6;

OneButton button1(buttonPin, false, false);
OneButton button2(extraButtonPin, false, false);
   d44aa:	480f      	ldr	r0, [pc, #60]	; (d44e8 <_GLOBAL__sub_I_SystemMode+0x98>)
   d44ac:	f001 f8c4 	bl	d5638 <_ZN9OneButtonC1Eibb>
Adafruit_BME280 bme;
   d44b0:	480e      	ldr	r0, [pc, #56]	; (d44ec <_GLOBAL__sub_I_SystemMode+0x9c>)
   d44b2:	f000 f84d 	bl	d4550 <_ZN15Adafruit_BME280C1Ev>
unsigned int oneLastTime;

bool buttonState;
bool extraButtonState;

String temp;
   d44b6:	490e      	ldr	r1, [pc, #56]	; (d44f0 <_GLOBAL__sub_I_SystemMode+0xa0>)
   d44b8:	4620      	mov	r0, r4
   d44ba:	f002 f8c0 	bl	d663e <_ZN6StringC1EPK19__FlashStringHelper>
   d44be:	4632      	mov	r2, r6
   d44c0:	4620      	mov	r0, r4
   d44c2:	490c      	ldr	r1, [pc, #48]	; (d44f4 <_GLOBAL__sub_I_SystemMode+0xa4>)
  //Serial.printf("ONE\n");
  delay(oneTime);
  digitalWrite(laserPin, LOW);
  delay(offDelay);

   d44c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
unsigned int oneLastTime;

bool buttonState;
bool extraButtonState;

String temp;
   d44c8:	f002 bc78 	b.w	d6dbc <__aeabi_atexit>
   d44cc:	2003e268 	.word	0x2003e268
   d44d0:	2003e254 	.word	0x2003e254
   d44d4:	000d4149 	.word	0x000d4149
   d44d8:	2003e34c 	.word	0x2003e34c
   d44dc:	000d40e5 	.word	0x000d40e5
   d44e0:	2003e274 	.word	0x2003e274
   d44e4:	2003e258 	.word	0x2003e258
   d44e8:	2003e2dc 	.word	0x2003e2dc
   d44ec:	2003e384 	.word	0x2003e384
   d44f0:	000d854f 	.word	0x000d854f
   d44f4:	000d65b1 	.word	0x000d65b1

000d44f8 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d44f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d44fa:	4602      	mov	r2, r0
   d44fc:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d44fe:	7913      	ldrb	r3, [r2, #4]
   d4500:	6895      	ldr	r5, [r2, #8]
   d4502:	b133      	cbz	r3, d4512 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d4504:	b93d      	cbnz	r5, d4516 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d4506:	490c      	ldr	r1, [pc, #48]	; (d4538 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d4508:	b004      	add	sp, #16
   d450a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d450e:	f001 be33 	b.w	d6178 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d4512:	4b0a      	ldr	r3, [pc, #40]	; (d453c <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4514:	e000      	b.n	d4518 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d4516:	4b0a      	ldr	r3, [pc, #40]	; (d4540 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d4518:	7b16      	ldrb	r6, [r2, #12]
   d451a:	4c0a      	ldr	r4, [pc, #40]	; (d4544 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d451c:	490a      	ldr	r1, [pc, #40]	; (d4548 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
   d451e:	7b52      	ldrb	r2, [r2, #13]
   d4520:	9202      	str	r2, [sp, #8]
   d4522:	2e01      	cmp	r6, #1
   d4524:	bf08      	it	eq
   d4526:	4621      	moveq	r1, r4
   d4528:	9101      	str	r1, [sp, #4]
   d452a:	9500      	str	r5, [sp, #0]
   d452c:	4a07      	ldr	r2, [pc, #28]	; (d454c <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d452e:	2100      	movs	r1, #0
   d4530:	f001 fe5f 	bl	d61f2 <_ZN5Print11printf_implEbPKcz>
  }
   d4534:	b004      	add	sp, #16
   d4536:	bd70      	pop	{r4, r5, r6, pc}
   d4538:	000d7e95 	.word	0x000d7e95
   d453c:	000d854f 	.word	0x000d854f
   d4540:	000d7e84 	.word	0x000d7e84
   d4544:	000d7e8d 	.word	0x000d7e8d
   d4548:	000d7e91 	.word	0x000d7e91
   d454c:	000d7eab 	.word	0x000d7eab

000d4550 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d4550:	22ff      	movs	r2, #255	; 0xff
   d4552:	7402      	strb	r2, [r0, #16]
   d4554:	7442      	strb	r2, [r0, #17]
   d4556:	7482      	strb	r2, [r0, #18]
   d4558:	74c2      	strb	r2, [r0, #19]
{ }
   d455a:	4770      	bx	lr

000d455c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d455c:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d455e:	4d09      	ldr	r5, [pc, #36]	; (d4584 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d4560:	6829      	ldr	r1, [r5, #0]
   d4562:	f011 0401 	ands.w	r4, r1, #1
   d4566:	d10a      	bne.n	d457e <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4568:	4628      	mov	r0, r5
   d456a:	f7ff fda3 	bl	d40b4 <__cxa_guard_acquire>
   d456e:	b130      	cbz	r0, d457e <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4570:	4621      	mov	r1, r4
   d4572:	4805      	ldr	r0, [pc, #20]	; (d4588 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4574:	f001 fe92 	bl	d629c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4578:	4628      	mov	r0, r5
   d457a:	f7ff fda0 	bl	d40be <__cxa_guard_release>
        return instance;
    }
   d457e:	4802      	ldr	r0, [pc, #8]	; (d4588 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4580:	bd38      	pop	{r3, r4, r5, pc}
   d4582:	bf00      	nop
   d4584:	2003e3cc 	.word	0x2003e3cc
   d4588:	2003e3d0 	.word	0x2003e3d0

000d458c <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d458c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d4590:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4594:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4596:	4605      	mov	r5, r0
   d4598:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
   d459a:	d106      	bne.n	d45aa <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d459c:	f7ff ffde 	bl	d455c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d45a0:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d45a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d45a6:	f001 bf95 	b.w	d64d4 <_ZN8SPIClass8transferEh>
   d45aa:	2607      	movs	r6, #7
   d45ac:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
   d45ae:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
   d45b2:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d45b6:	2100      	movs	r1, #0
   d45b8:	b280      	uxth	r0, r0
   d45ba:	f002 fb4a 	bl	d6c52 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d45be:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d45c2:	fa08 f106 	lsl.w	r1, r8, r6
   d45c6:	4039      	ands	r1, r7
   d45c8:	b280      	uxth	r0, r0
   d45ca:	f002 fb42 	bl	d6c52 <digitalWrite>
        digitalWrite(_sck, HIGH);
   d45ce:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d45d2:	2101      	movs	r1, #1
   d45d4:	b280      	uxth	r0, r0
   d45d6:	f002 fb3c 	bl	d6c52 <digitalWrite>
        if (digitalRead(_miso))
   d45da:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d45de:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d45e0:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d45e2:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d45e4:	f002 fb4e 	bl	d6c84 <digitalRead>
   d45e8:	b108      	cbz	r0, d45ee <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d45ea:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
   d45ee:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
   d45f2:	d2de      	bcs.n	d45b2 <_ZN15Adafruit_BME2807spixferEh+0x26>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d45f4:	4620      	mov	r0, r4
   d45f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d45fa <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   d45fa:	b508      	push	{r3, lr}
        instance().endTransaction();
   d45fc:	f7ff ffae 	bl	d455c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
    }
   d4600:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
        instance().endTransaction();
   d4604:	f001 be87 	b.w	d6316 <_ZN8SPIClass14endTransactionEv>

000d4608 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>:
        instance().usingInterrupt(arg);
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
   d4608:	b510      	push	{r4, lr}
   d460a:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d460c:	f7ff ffa6 	bl	d455c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4610:	4621      	mov	r1, r4
    }
   d4612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
   d4616:	f001 be97 	b.w	d6348 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
	...

000d461c <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d461c:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
   d461e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4622:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4624:	b085      	sub	sp, #20
   d4626:	4604      	mov	r4, r0
   d4628:	460d      	mov	r5, r1
    uint32_t value;

    if (_cs == -1) {
   d462a:	d121      	bne.n	d4670 <_ZN15Adafruit_BME2806read24Eh+0x54>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d462c:	7901      	ldrb	r1, [r0, #4]
   d462e:	6800      	ldr	r0, [r0, #0]
   d4630:	f001 fb8d 	bl	d5d4e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4634:	6820      	ldr	r0, [r4, #0]
   d4636:	6803      	ldr	r3, [r0, #0]
   d4638:	4629      	mov	r1, r5
   d463a:	689b      	ldr	r3, [r3, #8]
   d463c:	4798      	blx	r3
        _wire -> endTransmission();
   d463e:	6820      	ldr	r0, [r4, #0]
   d4640:	f001 fb90 	bl	d5d64 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d4644:	2203      	movs	r2, #3
   d4646:	7921      	ldrb	r1, [r4, #4]
   d4648:	6820      	ldr	r0, [r4, #0]
   d464a:	f001 fb7d 	bl	d5d48 <_ZN7TwoWire11requestFromEhj>

        value = _wire -> read();
   d464e:	6820      	ldr	r0, [r4, #0]
   d4650:	6803      	ldr	r3, [r0, #0]
   d4652:	695b      	ldr	r3, [r3, #20]
   d4654:	4798      	blx	r3
        value <<= 8;
   d4656:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4658:	6820      	ldr	r0, [r4, #0]
   d465a:	6803      	ldr	r3, [r0, #0]
   d465c:	695b      	ldr	r3, [r3, #20]
   d465e:	4798      	blx	r3
   d4660:	4328      	orrs	r0, r5
        value <<= 8;
   d4662:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4664:	6820      	ldr	r0, [r4, #0]
   d4666:	6803      	ldr	r3, [r0, #0]
   d4668:	695b      	ldr	r3, [r3, #20]
   d466a:	4798      	blx	r3
   d466c:	4305      	orrs	r5, r0
   d466e:	e039      	b.n	d46e4 <_ZN15Adafruit_BME2806read24Eh+0xc8>
    } else {
        if (_sck == -1)
   d4670:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4674:	3301      	adds	r3, #1
   d4676:	d10e      	bne.n	d4696 <_ZN15Adafruit_BME2806read24Eh+0x7a>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d4678:	4b1c      	ldr	r3, [pc, #112]	; (d46ec <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d467a:	4a1d      	ldr	r2, [pc, #116]	; (d46f0 <_ZN15Adafruit_BME2806read24Eh+0xd4>)
   d467c:	9300      	str	r3, [sp, #0]
   d467e:	9202      	str	r2, [sp, #8]
   d4680:	2300      	movs	r3, #0
   d4682:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4684:	4668      	mov	r0, sp
   d4686:	f88d 3004 	strb.w	r3, [sp, #4]
   d468a:	f88d 200c 	strb.w	r2, [sp, #12]
   d468e:	f88d 300d 	strb.w	r3, [sp, #13]
   d4692:	f7ff ffb9 	bl	d4608 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4696:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d469a:	2100      	movs	r1, #0
   d469c:	b280      	uxth	r0, r0
   d469e:	f002 fad8 	bl	d6c52 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d46a2:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d46a6:	4620      	mov	r0, r4
   d46a8:	f7ff ff70 	bl	d458c <_ZN15Adafruit_BME2807spixferEh>

        value = spixfer(0);
   d46ac:	2100      	movs	r1, #0
   d46ae:	4620      	mov	r0, r4
   d46b0:	f7ff ff6c 	bl	d458c <_ZN15Adafruit_BME2807spixferEh>
        value <<= 8;
        value |= spixfer(0);
   d46b4:	2100      	movs	r1, #0
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
        digitalWrite(_cs, LOW);
        spixfer(reg | 0x80); // read, bit 7 high

        value = spixfer(0);
        value <<= 8;
   d46b6:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d46b8:	4620      	mov	r0, r4
   d46ba:	f7ff ff67 	bl	d458c <_ZN15Adafruit_BME2807spixferEh>
   d46be:	4328      	orrs	r0, r5
        value <<= 8;
   d46c0:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d46c2:	2100      	movs	r1, #0
   d46c4:	4620      	mov	r0, r4
   d46c6:	f7ff ff61 	bl	d458c <_ZN15Adafruit_BME2807spixferEh>
   d46ca:	4305      	orrs	r5, r0

        digitalWrite(_cs, HIGH);
   d46cc:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d46d0:	2101      	movs	r1, #1
   d46d2:	b280      	uxth	r0, r0
   d46d4:	f002 fabd 	bl	d6c52 <digitalWrite>
        if (_sck == -1)
   d46d8:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d46dc:	3301      	adds	r3, #1
   d46de:	d101      	bne.n	d46e4 <_ZN15Adafruit_BME2806read24Eh+0xc8>
            SPI.endTransaction(); // release the SPI bus
   d46e0:	f7ff ff8b 	bl	d45fa <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d46e4:	4628      	mov	r0, r5
   d46e6:	b005      	add	sp, #20
   d46e8:	bd30      	pop	{r4, r5, pc}
   d46ea:	bf00      	nop
   d46ec:	000d7e80 	.word	0x000d7e80
   d46f0:	0007a120 	.word	0x0007a120

000d46f4 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d46f4:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d46f6:	21fa      	movs	r1, #250	; 0xfa
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d46f8:	4604      	mov	r4, r0
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d46fa:	f7ff ff8f 	bl	d461c <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d46fe:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d4702:	d01e      	beq.n	d4742 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d4704:	8aa2      	ldrh	r2, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d4706:	ed9f 7a10 	vldr	s14, [pc, #64]	; d4748 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
             
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d470a:	ebc2 2320 	rsb	r3, r2, r0, asr #8
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;
   d470e:	0052      	lsls	r2, r2, #1
   d4710:	ebc2 10e0 	rsb	r0, r2, r0, asr #7
   d4714:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
   d4718:	435b      	muls	r3, r3
   d471a:	4350      	muls	r0, r2
   d471c:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
   d4720:	131b      	asrs	r3, r3, #12
   d4722:	4353      	muls	r3, r2
   d4724:	139b      	asrs	r3, r3, #14
   d4726:	eb03 20e0 	add.w	r0, r3, r0, asr #11
   d472a:	60e0      	str	r0, [r4, #12]

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d472c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d4730:	3080      	adds	r0, #128	; 0x80
   d4732:	1200      	asrs	r0, r0, #8
   d4734:	ee07 0a90 	vmov	s15, r0
   d4738:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d473c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d4740:	bd10      	pop	{r4, pc}
{
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    if (adc_T == 0x800000) // value in case temp measurement was disabled
        return NAN;
   d4742:	ed9f 0a02 	vldr	s0, [pc, #8]	; d474c <_ZN15Adafruit_BME28015readTemperatureEv+0x58>

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
}
   d4746:	bd10      	pop	{r4, pc}
   d4748:	42c80000 	.word	0x42c80000
   d474c:	7fc00000 	.word	0x7fc00000

000d4750 <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4750:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d4752:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4756:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4758:	b085      	sub	sp, #20
   d475a:	4604      	mov	r4, r0
   d475c:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
   d475e:	d11d      	bne.n	d479c <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4760:	7901      	ldrb	r1, [r0, #4]
   d4762:	6800      	ldr	r0, [r0, #0]
   d4764:	f001 faf3 	bl	d5d4e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4768:	6820      	ldr	r0, [r4, #0]
   d476a:	6803      	ldr	r3, [r0, #0]
   d476c:	4629      	mov	r1, r5
   d476e:	689b      	ldr	r3, [r3, #8]
   d4770:	4798      	blx	r3
        _wire -> endTransmission();
   d4772:	6820      	ldr	r0, [r4, #0]
   d4774:	f001 faf6 	bl	d5d64 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d4778:	2202      	movs	r2, #2
   d477a:	7921      	ldrb	r1, [r4, #4]
   d477c:	6820      	ldr	r0, [r4, #0]
   d477e:	f001 fae3 	bl	d5d48 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d4782:	6820      	ldr	r0, [r4, #0]
   d4784:	6803      	ldr	r3, [r0, #0]
   d4786:	695b      	ldr	r3, [r3, #20]
   d4788:	4798      	blx	r3
   d478a:	4605      	mov	r5, r0
   d478c:	6820      	ldr	r0, [r4, #0]
   d478e:	6803      	ldr	r3, [r0, #0]
   d4790:	695b      	ldr	r3, [r3, #20]
   d4792:	4798      	blx	r3
   d4794:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4798:	b285      	uxth	r5, r0
   d479a:	e035      	b.n	d4808 <_ZN15Adafruit_BME2806read16Eh+0xb8>
    } else {
        if (_sck == -1)
   d479c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d47a0:	3301      	adds	r3, #1
   d47a2:	d10e      	bne.n	d47c2 <_ZN15Adafruit_BME2806read16Eh+0x72>
   d47a4:	4b1a      	ldr	r3, [pc, #104]	; (d4810 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d47a6:	4a1b      	ldr	r2, [pc, #108]	; (d4814 <_ZN15Adafruit_BME2806read16Eh+0xc4>)
   d47a8:	9300      	str	r3, [sp, #0]
   d47aa:	9202      	str	r2, [sp, #8]
   d47ac:	2300      	movs	r3, #0
   d47ae:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d47b0:	4668      	mov	r0, sp
   d47b2:	f88d 3004 	strb.w	r3, [sp, #4]
   d47b6:	f88d 200c 	strb.w	r2, [sp, #12]
   d47ba:	f88d 300d 	strb.w	r3, [sp, #13]
   d47be:	f7ff ff23 	bl	d4608 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d47c2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d47c6:	2100      	movs	r1, #0
   d47c8:	b280      	uxth	r0, r0
   d47ca:	f002 fa42 	bl	d6c52 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d47ce:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d47d2:	4620      	mov	r0, r4
   d47d4:	f7ff feda 	bl	d458c <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d47d8:	2100      	movs	r1, #0
   d47da:	4620      	mov	r0, r4
   d47dc:	f7ff fed6 	bl	d458c <_ZN15Adafruit_BME2807spixferEh>
   d47e0:	2100      	movs	r1, #0
   d47e2:	4605      	mov	r5, r0
   d47e4:	4620      	mov	r0, r4
   d47e6:	f7ff fed1 	bl	d458c <_ZN15Adafruit_BME2807spixferEh>
   d47ea:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d47ee:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d47f0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d47f4:	2101      	movs	r1, #1
   d47f6:	b280      	uxth	r0, r0
   d47f8:	f002 fa2b 	bl	d6c52 <digitalWrite>
        if (_sck == -1)
   d47fc:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4800:	3301      	adds	r3, #1
   d4802:	d101      	bne.n	d4808 <_ZN15Adafruit_BME2806read16Eh+0xb8>
            SPI.endTransaction(); // release the SPI bus
   d4804:	f7ff fef9 	bl	d45fa <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d4808:	4628      	mov	r0, r5
   d480a:	b005      	add	sp, #20
   d480c:	bd30      	pop	{r4, r5, pc}
   d480e:	bf00      	nop
   d4810:	000d7e80 	.word	0x000d7e80
   d4814:	0007a120 	.word	0x0007a120

000d4818 <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d4818:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d481a:	f7ff ff99 	bl	d4750 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d481e:	ba40      	rev16	r0, r0
}
   d4820:	b280      	uxth	r0, r0
   d4822:	bd08      	pop	{r3, pc}

000d4824 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4824:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   d4826:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d482a:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d482c:	b085      	sub	sp, #20
   d482e:	4604      	mov	r4, r0
   d4830:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
   d4832:	d116      	bne.n	d4862 <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4834:	7901      	ldrb	r1, [r0, #4]
   d4836:	6800      	ldr	r0, [r0, #0]
   d4838:	f001 fa89 	bl	d5d4e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d483c:	6820      	ldr	r0, [r4, #0]
   d483e:	6803      	ldr	r3, [r0, #0]
   d4840:	4629      	mov	r1, r5
   d4842:	689b      	ldr	r3, [r3, #8]
   d4844:	4798      	blx	r3
        _wire -> endTransmission();
   d4846:	6820      	ldr	r0, [r4, #0]
   d4848:	f001 fa8c 	bl	d5d64 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d484c:	2201      	movs	r2, #1
   d484e:	7921      	ldrb	r1, [r4, #4]
   d4850:	6820      	ldr	r0, [r4, #0]
   d4852:	f001 fa79 	bl	d5d48 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d4856:	6820      	ldr	r0, [r4, #0]
   d4858:	6803      	ldr	r3, [r0, #0]
   d485a:	695b      	ldr	r3, [r3, #20]
   d485c:	4798      	blx	r3
   d485e:	b2c5      	uxtb	r5, r0
   d4860:	e02e      	b.n	d48c0 <_ZN15Adafruit_BME2805read8Eh+0x9c>
    } else {
        if (_sck == -1)
   d4862:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4866:	3301      	adds	r3, #1
   d4868:	d10e      	bne.n	d4888 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d486a:	4b17      	ldr	r3, [pc, #92]	; (d48c8 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d486c:	4a17      	ldr	r2, [pc, #92]	; (d48cc <_ZN15Adafruit_BME2805read8Eh+0xa8>)
   d486e:	9300      	str	r3, [sp, #0]
   d4870:	9202      	str	r2, [sp, #8]
   d4872:	2300      	movs	r3, #0
   d4874:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4876:	4668      	mov	r0, sp
   d4878:	f88d 3004 	strb.w	r3, [sp, #4]
   d487c:	f88d 200c 	strb.w	r2, [sp, #12]
   d4880:	f88d 300d 	strb.w	r3, [sp, #13]
   d4884:	f7ff fec0 	bl	d4608 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4888:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d488c:	2100      	movs	r1, #0
   d488e:	b280      	uxth	r0, r0
   d4890:	f002 f9df 	bl	d6c52 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4894:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4898:	4620      	mov	r0, r4
   d489a:	f7ff fe77 	bl	d458c <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d489e:	2100      	movs	r1, #0
   d48a0:	4620      	mov	r0, r4
   d48a2:	f7ff fe73 	bl	d458c <_ZN15Adafruit_BME2807spixferEh>
   d48a6:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d48a8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d48ac:	2101      	movs	r1, #1
   d48ae:	b280      	uxth	r0, r0
   d48b0:	f002 f9cf 	bl	d6c52 <digitalWrite>
        if (_sck == -1)
   d48b4:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d48b8:	3301      	adds	r3, #1
   d48ba:	d101      	bne.n	d48c0 <_ZN15Adafruit_BME2805read8Eh+0x9c>
            SPI.endTransaction(); // release the SPI bus
   d48bc:	f7ff fe9d 	bl	d45fa <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
    return value;
}
   d48c0:	4628      	mov	r0, r5
   d48c2:	b005      	add	sp, #20
   d48c4:	bd30      	pop	{r4, r5, pc}
   d48c6:	bf00      	nop
   d48c8:	000d7e80 	.word	0x000d7e80
   d48cc:	0007a120 	.word	0x0007a120

000d48d0 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d48d0:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d48d2:	21f3      	movs	r1, #243	; 0xf3
   d48d4:	f7ff ffa6 	bl	d4824 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d48d8:	f000 0001 	and.w	r0, r0, #1
   d48dc:	bd08      	pop	{r3, pc}

000d48de <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d48de:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d48e0:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d48e2:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d48e4:	f7ff ff98 	bl	d4818 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d48e8:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d48ea:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d48ec:	4620      	mov	r0, r4
   d48ee:	f7ff ff93 	bl	d4818 <_ZN15Adafruit_BME2809read16_LEEh>
   d48f2:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d48f4:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d48f6:	4620      	mov	r0, r4
   d48f8:	f7ff ff8e 	bl	d4818 <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d48fc:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d48fe:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4900:	4620      	mov	r0, r4
   d4902:	f7ff ff89 	bl	d4818 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4906:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4908:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d490a:	4620      	mov	r0, r4
   d490c:	f7ff ff84 	bl	d4818 <_ZN15Adafruit_BME2809read16_LEEh>
   d4910:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d4912:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4914:	4620      	mov	r0, r4
   d4916:	f7ff ff7f 	bl	d4818 <_ZN15Adafruit_BME2809read16_LEEh>
   d491a:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d491c:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d491e:	4620      	mov	r0, r4
   d4920:	f7ff ff7a 	bl	d4818 <_ZN15Adafruit_BME2809read16_LEEh>
   d4924:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d4926:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4928:	4620      	mov	r0, r4
   d492a:	f7ff ff75 	bl	d4818 <_ZN15Adafruit_BME2809read16_LEEh>
   d492e:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d4930:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4932:	4620      	mov	r0, r4
   d4934:	f7ff ff70 	bl	d4818 <_ZN15Adafruit_BME2809read16_LEEh>
   d4938:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d493a:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d493c:	4620      	mov	r0, r4
   d493e:	f7ff ff6b 	bl	d4818 <_ZN15Adafruit_BME2809read16_LEEh>
   d4942:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d4944:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4946:	4620      	mov	r0, r4
   d4948:	f7ff ff66 	bl	d4818 <_ZN15Adafruit_BME2809read16_LEEh>
   d494c:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d494e:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4950:	4620      	mov	r0, r4
   d4952:	f7ff ff61 	bl	d4818 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4956:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d4958:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d495a:	4620      	mov	r0, r4
   d495c:	f7ff ff62 	bl	d4824 <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4960:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4962:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4966:	4620      	mov	r0, r4
   d4968:	f7ff ff56 	bl	d4818 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d496c:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d496e:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4970:	4620      	mov	r0, r4
   d4972:	f7ff ff57 	bl	d4824 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d4976:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4978:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d497c:	4620      	mov	r0, r4
   d497e:	f7ff ff51 	bl	d4824 <_ZN15Adafruit_BME2805read8Eh>
   d4982:	21e5      	movs	r1, #229	; 0xe5
   d4984:	4605      	mov	r5, r0
   d4986:	4620      	mov	r0, r4
   d4988:	f7ff ff4c 	bl	d4824 <_ZN15Adafruit_BME2805read8Eh>
   d498c:	f000 000f 	and.w	r0, r0, #15
   d4990:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d4994:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d4996:	21e6      	movs	r1, #230	; 0xe6
   d4998:	4620      	mov	r0, r4
   d499a:	f7ff ff43 	bl	d4824 <_ZN15Adafruit_BME2805read8Eh>
   d499e:	21e5      	movs	r1, #229	; 0xe5
   d49a0:	4605      	mov	r5, r0
   d49a2:	4620      	mov	r0, r4
   d49a4:	f7ff ff3e 	bl	d4824 <_ZN15Adafruit_BME2805read8Eh>
   d49a8:	1100      	asrs	r0, r0, #4
   d49aa:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d49ae:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d49b0:	21e7      	movs	r1, #231	; 0xe7
   d49b2:	4620      	mov	r0, r4
   d49b4:	f7ff ff36 	bl	d4824 <_ZN15Adafruit_BME2805read8Eh>
   d49b8:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   d49bc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d49c0 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d49c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d49c2:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d49c6:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d49c8:	4604      	mov	r4, r0
   d49ca:	460e      	mov	r6, r1
   d49cc:	4615      	mov	r5, r2
    if (_cs == -1) {
   d49ce:	d111      	bne.n	d49f4 <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d49d0:	7901      	ldrb	r1, [r0, #4]
   d49d2:	6800      	ldr	r0, [r0, #0]
   d49d4:	f001 f9bb 	bl	d5d4e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d49d8:	6820      	ldr	r0, [r4, #0]
   d49da:	6803      	ldr	r3, [r0, #0]
   d49dc:	4631      	mov	r1, r6
   d49de:	689b      	ldr	r3, [r3, #8]
   d49e0:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d49e2:	6820      	ldr	r0, [r4, #0]
   d49e4:	6803      	ldr	r3, [r0, #0]
   d49e6:	4629      	mov	r1, r5
   d49e8:	689b      	ldr	r3, [r3, #8]
   d49ea:	4798      	blx	r3
        _wire -> endTransmission();
   d49ec:	6820      	ldr	r0, [r4, #0]
   d49ee:	f001 f9b9 	bl	d5d64 <_ZN7TwoWire15endTransmissionEv>
   d49f2:	e02d      	b.n	d4a50 <_ZN15Adafruit_BME2806write8Ehh+0x90>
    } else {
        if (_sck == -1)
   d49f4:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d49f8:	3301      	adds	r3, #1
   d49fa:	d10e      	bne.n	d4a1a <_ZN15Adafruit_BME2806write8Ehh+0x5a>
   d49fc:	4b15      	ldr	r3, [pc, #84]	; (d4a54 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d49fe:	4a16      	ldr	r2, [pc, #88]	; (d4a58 <_ZN15Adafruit_BME2806write8Ehh+0x98>)
   d4a00:	9300      	str	r3, [sp, #0]
   d4a02:	9202      	str	r2, [sp, #8]
   d4a04:	2300      	movs	r3, #0
   d4a06:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4a08:	4668      	mov	r0, sp
   d4a0a:	f88d 3004 	strb.w	r3, [sp, #4]
   d4a0e:	f88d 200c 	strb.w	r2, [sp, #12]
   d4a12:	f88d 300d 	strb.w	r3, [sp, #13]
   d4a16:	f7ff fdf7 	bl	d4608 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4a1a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4a1e:	2100      	movs	r1, #0
   d4a20:	b280      	uxth	r0, r0
   d4a22:	f002 f916 	bl	d6c52 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d4a26:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d4a2a:	4620      	mov	r0, r4
   d4a2c:	f7ff fdae 	bl	d458c <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d4a30:	4629      	mov	r1, r5
   d4a32:	4620      	mov	r0, r4
   d4a34:	f7ff fdaa 	bl	d458c <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d4a38:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4a3c:	2101      	movs	r1, #1
   d4a3e:	b280      	uxth	r0, r0
   d4a40:	f002 f907 	bl	d6c52 <digitalWrite>
    if (_sck == -1)
   d4a44:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4a48:	3301      	adds	r3, #1
   d4a4a:	d101      	bne.n	d4a50 <_ZN15Adafruit_BME2806write8Ehh+0x90>
        SPI.endTransaction(); // release the SPI bus
   d4a4c:	f7ff fdd5 	bl	d45fa <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
}
   d4a50:	b004      	add	sp, #16
   d4a52:	bd70      	pop	{r4, r5, r6, pc}
   d4a54:	000d7e80 	.word	0x000d7e80
   d4a58:	0007a120 	.word	0x0007a120

000d4a5c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.mode     = mode;
   d4a5e:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4a62:	f89d 6018 	ldrb.w	r6, [sp, #24]
   d4a66:	f89d e01c 	ldrb.w	lr, [sp, #28]
   d4a6a:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.mode     = mode;
   d4a6e:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
   d4a72:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
   d4a76:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
   d4a7a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
   d4a7e:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
   d4a82:	f366 1347 	bfi	r3, r6, #5, #3
   d4a86:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
   d4a8a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d4a8e:	f36e 03c5 	bfi	r3, lr, #3, #3
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4a92:	4604      	mov	r4, r0
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
   d4a94:	f367 0302 	bfi	r3, r7, #0, #3
   d4a98:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d4a9c:	f006 0207 	and.w	r2, r6, #7
   d4aa0:	21f2      	movs	r1, #242	; 0xf2
   d4aa2:	f7ff ff8d 	bl	d49c0 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d4aa6:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d4aaa:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4aae:	f002 0107 	and.w	r1, r2, #7
   d4ab2:	009b      	lsls	r3, r3, #2
   d4ab4:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4ab8:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d4abc:	4620      	mov	r0, r4
   d4abe:	21f5      	movs	r1, #245	; 0xf5
   d4ac0:	f7ff ff7e 	bl	d49c0 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d4ac4:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4ac8:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4acc:	f002 0107 	and.w	r1, r2, #7
   d4ad0:	009b      	lsls	r3, r3, #2
   d4ad2:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4ad6:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d4ada:	4620      	mov	r0, r4
   d4adc:	21f4      	movs	r1, #244	; 0xf4
}
   d4ade:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4ae2:	f7ff bf6d 	b.w	d49c0 <_ZN15Adafruit_BME2806write8Ehh>

000d4ae6 <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4ae6:	b530      	push	{r4, r5, lr}
   d4ae8:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4aea:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d4aee:	1c42      	adds	r2, r0, #1
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4af0:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4af2:	d103      	bne.n	d4afc <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
   d4af4:	6820      	ldr	r0, [r4, #0]
   d4af6:	f001 f8f3 	bl	d5ce0 <_ZN7TwoWire5beginEv>
   d4afa:	e022      	b.n	d4b42 <_ZN15Adafruit_BME2804initEv+0x5c>
    } else {
        digitalWrite(_cs, HIGH);
   d4afc:	2101      	movs	r1, #1
   d4afe:	b280      	uxth	r0, r0
   d4b00:	f002 f8a7 	bl	d6c52 <digitalWrite>
        pinMode(_cs, OUTPUT);
   d4b04:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4b08:	2101      	movs	r1, #1
   d4b0a:	b280      	uxth	r0, r0
   d4b0c:	f002 f890 	bl	d6c30 <pinMode>
        if (_sck == -1) {
   d4b10:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d4b14:	1c43      	adds	r3, r0, #1
   d4b16:	d104      	bne.n	d4b22 <_ZN15Adafruit_BME2804initEv+0x3c>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d4b18:	f7ff fd20 	bl	d455c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4b1c:	f001 fbc8 	bl	d62b0 <_ZN8SPIClass5beginEv>
   d4b20:	e00f      	b.n	d4b42 <_ZN15Adafruit_BME2804initEv+0x5c>
            // hardware SPI
            SPI.begin();
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
   d4b22:	2101      	movs	r1, #1
   d4b24:	b280      	uxth	r0, r0
   d4b26:	f002 f883 	bl	d6c30 <pinMode>
            pinMode(_mosi, OUTPUT);
   d4b2a:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d4b2e:	2101      	movs	r1, #1
   d4b30:	b280      	uxth	r0, r0
   d4b32:	f002 f87d 	bl	d6c30 <pinMode>
            pinMode(_miso, INPUT);
   d4b36:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d4b3a:	2100      	movs	r1, #0
   d4b3c:	b280      	uxth	r0, r0
   d4b3e:	f002 f877 	bl	d6c30 <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4b42:	21d0      	movs	r1, #208	; 0xd0
   d4b44:	4620      	mov	r0, r4
   d4b46:	f7ff fe6d 	bl	d4824 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d4b4a:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4b4c:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d4b4e:	d120      	bne.n	d4b92 <_ZN15Adafruit_BME2804initEv+0xac>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d4b50:	4620      	mov	r0, r4
   d4b52:	22b6      	movs	r2, #182	; 0xb6
   d4b54:	21e0      	movs	r1, #224	; 0xe0
   d4b56:	f7ff ff33 	bl	d49c0 <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
   d4b5a:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4b5e:	f001 f819 	bl	d5b94 <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
   d4b62:	4620      	mov	r0, r4
   d4b64:	f7ff feb4 	bl	d48d0 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d4b68:	4605      	mov	r5, r0
   d4b6a:	b108      	cbz	r0, d4b70 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d4b6c:	2064      	movs	r0, #100	; 0x64
   d4b6e:	e7f6      	b.n	d4b5e <_ZN15Adafruit_BME2804initEv+0x78>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d4b70:	4620      	mov	r0, r4
   d4b72:	f7ff feb4 	bl	d48de <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
   d4b76:	2305      	movs	r3, #5
   d4b78:	9300      	str	r3, [sp, #0]
   d4b7a:	461a      	mov	r2, r3
   d4b7c:	2103      	movs	r1, #3
   d4b7e:	4620      	mov	r0, r4
   d4b80:	9502      	str	r5, [sp, #8]
   d4b82:	9501      	str	r5, [sp, #4]
   d4b84:	f7ff ff6a 	bl	d4a5c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
   d4b88:	2064      	movs	r0, #100	; 0x64
   d4b8a:	f001 f803 	bl	d5b94 <delay>
   d4b8e:	2001      	movs	r0, #1
   d4b90:	e000      	b.n	d4b94 <_ZN15Adafruit_BME2804initEv+0xae>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
   d4b92:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
   d4b94:	b005      	add	sp, #20
   d4b96:	bd30      	pop	{r4, r5, pc}

000d4b98 <_ZN15Adafruit_BME2805beginEh>:
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d4b98:	b510      	push	{r4, lr}
	_i2caddr = addr;
   d4b9a:	7101      	strb	r1, [r0, #4]
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d4b9c:	4604      	mov	r4, r0
	_i2caddr = addr;
	_wire = &Wire;
   d4b9e:	f002 f8e7 	bl	d6d70 <_Z19__fetch_global_Wirev>
   d4ba2:	6020      	str	r0, [r4, #0]
	return init();
   d4ba4:	4620      	mov	r0, r4
}
   d4ba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
	_i2caddr = addr;
	_wire = &Wire;
	return init();
   d4baa:	f7ff bf9c 	b.w	d4ae6 <_ZN15Adafruit_BME2804initEv>

000d4bae <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d4bae:	f000 bdc5 	b.w	d573c <HAL_Pin_Map>

000d4bb2 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d4bb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4bb6:	b085      	sub	sp, #20
   d4bb8:	461e      	mov	r6, r3
   d4bba:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d4bbe:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d4bc2:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d4bc4:	1a9a      	subs	r2, r3, r2
   d4bc6:	2a00      	cmp	r2, #0
   d4bc8:	bfb8      	it	lt
   d4bca:	4252      	neglt	r2, r2
   d4bcc:	9200      	str	r2, [sp, #0]
   d4bce:	1a72      	subs	r2, r6, r1
   d4bd0:	2a00      	cmp	r2, #0
   d4bd2:	bfb8      	it	lt
   d4bd4:	4252      	neglt	r2, r2
   d4bd6:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d4bd8:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d4bda:	9a00      	ldr	r2, [sp, #0]
   d4bdc:	9901      	ldr	r1, [sp, #4]
   d4bde:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d4be0:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d4be2:	dd05      	ble.n	d4bf0 <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d4be4:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
   d4be6:	461e      	mov	r6, r3
   d4be8:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d4bea:	4622      	mov	r2, r4
    swap(x0, y0);
   d4bec:	462c      	mov	r4, r5
   d4bee:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
   d4bf0:	42b4      	cmp	r4, r6
   d4bf2:	dd05      	ble.n	d4c00 <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d4bf4:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d4bf6:	461d      	mov	r5, r3
   d4bf8:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
   d4bfa:	4622      	mov	r2, r4
   d4bfc:	4634      	mov	r4, r6
   d4bfe:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d4c00:	1b5a      	subs	r2, r3, r5
   d4c02:	2a00      	cmp	r2, #0
   d4c04:	bfb8      	it	lt
   d4c06:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d4c08:	ebc4 0806 	rsb	r8, r4, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d4c0c:	429d      	cmp	r5, r3
   d4c0e:	bfb4      	ite	lt
   d4c10:	2301      	movlt	r3, #1
   d4c12:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d4c16:	fa1f f888 	uxth.w	r8, r8
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d4c1a:	9302      	str	r3, [sp, #8]
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d4c1c:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
   d4c1e:	fa0f f788 	sxth.w	r7, r8
   d4c22:	2202      	movs	r2, #2
   d4c24:	fb97 f7f2 	sdiv	r7, r7, r2
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d4c28:	42b4      	cmp	r4, r6
   d4c2a:	dc1f      	bgt.n	d4c6c <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
   d4c2c:	9a01      	ldr	r2, [sp, #4]
   d4c2e:	9b00      	ldr	r3, [sp, #0]
   d4c30:	4293      	cmp	r3, r2
   d4c32:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
   d4c36:	bfc8      	it	gt
   d4c38:	4622      	movgt	r2, r4
   d4c3a:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4c3e:	bfc8      	it	gt
   d4c40:	4629      	movgt	r1, r5
   d4c42:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
   d4c44:	bfdc      	itt	le
   d4c46:	462a      	movle	r2, r5
   d4c48:	4621      	movle	r1, r4
   d4c4a:	4648      	mov	r0, r9
   d4c4c:	47d8      	blx	fp
    }
    err -= dy;
   d4c4e:	9b03      	ldr	r3, [sp, #12]
   d4c50:	1aff      	subs	r7, r7, r3
   d4c52:	b2bb      	uxth	r3, r7
   d4c54:	b21f      	sxth	r7, r3
    if (err < 0) {
   d4c56:	2f00      	cmp	r7, #0
   d4c58:	da05      	bge.n	d4c66 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
   d4c5a:	9a02      	ldr	r2, [sp, #8]
      err += dx;
   d4c5c:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
   d4c60:	4415      	add	r5, r2
   d4c62:	b22d      	sxth	r5, r5
      err += dx;
   d4c64:	b23f      	sxth	r7, r7
   d4c66:	3401      	adds	r4, #1
   d4c68:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d4c6a:	e7dd      	b.n	d4c28 <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
   d4c6c:	b005      	add	sp, #20
   d4c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4c72 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4c72:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4c76:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d4c7a:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4c7c:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d4c80:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4c82:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d4c84:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4c86:	4691      	mov	r9, r2
   d4c88:	460d      	mov	r5, r1
   d4c8a:	4698      	mov	r8, r3
  drawFastHLine(x, y, w, color);
   d4c8c:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d4c8e:	6823      	ldr	r3, [r4, #0]
   d4c90:	9600      	str	r6, [sp, #0]
   d4c92:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   d4c96:	444a      	add	r2, r9
   d4c98:	69df      	ldr	r7, [r3, #28]
   d4c9a:	4629      	mov	r1, r5
   d4c9c:	4643      	mov	r3, r8
   d4c9e:	4620      	mov	r0, r4
   d4ca0:	b212      	sxth	r2, r2
   d4ca2:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d4ca4:	6823      	ldr	r3, [r4, #0]
   d4ca6:	9600      	str	r6, [sp, #0]
   d4ca8:	699f      	ldr	r7, [r3, #24]
   d4caa:	464a      	mov	r2, r9
   d4cac:	4653      	mov	r3, sl
   d4cae:	4629      	mov	r1, r5
   d4cb0:	4620      	mov	r0, r4
   d4cb2:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d4cb4:	6823      	ldr	r3, [r4, #0]
   d4cb6:	960a      	str	r6, [sp, #40]	; 0x28
   d4cb8:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
   d4cbc:	4429      	add	r1, r5
   d4cbe:	699d      	ldr	r5, [r3, #24]
   d4cc0:	464a      	mov	r2, r9
   d4cc2:	4653      	mov	r3, sl
   d4cc4:	b209      	sxth	r1, r1
   d4cc6:	4620      	mov	r0, r4
   d4cc8:	46ac      	mov	ip, r5
}
   d4cca:	b002      	add	sp, #8
   d4ccc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
   d4cd0:	4760      	bx	ip

000d4cd2 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d4cd2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d4cd4:	3b01      	subs	r3, #1
   d4cd6:	4413      	add	r3, r2
   d4cd8:	6804      	ldr	r4, [r0, #0]
   d4cda:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d4cde:	9501      	str	r5, [sp, #4]
   d4ce0:	b21b      	sxth	r3, r3
   d4ce2:	9300      	str	r3, [sp, #0]
   d4ce4:	6964      	ldr	r4, [r4, #20]
   d4ce6:	460b      	mov	r3, r1
   d4ce8:	47a0      	blx	r4
}
   d4cea:	b003      	add	sp, #12
   d4cec:	bd30      	pop	{r4, r5, pc}

000d4cee <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d4cee:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d4cf0:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d4cf4:	6804      	ldr	r4, [r0, #0]
   d4cf6:	e88d 0024 	stmia.w	sp, {r2, r5}
   d4cfa:	3b01      	subs	r3, #1
   d4cfc:	440b      	add	r3, r1
   d4cfe:	6964      	ldr	r4, [r4, #20]
   d4d00:	b21b      	sxth	r3, r3
   d4d02:	47a0      	blx	r4
}
   d4d04:	b003      	add	sp, #12
   d4d06:	bd30      	pop	{r4, r5, pc}

000d4d08 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d4d08:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4d0c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d4d10:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d4d14:	4605      	mov	r5, r0
   d4d16:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d4d18:	460c      	mov	r4, r1
   d4d1a:	eb01 0a03 	add.w	sl, r1, r3
   d4d1e:	4554      	cmp	r4, sl
   d4d20:	da0b      	bge.n	d4d3a <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
   d4d22:	682b      	ldr	r3, [r5, #0]
   d4d24:	f8cd 9000 	str.w	r9, [sp]
   d4d28:	699e      	ldr	r6, [r3, #24]
   d4d2a:	4621      	mov	r1, r4
   d4d2c:	4643      	mov	r3, r8
   d4d2e:	463a      	mov	r2, r7
   d4d30:	4628      	mov	r0, r5
   d4d32:	3401      	adds	r4, #1
   d4d34:	47b0      	blx	r6
   d4d36:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d4d38:	e7f1      	b.n	d4d1e <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
   d4d3a:	b002      	add	sp, #8
   d4d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d4d40 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d4d40:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d4d42:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d4d46:	6804      	ldr	r4, [r0, #0]
   d4d48:	9101      	str	r1, [sp, #4]
   d4d4a:	9200      	str	r2, [sp, #0]
   d4d4c:	2200      	movs	r2, #0
   d4d4e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4d52:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d4d54:	4611      	mov	r1, r2
   d4d56:	47a0      	blx	r4
}
   d4d58:	b002      	add	sp, #8
   d4d5a:	bd10      	pop	{r4, pc}

000d4d5c <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d4d5c:	4770      	bx	lr
	...

000d4d60 <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d4d60:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d4d62:	8101      	strh	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4d64:	2400      	movs	r4, #0
   d4d66:	4d08      	ldr	r5, [pc, #32]	; (d4d88 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d4d68:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
   d4d6a:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
   d4d6c:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
   d4d6e:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
   d4d72:	2201      	movs	r2, #1
   d4d74:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
   d4d76:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
   d4d78:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
   d4d7a:	8204      	strh	r4, [r0, #16]
   d4d7c:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
   d4d7e:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
   d4d80:	82c1      	strh	r1, [r0, #22]
   d4d82:	8281      	strh	r1, [r0, #20]
  wrap      = true;
   d4d84:	7682      	strb	r2, [r0, #26]
}
   d4d86:	bd30      	pop	{r4, r5, pc}
   d4d88:	000d7ed4 	.word	0x000d7ed4

000d4d8c <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d4d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4d90:	b08f      	sub	sp, #60	; 0x3c
   d4d92:	4605      	mov	r5, r0
   d4d94:	9106      	str	r1, [sp, #24]
   d4d96:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d4d9a:	9107      	str	r1, [sp, #28]
   d4d9c:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d4da0:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
   d4da2:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d4da6:	9806      	ldr	r0, [sp, #24]
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d4da8:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68

  if((x >= _width)            || // Clip right
   d4dac:	4281      	cmp	r1, r0
   d4dae:	dd7c      	ble.n	d4eaa <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d4db0:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d4db4:	4291      	cmp	r1, r2
   d4db6:	dd78      	ble.n	d4eaa <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
   d4db8:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
   d4dba:	fb11 0008 	smlabb	r0, r1, r8, r0
   d4dbe:	2800      	cmp	r0, #0
   d4dc0:	dd73      	ble.n	d4eaa <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     ((x + 6 * size - 1) < 0) || // Clip left
   d4dc2:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d4dc6:	2800      	cmp	r0, #0
   d4dc8:	dd6f      	ble.n	d4eaa <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4dca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4dce:	b296      	uxth	r6, r2
   d4dd0:	930c      	str	r3, [sp, #48]	; 0x30
   d4dd2:	f106 0308 	add.w	r3, r6, #8
   d4dd6:	b29b      	uxth	r3, r3
   d4dd8:	9109      	str	r1, [sp, #36]	; 0x24
   d4dda:	2400      	movs	r4, #0
   d4ddc:	930d      	str	r3, [sp, #52]	; 0x34
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
   d4dde:	2c05      	cmp	r4, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4de0:	bf1c      	itt	ne
   d4de2:	4b33      	ldrne	r3, [pc, #204]	; (d4eb0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d4de4:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4de6:	9605      	str	r6, [sp, #20]
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4de8:	bf16      	itet	ne
   d4dea:	191b      	addne	r3, r3, r4
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
   d4dec:	f04f 0900 	moveq.w	r9, #0
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4df0:	f813 9002 	ldrbne.w	r9, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4df4:	9604      	str	r6, [sp, #16]
   d4df6:	fa1f f388 	uxth.w	r3, r8
   d4dfa:	9303      	str	r3, [sp, #12]
   d4dfc:	9a03      	ldr	r2, [sp, #12]
   d4dfe:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d4e02:	fb04 3202 	mla	r2, r4, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4e06:	fa13 f384 	uxtah	r3, r3, r4
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4e0a:	b212      	sxth	r2, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4e0c:	b21b      	sxth	r3, r3
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4e0e:	920a      	str	r2, [sp, #40]	; 0x28
   d4e10:	4637      	mov	r7, r6
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4e12:	fa0f fa88 	sxth.w	sl, r8
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4e16:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
   d4e18:	f019 0f01 	tst.w	r9, #1
   d4e1c:	d011      	beq.n	d4e42 <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
        if (size == 1) // default size
   d4e1e:	f1b8 0f01 	cmp.w	r8, #1
   d4e22:	682b      	ldr	r3, [r5, #0]
   d4e24:	d103      	bne.n	d4e2e <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
          drawPixel(x+i, y+j, color);
   d4e26:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4e2a:	9b07      	ldr	r3, [sp, #28]
   d4e2c:	e014      	b.n	d4e58 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4e2e:	9a07      	ldr	r2, [sp, #28]
   d4e30:	9201      	str	r2, [sp, #4]
   d4e32:	f8cd a000 	str.w	sl, [sp]
   d4e36:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d4e3a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d4e3e:	4653      	mov	r3, sl
   d4e40:	e018      	b.n	d4e74 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
        } 
      } else if (bg != color) {
   d4e42:	9b07      	ldr	r3, [sp, #28]
   d4e44:	9a08      	ldr	r2, [sp, #32]
   d4e46:	4293      	cmp	r3, r2
   d4e48:	d017      	beq.n	d4e7a <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d4e4a:	f1b8 0f01 	cmp.w	r8, #1
   d4e4e:	682b      	ldr	r3, [r5, #0]
   d4e50:	d107      	bne.n	d4e62 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, bg);
   d4e52:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4e56:	4613      	mov	r3, r2
   d4e58:	b23a      	sxth	r2, r7
   d4e5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d4e5c:	4628      	mov	r0, r5
   d4e5e:	47d8      	blx	fp
   d4e60:	e00b      	b.n	d4e7a <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4e62:	9a08      	ldr	r2, [sp, #32]
   d4e64:	9201      	str	r2, [sp, #4]
   d4e66:	f8cd a000 	str.w	sl, [sp]
   d4e6a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d4e6e:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d4e72:	4653      	mov	r3, sl
   d4e74:	990a      	ldr	r1, [sp, #40]	; 0x28
   d4e76:	4628      	mov	r0, r5
   d4e78:	47d8      	blx	fp
   d4e7a:	9b04      	ldr	r3, [sp, #16]
   d4e7c:	9a03      	ldr	r2, [sp, #12]
   d4e7e:	4413      	add	r3, r2
   d4e80:	b29b      	uxth	r3, r3
   d4e82:	9304      	str	r3, [sp, #16]
   d4e84:	9b05      	ldr	r3, [sp, #20]
   d4e86:	4413      	add	r3, r2
   d4e88:	b29b      	uxth	r3, r3
   d4e8a:	3701      	adds	r7, #1
   d4e8c:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d4e8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d4e90:	b2bf      	uxth	r7, r7
   d4e92:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
   d4e94:	ea4f 0959 	mov.w	r9, r9, lsr #1
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d4e98:	d1be      	bne.n	d4e18 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d4e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4e9c:	3b01      	subs	r3, #1
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
   d4e9e:	3401      	adds	r4, #1
   d4ea0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d4ea4:	b264      	sxtb	r4, r4
   d4ea6:	9309      	str	r3, [sp, #36]	; 0x24
   d4ea8:	d199      	bne.n	d4dde <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
   d4eaa:	b00f      	add	sp, #60	; 0x3c
   d4eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4eb0:	000d7f04 	.word	0x000d7f04

000d4eb4 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d4eb4:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
   d4eb6:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d4eb8:	b085      	sub	sp, #20
   d4eba:	4604      	mov	r4, r0
   d4ebc:	460b      	mov	r3, r1

  if (c == '\n') {
   d4ebe:	d104      	bne.n	d4eca <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
   d4ec0:	7e02      	ldrb	r2, [r0, #24]
   d4ec2:	8a43      	ldrh	r3, [r0, #18]
   d4ec4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d4ec8:	e023      	b.n	d4f12 <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
   d4eca:	290d      	cmp	r1, #13
   d4ecc:	d024      	beq.n	d4f18 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d4ece:	7e05      	ldrb	r5, [r0, #24]
   d4ed0:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d4ed4:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d4ed8:	9502      	str	r5, [sp, #8]
   d4eda:	8ac5      	ldrh	r5, [r0, #22]
   d4edc:	9501      	str	r5, [sp, #4]
   d4ede:	8a85      	ldrh	r5, [r0, #20]
   d4ee0:	9500      	str	r5, [sp, #0]
   d4ee2:	f7ff ff53 	bl	d4d8c <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d4ee6:	7e22      	ldrb	r2, [r4, #24]
   d4ee8:	8a23      	ldrh	r3, [r4, #16]
   d4eea:	b291      	uxth	r1, r2
   d4eec:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d4ef0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d4ef4:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
   d4ef6:	b21b      	sxth	r3, r3
   d4ef8:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d4efa:	b168      	cbz	r0, d4f18 <_ZN12Adafruit_GFX5writeEh+0x64>
   d4efc:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d4f00:	f06f 0505 	mvn.w	r5, #5
   d4f04:	fb05 0202 	mla	r2, r5, r2, r0
   d4f08:	4293      	cmp	r3, r2
   d4f0a:	dd05      	ble.n	d4f18 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
   d4f0c:	8a63      	ldrh	r3, [r4, #18]
   d4f0e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d4f12:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d4f14:	2300      	movs	r3, #0
   d4f16:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
   d4f18:	2001      	movs	r0, #1
   d4f1a:	b005      	add	sp, #20
   d4f1c:	bd30      	pop	{r4, r5, pc}

000d4f1e <_ZN12Adafruit_GFX9setCursorEss>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
   d4f1e:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d4f20:	8242      	strh	r2, [r0, #18]
   d4f22:	4770      	bx	lr

000d4f24 <_ZN12Adafruit_GFX11setTextSizeEh>:
}

void Adafruit_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
   d4f24:	2900      	cmp	r1, #0
   d4f26:	bf08      	it	eq
   d4f28:	2101      	moveq	r1, #1
   d4f2a:	7601      	strb	r1, [r0, #24]
   d4f2c:	4770      	bx	lr

000d4f2e <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
   d4f2e:	82c1      	strh	r1, [r0, #22]
   d4f30:	8281      	strh	r1, [r0, #20]
   d4f32:	4770      	bx	lr

000d4f34 <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
   d4f34:	7e40      	ldrb	r0, [r0, #25]
   d4f36:	4770      	bx	lr

000d4f38 <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
   d4f38:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d4f3c:	4770      	bx	lr

000d4f3e <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
   d4f3e:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d4f42:	4770      	bx	lr

000d4f44 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d4f44:	f000 bbfa 	b.w	d573c <HAL_Pin_Map>

000d4f48 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4f48:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d4f4a:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4f4c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
   d4f50:	2c02      	cmp	r4, #2
   d4f52:	d008      	beq.n	d4f66 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
   d4f54:	2c03      	cmp	r4, #3
   d4f56:	d00f      	beq.n	d4f78 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
   d4f58:	2c01      	cmp	r4, #1
   d4f5a:	d170      	bne.n	d503e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d4f5c:	8904      	ldrh	r4, [r0, #8]
   d4f5e:	3c01      	subs	r4, #1
   d4f60:	1aa2      	subs	r2, r4, r2
   d4f62:	b212      	sxth	r2, r2
      break;
   d4f64:	e00c      	b.n	d4f80 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4f66:	8944      	ldrh	r4, [r0, #10]
   d4f68:	3c01      	subs	r4, #1
   d4f6a:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d4f6c:	8904      	ldrh	r4, [r0, #8]
   d4f6e:	1ae4      	subs	r4, r4, r3
   d4f70:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4f72:	b212      	sxth	r2, r2
      x -= (w-1);
   d4f74:	b209      	sxth	r1, r1
      break;
   d4f76:	e062      	b.n	d503e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d4f78:	8944      	ldrh	r4, [r0, #10]
   d4f7a:	1ae4      	subs	r4, r4, r3
   d4f7c:	1a61      	subs	r1, r4, r1
   d4f7e:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4f80:	2a00      	cmp	r2, #0
   d4f82:	db5b      	blt.n	d503c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
   d4f84:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4f88:	4294      	cmp	r4, r2
   d4f8a:	f340 8090 	ble.w	d50ae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4f8e:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4f90:	bfbe      	ittt	lt
   d4f92:	185b      	addlt	r3, r3, r1
   d4f94:	b21b      	sxthlt	r3, r3
    __y = 0;
   d4f96:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4f98:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d4f9c:	18cc      	adds	r4, r1, r3
   d4f9e:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4fa0:	bfc4      	itt	gt
   d4fa2:	1a43      	subgt	r3, r0, r1
   d4fa4:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4fa6:	2b00      	cmp	r3, #0
   d4fa8:	f340 8081 	ble.w	d50ae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4fac:	b2c9      	uxtb	r1, r1


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4fae:	08c8      	lsrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d4fb0:	4f3f      	ldr	r7, [pc, #252]	; (d50b0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d4fb2:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4fb6:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d4fba:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4fbc:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4fc0:	d017      	beq.n	d4ff2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4fc2:	f1c1 0108 	rsb	r1, r1, #8
   d4fc6:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4fc8:	493a      	ldr	r1, [pc, #232]	; (d50b4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4fca:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4fcc:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d4fce:	bf3f      	itttt	cc
   d4fd0:	ebc3 0e00 	rsbcc	lr, r3, r0
   d4fd4:	21ff      	movcc	r1, #255	; 0xff
   d4fd6:	fa41 f10e 	asrcc.w	r1, r1, lr
   d4fda:	400e      	andcc	r6, r1
   d4fdc:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
   d4fde:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4fe0:	bf0c      	ite	eq
   d4fe2:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
   d4fe4:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4fe6:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d4fe8:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4fea:	d360      	bcc.n	d50ae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
   d4fec:	1a18      	subs	r0, r3, r0
   d4fee:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
   d4ff0:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d4ff2:	2b07      	cmp	r3, #7
   d4ff4:	d917      	bls.n	d5026 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4ff6:	2d01      	cmp	r5, #1
   d4ff8:	bf0c      	ite	eq
   d4ffa:	20ff      	moveq	r0, #255	; 0xff
   d4ffc:	2000      	movne	r0, #0
   d4ffe:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d5002:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d5004:	3a08      	subs	r2, #8
   d5006:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d5008:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d500a:	f801 0c80 	strb.w	r0, [r1, #-128]
   d500e:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d5012:	d8f7      	bhi.n	d5004 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
   d5014:	f1a3 0208 	sub.w	r2, r3, #8
   d5018:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d501c:	3201      	adds	r2, #1
   d501e:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   d5022:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d5026:	2b00      	cmp	r3, #0
   d5028:	d041      	beq.n	d50ae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d502a:	4a23      	ldr	r2, [pc, #140]	; (d50b8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
   d502c:	5cd2      	ldrb	r2, [r2, r3]
   d502e:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
   d5030:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d5032:	bf0c      	ite	eq
   d5034:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d5036:	4393      	bicne	r3, r2
   d5038:	7023      	strb	r3, [r4, #0]
   d503a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d503c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d503e:	2a00      	cmp	r2, #0
   d5040:	db35      	blt.n	d50ae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d5042:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d5046:	4294      	cmp	r4, r2
   d5048:	dd31      	ble.n	d50ae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d504a:	2900      	cmp	r1, #0
    w += x;
   d504c:	bfbc      	itt	lt
   d504e:	18c9      	addlt	r1, r1, r3
   d5050:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d5052:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d5056:	bfb8      	it	lt
   d5058:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d505a:	18ce      	adds	r6, r1, r3
   d505c:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d505e:	bfc4      	itt	gt
   d5060:	1a63      	subgt	r3, r4, r1
   d5062:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d5064:	2b00      	cmp	r3, #0
   d5066:	dd22      	ble.n	d50ae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d5068:	10d0      	asrs	r0, r2, #3
  // and offset x columns in
  pBuf += x;
   d506a:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   d506e:	4810      	ldr	r0, [pc, #64]	; (d50b0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
   d5070:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d5074:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
   d5076:	2001      	movs	r0, #1
   d5078:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
   d507c:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d507e:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
   d5080:	d109      	bne.n	d5096 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d5082:	3b01      	subs	r3, #1
   d5084:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
   d5086:	1c5c      	adds	r4, r3, #1
   d5088:	d011      	beq.n	d50ae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d508a:	f811 0b01 	ldrb.w	r0, [r1], #1
   d508e:	4310      	orrs	r0, r2
   d5090:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5094:	e7f5      	b.n	d5082 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
   d5096:	43d2      	mvns	r2, r2
   d5098:	b2d2      	uxtb	r2, r2
   d509a:	3b01      	subs	r3, #1
   d509c:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
   d509e:	1c58      	adds	r0, r3, #1
   d50a0:	d005      	beq.n	d50ae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d50a2:	f811 0b01 	ldrb.w	r0, [r1], #1
   d50a6:	4010      	ands	r0, r2
   d50a8:	f801 0c01 	strb.w	r0, [r1, #-1]
   d50ac:	e7f5      	b.n	d509a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   d50ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d50b0:	2003ddec 	.word	0x2003ddec
   d50b4:	2003dde4 	.word	0x2003dde4
   d50b8:	2003dddc 	.word	0x2003dddc

000d50bc <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d50bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
   d50be:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d50c0:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
   d50c4:	2c02      	cmp	r4, #2
   d50c6:	d008      	beq.n	d50da <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d50c8:	2c03      	cmp	r4, #3
   d50ca:	d00f      	beq.n	d50ec <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d50cc:	2c01      	cmp	r4, #1
   d50ce:	d112      	bne.n	d50f6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d50d0:	8904      	ldrh	r4, [r0, #8]
   d50d2:	1ae4      	subs	r4, r4, r3
   d50d4:	1aa2      	subs	r2, r4, r2
   d50d6:	b212      	sxth	r2, r2
      break;
   d50d8:	e06d      	b.n	d51b6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d50da:	8904      	ldrh	r4, [r0, #8]
   d50dc:	3c01      	subs	r4, #1
   d50de:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d50e0:	8944      	ldrh	r4, [r0, #10]
   d50e2:	1ae4      	subs	r4, r4, r3
   d50e4:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d50e6:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d50e8:	b212      	sxth	r2, r2
      break;
   d50ea:	e004      	b.n	d50f6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
   d50ec:	8944      	ldrh	r4, [r0, #10]
   d50ee:	3c01      	subs	r4, #1
   d50f0:	1a61      	subs	r1, r4, r1
   d50f2:	b209      	sxth	r1, r1
      break;
   d50f4:	e05f      	b.n	d51b6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d50f6:	2900      	cmp	r1, #0
   d50f8:	db5c      	blt.n	d51b4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
   d50fa:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d50fe:	428c      	cmp	r4, r1
   d5100:	f340 8091 	ble.w	d5226 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d5104:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d5106:	bfbc      	itt	lt
   d5108:	18d2      	addlt	r2, r2, r3
   d510a:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d510c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
   d5110:	bfb8      	it	lt
   d5112:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d5114:	18d4      	adds	r4, r2, r3
   d5116:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d5118:	bfc4      	itt	gt
   d511a:	1a83      	subgt	r3, r0, r2
   d511c:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d511e:	2b00      	cmp	r3, #0
   d5120:	f340 8081 	ble.w	d5226 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d5124:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d5126:	4e40      	ldr	r6, [pc, #256]	; (d5228 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d5128:	b2da      	uxtb	r2, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d512a:	08e3      	lsrs	r3, r4, #3
  // and offset x columns in
  pBuf += x;
   d512c:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d5130:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d5134:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d5138:	d017      	beq.n	d516a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d513a:	f1c4 0408 	rsb	r4, r4, #8
   d513e:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d5140:	4c3a      	ldr	r4, [pc, #232]	; (d522c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d5142:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d5144:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d5146:	bf3f      	itttt	cc
   d5148:	ebc2 0e00 	rsbcc	lr, r2, r0
   d514c:	24ff      	movcc	r4, #255	; 0xff
   d514e:	fa44 f40e 	asrcc.w	r4, r4, lr
   d5152:	4027      	andcc	r7, r4
   d5154:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
   d5156:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d5158:	bf0c      	ite	eq
   d515a:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
   d515c:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d515e:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d5160:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d5162:	d360      	bcc.n	d5226 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
   d5164:	1a10      	subs	r0, r2, r0
   d5166:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
   d5168:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d516a:	2a07      	cmp	r2, #7
   d516c:	d917      	bls.n	d519e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d516e:	2d01      	cmp	r5, #1
   d5170:	bf0c      	ite	eq
   d5172:	24ff      	moveq	r4, #255	; 0xff
   d5174:	2400      	movne	r4, #0
   d5176:	f103 0080 	add.w	r0, r3, #128	; 0x80
   d517a:	4611      	mov	r1, r2

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d517c:	3908      	subs	r1, #8
   d517e:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
   d5180:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d5182:	f800 4c80 	strb.w	r4, [r0, #-128]
   d5186:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d518a:	d8f7      	bhi.n	d517c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
   d518c:	f1a2 0108 	sub.w	r1, r2, #8
   d5190:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   d5194:	3101      	adds	r1, #1
   d5196:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   d519a:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d519e:	2a00      	cmp	r2, #0
   d51a0:	d041      	beq.n	d5226 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d51a2:	4923      	ldr	r1, [pc, #140]	; (d5230 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
   d51a4:	5c89      	ldrb	r1, [r1, r2]
   d51a6:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
   d51a8:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d51aa:	bf0c      	ite	eq
   d51ac:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
   d51ae:	438a      	bicne	r2, r1
   d51b0:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d51b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d51b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d51b6:	2900      	cmp	r1, #0
   d51b8:	db35      	blt.n	d5226 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d51ba:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d51be:	428c      	cmp	r4, r1
   d51c0:	dd31      	ble.n	d5226 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d51c2:	2a00      	cmp	r2, #0
    w += x;
   d51c4:	bfbc      	itt	lt
   d51c6:	18d2      	addlt	r2, r2, r3
   d51c8:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d51ca:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d51ce:	bfb8      	it	lt
   d51d0:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d51d2:	18d6      	adds	r6, r2, r3
   d51d4:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d51d6:	bfc4      	itt	gt
   d51d8:	1aa3      	subgt	r3, r4, r2
   d51da:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d51dc:	2b00      	cmp	r3, #0
   d51de:	dd22      	ble.n	d5226 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d51e0:	10c8      	asrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d51e2:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
   d51e6:	4810      	ldr	r0, [pc, #64]	; (d5228 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
   d51e8:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d51ec:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
   d51ee:	2201      	movs	r2, #1
   d51f0:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
   d51f4:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d51f6:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
   d51f8:	d109      	bne.n	d520e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d51fa:	1e5a      	subs	r2, r3, #1
   d51fc:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
   d51fe:	1c5c      	adds	r4, r3, #1
   d5200:	d011      	beq.n	d5226 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d5202:	f810 2b01 	ldrb.w	r2, [r0], #1
   d5206:	430a      	orrs	r2, r1
   d5208:	f800 2c01 	strb.w	r2, [r0, #-1]
   d520c:	e7f5      	b.n	d51fa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
   d520e:	43c9      	mvns	r1, r1
   d5210:	b2c9      	uxtb	r1, r1
   d5212:	1e5a      	subs	r2, r3, #1
   d5214:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
   d5216:	1c5a      	adds	r2, r3, #1
   d5218:	d005      	beq.n	d5226 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d521a:	f810 2b01 	ldrb.w	r2, [r0], #1
   d521e:	400a      	ands	r2, r1
   d5220:	f800 2c01 	strb.w	r2, [r0, #-1]
   d5224:	e7f5      	b.n	d5212 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   d5226:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5228:	2003ddec 	.word	0x2003ddec
   d522c:	2003dde4 	.word	0x2003dde4
   d5230:	2003dddc 	.word	0x2003dddc

000d5234 <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d5234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d5236:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d5238:	4606      	mov	r6, r0
   d523a:	4614      	mov	r4, r2
   d523c:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d523e:	db3f      	blt.n	d52c0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d5240:	f7ff fe7a 	bl	d4f38 <_ZN12Adafruit_GFX5widthEv>
   d5244:	4285      	cmp	r5, r0
   d5246:	da3b      	bge.n	d52c0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d5248:	2c00      	cmp	r4, #0
   d524a:	db39      	blt.n	d52c0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d524c:	4630      	mov	r0, r6
   d524e:	f7ff fe76 	bl	d4f3e <_ZN12Adafruit_GFX6heightEv>
   d5252:	4284      	cmp	r4, r0
   d5254:	da34      	bge.n	d52c0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d5256:	4630      	mov	r0, r6
   d5258:	f7ff fe6c 	bl	d4f34 <_ZN12Adafruit_GFX11getRotationEv>
   d525c:	2802      	cmp	r0, #2
   d525e:	d127      	bne.n	d52b0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d5260:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d5262:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d5264:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d5266:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d5268:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
   d526a:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d526c:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
   d526e:	b204      	sxth	r4, r0
   d5270:	e006      	b.n	d5280 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d5272:	2801      	cmp	r0, #1
   d5274:	d104      	bne.n	d5280 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
   d5276:	8933      	ldrh	r3, [r6, #8]
   d5278:	3b01      	subs	r3, #1
   d527a:	1b1b      	subs	r3, r3, r4
   d527c:	462c      	mov	r4, r5
   d527e:	b21d      	sxth	r5, r3
   d5280:	2008      	movs	r0, #8
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d5282:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d5284:	fb94 f0f0 	sdiv	r0, r4, r0
   d5288:	b200      	sxth	r0, r0
   d528a:	4b0e      	ldr	r3, [pc, #56]	; (d52c4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
   d528c:	f004 0207 	and.w	r2, r4, #7
   d5290:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d5294:	d104      	bne.n	d52a0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d5296:	4097      	lsls	r7, r2
   d5298:	5c5a      	ldrb	r2, [r3, r1]
   d529a:	4317      	orrs	r7, r2
   d529c:	545f      	strb	r7, [r3, r1]
   d529e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d52a0:	5c58      	ldrb	r0, [r3, r1]
   d52a2:	2701      	movs	r7, #1
   d52a4:	fa07 f202 	lsl.w	r2, r7, r2
   d52a8:	ea20 0202 	bic.w	r2, r0, r2
   d52ac:	545a      	strb	r2, [r3, r1]
   d52ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d52b0:	2803      	cmp	r0, #3
   d52b2:	d1de      	bne.n	d5272 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
   d52b4:	8973      	ldrh	r3, [r6, #10]
   d52b6:	3b01      	subs	r3, #1
   d52b8:	1b5b      	subs	r3, r3, r5
   d52ba:	4625      	mov	r5, r4
   d52bc:	b21c      	sxth	r4, r3
   d52be:	e7df      	b.n	d5280 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
   d52c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d52c2:	bf00      	nop
   d52c4:	2003ddec 	.word	0x2003ddec

000d52c8 <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d52c8:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d52ca:	2240      	movs	r2, #64	; 0x40
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d52cc:	4604      	mov	r4, r0
   d52ce:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d52d0:	2180      	movs	r1, #128	; 0x80
   d52d2:	f7ff fd45 	bl	d4d60 <_ZN12Adafruit_GFXC1Ess>
   d52d6:	4b06      	ldr	r3, [pc, #24]	; (d52f0 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d52d8:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d52da:	23ff      	movs	r3, #255	; 0xff
   d52dc:	7763      	strb	r3, [r4, #29]
   d52de:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d52e2:	77e3      	strb	r3, [r4, #31]
   d52e4:	77a3      	strb	r3, [r4, #30]
  rst = reset;
   d52e6:	f884 5020 	strb.w	r5, [r4, #32]
}
   d52ea:	4620      	mov	r0, r4
   d52ec:	bd38      	pop	{r3, r4, r5, pc}
   d52ee:	bf00      	nop
   d52f0:	000d8408 	.word	0x000d8408

000d52f4 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  }
}

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d52f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d52f8:	2100      	movs	r1, #0
   d52fa:	4801      	ldr	r0, [pc, #4]	; (d5300 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d52fc:	f002 bd03 	b.w	d7d06 <memset>
   d5300:	2003ddec 	.word	0x2003ddec

000d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d5304:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d5306:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d530a:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d530c:	4604      	mov	r4, r0
   d530e:	460d      	mov	r5, r1
  if (sid != -1)
   d5310:	d028      	beq.n	d5364 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x60>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d5312:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d5316:	2101      	movs	r1, #1
   d5318:	b280      	uxth	r0, r0
   d531a:	f001 fc9a 	bl	d6c52 <digitalWrite>
    digitalWrite(dc, LOW);
   d531e:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d5322:	2100      	movs	r1, #0
   d5324:	b280      	uxth	r0, r0
   d5326:	f001 fc94 	bl	d6c52 <digitalWrite>
    digitalWrite(cs, LOW);
   d532a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d532e:	2100      	movs	r1, #0
   d5330:	b280      	uxth	r0, r0
   d5332:	f001 fc8e 	bl	d6c52 <digitalWrite>
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d5336:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d533a:	b12b      	cbz	r3, d5348 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d533c:	f7ff f90e 	bl	d455c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5340:	4629      	mov	r1, r5
   d5342:	f001 f8c7 	bl	d64d4 <_ZN8SPIClass8transferEh>
   d5346:	e005      	b.n	d5354 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x50>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d5348:	462b      	mov	r3, r5
   d534a:	2201      	movs	r2, #1
   d534c:	7fa1      	ldrb	r1, [r4, #30]
   d534e:	7f60      	ldrb	r0, [r4, #29]
   d5350:	f001 fcd1 	bl	d6cf6 <shiftOut>
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d5354:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5358:	2101      	movs	r1, #1
   d535a:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d535c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d5360:	f001 bc77 	b.w	d6c52 <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d5364:	f001 fd04 	bl	d6d70 <_Z19__fetch_global_Wirev>
   d5368:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d536c:	f000 fcf3 	bl	d5d56 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d5370:	f001 fcfe 	bl	d6d70 <_Z19__fetch_global_Wirev>
   d5374:	6803      	ldr	r3, [r0, #0]
   d5376:	2100      	movs	r1, #0
   d5378:	689b      	ldr	r3, [r3, #8]
   d537a:	4798      	blx	r3
    Wire.write(c);
   d537c:	f001 fcf8 	bl	d6d70 <_Z19__fetch_global_Wirev>
   d5380:	6803      	ldr	r3, [r0, #0]
   d5382:	4629      	mov	r1, r5
   d5384:	689b      	ldr	r3, [r3, #8]
   d5386:	4798      	blx	r3
    Wire.endTransmission();
   d5388:	f001 fcf2 	bl	d6d70 <_Z19__fetch_global_Wirev>
  }
}
   d538c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d5390:	f000 bce8 	b.w	d5d64 <_ZN7TwoWire15endTransmissionEv>

000d5394 <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d5394:	b538      	push	{r3, r4, r5, lr}
   d5396:	4604      	mov	r4, r0
   d5398:	460d      	mov	r5, r1
  _vccstate = vccstate;
   d539a:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d539c:	f990 301d 	ldrsb.w	r3, [r0, #29]
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d53a0:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
   d53a2:	3301      	adds	r3, #1
   d53a4:	d037      	beq.n	d5416 <_ZN16Adafruit_SSD13065beginEhh+0x82>
    pinMode(dc, OUTPUT);
   d53a6:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d53aa:	2101      	movs	r1, #1
   d53ac:	b280      	uxth	r0, r0
   d53ae:	f001 fc3f 	bl	d6c30 <pinMode>
    pinMode(cs, OUTPUT);
   d53b2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d53b6:	2101      	movs	r1, #1
   d53b8:	b280      	uxth	r0, r0
   d53ba:	f001 fc39 	bl	d6c30 <pinMode>
    if (!hwSPI){
   d53be:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d53c2:	b95b      	cbnz	r3, d53dc <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
   d53c4:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d53c8:	2101      	movs	r1, #1
   d53ca:	b280      	uxth	r0, r0
   d53cc:	f001 fc30 	bl	d6c30 <pinMode>
    	pinMode(sclk, OUTPUT);
   d53d0:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d53d4:	2101      	movs	r1, #1
   d53d6:	b280      	uxth	r0, r0
   d53d8:	f001 fc2a 	bl	d6c30 <pinMode>
    	}
    if (hwSPI){
   d53dc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d53e0:	b1eb      	cbz	r3, d541e <_ZN16Adafruit_SSD13065beginEhh+0x8a>
        digitalWrite(cs, HIGH);
   d53e2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d53e6:	2101      	movs	r1, #1
   d53e8:	b280      	uxth	r0, r0
   d53ea:	f001 fc32 	bl	d6c52 <digitalWrite>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d53ee:	f7ff f8b5 	bl	d455c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d53f2:	2101      	movs	r1, #1
   d53f4:	f000 ff6d 	bl	d62d2 <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d53f8:	f7ff f8b0 	bl	d455c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d53fc:	2110      	movs	r1, #16
   d53fe:	f001 f845 	bl	d648c <_ZN8SPIClass15setClockDividerEh>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d5402:	f7ff f8ab 	bl	d455c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5406:	2100      	movs	r1, #0
   d5408:	f000 ff74 	bl	d62f4 <_ZN8SPIClass11setDataModeEh>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d540c:	f7ff f8a6 	bl	d455c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5410:	f000 ff4e 	bl	d62b0 <_ZN8SPIClass5beginEv>
   d5414:	e003      	b.n	d541e <_ZN16Adafruit_SSD13065beginEhh+0x8a>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
   d5416:	f001 fcab 	bl	d6d70 <_Z19__fetch_global_Wirev>
   d541a:	f000 fc61 	bl	d5ce0 <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
   d541e:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5422:	2101      	movs	r1, #1
   d5424:	b280      	uxth	r0, r0
   d5426:	f001 fc03 	bl	d6c30 <pinMode>
  digitalWrite(rst, HIGH);
   d542a:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d542e:	2101      	movs	r1, #1
   d5430:	b280      	uxth	r0, r0
   d5432:	f001 fc0e 	bl	d6c52 <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
   d5436:	2001      	movs	r0, #1
   d5438:	f000 fbac 	bl	d5b94 <delay>
  // bring reset low
  digitalWrite(rst, LOW);
   d543c:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5440:	2100      	movs	r1, #0
   d5442:	b280      	uxth	r0, r0
   d5444:	f001 fc05 	bl	d6c52 <digitalWrite>
  // wait 10ms
  delay(10);
   d5448:	200a      	movs	r0, #10
   d544a:	f000 fba3 	bl	d5b94 <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
   d544e:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5452:	2101      	movs	r1, #1
   d5454:	b280      	uxth	r0, r0
   d5456:	f001 fbfc 	bl	d6c52 <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d545a:	4620      	mov	r0, r4
   d545c:	21ae      	movs	r1, #174	; 0xae
   d545e:	f7ff ff51 	bl	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d5462:	4620      	mov	r0, r4
   d5464:	21d5      	movs	r1, #213	; 0xd5
   d5466:	f7ff ff4d 	bl	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d546a:	4620      	mov	r0, r4
   d546c:	2180      	movs	r1, #128	; 0x80
   d546e:	f7ff ff49 	bl	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d5472:	4620      	mov	r0, r4
   d5474:	21a8      	movs	r1, #168	; 0xa8
   d5476:	f7ff ff45 	bl	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d547a:	4620      	mov	r0, r4
   d547c:	213f      	movs	r1, #63	; 0x3f
   d547e:	f7ff ff41 	bl	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d5482:	4620      	mov	r0, r4
   d5484:	21d3      	movs	r1, #211	; 0xd3
   d5486:	f7ff ff3d 	bl	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d548a:	4620      	mov	r0, r4
   d548c:	2100      	movs	r1, #0
   d548e:	f7ff ff39 	bl	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d5492:	4620      	mov	r0, r4
   d5494:	2140      	movs	r1, #64	; 0x40
   d5496:	f7ff ff35 	bl	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d549a:	218d      	movs	r1, #141	; 0x8d
   d549c:	4620      	mov	r0, r4
   d549e:	f7ff ff31 	bl	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d54a2:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d54a4:	bf0c      	ite	eq
   d54a6:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
   d54a8:	2114      	movne	r1, #20
   d54aa:	4620      	mov	r0, r4
   d54ac:	f7ff ff2a 	bl	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d54b0:	4620      	mov	r0, r4
   d54b2:	2120      	movs	r1, #32
   d54b4:	f7ff ff26 	bl	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d54b8:	4620      	mov	r0, r4
   d54ba:	2100      	movs	r1, #0
   d54bc:	f7ff ff22 	bl	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d54c0:	4620      	mov	r0, r4
   d54c2:	21a1      	movs	r1, #161	; 0xa1
   d54c4:	f7ff ff1e 	bl	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d54c8:	4620      	mov	r0, r4
   d54ca:	21c8      	movs	r1, #200	; 0xc8
   d54cc:	f7ff ff1a 	bl	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d54d0:	4620      	mov	r0, r4
   d54d2:	21da      	movs	r1, #218	; 0xda
   d54d4:	f7ff ff16 	bl	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d54d8:	4620      	mov	r0, r4
   d54da:	2112      	movs	r1, #18
   d54dc:	f7ff ff12 	bl	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d54e0:	2181      	movs	r1, #129	; 0x81
   d54e2:	4620      	mov	r0, r4
   d54e4:	f7ff ff0e 	bl	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d54e8:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d54ea:	bf0c      	ite	eq
   d54ec:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
   d54ee:	21cf      	movne	r1, #207	; 0xcf
   d54f0:	4620      	mov	r0, r4
   d54f2:	f7ff ff07 	bl	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d54f6:	21d9      	movs	r1, #217	; 0xd9
   d54f8:	4620      	mov	r0, r4
   d54fa:	f7ff ff03 	bl	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d54fe:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d5500:	bf0c      	ite	eq
   d5502:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
   d5504:	21f1      	movne	r1, #241	; 0xf1
   d5506:	4620      	mov	r0, r4
   d5508:	f7ff fefc 	bl	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d550c:	4620      	mov	r0, r4
   d550e:	21db      	movs	r1, #219	; 0xdb
   d5510:	f7ff fef8 	bl	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d5514:	4620      	mov	r0, r4
   d5516:	2140      	movs	r1, #64	; 0x40
   d5518:	f7ff fef4 	bl	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d551c:	4620      	mov	r0, r4
   d551e:	21a4      	movs	r1, #164	; 0xa4
   d5520:	f7ff fef0 	bl	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d5524:	4620      	mov	r0, r4
   d5526:	21a6      	movs	r1, #166	; 0xa6
   d5528:	f7ff feec 	bl	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d552c:	4620      	mov	r0, r4
   d552e:	21af      	movs	r1, #175	; 0xaf
}
   d5530:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d5534:	f7ff bee6 	b.w	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d5538 <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d5538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d553c:	2121      	movs	r1, #33	; 0x21
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d553e:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d5540:	f7ff fee0 	bl	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d5544:	2100      	movs	r1, #0
   d5546:	4620      	mov	r0, r4
   d5548:	f7ff fedc 	bl	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d554c:	217f      	movs	r1, #127	; 0x7f
   d554e:	4620      	mov	r0, r4
   d5550:	f7ff fed8 	bl	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d5554:	2122      	movs	r1, #34	; 0x22
   d5556:	4620      	mov	r0, r4
   d5558:	f7ff fed4 	bl	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d555c:	2100      	movs	r1, #0
   d555e:	4620      	mov	r0, r4
   d5560:	f7ff fed0 	bl	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d5564:	2107      	movs	r1, #7
   d5566:	4620      	mov	r0, r4
   d5568:	f7ff fecc 	bl	d5304 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
   d556c:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d5570:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d5630 <_ZN16Adafruit_SSD13067displayEv+0xf8>
   d5574:	3301      	adds	r3, #1
   d5576:	d035      	beq.n	d55e4 <_ZN16Adafruit_SSD13067displayEv+0xac>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d5578:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d557c:	2101      	movs	r1, #1
   d557e:	b280      	uxth	r0, r0
   d5580:	f001 fb67 	bl	d6c52 <digitalWrite>
    digitalWrite(dc, HIGH);
   d5584:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d5588:	2101      	movs	r1, #1
   d558a:	b280      	uxth	r0, r0
   d558c:	f001 fb61 	bl	d6c52 <digitalWrite>
    digitalWrite(cs, LOW);
   d5590:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5594:	2100      	movs	r1, #0
   d5596:	b280      	uxth	r0, r0
   d5598:	f001 fb5b 	bl	d6c52 <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d559c:	2001      	movs	r0, #1
   d559e:	f000 f8bd 	bl	d571c <HAL_Delay_Microseconds>
   d55a2:	2500      	movs	r5, #0
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d55a4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
   d55a8:	f818 6005 	ldrb.w	r6, [r8, r5]
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d55ac:	b12b      	cbz	r3, d55ba <_ZN16Adafruit_SSD13067displayEv+0x82>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d55ae:	f7fe ffd5 	bl	d455c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d55b2:	4631      	mov	r1, r6
   d55b4:	f000 ff8e 	bl	d64d4 <_ZN8SPIClass8transferEh>
   d55b8:	e005      	b.n	d55c6 <_ZN16Adafruit_SSD13067displayEv+0x8e>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d55ba:	4633      	mov	r3, r6
   d55bc:	2201      	movs	r2, #1
   d55be:	7fa1      	ldrb	r1, [r4, #30]
   d55c0:	7f60      	ldrb	r0, [r4, #29]
   d55c2:	f001 fb98 	bl	d6cf6 <shiftOut>
   d55c6:	3501      	adds	r5, #1
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d55c8:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d55cc:	d1ea      	bne.n	d55a4 <_ZN16Adafruit_SSD13067displayEv+0x6c>
   d55ce:	2001      	movs	r0, #1
   d55d0:	f000 f8a4 	bl	d571c <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d55d4:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d55d8:	2101      	movs	r1, #1
   d55da:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d55dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d55e0:	f001 bb37 	b.w	d6c52 <digitalWrite>
   d55e4:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d55e6:	f001 fbc3 	bl	d6d70 <_Z19__fetch_global_Wirev>
   d55ea:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d55ee:	f000 fbb2 	bl	d5d56 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d55f2:	f001 fbbd 	bl	d6d70 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d55f6:	6803      	ldr	r3, [r0, #0]
   d55f8:	2140      	movs	r1, #64	; 0x40
   d55fa:	689b      	ldr	r3, [r3, #8]
   d55fc:	4798      	blx	r3
   d55fe:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
   d5600:	f001 fbb6 	bl	d6d70 <_Z19__fetch_global_Wirev>
   d5604:	19af      	adds	r7, r5, r6
   d5606:	6803      	ldr	r3, [r0, #0]
   d5608:	b2bf      	uxth	r7, r7
   d560a:	689b      	ldr	r3, [r3, #8]
   d560c:	f818 1007 	ldrb.w	r1, [r8, r7]
   d5610:	3601      	adds	r6, #1
   d5612:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
   d5614:	2e10      	cmp	r6, #16
   d5616:	d1f3      	bne.n	d5600 <_ZN16Adafruit_SSD13067displayEv+0xc8>
   d5618:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
   d561a:	f001 fba9 	bl	d6d70 <_Z19__fetch_global_Wirev>
   d561e:	b2ad      	uxth	r5, r5
   d5620:	f000 fba0 	bl	d5d64 <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d5624:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d5628:	d1dd      	bne.n	d55e6 <_ZN16Adafruit_SSD13067displayEv+0xae>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d562a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d562e:	bf00      	nop
   d5630:	2003ddec 	.word	0x2003ddec

000d5634 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d5634:	f000 b882 	b.w	d573c <HAL_Pin_Map>

000d5638 <_ZN9OneButtonC1Eibb>:
 * Initialize the OneButton library.
 * @param pin The pin to be used for input from a momentary button.
 * @param activeLow Set to true when the input level is LOW when the button is pressed, Default is true.
 * @param pullupActive Activate the internal pullup when available. Default is true.
 */
OneButton::OneButton(int pin, boolean activeLow, bool pullupActive)
   d5638:	b538      	push	{r3, r4, r5, lr}
   d563a:	4604      	mov	r4, r0
   d563c:	4608      	mov	r0, r1
   d563e:	2132      	movs	r1, #50	; 0x32
   d5640:	6061      	str	r1, [r4, #4]
   d5642:	f44f 7116 	mov.w	r1, #600	; 0x258
   d5646:	2500      	movs	r5, #0
   d5648:	60a1      	str	r1, [r4, #8]
   d564a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d564e:	60e1      	str	r1, [r4, #12]
   d5650:	7525      	strb	r5, [r4, #20]
   d5652:	61a5      	str	r5, [r4, #24]
   d5654:	61e5      	str	r5, [r4, #28]
   d5656:	6225      	str	r5, [r4, #32]
   d5658:	6265      	str	r5, [r4, #36]	; 0x24
   d565a:	62a5      	str	r5, [r4, #40]	; 0x28
   d565c:	62e5      	str	r5, [r4, #44]	; 0x2c
   d565e:	6325      	str	r5, [r4, #48]	; 0x30
   d5660:	6365      	str	r5, [r4, #52]	; 0x34
   d5662:	63a5      	str	r5, [r4, #56]	; 0x38
   d5664:	63e5      	str	r5, [r4, #60]	; 0x3c
   d5666:	6425      	str	r5, [r4, #64]	; 0x40
   d5668:	6465      	str	r5, [r4, #68]	; 0x44
   d566a:	64a5      	str	r5, [r4, #72]	; 0x48
   d566c:	6525      	str	r5, [r4, #80]	; 0x50
   d566e:	6565      	str	r5, [r4, #84]	; 0x54
   d5670:	65a5      	str	r5, [r4, #88]	; 0x58
   d5672:	65e5      	str	r5, [r4, #92]	; 0x5c
{
  // OneButton();
  _pin = pin;
   d5674:	6020      	str	r0, [r4, #0]

  if (activeLow) {
   d5676:	b10a      	cbz	r2, d567c <_ZN9OneButtonC1Eibb+0x44>
    // the button connects the input pin to GND when pressed.
    _buttonPressed = LOW;
   d5678:	6125      	str	r5, [r4, #16]
   d567a:	e001      	b.n	d5680 <_ZN9OneButtonC1Eibb+0x48>

  } else {
    // the button connects the input pin to VCC when pressed.
    _buttonPressed = HIGH;
   d567c:	2201      	movs	r2, #1
   d567e:	6122      	str	r2, [r4, #16]
   d5680:	b280      	uxth	r0, r0
  } // if

  if (pullupActive) {
   d5682:	b10b      	cbz	r3, d5688 <_ZN9OneButtonC1Eibb+0x50>
    // use the given pin as input and activate internal PULLUP resistor.
    pinMode(pin, INPUT_PULLUP);
   d5684:	2102      	movs	r1, #2
   d5686:	e000      	b.n	d568a <_ZN9OneButtonC1Eibb+0x52>
  } else {
    // use the given pin as input
    pinMode(pin, INPUT);
   d5688:	4619      	mov	r1, r3
   d568a:	f001 fad1 	bl	d6c30 <pinMode>
  } // if
} // OneButton
   d568e:	4620      	mov	r0, r4
   d5690:	bd38      	pop	{r3, r4, r5, pc}

000d5692 <_ZN9OneButton13setClickTicksEi>:

// explicitly set the number of millisec that have to pass by before a click is
// detected.
void OneButton::setClickTicks(int ticks)
{
  _clickTicks = ticks;
   d5692:	6081      	str	r1, [r0, #8]
   d5694:	4770      	bx	lr

000d5696 <_ZN9OneButton11attachClickEPFvvE>:


// save function for click event
void OneButton::attachClick(callbackFunction newFunction)
{
  _clickFunc = newFunction;
   d5696:	6181      	str	r1, [r0, #24]
   d5698:	4770      	bx	lr

000d569a <_ZN9OneButton20attachLongPressStartEPFvvE>:
} // attachPressStart

// save function for longPressStart event
void OneButton::attachLongPressStart(callbackFunction newFunction)
{
  _longPressStartFunc = newFunction;
   d569a:	6381      	str	r1, [r0, #56]	; 0x38
   d569c:	4770      	bx	lr

000d569e <_ZN9OneButton19attachLongPressStopEPFvvE>:
} // attachLongPressStart

// save function for longPressStop event
void OneButton::attachLongPressStop(callbackFunction newFunction)
{
  _longPressStopFunc = newFunction;
   d569e:	6441      	str	r1, [r0, #68]	; 0x44
   d56a0:	4770      	bx	lr

000d56a2 <_GLOBAL__sub_I__ZN9OneButtonC2Ev>:
   d56a2:	f000 b84b 	b.w	d573c <HAL_Pin_Map>
	...

000d56a8 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   d56a8:	b508      	push	{r3, lr}
   d56aa:	f000 f847 	bl	d573c <HAL_Pin_Map>
  #define pinHI(_pin) (PIN_MAP2[_pin].gpio_peripheral->BSRRL = PIN_MAP2[_pin].gpio_pin)
#elif (PLATFORM_ID == 12) || (PLATFORM_ID == 13) || (PLATFORM_ID == 14) // Argon (12), Boron (13), Xenon (14)
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "pinmap_impl.h"
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d56ae:	f000 f845 	bl	d573c <HAL_Pin_Map>
   d56b2:	4b01      	ldr	r3, [pc, #4]	; (d56b8 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
   d56b4:	6018      	str	r0, [r3, #0]
   d56b6:	bd08      	pop	{r3, pc}
   d56b8:	2003e3d8 	.word	0x2003e3d8

000d56bc <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d56bc:	b508      	push	{r3, lr}
   d56be:	4b02      	ldr	r3, [pc, #8]	; (d56c8 <os_thread_is_current+0xc>)
   d56c0:	681b      	ldr	r3, [r3, #0]
   d56c2:	689b      	ldr	r3, [r3, #8]
   d56c4:	9301      	str	r3, [sp, #4]
   d56c6:	bd08      	pop	{r3, pc}
   d56c8:	00030248 	.word	0x00030248

000d56cc <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d56cc:	b508      	push	{r3, lr}
   d56ce:	4b02      	ldr	r3, [pc, #8]	; (d56d8 <os_thread_join+0xc>)
   d56d0:	681b      	ldr	r3, [r3, #0]
   d56d2:	691b      	ldr	r3, [r3, #16]
   d56d4:	9301      	str	r3, [sp, #4]
   d56d6:	bd08      	pop	{r3, pc}
   d56d8:	00030248 	.word	0x00030248

000d56dc <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d56dc:	b508      	push	{r3, lr}
   d56de:	4b02      	ldr	r3, [pc, #8]	; (d56e8 <os_thread_cleanup+0xc>)
   d56e0:	681b      	ldr	r3, [r3, #0]
   d56e2:	695b      	ldr	r3, [r3, #20]
   d56e4:	9301      	str	r3, [sp, #4]
   d56e6:	bd08      	pop	{r3, pc}
   d56e8:	00030248 	.word	0x00030248

000d56ec <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d56ec:	b508      	push	{r3, lr}
   d56ee:	4b02      	ldr	r3, [pc, #8]	; (d56f8 <os_mutex_recursive_create+0xc>)
   d56f0:	681b      	ldr	r3, [r3, #0]
   d56f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d56f4:	9301      	str	r3, [sp, #4]
   d56f6:	bd08      	pop	{r3, pc}
   d56f8:	00030248 	.word	0x00030248

000d56fc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d56fc:	b508      	push	{r3, lr}
   d56fe:	4b02      	ldr	r3, [pc, #8]	; (d5708 <os_mutex_recursive_destroy+0xc>)
   d5700:	681b      	ldr	r3, [r3, #0]
   d5702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5704:	9301      	str	r3, [sp, #4]
   d5706:	bd08      	pop	{r3, pc}
   d5708:	00030248 	.word	0x00030248

000d570c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d570c:	b508      	push	{r3, lr}
   d570e:	4b02      	ldr	r3, [pc, #8]	; (d5718 <HAL_RNG_GetRandomNumber+0xc>)
   d5710:	681b      	ldr	r3, [r3, #0]
   d5712:	685b      	ldr	r3, [r3, #4]
   d5714:	9301      	str	r3, [sp, #4]
   d5716:	bd08      	pop	{r3, pc}
   d5718:	00030218 	.word	0x00030218

000d571c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d571c:	b508      	push	{r3, lr}
   d571e:	4b02      	ldr	r3, [pc, #8]	; (d5728 <HAL_Delay_Microseconds+0xc>)
   d5720:	681b      	ldr	r3, [r3, #0]
   d5722:	68db      	ldr	r3, [r3, #12]
   d5724:	9301      	str	r3, [sp, #4]
   d5726:	bd08      	pop	{r3, pc}
   d5728:	00030218 	.word	0x00030218

000d572c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d572c:	b508      	push	{r3, lr}
   d572e:	4b02      	ldr	r3, [pc, #8]	; (d5738 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5730:	681b      	ldr	r3, [r3, #0]
   d5732:	695b      	ldr	r3, [r3, #20]
   d5734:	9301      	str	r3, [sp, #4]
   d5736:	bd08      	pop	{r3, pc}
   d5738:	00030218 	.word	0x00030218

000d573c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d573c:	b508      	push	{r3, lr}
   d573e:	4b02      	ldr	r3, [pc, #8]	; (d5748 <HAL_Pin_Map+0xc>)
   d5740:	681b      	ldr	r3, [r3, #0]
   d5742:	681b      	ldr	r3, [r3, #0]
   d5744:	9301      	str	r3, [sp, #4]
   d5746:	bd08      	pop	{r3, pc}
   d5748:	0003022c 	.word	0x0003022c

000d574c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d574c:	b508      	push	{r3, lr}
   d574e:	4b02      	ldr	r3, [pc, #8]	; (d5758 <HAL_Validate_Pin_Function+0xc>)
   d5750:	681b      	ldr	r3, [r3, #0]
   d5752:	685b      	ldr	r3, [r3, #4]
   d5754:	9301      	str	r3, [sp, #4]
   d5756:	bd08      	pop	{r3, pc}
   d5758:	0003022c 	.word	0x0003022c

000d575c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d575c:	b508      	push	{r3, lr}
   d575e:	4b02      	ldr	r3, [pc, #8]	; (d5768 <HAL_Pin_Mode+0xc>)
   d5760:	681b      	ldr	r3, [r3, #0]
   d5762:	689b      	ldr	r3, [r3, #8]
   d5764:	9301      	str	r3, [sp, #4]
   d5766:	bd08      	pop	{r3, pc}
   d5768:	0003022c 	.word	0x0003022c

000d576c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d576c:	b508      	push	{r3, lr}
   d576e:	4b02      	ldr	r3, [pc, #8]	; (d5778 <HAL_Get_Pin_Mode+0xc>)
   d5770:	681b      	ldr	r3, [r3, #0]
   d5772:	68db      	ldr	r3, [r3, #12]
   d5774:	9301      	str	r3, [sp, #4]
   d5776:	bd08      	pop	{r3, pc}
   d5778:	0003022c 	.word	0x0003022c

000d577c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d577c:	b508      	push	{r3, lr}
   d577e:	4b02      	ldr	r3, [pc, #8]	; (d5788 <HAL_GPIO_Write+0xc>)
   d5780:	681b      	ldr	r3, [r3, #0]
   d5782:	691b      	ldr	r3, [r3, #16]
   d5784:	9301      	str	r3, [sp, #4]
   d5786:	bd08      	pop	{r3, pc}
   d5788:	0003022c 	.word	0x0003022c

000d578c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d578c:	b508      	push	{r3, lr}
   d578e:	4b02      	ldr	r3, [pc, #8]	; (d5798 <HAL_GPIO_Read+0xc>)
   d5790:	681b      	ldr	r3, [r3, #0]
   d5792:	695b      	ldr	r3, [r3, #20]
   d5794:	9301      	str	r3, [sp, #4]
   d5796:	bd08      	pop	{r3, pc}
   d5798:	0003022c 	.word	0x0003022c

000d579c <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d579c:	b508      	push	{r3, lr}
   d579e:	4b02      	ldr	r3, [pc, #8]	; (d57a8 <HAL_DAC_Write+0xc>)
   d57a0:	681b      	ldr	r3, [r3, #0]
   d57a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d57a4:	9301      	str	r3, [sp, #4]
   d57a6:	bd08      	pop	{r3, pc}
   d57a8:	0003022c 	.word	0x0003022c

000d57ac <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
   d57ac:	b508      	push	{r3, lr}
   d57ae:	4b02      	ldr	r3, [pc, #8]	; (d57b8 <HAL_PWM_Write_Ext+0xc>)
   d57b0:	681b      	ldr	r3, [r3, #0]
   d57b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d57b4:	9301      	str	r3, [sp, #4]
   d57b6:	bd08      	pop	{r3, pc}
   d57b8:	0003022c 	.word	0x0003022c

000d57bc <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d57bc:	b508      	push	{r3, lr}
   d57be:	4b02      	ldr	r3, [pc, #8]	; (d57c8 <HAL_I2C_Begin+0xc>)
   d57c0:	681b      	ldr	r3, [r3, #0]
   d57c2:	68db      	ldr	r3, [r3, #12]
   d57c4:	9301      	str	r3, [sp, #4]
   d57c6:	bd08      	pop	{r3, pc}
   d57c8:	00030228 	.word	0x00030228

000d57cc <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d57cc:	b508      	push	{r3, lr}
   d57ce:	4b02      	ldr	r3, [pc, #8]	; (d57d8 <HAL_I2C_Begin_Transmission+0xc>)
   d57d0:	681b      	ldr	r3, [r3, #0]
   d57d2:	699b      	ldr	r3, [r3, #24]
   d57d4:	9301      	str	r3, [sp, #4]
   d57d6:	bd08      	pop	{r3, pc}
   d57d8:	00030228 	.word	0x00030228

000d57dc <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d57dc:	b508      	push	{r3, lr}
   d57de:	4b02      	ldr	r3, [pc, #8]	; (d57e8 <HAL_I2C_End_Transmission+0xc>)
   d57e0:	681b      	ldr	r3, [r3, #0]
   d57e2:	69db      	ldr	r3, [r3, #28]
   d57e4:	9301      	str	r3, [sp, #4]
   d57e6:	bd08      	pop	{r3, pc}
   d57e8:	00030228 	.word	0x00030228

000d57ec <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d57ec:	b508      	push	{r3, lr}
   d57ee:	4b02      	ldr	r3, [pc, #8]	; (d57f8 <HAL_I2C_Write_Data+0xc>)
   d57f0:	681b      	ldr	r3, [r3, #0]
   d57f2:	6a1b      	ldr	r3, [r3, #32]
   d57f4:	9301      	str	r3, [sp, #4]
   d57f6:	bd08      	pop	{r3, pc}
   d57f8:	00030228 	.word	0x00030228

000d57fc <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d57fc:	b508      	push	{r3, lr}
   d57fe:	4b02      	ldr	r3, [pc, #8]	; (d5808 <HAL_I2C_Available_Data+0xc>)
   d5800:	681b      	ldr	r3, [r3, #0]
   d5802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5804:	9301      	str	r3, [sp, #4]
   d5806:	bd08      	pop	{r3, pc}
   d5808:	00030228 	.word	0x00030228

000d580c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d580c:	b508      	push	{r3, lr}
   d580e:	4b02      	ldr	r3, [pc, #8]	; (d5818 <HAL_I2C_Read_Data+0xc>)
   d5810:	681b      	ldr	r3, [r3, #0]
   d5812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5814:	9301      	str	r3, [sp, #4]
   d5816:	bd08      	pop	{r3, pc}
   d5818:	00030228 	.word	0x00030228

000d581c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d581c:	b508      	push	{r3, lr}
   d581e:	4b02      	ldr	r3, [pc, #8]	; (d5828 <HAL_I2C_Peek_Data+0xc>)
   d5820:	681b      	ldr	r3, [r3, #0]
   d5822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5824:	9301      	str	r3, [sp, #4]
   d5826:	bd08      	pop	{r3, pc}
   d5828:	00030228 	.word	0x00030228

000d582c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d582c:	b508      	push	{r3, lr}
   d582e:	4b02      	ldr	r3, [pc, #8]	; (d5838 <HAL_I2C_Flush_Data+0xc>)
   d5830:	681b      	ldr	r3, [r3, #0]
   d5832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5834:	9301      	str	r3, [sp, #4]
   d5836:	bd08      	pop	{r3, pc}
   d5838:	00030228 	.word	0x00030228

000d583c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d583c:	b508      	push	{r3, lr}
   d583e:	4b02      	ldr	r3, [pc, #8]	; (d5848 <HAL_I2C_Is_Enabled+0xc>)
   d5840:	681b      	ldr	r3, [r3, #0]
   d5842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5844:	9301      	str	r3, [sp, #4]
   d5846:	bd08      	pop	{r3, pc}
   d5848:	00030228 	.word	0x00030228

000d584c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d584c:	b508      	push	{r3, lr}
   d584e:	4b02      	ldr	r3, [pc, #8]	; (d5858 <HAL_I2C_Init+0xc>)
   d5850:	681b      	ldr	r3, [r3, #0]
   d5852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5854:	9301      	str	r3, [sp, #4]
   d5856:	bd08      	pop	{r3, pc}
   d5858:	00030228 	.word	0x00030228

000d585c <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d585c:	b508      	push	{r3, lr}
   d585e:	4b02      	ldr	r3, [pc, #8]	; (d5868 <HAL_I2C_Request_Data_Ex+0xc>)
   d5860:	681b      	ldr	r3, [r3, #0]
   d5862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5864:	9301      	str	r3, [sp, #4]
   d5866:	bd08      	pop	{r3, pc}
   d5868:	00030228 	.word	0x00030228

000d586c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d586c:	b508      	push	{r3, lr}
   d586e:	4b02      	ldr	r3, [pc, #8]	; (d5878 <inet_inet_ntop+0xc>)
   d5870:	681b      	ldr	r3, [r3, #0]
   d5872:	695b      	ldr	r3, [r3, #20]
   d5874:	9301      	str	r3, [sp, #4]
   d5876:	bd08      	pop	{r3, pc}
   d5878:	00030264 	.word	0x00030264

000d587c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d587c:	b508      	push	{r3, lr}
   d587e:	4b02      	ldr	r3, [pc, #8]	; (d5888 <netdb_freeaddrinfo+0xc>)
   d5880:	681b      	ldr	r3, [r3, #0]
   d5882:	689b      	ldr	r3, [r3, #8]
   d5884:	9301      	str	r3, [sp, #4]
   d5886:	bd08      	pop	{r3, pc}
   d5888:	00030268 	.word	0x00030268

000d588c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d588c:	b508      	push	{r3, lr}
   d588e:	4b02      	ldr	r3, [pc, #8]	; (d5898 <netdb_getaddrinfo+0xc>)
   d5890:	681b      	ldr	r3, [r3, #0]
   d5892:	68db      	ldr	r3, [r3, #12]
   d5894:	9301      	str	r3, [sp, #4]
   d5896:	bd08      	pop	{r3, pc}
   d5898:	00030268 	.word	0x00030268

000d589c <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d589c:	b508      	push	{r3, lr}
   d589e:	4b02      	ldr	r3, [pc, #8]	; (d58a8 <HAL_SPI_Begin+0xc>)
   d58a0:	681b      	ldr	r3, [r3, #0]
   d58a2:	681b      	ldr	r3, [r3, #0]
   d58a4:	9301      	str	r3, [sp, #4]
   d58a6:	bd08      	pop	{r3, pc}
   d58a8:	00030230 	.word	0x00030230

000d58ac <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d58ac:	b508      	push	{r3, lr}
   d58ae:	4b02      	ldr	r3, [pc, #8]	; (d58b8 <HAL_SPI_Set_Bit_Order+0xc>)
   d58b0:	681b      	ldr	r3, [r3, #0]
   d58b2:	689b      	ldr	r3, [r3, #8]
   d58b4:	9301      	str	r3, [sp, #4]
   d58b6:	bd08      	pop	{r3, pc}
   d58b8:	00030230 	.word	0x00030230

000d58bc <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d58bc:	b508      	push	{r3, lr}
   d58be:	4b02      	ldr	r3, [pc, #8]	; (d58c8 <HAL_SPI_Set_Data_Mode+0xc>)
   d58c0:	681b      	ldr	r3, [r3, #0]
   d58c2:	68db      	ldr	r3, [r3, #12]
   d58c4:	9301      	str	r3, [sp, #4]
   d58c6:	bd08      	pop	{r3, pc}
   d58c8:	00030230 	.word	0x00030230

000d58cc <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d58cc:	b508      	push	{r3, lr}
   d58ce:	4b02      	ldr	r3, [pc, #8]	; (d58d8 <HAL_SPI_Set_Clock_Divider+0xc>)
   d58d0:	681b      	ldr	r3, [r3, #0]
   d58d2:	691b      	ldr	r3, [r3, #16]
   d58d4:	9301      	str	r3, [sp, #4]
   d58d6:	bd08      	pop	{r3, pc}
   d58d8:	00030230 	.word	0x00030230

000d58dc <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d58dc:	b508      	push	{r3, lr}
   d58de:	4b02      	ldr	r3, [pc, #8]	; (d58e8 <HAL_SPI_Send_Receive_Data+0xc>)
   d58e0:	681b      	ldr	r3, [r3, #0]
   d58e2:	695b      	ldr	r3, [r3, #20]
   d58e4:	9301      	str	r3, [sp, #4]
   d58e6:	bd08      	pop	{r3, pc}
   d58e8:	00030230 	.word	0x00030230

000d58ec <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d58ec:	b508      	push	{r3, lr}
   d58ee:	4b02      	ldr	r3, [pc, #8]	; (d58f8 <HAL_SPI_Init+0xc>)
   d58f0:	681b      	ldr	r3, [r3, #0]
   d58f2:	69db      	ldr	r3, [r3, #28]
   d58f4:	9301      	str	r3, [sp, #4]
   d58f6:	bd08      	pop	{r3, pc}
   d58f8:	00030230 	.word	0x00030230

000d58fc <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d58fc:	b508      	push	{r3, lr}
   d58fe:	4b02      	ldr	r3, [pc, #8]	; (d5908 <HAL_SPI_Is_Enabled+0xc>)
   d5900:	681b      	ldr	r3, [r3, #0]
   d5902:	6a1b      	ldr	r3, [r3, #32]
   d5904:	9301      	str	r3, [sp, #4]
   d5906:	bd08      	pop	{r3, pc}
   d5908:	00030230 	.word	0x00030230

000d590c <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d590c:	b508      	push	{r3, lr}
   d590e:	4b02      	ldr	r3, [pc, #8]	; (d5918 <HAL_SPI_Info+0xc>)
   d5910:	681b      	ldr	r3, [r3, #0]
   d5912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5914:	9301      	str	r3, [sp, #4]
   d5916:	bd08      	pop	{r3, pc}
   d5918:	00030230 	.word	0x00030230

000d591c <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d591c:	b508      	push	{r3, lr}
   d591e:	4b02      	ldr	r3, [pc, #8]	; (d5928 <HAL_SPI_Set_Settings+0xc>)
   d5920:	681b      	ldr	r3, [r3, #0]
   d5922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5924:	9301      	str	r3, [sp, #4]
   d5926:	bd08      	pop	{r3, pc}
   d5928:	00030230 	.word	0x00030230

000d592c <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d592c:	b508      	push	{r3, lr}
   d592e:	4b02      	ldr	r3, [pc, #8]	; (d5938 <HAL_SPI_Acquire+0xc>)
   d5930:	681b      	ldr	r3, [r3, #0]
   d5932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5934:	9301      	str	r3, [sp, #4]
   d5936:	bd08      	pop	{r3, pc}
   d5938:	00030230 	.word	0x00030230

000d593c <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d593c:	b508      	push	{r3, lr}
   d593e:	4b02      	ldr	r3, [pc, #8]	; (d5948 <HAL_SPI_Release+0xc>)
   d5940:	681b      	ldr	r3, [r3, #0]
   d5942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5944:	9301      	str	r3, [sp, #4]
   d5946:	bd08      	pop	{r3, pc}
   d5948:	00030230 	.word	0x00030230

000d594c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d594c:	b508      	push	{r3, lr}
   d594e:	4b02      	ldr	r3, [pc, #8]	; (d5958 <HAL_USART_Init+0xc>)
   d5950:	681b      	ldr	r3, [r3, #0]
   d5952:	681b      	ldr	r3, [r3, #0]
   d5954:	9301      	str	r3, [sp, #4]
   d5956:	bd08      	pop	{r3, pc}
   d5958:	0003023c 	.word	0x0003023c

000d595c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d595c:	b508      	push	{r3, lr}
   d595e:	4b02      	ldr	r3, [pc, #8]	; (d5968 <HAL_USART_Write_Data+0xc>)
   d5960:	681b      	ldr	r3, [r3, #0]
   d5962:	68db      	ldr	r3, [r3, #12]
   d5964:	9301      	str	r3, [sp, #4]
   d5966:	bd08      	pop	{r3, pc}
   d5968:	0003023c 	.word	0x0003023c

000d596c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d596c:	b508      	push	{r3, lr}
   d596e:	4b02      	ldr	r3, [pc, #8]	; (d5978 <HAL_USART_Available_Data+0xc>)
   d5970:	681b      	ldr	r3, [r3, #0]
   d5972:	691b      	ldr	r3, [r3, #16]
   d5974:	9301      	str	r3, [sp, #4]
   d5976:	bd08      	pop	{r3, pc}
   d5978:	0003023c 	.word	0x0003023c

000d597c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d597c:	b508      	push	{r3, lr}
   d597e:	4b02      	ldr	r3, [pc, #8]	; (d5988 <HAL_USART_Read_Data+0xc>)
   d5980:	681b      	ldr	r3, [r3, #0]
   d5982:	695b      	ldr	r3, [r3, #20]
   d5984:	9301      	str	r3, [sp, #4]
   d5986:	bd08      	pop	{r3, pc}
   d5988:	0003023c 	.word	0x0003023c

000d598c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d598c:	b508      	push	{r3, lr}
   d598e:	4b02      	ldr	r3, [pc, #8]	; (d5998 <HAL_USART_Peek_Data+0xc>)
   d5990:	681b      	ldr	r3, [r3, #0]
   d5992:	699b      	ldr	r3, [r3, #24]
   d5994:	9301      	str	r3, [sp, #4]
   d5996:	bd08      	pop	{r3, pc}
   d5998:	0003023c 	.word	0x0003023c

000d599c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d599c:	b508      	push	{r3, lr}
   d599e:	4b02      	ldr	r3, [pc, #8]	; (d59a8 <HAL_USART_Flush_Data+0xc>)
   d59a0:	681b      	ldr	r3, [r3, #0]
   d59a2:	69db      	ldr	r3, [r3, #28]
   d59a4:	9301      	str	r3, [sp, #4]
   d59a6:	bd08      	pop	{r3, pc}
   d59a8:	0003023c 	.word	0x0003023c

000d59ac <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d59ac:	b508      	push	{r3, lr}
   d59ae:	4b02      	ldr	r3, [pc, #8]	; (d59b8 <HAL_USART_Is_Enabled+0xc>)
   d59b0:	681b      	ldr	r3, [r3, #0]
   d59b2:	6a1b      	ldr	r3, [r3, #32]
   d59b4:	9301      	str	r3, [sp, #4]
   d59b6:	bd08      	pop	{r3, pc}
   d59b8:	0003023c 	.word	0x0003023c

000d59bc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d59bc:	b508      	push	{r3, lr}
   d59be:	4b02      	ldr	r3, [pc, #8]	; (d59c8 <HAL_USART_Available_Data_For_Write+0xc>)
   d59c0:	681b      	ldr	r3, [r3, #0]
   d59c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d59c4:	9301      	str	r3, [sp, #4]
   d59c6:	bd08      	pop	{r3, pc}
   d59c8:	0003023c 	.word	0x0003023c

000d59cc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d59cc:	b508      	push	{r3, lr}
   d59ce:	4b02      	ldr	r3, [pc, #8]	; (d59d8 <HAL_USB_USART_Init+0xc>)
   d59d0:	681b      	ldr	r3, [r3, #0]
   d59d2:	681b      	ldr	r3, [r3, #0]
   d59d4:	9301      	str	r3, [sp, #4]
   d59d6:	bd08      	pop	{r3, pc}
   d59d8:	0003024c 	.word	0x0003024c

000d59dc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d59dc:	b508      	push	{r3, lr}
   d59de:	4b02      	ldr	r3, [pc, #8]	; (d59e8 <HAL_USB_USART_Begin+0xc>)
   d59e0:	681b      	ldr	r3, [r3, #0]
   d59e2:	685b      	ldr	r3, [r3, #4]
   d59e4:	9301      	str	r3, [sp, #4]
   d59e6:	bd08      	pop	{r3, pc}
   d59e8:	0003024c 	.word	0x0003024c

000d59ec <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d59ec:	b508      	push	{r3, lr}
   d59ee:	4b02      	ldr	r3, [pc, #8]	; (d59f8 <HAL_USB_USART_Available_Data+0xc>)
   d59f0:	681b      	ldr	r3, [r3, #0]
   d59f2:	691b      	ldr	r3, [r3, #16]
   d59f4:	9301      	str	r3, [sp, #4]
   d59f6:	bd08      	pop	{r3, pc}
   d59f8:	0003024c 	.word	0x0003024c

000d59fc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d59fc:	b508      	push	{r3, lr}
   d59fe:	4b02      	ldr	r3, [pc, #8]	; (d5a08 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5a00:	681b      	ldr	r3, [r3, #0]
   d5a02:	695b      	ldr	r3, [r3, #20]
   d5a04:	9301      	str	r3, [sp, #4]
   d5a06:	bd08      	pop	{r3, pc}
   d5a08:	0003024c 	.word	0x0003024c

000d5a0c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5a0c:	b508      	push	{r3, lr}
   d5a0e:	4b02      	ldr	r3, [pc, #8]	; (d5a18 <HAL_USB_USART_Receive_Data+0xc>)
   d5a10:	681b      	ldr	r3, [r3, #0]
   d5a12:	699b      	ldr	r3, [r3, #24]
   d5a14:	9301      	str	r3, [sp, #4]
   d5a16:	bd08      	pop	{r3, pc}
   d5a18:	0003024c 	.word	0x0003024c

000d5a1c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5a1c:	b508      	push	{r3, lr}
   d5a1e:	4b02      	ldr	r3, [pc, #8]	; (d5a28 <HAL_USB_USART_Send_Data+0xc>)
   d5a20:	681b      	ldr	r3, [r3, #0]
   d5a22:	69db      	ldr	r3, [r3, #28]
   d5a24:	9301      	str	r3, [sp, #4]
   d5a26:	bd08      	pop	{r3, pc}
   d5a28:	0003024c 	.word	0x0003024c

000d5a2c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5a2c:	b508      	push	{r3, lr}
   d5a2e:	4b02      	ldr	r3, [pc, #8]	; (d5a38 <HAL_USB_USART_Flush_Data+0xc>)
   d5a30:	681b      	ldr	r3, [r3, #0]
   d5a32:	6a1b      	ldr	r3, [r3, #32]
   d5a34:	9301      	str	r3, [sp, #4]
   d5a36:	bd08      	pop	{r3, pc}
   d5a38:	0003024c 	.word	0x0003024c

000d5a3c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5a3c:	b508      	push	{r3, lr}
   d5a3e:	4b02      	ldr	r3, [pc, #8]	; (d5a48 <panic_+0xc>)
   d5a40:	681b      	ldr	r3, [r3, #0]
   d5a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5a44:	9301      	str	r3, [sp, #4]
   d5a46:	bd08      	pop	{r3, pc}
   d5a48:	00030260 	.word	0x00030260

000d5a4c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5a4c:	b508      	push	{r3, lr}
   d5a4e:	4b02      	ldr	r3, [pc, #8]	; (d5a58 <set_system_mode+0xc>)
   d5a50:	681b      	ldr	r3, [r3, #0]
   d5a52:	685b      	ldr	r3, [r3, #4]
   d5a54:	9301      	str	r3, [sp, #4]
   d5a56:	bd08      	pop	{r3, pc}
   d5a58:	00030220 	.word	0x00030220

000d5a5c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5a5c:	b508      	push	{r3, lr}
   d5a5e:	4b02      	ldr	r3, [pc, #8]	; (d5a68 <system_delay_ms+0xc>)
   d5a60:	681b      	ldr	r3, [r3, #0]
   d5a62:	695b      	ldr	r3, [r3, #20]
   d5a64:	9301      	str	r3, [sp, #4]
   d5a66:	bd08      	pop	{r3, pc}
   d5a68:	00030220 	.word	0x00030220

000d5a6c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5a6c:	b508      	push	{r3, lr}
   d5a6e:	4b02      	ldr	r3, [pc, #8]	; (d5a78 <system_thread_set_state+0xc>)
   d5a70:	681b      	ldr	r3, [r3, #0]
   d5a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5a74:	9301      	str	r3, [sp, #4]
   d5a76:	bd08      	pop	{r3, pc}
   d5a78:	00030220 	.word	0x00030220

000d5a7c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5a7c:	b508      	push	{r3, lr}
   d5a7e:	4b03      	ldr	r3, [pc, #12]	; (d5a8c <system_ctrl_set_app_request_handler+0x10>)
   d5a80:	681b      	ldr	r3, [r3, #0]
   d5a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5a86:	9301      	str	r3, [sp, #4]
   d5a88:	bd08      	pop	{r3, pc}
   d5a8a:	0000      	.short	0x0000
   d5a8c:	00030220 	.word	0x00030220

000d5a90 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5a90:	b508      	push	{r3, lr}
   d5a92:	4b03      	ldr	r3, [pc, #12]	; (d5aa0 <system_ctrl_set_result+0x10>)
   d5a94:	681b      	ldr	r3, [r3, #0]
   d5a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5a9a:	9301      	str	r3, [sp, #4]
   d5a9c:	bd08      	pop	{r3, pc}
   d5a9e:	0000      	.short	0x0000
   d5aa0:	00030220 	.word	0x00030220

000d5aa4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5aa4:	b508      	push	{r3, lr}
   d5aa6:	4b02      	ldr	r3, [pc, #8]	; (d5ab0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5aa8:	681b      	ldr	r3, [r3, #0]
   d5aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5aac:	9301      	str	r3, [sp, #4]
   d5aae:	bd08      	pop	{r3, pc}
   d5ab0:	00030244 	.word	0x00030244

000d5ab4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5ab4:	b508      	push	{r3, lr}
   d5ab6:	4b02      	ldr	r3, [pc, #8]	; (d5ac0 <network_connect+0xc>)
   d5ab8:	681b      	ldr	r3, [r3, #0]
   d5aba:	685b      	ldr	r3, [r3, #4]
   d5abc:	9301      	str	r3, [sp, #4]
   d5abe:	bd08      	pop	{r3, pc}
   d5ac0:	00030240 	.word	0x00030240

000d5ac4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5ac4:	b508      	push	{r3, lr}
   d5ac6:	4b02      	ldr	r3, [pc, #8]	; (d5ad0 <network_connecting+0xc>)
   d5ac8:	681b      	ldr	r3, [r3, #0]
   d5aca:	689b      	ldr	r3, [r3, #8]
   d5acc:	9301      	str	r3, [sp, #4]
   d5ace:	bd08      	pop	{r3, pc}
   d5ad0:	00030240 	.word	0x00030240

000d5ad4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5ad4:	b508      	push	{r3, lr}
   d5ad6:	4b02      	ldr	r3, [pc, #8]	; (d5ae0 <network_disconnect+0xc>)
   d5ad8:	681b      	ldr	r3, [r3, #0]
   d5ada:	68db      	ldr	r3, [r3, #12]
   d5adc:	9301      	str	r3, [sp, #4]
   d5ade:	bd08      	pop	{r3, pc}
   d5ae0:	00030240 	.word	0x00030240

000d5ae4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5ae4:	b508      	push	{r3, lr}
   d5ae6:	4b02      	ldr	r3, [pc, #8]	; (d5af0 <network_ready+0xc>)
   d5ae8:	681b      	ldr	r3, [r3, #0]
   d5aea:	691b      	ldr	r3, [r3, #16]
   d5aec:	9301      	str	r3, [sp, #4]
   d5aee:	bd08      	pop	{r3, pc}
   d5af0:	00030240 	.word	0x00030240

000d5af4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5af4:	b508      	push	{r3, lr}
   d5af6:	4b02      	ldr	r3, [pc, #8]	; (d5b00 <network_on+0xc>)
   d5af8:	681b      	ldr	r3, [r3, #0]
   d5afa:	695b      	ldr	r3, [r3, #20]
   d5afc:	9301      	str	r3, [sp, #4]
   d5afe:	bd08      	pop	{r3, pc}
   d5b00:	00030240 	.word	0x00030240

000d5b04 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5b04:	b508      	push	{r3, lr}
   d5b06:	4b02      	ldr	r3, [pc, #8]	; (d5b10 <network_off+0xc>)
   d5b08:	681b      	ldr	r3, [r3, #0]
   d5b0a:	699b      	ldr	r3, [r3, #24]
   d5b0c:	9301      	str	r3, [sp, #4]
   d5b0e:	bd08      	pop	{r3, pc}
   d5b10:	00030240 	.word	0x00030240

000d5b14 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5b14:	b508      	push	{r3, lr}
   d5b16:	4b02      	ldr	r3, [pc, #8]	; (d5b20 <network_listen+0xc>)
   d5b18:	681b      	ldr	r3, [r3, #0]
   d5b1a:	69db      	ldr	r3, [r3, #28]
   d5b1c:	9301      	str	r3, [sp, #4]
   d5b1e:	bd08      	pop	{r3, pc}
   d5b20:	00030240 	.word	0x00030240

000d5b24 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5b24:	b508      	push	{r3, lr}
   d5b26:	4b02      	ldr	r3, [pc, #8]	; (d5b30 <network_listening+0xc>)
   d5b28:	681b      	ldr	r3, [r3, #0]
   d5b2a:	6a1b      	ldr	r3, [r3, #32]
   d5b2c:	9301      	str	r3, [sp, #4]
   d5b2e:	bd08      	pop	{r3, pc}
   d5b30:	00030240 	.word	0x00030240

000d5b34 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5b34:	b508      	push	{r3, lr}
   d5b36:	4b02      	ldr	r3, [pc, #8]	; (d5b40 <network_set_listen_timeout+0xc>)
   d5b38:	681b      	ldr	r3, [r3, #0]
   d5b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5b3c:	9301      	str	r3, [sp, #4]
   d5b3e:	bd08      	pop	{r3, pc}
   d5b40:	00030240 	.word	0x00030240

000d5b44 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5b44:	b508      	push	{r3, lr}
   d5b46:	4b02      	ldr	r3, [pc, #8]	; (d5b50 <network_get_listen_timeout+0xc>)
   d5b48:	681b      	ldr	r3, [r3, #0]
   d5b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5b4c:	9301      	str	r3, [sp, #4]
   d5b4e:	bd08      	pop	{r3, pc}
   d5b50:	00030240 	.word	0x00030240

000d5b54 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5b54:	b508      	push	{r3, lr}
   d5b56:	4b02      	ldr	r3, [pc, #8]	; (d5b60 <malloc+0xc>)
   d5b58:	681b      	ldr	r3, [r3, #0]
   d5b5a:	681b      	ldr	r3, [r3, #0]
   d5b5c:	9301      	str	r3, [sp, #4]
   d5b5e:	bd08      	pop	{r3, pc}
   d5b60:	0003021c 	.word	0x0003021c

000d5b64 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5b64:	b508      	push	{r3, lr}
   d5b66:	4b02      	ldr	r3, [pc, #8]	; (d5b70 <free+0xc>)
   d5b68:	681b      	ldr	r3, [r3, #0]
   d5b6a:	685b      	ldr	r3, [r3, #4]
   d5b6c:	9301      	str	r3, [sp, #4]
   d5b6e:	bd08      	pop	{r3, pc}
   d5b70:	0003021c 	.word	0x0003021c

000d5b74 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5b74:	b508      	push	{r3, lr}
   d5b76:	4b02      	ldr	r3, [pc, #8]	; (d5b80 <realloc+0xc>)
   d5b78:	681b      	ldr	r3, [r3, #0]
   d5b7a:	689b      	ldr	r3, [r3, #8]
   d5b7c:	9301      	str	r3, [sp, #4]
   d5b7e:	bd08      	pop	{r3, pc}
   d5b80:	0003021c 	.word	0x0003021c

000d5b84 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5b84:	b508      	push	{r3, lr}
   d5b86:	4b02      	ldr	r3, [pc, #8]	; (d5b90 <vsnprintf+0xc>)
   d5b88:	681b      	ldr	r3, [r3, #0]
   d5b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5b8c:	9301      	str	r3, [sp, #4]
   d5b8e:	bd08      	pop	{r3, pc}
   d5b90:	0003021c 	.word	0x0003021c

000d5b94 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5b94:	2100      	movs	r1, #0
   d5b96:	f7ff bf61 	b.w	d5a5c <system_delay_ms>

000d5b9a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5b9a:	b510      	push	{r4, lr}
   d5b9c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5b9e:	6800      	ldr	r0, [r0, #0]
   d5ba0:	b108      	cbz	r0, d5ba6 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5ba2:	f7ff fdab 	bl	d56fc <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5ba6:	4620      	mov	r0, r4
   d5ba8:	bd10      	pop	{r4, pc}
	...

000d5bac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5bac:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5bae:	4c06      	ldr	r4, [pc, #24]	; (d5bc8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5bb0:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d5bb2:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5bb4:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5bb6:	f7ff fd99 	bl	d56ec <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5bba:	4620      	mov	r0, r4
   d5bbc:	4a03      	ldr	r2, [pc, #12]	; (d5bcc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5bbe:	4904      	ldr	r1, [pc, #16]	; (d5bd0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5bc4:	f001 b8fa 	b.w	d6dbc <__aeabi_atexit>
   d5bc8:	2003e3dc 	.word	0x2003e3dc
   d5bcc:	2003e254 	.word	0x2003e254
   d5bd0:	000d5b9b 	.word	0x000d5b9b

000d5bd4 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5bd4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5bd6:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5bd8:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5bda:	b113      	cbz	r3, d5be2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5bdc:	2203      	movs	r2, #3
   d5bde:	4601      	mov	r1, r0
   d5be0:	4798      	blx	r3
    }
   d5be2:	4620      	mov	r0, r4
   d5be4:	bd10      	pop	{r4, pc}

000d5be6 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5be6:	2200      	movs	r2, #0
   d5be8:	4611      	mov	r1, r2
   d5bea:	6840      	ldr	r0, [r0, #4]
   d5bec:	f7ff bf9a 	b.w	d5b24 <network_listening>

000d5bf0 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5bf0:	2200      	movs	r2, #0
   d5bf2:	4611      	mov	r1, r2
   d5bf4:	6840      	ldr	r0, [r0, #4]
   d5bf6:	f7ff bfa5 	b.w	d5b44 <network_get_listen_timeout>

000d5bfa <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5bfa:	2200      	movs	r2, #0
   d5bfc:	6840      	ldr	r0, [r0, #4]
   d5bfe:	f7ff bf99 	b.w	d5b34 <network_set_listen_timeout>

000d5c02 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5c02:	2200      	movs	r2, #0
   d5c04:	f081 0101 	eor.w	r1, r1, #1
   d5c08:	6840      	ldr	r0, [r0, #4]
   d5c0a:	f7ff bf83 	b.w	d5b14 <network_listen>

000d5c0e <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5c0e:	2300      	movs	r3, #0
   d5c10:	461a      	mov	r2, r3
   d5c12:	4619      	mov	r1, r3
   d5c14:	6840      	ldr	r0, [r0, #4]
   d5c16:	f7ff bf75 	b.w	d5b04 <network_off>

000d5c1a <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5c1a:	2300      	movs	r3, #0
   d5c1c:	461a      	mov	r2, r3
   d5c1e:	4619      	mov	r1, r3
   d5c20:	6840      	ldr	r0, [r0, #4]
   d5c22:	f7ff bf67 	b.w	d5af4 <network_on>

000d5c26 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5c26:	2200      	movs	r2, #0
   d5c28:	4611      	mov	r1, r2
   d5c2a:	6840      	ldr	r0, [r0, #4]
   d5c2c:	f7ff bf5a 	b.w	d5ae4 <network_ready>

000d5c30 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5c30:	2200      	movs	r2, #0
   d5c32:	4611      	mov	r1, r2
   d5c34:	6840      	ldr	r0, [r0, #4]
   d5c36:	f7ff bf45 	b.w	d5ac4 <network_connecting>

000d5c3a <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5c3a:	2200      	movs	r2, #0
   d5c3c:	2102      	movs	r1, #2
   d5c3e:	6840      	ldr	r0, [r0, #4]
   d5c40:	f7ff bf48 	b.w	d5ad4 <network_disconnect>

000d5c44 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5c44:	2300      	movs	r3, #0
   d5c46:	461a      	mov	r2, r3
   d5c48:	6840      	ldr	r0, [r0, #4]
   d5c4a:	f7ff bf33 	b.w	d5ab4 <network_connect>
	...

000d5c50 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5c50:	4b02      	ldr	r3, [pc, #8]	; (d5c5c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5c52:	2203      	movs	r2, #3
   d5c54:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5c56:	4a02      	ldr	r2, [pc, #8]	; (d5c60 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5c58:	601a      	str	r2, [r3, #0]
   d5c5a:	4770      	bx	lr
   d5c5c:	2003e3e0 	.word	0x2003e3e0
   d5c60:	000d8440 	.word	0x000d8440

000d5c64 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5c64:	4770      	bx	lr

000d5c66 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c68:	4606      	mov	r6, r0
   d5c6a:	4615      	mov	r5, r2
   d5c6c:	460c      	mov	r4, r1
   d5c6e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5c70:	42bc      	cmp	r4, r7
   d5c72:	d006      	beq.n	d5c82 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5c74:	6833      	ldr	r3, [r6, #0]
   d5c76:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5c7a:	689b      	ldr	r3, [r3, #8]
   d5c7c:	4630      	mov	r0, r6
   d5c7e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5c80:	e7f6      	b.n	d5c70 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5c82:	4628      	mov	r0, r5
   d5c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c86 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5c86:	2200      	movs	r2, #0
   d5c88:	7c00      	ldrb	r0, [r0, #16]
   d5c8a:	f7ff bdaf 	b.w	d57ec <HAL_I2C_Write_Data>

000d5c8e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5c8e:	2100      	movs	r1, #0
   d5c90:	7c00      	ldrb	r0, [r0, #16]
   d5c92:	f7ff bdb3 	b.w	d57fc <HAL_I2C_Available_Data>

000d5c96 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5c96:	2100      	movs	r1, #0
   d5c98:	7c00      	ldrb	r0, [r0, #16]
   d5c9a:	f7ff bdb7 	b.w	d580c <HAL_I2C_Read_Data>

000d5c9e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5c9e:	2100      	movs	r1, #0
   d5ca0:	7c00      	ldrb	r0, [r0, #16]
   d5ca2:	f7ff bdbb 	b.w	d581c <HAL_I2C_Peek_Data>

000d5ca6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5ca6:	2100      	movs	r1, #0
   d5ca8:	7c00      	ldrb	r0, [r0, #16]
   d5caa:	f7ff bdbf 	b.w	d582c <HAL_I2C_Flush_Data>

000d5cae <_ZN7TwoWireD0Ev>:
   d5cae:	b510      	push	{r4, lr}
   d5cb0:	2114      	movs	r1, #20
   d5cb2:	4604      	mov	r4, r0
   d5cb4:	f001 f887 	bl	d6dc6 <_ZdlPvj>
   d5cb8:	4620      	mov	r0, r4
   d5cba:	bd10      	pop	{r4, pc}

000d5cbc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5cbc:	b510      	push	{r4, lr}
   d5cbe:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5cc0:	2300      	movs	r3, #0
   d5cc2:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5cc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5cc8:	60a3      	str	r3, [r4, #8]
   d5cca:	4b04      	ldr	r3, [pc, #16]	; (d5cdc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5ccc:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5cce:	4608      	mov	r0, r1
   d5cd0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d5cd2:	4611      	mov	r1, r2
   d5cd4:	f7ff fdba 	bl	d584c <HAL_I2C_Init>
}
   d5cd8:	4620      	mov	r0, r4
   d5cda:	bd10      	pop	{r4, pc}
   d5cdc:	000d8474 	.word	0x000d8474

000d5ce0 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5ce0:	2300      	movs	r3, #0
   d5ce2:	461a      	mov	r2, r3
   d5ce4:	4619      	mov	r1, r3
   d5ce6:	7c00      	ldrb	r0, [r0, #16]
   d5ce8:	f7ff bd68 	b.w	d57bc <HAL_I2C_Begin>

000d5cec <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5cec:	b570      	push	{r4, r5, r6, lr}
   d5cee:	460c      	mov	r4, r1
   d5cf0:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d5cf2:	2514      	movs	r5, #20
   d5cf4:	4606      	mov	r6, r0
   d5cf6:	462a      	mov	r2, r5
   d5cf8:	2100      	movs	r1, #0
   d5cfa:	a801      	add	r0, sp, #4
   d5cfc:	f002 f803 	bl	d7d06 <memset>
   d5d00:	7823      	ldrb	r3, [r4, #0]
   d5d02:	f88d 3008 	strb.w	r3, [sp, #8]
   d5d06:	6863      	ldr	r3, [r4, #4]
   d5d08:	9303      	str	r3, [sp, #12]
   d5d0a:	68e3      	ldr	r3, [r4, #12]
   d5d0c:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d5d0e:	2200      	movs	r2, #0
   d5d10:	7a23      	ldrb	r3, [r4, #8]
   d5d12:	7c30      	ldrb	r0, [r6, #16]
   d5d14:	f8ad 5004 	strh.w	r5, [sp, #4]
   d5d18:	a901      	add	r1, sp, #4
   d5d1a:	9305      	str	r3, [sp, #20]
   d5d1c:	f7ff fd9e 	bl	d585c <HAL_I2C_Request_Data_Ex>
}
   d5d20:	b006      	add	sp, #24
   d5d22:	bd70      	pop	{r4, r5, r6, pc}

000d5d24 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d5d24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5d26:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d5d28:	f88d 1000 	strb.w	r1, [sp]
   d5d2c:	f04f 0164 	mov.w	r1, #100	; 0x64
   d5d30:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5d32:	bf18      	it	ne
   d5d34:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d5d36:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d5d38:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5d3a:	f88d 3008 	strb.w	r3, [sp, #8]
   d5d3e:	f7ff ffd5 	bl	d5cec <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d5d42:	b005      	add	sp, #20
   d5d44:	f85d fb04 	ldr.w	pc, [sp], #4

000d5d48 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d5d48:	2301      	movs	r3, #1
   d5d4a:	f7ff bfeb 	b.w	d5d24 <_ZN7TwoWire11requestFromEhjh>

000d5d4e <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5d4e:	2200      	movs	r2, #0
   d5d50:	7c00      	ldrb	r0, [r0, #16]
   d5d52:	f7ff bd3b 	b.w	d57cc <HAL_I2C_Begin_Transmission>

000d5d56 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d5d56:	b2c9      	uxtb	r1, r1
   d5d58:	f7ff bff9 	b.w	d5d4e <_ZN7TwoWire17beginTransmissionEh>

000d5d5c <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5d5c:	2200      	movs	r2, #0
   d5d5e:	7c00      	ldrb	r0, [r0, #16]
   d5d60:	f7ff bd3c 	b.w	d57dc <HAL_I2C_End_Transmission>

000d5d64 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d5d64:	2101      	movs	r1, #1
   d5d66:	f7ff bff9 	b.w	d5d5c <_ZN7TwoWire15endTransmissionEh>

000d5d6a <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5d6a:	2100      	movs	r1, #0
   d5d6c:	7c00      	ldrb	r0, [r0, #16]
   d5d6e:	f7ff bd65 	b.w	d583c <HAL_I2C_Is_Enabled>

000d5d72 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5d72:	4770      	bx	lr

000d5d74 <_ZN9IPAddressD0Ev>:
   d5d74:	b510      	push	{r4, lr}
   d5d76:	2118      	movs	r1, #24
   d5d78:	4604      	mov	r4, r0
   d5d7a:	f001 f824 	bl	d6dc6 <_ZdlPvj>
   d5d7e:	4620      	mov	r0, r4
   d5d80:	bd10      	pop	{r4, pc}

000d5d82 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5d82:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5d84:	7d03      	ldrb	r3, [r0, #20]
   d5d86:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5d88:	b08d      	sub	sp, #52	; 0x34
   d5d8a:	460e      	mov	r6, r1
   d5d8c:	f100 0704 	add.w	r7, r0, #4
   d5d90:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5d94:	d002      	beq.n	d5d9c <_ZNK9IPAddress7printToER5Print+0x1a>
   d5d96:	f100 0508 	add.w	r5, r0, #8
   d5d9a:	e018      	b.n	d5dce <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5d9c:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5d9e:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5da0:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5da4:	232f      	movs	r3, #47	; 0x2f
   d5da6:	462a      	mov	r2, r5
   d5da8:	200a      	movs	r0, #10
   d5daa:	f7ff fd5f 	bl	d586c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5dae:	4628      	mov	r0, r5
   d5db0:	f001 ffe2 	bl	d7d78 <strlen>
   d5db4:	6833      	ldr	r3, [r6, #0]
   d5db6:	4602      	mov	r2, r0
   d5db8:	68db      	ldr	r3, [r3, #12]
   d5dba:	4629      	mov	r1, r5
   d5dbc:	4630      	mov	r0, r6
   d5dbe:	4798      	blx	r3
   d5dc0:	e00f      	b.n	d5de2 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5dc2:	b124      	cbz	r4, d5dce <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5dc4:	212e      	movs	r1, #46	; 0x2e
   d5dc6:	4630      	mov	r0, r6
   d5dc8:	f000 f9da 	bl	d6180 <_ZN5Print5printEc>
   d5dcc:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5dce:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5dd2:	220a      	movs	r2, #10
   d5dd4:	4630      	mov	r0, r6
   d5dd6:	f000 f9ec 	bl	d61b2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5dda:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5ddc:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5dde:	d1f0      	bne.n	d5dc2 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5de0:	4620      	mov	r0, r4
    }
    return n;
}
   d5de2:	b00d      	add	sp, #52	; 0x34
   d5de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5de8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5de8:	b510      	push	{r4, lr}
   d5dea:	4b05      	ldr	r3, [pc, #20]	; (d5e00 <_ZN9IPAddressC1Ev+0x18>)
   d5dec:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5dee:	2211      	movs	r2, #17
   d5df0:	f840 3b04 	str.w	r3, [r0], #4
   d5df4:	2100      	movs	r1, #0
   d5df6:	f001 ff86 	bl	d7d06 <memset>
{
    clear();
}
   d5dfa:	4620      	mov	r0, r4
   d5dfc:	bd10      	pop	{r4, pc}
   d5dfe:	bf00      	nop
   d5e00:	000d849c 	.word	0x000d849c

000d5e04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5e04:	4603      	mov	r3, r0
   d5e06:	4a07      	ldr	r2, [pc, #28]	; (d5e24 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5e08:	b510      	push	{r4, lr}
   d5e0a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5e0e:	f101 0210 	add.w	r2, r1, #16
   d5e12:	f851 4b04 	ldr.w	r4, [r1], #4
   d5e16:	f843 4b04 	str.w	r4, [r3], #4
   d5e1a:	4291      	cmp	r1, r2
   d5e1c:	d1f9      	bne.n	d5e12 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5e1e:	780a      	ldrb	r2, [r1, #0]
   d5e20:	701a      	strb	r2, [r3, #0]
}
   d5e22:	bd10      	pop	{r4, pc}
   d5e24:	000d849c 	.word	0x000d849c

000d5e28 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5e28:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5e2a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5e2e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5e32:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5e36:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5e3a:	2304      	movs	r3, #4
   d5e3c:	6041      	str	r1, [r0, #4]
   d5e3e:	7503      	strb	r3, [r0, #20]
   d5e40:	bd10      	pop	{r4, pc}

000d5e42 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5e42:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5e44:	780d      	ldrb	r5, [r1, #0]
   d5e46:	788b      	ldrb	r3, [r1, #2]
   d5e48:	784a      	ldrb	r2, [r1, #1]
   d5e4a:	78c9      	ldrb	r1, [r1, #3]
   d5e4c:	9100      	str	r1, [sp, #0]
   d5e4e:	4629      	mov	r1, r5
   d5e50:	f7ff ffea 	bl	d5e28 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5e54:	b003      	add	sp, #12
   d5e56:	bd30      	pop	{r4, r5, pc}

000d5e58 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5e58:	4b01      	ldr	r3, [pc, #4]	; (d5e60 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5e5a:	4a02      	ldr	r2, [pc, #8]	; (d5e64 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5e5c:	601a      	str	r2, [r3, #0]
   d5e5e:	4770      	bx	lr
   d5e60:	2003e3e8 	.word	0x2003e3e8
   d5e64:	000d851b 	.word	0x000d851b

000d5e68 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5e68:	2200      	movs	r2, #0
   d5e6a:	4611      	mov	r1, r2
   d5e6c:	6840      	ldr	r0, [r0, #4]
   d5e6e:	f7ff be59 	b.w	d5b24 <network_listening>

000d5e72 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5e72:	2200      	movs	r2, #0
   d5e74:	4611      	mov	r1, r2
   d5e76:	6840      	ldr	r0, [r0, #4]
   d5e78:	f7ff be64 	b.w	d5b44 <network_get_listen_timeout>

000d5e7c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5e7c:	2200      	movs	r2, #0
   d5e7e:	6840      	ldr	r0, [r0, #4]
   d5e80:	f7ff be58 	b.w	d5b34 <network_set_listen_timeout>

000d5e84 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5e84:	2200      	movs	r2, #0
   d5e86:	f081 0101 	eor.w	r1, r1, #1
   d5e8a:	6840      	ldr	r0, [r0, #4]
   d5e8c:	f7ff be42 	b.w	d5b14 <network_listen>

000d5e90 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5e90:	2300      	movs	r3, #0
   d5e92:	461a      	mov	r2, r3
   d5e94:	2101      	movs	r1, #1
   d5e96:	6840      	ldr	r0, [r0, #4]
   d5e98:	f7ff be34 	b.w	d5b04 <network_off>

000d5e9c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5e9c:	2300      	movs	r3, #0
   d5e9e:	461a      	mov	r2, r3
   d5ea0:	4619      	mov	r1, r3
   d5ea2:	6840      	ldr	r0, [r0, #4]
   d5ea4:	f7ff be26 	b.w	d5af4 <network_on>

000d5ea8 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5ea8:	2200      	movs	r2, #0
   d5eaa:	4611      	mov	r1, r2
   d5eac:	6840      	ldr	r0, [r0, #4]
   d5eae:	f7ff be19 	b.w	d5ae4 <network_ready>

000d5eb2 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5eb2:	2200      	movs	r2, #0
   d5eb4:	4611      	mov	r1, r2
   d5eb6:	6840      	ldr	r0, [r0, #4]
   d5eb8:	f7ff be04 	b.w	d5ac4 <network_connecting>

000d5ebc <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5ebc:	2200      	movs	r2, #0
   d5ebe:	2102      	movs	r1, #2
   d5ec0:	6840      	ldr	r0, [r0, #4]
   d5ec2:	f7ff be07 	b.w	d5ad4 <network_disconnect>

000d5ec6 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5ec6:	2300      	movs	r3, #0
   d5ec8:	461a      	mov	r2, r3
   d5eca:	6840      	ldr	r0, [r0, #4]
   d5ecc:	f7ff bdf2 	b.w	d5ab4 <network_connect>

000d5ed0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5ed0:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5ed2:	4605      	mov	r5, r0
   d5ed4:	b188      	cbz	r0, d5efa <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5ed6:	6804      	ldr	r4, [r0, #0]
   d5ed8:	b14c      	cbz	r4, d5eee <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5eda:	68a3      	ldr	r3, [r4, #8]
   d5edc:	b11b      	cbz	r3, d5ee6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5ede:	2203      	movs	r2, #3
   d5ee0:	4621      	mov	r1, r4
   d5ee2:	4620      	mov	r0, r4
   d5ee4:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5ee6:	2110      	movs	r1, #16
   d5ee8:	4620      	mov	r0, r4
   d5eea:	f000 ff6c 	bl	d6dc6 <_ZdlPvj>
   d5eee:	4628      	mov	r0, r5
   d5ef0:	2114      	movs	r1, #20
      }
   d5ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5ef6:	f000 bf66 	b.w	d6dc6 <_ZdlPvj>
   d5efa:	bd38      	pop	{r3, r4, r5, pc}

000d5efc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5efc:	b110      	cbz	r0, d5f04 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5efe:	6803      	ldr	r3, [r0, #0]
   d5f00:	685b      	ldr	r3, [r3, #4]
   d5f02:	4718      	bx	r3
   d5f04:	4770      	bx	lr

000d5f06 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5f06:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5f08:	6803      	ldr	r3, [r0, #0]
   d5f0a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5f0c:	b1bb      	cbz	r3, d5f3e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5f0e:	6858      	ldr	r0, [r3, #4]
   d5f10:	f7ff fbd4 	bl	d56bc <os_thread_is_current>
   d5f14:	b978      	cbnz	r0, d5f36 <_ZN6ThreadD1Ev+0x30>
   d5f16:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5f18:	7c5a      	ldrb	r2, [r3, #17]
   d5f1a:	b912      	cbnz	r2, d5f22 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5f1c:	6858      	ldr	r0, [r3, #4]
   d5f1e:	f7ff fbd5 	bl	d56cc <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5f22:	6823      	ldr	r3, [r4, #0]
   d5f24:	6858      	ldr	r0, [r3, #4]
   d5f26:	f7ff fbd9 	bl	d56dc <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f2a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5f2c:	2300      	movs	r3, #0
   d5f2e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5f30:	b128      	cbz	r0, d5f3e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5f32:	f7ff ffcd 	bl	d5ed0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5f36:	6820      	ldr	r0, [r4, #0]
   d5f38:	b108      	cbz	r0, d5f3e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5f3a:	f7ff ffc9 	bl	d5ed0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5f3e:	4620      	mov	r0, r4
   d5f40:	bd10      	pop	{r4, pc}

000d5f42 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5f42:	b538      	push	{r3, r4, r5, lr}
   d5f44:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5f46:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5f4a:	b108      	cbz	r0, d5f50 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5f4c:	f7fe f8a5 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5f50:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5f54:	b108      	cbz	r0, d5f5a <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5f56:	f7ff fbd1 	bl	d56fc <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5f5a:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5f5e:	b135      	cbz	r5, d5f6e <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5f60:	4628      	mov	r0, r5
   d5f62:	f7ff ffd0 	bl	d5f06 <_ZN6ThreadD1Ev>
   d5f66:	2104      	movs	r1, #4
   d5f68:	4628      	mov	r0, r5
   d5f6a:	f000 ff2c 	bl	d6dc6 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5f6e:	6820      	ldr	r0, [r4, #0]
   d5f70:	b108      	cbz	r0, d5f76 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5f72:	f7ff ffc3 	bl	d5efc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5f76:	4620      	mov	r0, r4
   d5f78:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5f7c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5f7c:	b510      	push	{r4, lr}
   d5f7e:	4b04      	ldr	r3, [pc, #16]	; (d5f90 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5f80:	4604      	mov	r4, r0
   d5f82:	f840 3b08 	str.w	r3, [r0], #8
   d5f86:	f7ff ffdc 	bl	d5f42 <_ZN5spark11MeshPublishD1Ev>
   d5f8a:	4620      	mov	r0, r4
   d5f8c:	bd10      	pop	{r4, pc}
   d5f8e:	bf00      	nop
   d5f90:	000d8594 	.word	0x000d8594

000d5f94 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5f94:	b538      	push	{r3, r4, r5, lr}
   d5f96:	4c0e      	ldr	r4, [pc, #56]	; (d5fd0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5f98:	4b0e      	ldr	r3, [pc, #56]	; (d5fd4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5f9a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5f9c:	2500      	movs	r5, #0
   d5f9e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5fa0:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5fa4:	6063      	str	r3, [r4, #4]
   d5fa6:	60a5      	str	r5, [r4, #8]
   d5fa8:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5fac:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5fb0:	f7ff fb9c 	bl	d56ec <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5fb4:	4b08      	ldr	r3, [pc, #32]	; (d5fd8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5fb6:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5fba:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5fbe:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5fc0:	4620      	mov	r0, r4
   d5fc2:	4a06      	ldr	r2, [pc, #24]	; (d5fdc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5fc4:	4906      	ldr	r1, [pc, #24]	; (d5fe0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5fc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5fca:	f000 bef7 	b.w	d6dbc <__aeabi_atexit>
   d5fce:	bf00      	nop
   d5fd0:	2003e3ec 	.word	0x2003e3ec
   d5fd4:	000d85c8 	.word	0x000d85c8
   d5fd8:	000d8594 	.word	0x000d8594
   d5fdc:	2003e254 	.word	0x2003e254
   d5fe0:	000d5f7d 	.word	0x000d5f7d

000d5fe4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5fe4:	2300      	movs	r3, #0
   d5fe6:	461a      	mov	r2, r3
   d5fe8:	6840      	ldr	r0, [r0, #4]
   d5fea:	f7ff bd63 	b.w	d5ab4 <network_connect>

000d5fee <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5fee:	2200      	movs	r2, #0
   d5ff0:	2102      	movs	r1, #2
   d5ff2:	6840      	ldr	r0, [r0, #4]
   d5ff4:	f7ff bd6e 	b.w	d5ad4 <network_disconnect>

000d5ff8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5ff8:	2200      	movs	r2, #0
   d5ffa:	4611      	mov	r1, r2
   d5ffc:	6840      	ldr	r0, [r0, #4]
   d5ffe:	f7ff bd61 	b.w	d5ac4 <network_connecting>

000d6002 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6002:	2200      	movs	r2, #0
   d6004:	4611      	mov	r1, r2
   d6006:	6840      	ldr	r0, [r0, #4]
   d6008:	f7ff bd6c 	b.w	d5ae4 <network_ready>

000d600c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d600c:	2300      	movs	r3, #0
   d600e:	461a      	mov	r2, r3
   d6010:	4619      	mov	r1, r3
   d6012:	6840      	ldr	r0, [r0, #4]
   d6014:	f7ff bd6e 	b.w	d5af4 <network_on>

000d6018 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6018:	2300      	movs	r3, #0
   d601a:	461a      	mov	r2, r3
   d601c:	4619      	mov	r1, r3
   d601e:	6840      	ldr	r0, [r0, #4]
   d6020:	f7ff bd70 	b.w	d5b04 <network_off>

000d6024 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6024:	2200      	movs	r2, #0
   d6026:	f081 0101 	eor.w	r1, r1, #1
   d602a:	6840      	ldr	r0, [r0, #4]
   d602c:	f7ff bd72 	b.w	d5b14 <network_listen>

000d6030 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6030:	2200      	movs	r2, #0
   d6032:	6840      	ldr	r0, [r0, #4]
   d6034:	f7ff bd7e 	b.w	d5b34 <network_set_listen_timeout>

000d6038 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6038:	2200      	movs	r2, #0
   d603a:	4611      	mov	r1, r2
   d603c:	6840      	ldr	r0, [r0, #4]
   d603e:	f7ff bd81 	b.w	d5b44 <network_get_listen_timeout>

000d6042 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6042:	2200      	movs	r2, #0
   d6044:	4611      	mov	r1, r2
   d6046:	6840      	ldr	r0, [r0, #4]
   d6048:	f7ff bd6c 	b.w	d5b24 <network_listening>

000d604c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d604c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6050:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6052:	b095      	sub	sp, #84	; 0x54
   d6054:	4616      	mov	r6, r2
   d6056:	460d      	mov	r5, r1
   d6058:	4607      	mov	r7, r0
    IPAddress addr;
   d605a:	f7ff fec5 	bl	d5de8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d605e:	4621      	mov	r1, r4
   d6060:	2220      	movs	r2, #32
   d6062:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6064:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6066:	f001 fe4e 	bl	d7d06 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d606a:	2340      	movs	r3, #64	; 0x40
   d606c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d606e:	4621      	mov	r1, r4
   d6070:	466b      	mov	r3, sp
   d6072:	aa0c      	add	r2, sp, #48	; 0x30
   d6074:	4630      	mov	r0, r6
   d6076:	f7ff fc09 	bl	d588c <netdb_getaddrinfo>
    if (!r) {
   d607a:	4604      	mov	r4, r0
   d607c:	2800      	cmp	r0, #0
   d607e:	d144      	bne.n	d610a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6080:	4602      	mov	r2, r0
   d6082:	2101      	movs	r1, #1
   d6084:	6868      	ldr	r0, [r5, #4]
   d6086:	f7ff fd2d 	bl	d5ae4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d608a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d608c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d608e:	4622      	mov	r2, r4
   d6090:	6868      	ldr	r0, [r5, #4]
   d6092:	f7ff fd27 	bl	d5ae4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6096:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6098:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d609a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d609c:	2e00      	cmp	r6, #0
   d609e:	d034      	beq.n	d610a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d60a0:	2900      	cmp	r1, #0
   d60a2:	d132      	bne.n	d610a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d60a4:	6873      	ldr	r3, [r6, #4]
   d60a6:	2b02      	cmp	r3, #2
   d60a8:	d002      	beq.n	d60b0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d60aa:	2b0a      	cmp	r3, #10
   d60ac:	d009      	beq.n	d60c2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d60ae:	e02a      	b.n	d6106 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d60b0:	f1b8 0f00 	cmp.w	r8, #0
   d60b4:	d027      	beq.n	d6106 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d60b6:	6971      	ldr	r1, [r6, #20]
   d60b8:	4638      	mov	r0, r7
   d60ba:	3104      	adds	r1, #4
   d60bc:	f7ff fec1 	bl	d5e42 <_ZN9IPAddressaSEPKh>
   d60c0:	e020      	b.n	d6104 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d60c2:	f1b9 0f00 	cmp.w	r9, #0
   d60c6:	d01e      	beq.n	d6106 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d60c8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d60ca:	2211      	movs	r2, #17
   d60cc:	a801      	add	r0, sp, #4
   d60ce:	f001 fe1a 	bl	d7d06 <memset>
                    a.v = 6;
   d60d2:	2306      	movs	r3, #6
   d60d4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d60d8:	ad01      	add	r5, sp, #4
   d60da:	f104 0308 	add.w	r3, r4, #8
   d60de:	3418      	adds	r4, #24
   d60e0:	6818      	ldr	r0, [r3, #0]
   d60e2:	6859      	ldr	r1, [r3, #4]
   d60e4:	462a      	mov	r2, r5
   d60e6:	c203      	stmia	r2!, {r0, r1}
   d60e8:	3308      	adds	r3, #8
   d60ea:	42a3      	cmp	r3, r4
   d60ec:	4615      	mov	r5, r2
   d60ee:	d1f7      	bne.n	d60e0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d60f0:	a901      	add	r1, sp, #4
   d60f2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d60f4:	ad07      	add	r5, sp, #28
   d60f6:	f7ff fe85 	bl	d5e04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d60fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d60fc:	1d3c      	adds	r4, r7, #4
   d60fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6100:	682b      	ldr	r3, [r5, #0]
   d6102:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6104:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6106:	69f6      	ldr	r6, [r6, #28]
   d6108:	e7c8      	b.n	d609c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d610a:	9800      	ldr	r0, [sp, #0]
   d610c:	f7ff fbb6 	bl	d587c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6110:	4638      	mov	r0, r7
   d6112:	b015      	add	sp, #84	; 0x54
   d6114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6118 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6118:	4b02      	ldr	r3, [pc, #8]	; (d6124 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d611a:	4a03      	ldr	r2, [pc, #12]	; (d6128 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d611c:	601a      	str	r2, [r3, #0]
   d611e:	2200      	movs	r2, #0
   d6120:	605a      	str	r2, [r3, #4]
   d6122:	4770      	bx	lr
   d6124:	2003e5c0 	.word	0x2003e5c0
   d6128:	000d85c8 	.word	0x000d85c8

000d612c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d612c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d612e:	4606      	mov	r6, r0
   d6130:	460d      	mov	r5, r1
   d6132:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6134:	2400      	movs	r4, #0
  while (size--) {
   d6136:	42bd      	cmp	r5, r7
   d6138:	d00c      	beq.n	d6154 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d613a:	6833      	ldr	r3, [r6, #0]
   d613c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6140:	689b      	ldr	r3, [r3, #8]
   d6142:	4630      	mov	r0, r6
   d6144:	4798      	blx	r3
     if (chunk>=0)
   d6146:	2800      	cmp	r0, #0
   d6148:	db01      	blt.n	d614e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d614a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d614c:	e7f3      	b.n	d6136 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d614e:	2c00      	cmp	r4, #0
   d6150:	bf08      	it	eq
   d6152:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6154:	4620      	mov	r0, r4
   d6156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6158 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6158:	b570      	push	{r4, r5, r6, lr}
   d615a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d615c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d615e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6160:	b149      	cbz	r1, d6176 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6162:	f001 fe09 	bl	d7d78 <strlen>
   d6166:	682b      	ldr	r3, [r5, #0]
   d6168:	4602      	mov	r2, r0
   d616a:	4621      	mov	r1, r4
   d616c:	4628      	mov	r0, r5
   d616e:	68db      	ldr	r3, [r3, #12]
    }
   d6170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6174:	4718      	bx	r3
    }
   d6176:	bd70      	pop	{r4, r5, r6, pc}

000d6178 <_ZN5Print5printEPKc>:
   d6178:	b508      	push	{r3, lr}
   d617a:	f7ff ffed 	bl	d6158 <_ZN5Print5writeEPKc>
   d617e:	bd08      	pop	{r3, pc}

000d6180 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6180:	6803      	ldr	r3, [r0, #0]
   d6182:	689b      	ldr	r3, [r3, #8]
   d6184:	4718      	bx	r3

000d6186 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6186:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6188:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d618a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d618c:	f7ff fff8 	bl	d6180 <_ZN5Print5printEc>
  n += print('\n');
   d6190:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6192:	4604      	mov	r4, r0
  n += print('\n');
   d6194:	4628      	mov	r0, r5
   d6196:	f7ff fff3 	bl	d6180 <_ZN5Print5printEc>
  return n;
}
   d619a:	4420      	add	r0, r4
   d619c:	bd38      	pop	{r3, r4, r5, pc}

000d619e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d619e:	b538      	push	{r3, r4, r5, lr}
   d61a0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d61a2:	f7ff ffd9 	bl	d6158 <_ZN5Print5writeEPKc>
   d61a6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d61a8:	4628      	mov	r0, r5
   d61aa:	f7ff ffec 	bl	d6186 <_ZN5Print7printlnEv>
  return n;
}
   d61ae:	4420      	add	r0, r4
   d61b0:	bd38      	pop	{r3, r4, r5, pc}

000d61b2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d61b2:	b530      	push	{r4, r5, lr}
   d61b4:	b08b      	sub	sp, #44	; 0x2c
   d61b6:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d61b8:	2100      	movs	r1, #0
   d61ba:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d61be:	2a01      	cmp	r2, #1
   d61c0:	bf98      	it	ls
   d61c2:	220a      	movls	r2, #10
   d61c4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d61c8:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d61cc:	fb05 3312 	mls	r3, r5, r2, r3
   d61d0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d61d4:	2b09      	cmp	r3, #9
   d61d6:	bf94      	ite	ls
   d61d8:	3330      	addls	r3, #48	; 0x30
   d61da:	3337      	addhi	r3, #55	; 0x37
   d61dc:	b2db      	uxtb	r3, r3
   d61de:	4621      	mov	r1, r4
   d61e0:	f804 3901 	strb.w	r3, [r4], #-1
   d61e4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d61e6:	2d00      	cmp	r5, #0
   d61e8:	d1ee      	bne.n	d61c8 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d61ea:	f7ff ffb5 	bl	d6158 <_ZN5Print5writeEPKc>
}
   d61ee:	b00b      	add	sp, #44	; 0x2c
   d61f0:	bd30      	pop	{r4, r5, pc}

000d61f2 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d61f2:	b40c      	push	{r2, r3}
   d61f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d61f8:	b087      	sub	sp, #28
   d61fa:	af00      	add	r7, sp, #0
   d61fc:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6200:	4605      	mov	r5, r0
   d6202:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6206:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6208:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d620a:	4623      	mov	r3, r4
   d620c:	464a      	mov	r2, r9
   d620e:	2114      	movs	r1, #20
   d6210:	1d38      	adds	r0, r7, #4
   d6212:	f7ff fcb7 	bl	d5b84 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6216:	2813      	cmp	r0, #19
   d6218:	d805      	bhi.n	d6226 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d621a:	1d39      	adds	r1, r7, #4
   d621c:	4628      	mov	r0, r5
   d621e:	f7ff ff9b 	bl	d6158 <_ZN5Print5writeEPKc>
   d6222:	4604      	mov	r4, r0
   d6224:	e013      	b.n	d624e <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6226:	f100 0308 	add.w	r3, r0, #8
   d622a:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d622e:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6230:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6234:	1c41      	adds	r1, r0, #1
   d6236:	4623      	mov	r3, r4
   d6238:	464a      	mov	r2, r9
   d623a:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d623c:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d623e:	f7ff fca1 	bl	d5b84 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6242:	4669      	mov	r1, sp
   d6244:	4628      	mov	r0, r5
   d6246:	f7ff ff87 	bl	d6158 <_ZN5Print5writeEPKc>
   d624a:	4604      	mov	r4, r0
   d624c:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d624e:	b11e      	cbz	r6, d6258 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6250:	4628      	mov	r0, r5
   d6252:	f7ff ff98 	bl	d6186 <_ZN5Print7printlnEv>
   d6256:	4404      	add	r4, r0
    return n;
}
   d6258:	4620      	mov	r0, r4
   d625a:	371c      	adds	r7, #28
   d625c:	46bd      	mov	sp, r7
   d625e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6262:	b002      	add	sp, #8
   d6264:	4770      	bx	lr

000d6266 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6266:	b510      	push	{r4, lr}
   d6268:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d626a:	f7ff fcb3 	bl	d5bd4 <_ZNSt14_Function_baseD1Ev>
   d626e:	4620      	mov	r0, r4
   d6270:	bd10      	pop	{r4, pc}
	...

000d6274 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6274:	4803      	ldr	r0, [pc, #12]	; (d6284 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6276:	4a04      	ldr	r2, [pc, #16]	; (d6288 <_GLOBAL__sub_I_RGB+0x14>)
   d6278:	4904      	ldr	r1, [pc, #16]	; (d628c <_GLOBAL__sub_I_RGB+0x18>)
   d627a:	2300      	movs	r3, #0
   d627c:	6083      	str	r3, [r0, #8]
   d627e:	f000 bd9d 	b.w	d6dbc <__aeabi_atexit>
   d6282:	bf00      	nop
   d6284:	2003e5c8 	.word	0x2003e5c8
   d6288:	2003e254 	.word	0x2003e254
   d628c:	000d6267 	.word	0x000d6267

000d6290 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d6290:	2100      	movs	r1, #0
   d6292:	f7ff bb4b 	b.w	d592c <HAL_SPI_Acquire>

000d6296 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d6296:	2100      	movs	r1, #0
   d6298:	f7ff bb50 	b.w	d593c <HAL_SPI_Release>

000d629c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d629c:	b510      	push	{r4, lr}
   d629e:	4604      	mov	r4, r0
{
    _spi = spi;
   d62a0:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d62a2:	4608      	mov	r0, r1
   d62a4:	f7ff fb22 	bl	d58ec <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d62a8:	2300      	movs	r3, #0
   d62aa:	6063      	str	r3, [r4, #4]
}
   d62ac:	4620      	mov	r0, r4
   d62ae:	bd10      	pop	{r4, pc}

000d62b0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d62b0:	b510      	push	{r4, lr}
   d62b2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d62b4:	7800      	ldrb	r0, [r0, #0]
   d62b6:	f7ff ffeb 	bl	d6290 <_ZN8SPIClass4lockEv.isra.0>
   d62ba:	b948      	cbnz	r0, d62d0 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d62bc:	7820      	ldrb	r0, [r4, #0]
   d62be:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d62c2:	f7ff faeb 	bl	d589c <HAL_SPI_Begin>
        unlock();
   d62c6:	7820      	ldrb	r0, [r4, #0]
    }
}
   d62c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d62cc:	f7ff bfe3 	b.w	d6296 <_ZN8SPIClass6unlockEv.isra.1>
   d62d0:	bd10      	pop	{r4, pc}

000d62d2 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d62d2:	b538      	push	{r3, r4, r5, lr}
   d62d4:	4604      	mov	r4, r0
    if (!lock())
   d62d6:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d62d8:	460d      	mov	r5, r1
    if (!lock())
   d62da:	f7ff ffd9 	bl	d6290 <_ZN8SPIClass4lockEv.isra.0>
   d62de:	b940      	cbnz	r0, d62f2 <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d62e0:	7820      	ldrb	r0, [r4, #0]
   d62e2:	4629      	mov	r1, r5
   d62e4:	f7ff fae2 	bl	d58ac <HAL_SPI_Set_Bit_Order>
        unlock();
   d62e8:	7820      	ldrb	r0, [r4, #0]
    }
}
   d62ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d62ee:	f7ff bfd2 	b.w	d6296 <_ZN8SPIClass6unlockEv.isra.1>
   d62f2:	bd38      	pop	{r3, r4, r5, pc}

000d62f4 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d62f4:	b538      	push	{r3, r4, r5, lr}
   d62f6:	4604      	mov	r4, r0
    if (!lock())
   d62f8:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d62fa:	460d      	mov	r5, r1
    if (!lock())
   d62fc:	f7ff ffc8 	bl	d6290 <_ZN8SPIClass4lockEv.isra.0>
   d6300:	b940      	cbnz	r0, d6314 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d6302:	7820      	ldrb	r0, [r4, #0]
   d6304:	4629      	mov	r1, r5
   d6306:	f7ff fad9 	bl	d58bc <HAL_SPI_Set_Data_Mode>
        unlock();
   d630a:	7820      	ldrb	r0, [r4, #0]
    }
}
   d630c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d6310:	f7ff bfc1 	b.w	d6296 <_ZN8SPIClass6unlockEv.isra.1>
   d6314:	bd38      	pop	{r3, r4, r5, pc}

000d6316 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d6316:	7800      	ldrb	r0, [r0, #0]
   d6318:	f7ff bfbd 	b.w	d6296 <_ZN8SPIClass6unlockEv.isra.1>

000d631c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d631c:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d631e:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6320:	6018      	str	r0, [r3, #0]
   d6322:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d6324:	6818      	ldr	r0, [r3, #0]
   d6326:	4288      	cmp	r0, r1
   d6328:	b2e5      	uxtb	r5, r4
   d632a:	d906      	bls.n	d633a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d632c:	3401      	adds	r4, #1
   d632e:	2c08      	cmp	r4, #8
   d6330:	d002      	beq.n	d6338 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d6332:	0840      	lsrs	r0, r0, #1
   d6334:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d6336:	e7f5      	b.n	d6324 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6338:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d633a:	4b02      	ldr	r3, [pc, #8]	; (d6344 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d633c:	5d5b      	ldrb	r3, [r3, r5]
   d633e:	7013      	strb	r3, [r2, #0]
   d6340:	bd30      	pop	{r4, r5, pc}
   d6342:	bf00      	nop
   d6344:	000d85f4 	.word	0x000d85f4

000d6348 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d6348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d634c:	4607      	mov	r7, r0
   d634e:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d6350:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d6352:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d6354:	f7ff ff9c 	bl	d6290 <_ZN8SPIClass4lockEv.isra.0>
   d6358:	2800      	cmp	r0, #0
   d635a:	db62      	blt.n	d6422 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d635c:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d635e:	2214      	movs	r2, #20
   d6360:	2100      	movs	r1, #0
   d6362:	a809      	add	r0, sp, #36	; 0x24
   d6364:	f001 fccf 	bl	d7d06 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6368:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d636a:	4620      	mov	r0, r4
   d636c:	2200      	movs	r2, #0
   d636e:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d6370:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d6374:	f7ff faca 	bl	d590c <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d6378:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d637c:	b154      	cbz	r4, d6394 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d637e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d6382:	b935      	cbnz	r5, d6392 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d6384:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d6388:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d638c:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d6390:	e003      	b.n	d639a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d6392:	2400      	movs	r4, #0
   d6394:	46a1      	mov	r9, r4
   d6396:	46a0      	mov	r8, r4
   d6398:	2501      	movs	r5, #1
   d639a:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d639c:	b105      	cbz	r5, d63a0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d639e:	b9bb      	cbnz	r3, d63d0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d63a0:	429d      	cmp	r5, r3
   d63a2:	d10b      	bne.n	d63bc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d63a4:	68b2      	ldr	r2, [r6, #8]
   d63a6:	4542      	cmp	r2, r8
   d63a8:	d108      	bne.n	d63bc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d63aa:	f88d 9020 	strb.w	r9, [sp, #32]
   d63ae:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d63b2:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d63b6:	89b2      	ldrh	r2, [r6, #12]
   d63b8:	4291      	cmp	r1, r2
   d63ba:	d009      	beq.n	d63d0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d63bc:	b153      	cbz	r3, d63d4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d63be:	2400      	movs	r4, #0
   d63c0:	7838      	ldrb	r0, [r7, #0]
   d63c2:	9401      	str	r4, [sp, #4]
   d63c4:	9400      	str	r4, [sp, #0]
   d63c6:	4623      	mov	r3, r4
   d63c8:	4622      	mov	r2, r4
   d63ca:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d63cc:	f7ff faa6 	bl	d591c <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d63d0:	2000      	movs	r0, #0
   d63d2:	e026      	b.n	d6422 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d63d4:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d63d8:	68b1      	ldr	r1, [r6, #8]
   d63da:	980a      	ldr	r0, [sp, #40]	; 0x28
   d63dc:	ab04      	add	r3, sp, #16
   d63de:	f10d 020f 	add.w	r2, sp, #15
   d63e2:	f7ff ff9b 	bl	d631c <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d63e6:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d63e8:	b105      	cbz	r5, d63ec <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d63ea:	b9b1      	cbnz	r1, d641a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d63ec:	42a9      	cmp	r1, r5
   d63ee:	d008      	beq.n	d6402 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d63f0:	2400      	movs	r4, #0
   d63f2:	7838      	ldrb	r0, [r7, #0]
   d63f4:	9401      	str	r4, [sp, #4]
   d63f6:	7b74      	ldrb	r4, [r6, #13]
   d63f8:	7b33      	ldrb	r3, [r6, #12]
   d63fa:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d63fe:	9400      	str	r4, [sp, #0]
   d6400:	e7e4      	b.n	d63cc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d6402:	68b3      	ldr	r3, [r6, #8]
   d6404:	4543      	cmp	r3, r8
   d6406:	d3f3      	bcc.n	d63f0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6408:	f88d 9020 	strb.w	r9, [sp, #32]
   d640c:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d6410:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6414:	89b3      	ldrh	r3, [r6, #12]
   d6416:	429a      	cmp	r2, r3
   d6418:	d1ea      	bne.n	d63f0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d641a:	9b04      	ldr	r3, [sp, #16]
   d641c:	4543      	cmp	r3, r8
   d641e:	d1e7      	bne.n	d63f0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d6420:	e7d6      	b.n	d63d0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d6422:	b00f      	add	sp, #60	; 0x3c
   d6424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6428 <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d6428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d642c:	b088      	sub	sp, #32
    unsigned clock = 0;
   d642e:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d6430:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d6432:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d6434:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d6436:	460e      	mov	r6, r1
   d6438:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d643a:	f7ff ff29 	bl	d6290 <_ZN8SPIClass4lockEv.isra.0>
   d643e:	4605      	mov	r5, r0
   d6440:	bb00      	cbnz	r0, d6484 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d6442:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d6446:	4601      	mov	r1, r0
   d6448:	2214      	movs	r2, #20
   d644a:	a803      	add	r0, sp, #12
   d644c:	f001 fc5b 	bl	d7d06 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6450:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d6452:	462a      	mov	r2, r5
   d6454:	a903      	add	r1, sp, #12
   d6456:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d6458:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d645c:	f7ff fa56 	bl	d590c <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d6460:	ab02      	add	r3, sp, #8
   d6462:	f10d 0207 	add.w	r2, sp, #7
   d6466:	fb07 f106 	mul.w	r1, r7, r6
   d646a:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d646c:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d6470:	f7ff ff54 	bl	d631c <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d6474:	7820      	ldrb	r0, [r4, #0]
   d6476:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d647a:	f7ff fa27 	bl	d58cc <HAL_SPI_Set_Clock_Divider>
        unlock();
   d647e:	7820      	ldrb	r0, [r4, #0]
   d6480:	f7ff ff09 	bl	d6296 <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d6484:	9802      	ldr	r0, [sp, #8]
   d6486:	b008      	add	sp, #32
   d6488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d648c <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d648c:	b538      	push	{r3, r4, r5, lr}
   d648e:	4604      	mov	r4, r0
    if (!lock())
   d6490:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d6492:	460d      	mov	r5, r1
    if (!lock())
   d6494:	f7ff fefc 	bl	d6290 <_ZN8SPIClass4lockEv.isra.0>
   d6498:	b9c8      	cbnz	r0, d64ce <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d649a:	6861      	ldr	r1, [r4, #4]
   d649c:	b171      	cbz	r1, d64bc <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d649e:	4b0c      	ldr	r3, [pc, #48]	; (d64d0 <_ZN8SPIClass15setClockDividerEh+0x44>)
   d64a0:	5cc2      	ldrb	r2, [r0, r3]
   d64a2:	42aa      	cmp	r2, r5
   d64a4:	d002      	beq.n	d64ac <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d64a6:	3001      	adds	r0, #1
   d64a8:	2808      	cmp	r0, #8
   d64aa:	d1f9      	bne.n	d64a0 <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d64ac:	3001      	adds	r0, #1
   d64ae:	b2c0      	uxtb	r0, r0
   d64b0:	40c1      	lsrs	r1, r0
   d64b2:	2201      	movs	r2, #1
   d64b4:	4620      	mov	r0, r4
   d64b6:	f7ff ffb7 	bl	d6428 <_ZN8SPIClass13setClockSpeedEjj>
   d64ba:	e003      	b.n	d64c4 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d64bc:	4629      	mov	r1, r5
   d64be:	7820      	ldrb	r0, [r4, #0]
   d64c0:	f7ff fa04 	bl	d58cc <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d64c4:	7820      	ldrb	r0, [r4, #0]
    }
}
   d64c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d64ca:	f7ff bee4 	b.w	d6296 <_ZN8SPIClass6unlockEv.isra.1>
   d64ce:	bd38      	pop	{r3, r4, r5, pc}
   d64d0:	000d85f4 	.word	0x000d85f4

000d64d4 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d64d4:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d64d6:	7800      	ldrb	r0, [r0, #0]
   d64d8:	f7ff fa00 	bl	d58dc <HAL_SPI_Send_Receive_Data>
}
   d64dc:	b2c0      	uxtb	r0, r0
   d64de:	bd08      	pop	{r3, pc}

000d64e0 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d64e0:	7800      	ldrb	r0, [r0, #0]
   d64e2:	f7ff ba0b 	b.w	d58fc <HAL_SPI_Is_Enabled>
	...

000d64e8 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d64e8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d64ec:	ec59 8b10 	vmov	r8, r9, d0
   d64f0:	4607      	mov	r7, r0
   d64f2:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   d64f4:	2200      	movs	r2, #0
   d64f6:	2300      	movs	r3, #0
   d64f8:	ee10 0a10 	vmov	r0, s0
   d64fc:	4649      	mov	r1, r9
   d64fe:	f001 f9f1 	bl	d78e4 <__aeabi_dcmplt>
   d6502:	b128      	cbz	r0, d6510 <_Z4dtoadhPc+0x28>
        val = -val;
   d6504:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d6508:	4699      	mov	r9, r3
        *sout++ = '-';
   d650a:	232d      	movs	r3, #45	; 0x2d
   d650c:	7033      	strb	r3, [r6, #0]
   d650e:	3601      	adds	r6, #1
   d6510:	2300      	movs	r3, #0
    }
    long scale = 1;
   d6512:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d6514:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d6516:	b2d9      	uxtb	r1, r3
   d6518:	428f      	cmp	r7, r1
   d651a:	d902      	bls.n	d6522 <_Z4dtoadhPc+0x3a>
        scale *= 10;
   d651c:	4354      	muls	r4, r2
   d651e:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d6520:	e7f9      	b.n	d6516 <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   d6522:	4620      	mov	r0, r4
   d6524:	f000 ff06 	bl	d7334 <__aeabi_i2d>
   d6528:	4642      	mov	r2, r8
   d652a:	464b      	mov	r3, r9
   d652c:	f000 ff68 	bl	d7400 <__aeabi_dmul>
   d6530:	4682      	mov	sl, r0
   d6532:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   d6534:	f001 fa36 	bl	d79a4 <__aeabi_d2ulz>
   d6538:	4680      	mov	r8, r0
   d653a:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   d653c:	f000 ff2a 	bl	d7394 <__aeabi_ul2d>
   d6540:	4602      	mov	r2, r0
   d6542:	460b      	mov	r3, r1
   d6544:	4650      	mov	r0, sl
   d6546:	4659      	mov	r1, fp
   d6548:	f000 fda6 	bl	d7098 <__aeabi_dsub>
   d654c:	2200      	movs	r2, #0
   d654e:	4b17      	ldr	r3, [pc, #92]	; (d65ac <_Z4dtoadhPc+0xc4>)
   d6550:	f001 f9dc 	bl	d790c <__aeabi_dcmpge>
   d6554:	b118      	cbz	r0, d655e <_Z4dtoadhPc+0x76>
        fixed++;
   d6556:	f118 0801 	adds.w	r8, r8, #1
   d655a:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d655e:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d6560:	4622      	mov	r2, r4
   d6562:	462b      	mov	r3, r5
   d6564:	4640      	mov	r0, r8
   d6566:	4649      	mov	r1, r9
   d6568:	f001 fa04 	bl	d7974 <__aeabi_uldivmod>
   d656c:	2301      	movs	r3, #1
   d656e:	220a      	movs	r2, #10
   d6570:	4631      	mov	r1, r6
   d6572:	f000 fa76 	bl	d6a62 <ultoa>
    if (prec) {
   d6576:	b1af      	cbz	r7, d65a4 <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   d6578:	4630      	mov	r0, r6
   d657a:	f001 fbfd 	bl	d7d78 <strlen>
        *sout++ = '.';
   d657e:	232e      	movs	r3, #46	; 0x2e
   d6580:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   d6582:	3001      	adds	r0, #1
   d6584:	4406      	add	r6, r0
   d6586:	4622      	mov	r2, r4
   d6588:	462b      	mov	r3, r5
   d658a:	4640      	mov	r0, r8
   d658c:	4649      	mov	r1, r9
   d658e:	f001 f9f1 	bl	d7974 <__aeabi_uldivmod>
   d6592:	463b      	mov	r3, r7
   d6594:	4610      	mov	r0, r2
   d6596:	4631      	mov	r1, r6
   d6598:	220a      	movs	r2, #10
    }
}
   d659a:	b001      	add	sp, #4
   d659c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   d65a0:	f000 ba5f 	b.w	d6a62 <ultoa>
    }
}
   d65a4:	b001      	add	sp, #4
   d65a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d65aa:	bf00      	nop
   d65ac:	3fe00000 	.word	0x3fe00000

000d65b0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d65b0:	b510      	push	{r4, lr}
   d65b2:	4604      	mov	r4, r0
{
	free(buffer);
   d65b4:	6800      	ldr	r0, [r0, #0]
   d65b6:	f7ff fad5 	bl	d5b64 <free>
}
   d65ba:	4620      	mov	r0, r4
   d65bc:	bd10      	pop	{r4, pc}

000d65be <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d65be:	b510      	push	{r4, lr}
   d65c0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d65c2:	6800      	ldr	r0, [r0, #0]
   d65c4:	b108      	cbz	r0, d65ca <_ZN6String10invalidateEv+0xc>
   d65c6:	f7ff facd 	bl	d5b64 <free>
	buffer = NULL;
   d65ca:	2300      	movs	r3, #0
   d65cc:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d65ce:	60a3      	str	r3, [r4, #8]
   d65d0:	6063      	str	r3, [r4, #4]
   d65d2:	bd10      	pop	{r4, pc}

000d65d4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d65d4:	b538      	push	{r3, r4, r5, lr}
   d65d6:	4604      	mov	r4, r0
   d65d8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d65da:	6800      	ldr	r0, [r0, #0]
   d65dc:	3101      	adds	r1, #1
   d65de:	f7ff fac9 	bl	d5b74 <realloc>
	if (newbuffer) {
   d65e2:	b110      	cbz	r0, d65ea <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d65e4:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d65e8:	2001      	movs	r0, #1
	}
	return 0;
}
   d65ea:	bd38      	pop	{r3, r4, r5, pc}

000d65ec <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d65ec:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d65ee:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d65f0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d65f2:	b113      	cbz	r3, d65fa <_ZN6String7reserveEj+0xe>
   d65f4:	6843      	ldr	r3, [r0, #4]
   d65f6:	428b      	cmp	r3, r1
   d65f8:	d207      	bcs.n	d660a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d65fa:	4620      	mov	r0, r4
   d65fc:	f7ff ffea 	bl	d65d4 <_ZN6String12changeBufferEj>
   d6600:	b120      	cbz	r0, d660c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6602:	68a3      	ldr	r3, [r4, #8]
   d6604:	b90b      	cbnz	r3, d660a <_ZN6String7reserveEj+0x1e>
   d6606:	6822      	ldr	r2, [r4, #0]
   d6608:	7013      	strb	r3, [r2, #0]
   d660a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d660c:	bd10      	pop	{r4, pc}

000d660e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d660e:	b570      	push	{r4, r5, r6, lr}
   d6610:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6612:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6614:	4604      	mov	r4, r0
   d6616:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d6618:	f7ff ffe8 	bl	d65ec <_ZN6String7reserveEj>
   d661c:	b918      	cbnz	r0, d6626 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d661e:	4620      	mov	r0, r4
   d6620:	f7ff ffcd 	bl	d65be <_ZN6String10invalidateEv>
		return *this;
   d6624:	e009      	b.n	d663a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d6626:	462a      	mov	r2, r5
   d6628:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d662a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d662c:	6820      	ldr	r0, [r4, #0]
   d662e:	f001 fb5f 	bl	d7cf0 <memcpy>
	buffer[len] = 0;
   d6632:	6822      	ldr	r2, [r4, #0]
   d6634:	68a3      	ldr	r3, [r4, #8]
   d6636:	2100      	movs	r1, #0
   d6638:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d663a:	4620      	mov	r0, r4
   d663c:	bd70      	pop	{r4, r5, r6, pc}

000d663e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d663e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6640:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6642:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6644:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6646:	6043      	str	r3, [r0, #4]
	len = 0;
   d6648:	6083      	str	r3, [r0, #8]
	flags = 0;
   d664a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d664c:	460d      	mov	r5, r1
   d664e:	b139      	cbz	r1, d6660 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d6650:	4608      	mov	r0, r1
   d6652:	f001 fb91 	bl	d7d78 <strlen>
   d6656:	4629      	mov	r1, r5
   d6658:	4602      	mov	r2, r0
   d665a:	4620      	mov	r0, r4
   d665c:	f7ff ffd7 	bl	d660e <_ZN6String4copyEPKcj>
}
   d6660:	4620      	mov	r0, r4
   d6662:	bd38      	pop	{r3, r4, r5, pc}

000d6664 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d6664:	b538      	push	{r3, r4, r5, lr}
   d6666:	4605      	mov	r5, r0
	if (buffer) {
   d6668:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d666a:	460c      	mov	r4, r1
	if (buffer) {
   d666c:	b160      	cbz	r0, d6688 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d666e:	686a      	ldr	r2, [r5, #4]
   d6670:	688b      	ldr	r3, [r1, #8]
   d6672:	429a      	cmp	r2, r3
   d6674:	d306      	bcc.n	d6684 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d6676:	6809      	ldr	r1, [r1, #0]
   d6678:	f001 fb76 	bl	d7d68 <strcpy>
			len = rhs.len;
   d667c:	68a3      	ldr	r3, [r4, #8]
   d667e:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d6680:	2300      	movs	r3, #0
   d6682:	e00a      	b.n	d669a <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d6684:	f7ff fa6e 	bl	d5b64 <free>
		}
	}
	buffer = rhs.buffer;
   d6688:	6823      	ldr	r3, [r4, #0]
   d668a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d668c:	6863      	ldr	r3, [r4, #4]
   d668e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d6690:	68a3      	ldr	r3, [r4, #8]
   d6692:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d6694:	2300      	movs	r3, #0
   d6696:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d6698:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d669a:	60a3      	str	r3, [r4, #8]
   d669c:	bd38      	pop	{r3, r4, r5, pc}

000d669e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d669e:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d66a0:	b510      	push	{r4, lr}
   d66a2:	460b      	mov	r3, r1
   d66a4:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d66a6:	d007      	beq.n	d66b8 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d66a8:	6809      	ldr	r1, [r1, #0]
   d66aa:	b119      	cbz	r1, d66b4 <_ZN6StringaSERKS_+0x16>
   d66ac:	689a      	ldr	r2, [r3, #8]
   d66ae:	f7ff ffae 	bl	d660e <_ZN6String4copyEPKcj>
   d66b2:	e001      	b.n	d66b8 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d66b4:	f7ff ff83 	bl	d65be <_ZN6String10invalidateEv>

	return *this;
}
   d66b8:	4620      	mov	r0, r4
   d66ba:	bd10      	pop	{r4, pc}

000d66bc <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d66bc:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d66be:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d66c0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d66c2:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d66c4:	6043      	str	r3, [r0, #4]
	len = 0;
   d66c6:	6083      	str	r3, [r0, #8]
	flags = 0;
   d66c8:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d66ca:	f7ff ffe8 	bl	d669e <_ZN6StringaSERKS_>
}
   d66ce:	4620      	mov	r0, r4
   d66d0:	bd10      	pop	{r4, pc}

000d66d2 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d66d2:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d66d4:	b510      	push	{r4, lr}
   d66d6:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d66d8:	d001      	beq.n	d66de <_ZN6StringaSEOS_+0xc>
   d66da:	f7ff ffc3 	bl	d6664 <_ZN6String4moveERS_>
	return *this;
}
   d66de:	4620      	mov	r0, r4
   d66e0:	bd10      	pop	{r4, pc}

000d66e2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d66e2:	b538      	push	{r3, r4, r5, lr}
   d66e4:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d66e6:	460c      	mov	r4, r1
   d66e8:	b141      	cbz	r1, d66fc <_ZN6StringaSEPKc+0x1a>
   d66ea:	4608      	mov	r0, r1
   d66ec:	f001 fb44 	bl	d7d78 <strlen>
   d66f0:	4621      	mov	r1, r4
   d66f2:	4602      	mov	r2, r0
   d66f4:	4628      	mov	r0, r5
   d66f6:	f7ff ff8a 	bl	d660e <_ZN6String4copyEPKcj>
   d66fa:	e001      	b.n	d6700 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d66fc:	f7ff ff5f 	bl	d65be <_ZN6String10invalidateEv>

	return *this;
}
   d6700:	4628      	mov	r0, r5
   d6702:	bd38      	pop	{r3, r4, r5, pc}

000d6704 <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d6704:	b530      	push	{r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6706:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d6708:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d670a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d670c:	6043      	str	r3, [r0, #4]
	len = 0;
   d670e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6710:	7303      	strb	r3, [r0, #12]
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d6712:	4604      	mov	r4, r0
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d6714:	ee10 0a10 	vmov	r0, s0
   d6718:	b2cd      	uxtb	r5, r1
   d671a:	f000 fe1d 	bl	d7358 <__aeabi_f2d>
   d671e:	ec41 0b10 	vmov	d0, r0, r1
   d6722:	a901      	add	r1, sp, #4
   d6724:	4628      	mov	r0, r5
   d6726:	f7ff fedf 	bl	d64e8 <_Z4dtoadhPc>
        *this = buf;
   d672a:	a901      	add	r1, sp, #4
   d672c:	4620      	mov	r0, r4
   d672e:	f7ff ffd8 	bl	d66e2 <_ZN6StringaSEPKc>
}
   d6732:	4620      	mov	r0, r4
   d6734:	b00b      	add	sp, #44	; 0x2c
   d6736:	bd30      	pop	{r4, r5, pc}

000d6738 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d6738:	b570      	push	{r4, r5, r6, lr}
   d673a:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d673c:	b19a      	cbz	r2, d6766 <_ZNK6String8getBytesEPhjj+0x2e>
   d673e:	b191      	cbz	r1, d6766 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d6740:	6885      	ldr	r5, [r0, #8]
   d6742:	429d      	cmp	r5, r3
   d6744:	d802      	bhi.n	d674c <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d6746:	2300      	movs	r3, #0
   d6748:	700b      	strb	r3, [r1, #0]
		return;
   d674a:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d674c:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d674e:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d6750:	6801      	ldr	r1, [r0, #0]
   d6752:	42ac      	cmp	r4, r5
   d6754:	bf28      	it	cs
   d6756:	462c      	movcs	r4, r5
   d6758:	4419      	add	r1, r3
   d675a:	4622      	mov	r2, r4
   d675c:	4630      	mov	r0, r6
   d675e:	f001 fb13 	bl	d7d88 <strncpy>
	buf[n] = 0;
   d6762:	2300      	movs	r3, #0
   d6764:	5533      	strb	r3, [r6, r4]
   d6766:	bd70      	pop	{r4, r5, r6, pc}

000d6768 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6768:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d676a:	4c09      	ldr	r4, [pc, #36]	; (d6790 <_GLOBAL__sub_I_System+0x28>)
   d676c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d676e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6772:	6020      	str	r0, [r4, #0]
   d6774:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6776:	71a0      	strb	r0, [r4, #6]
   d6778:	8120      	strh	r0, [r4, #8]
   d677a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d677c:	f7ff f966 	bl	d5a4c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6780:	4620      	mov	r0, r4
   d6782:	4a04      	ldr	r2, [pc, #16]	; (d6794 <_GLOBAL__sub_I_System+0x2c>)
   d6784:	4904      	ldr	r1, [pc, #16]	; (d6798 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d678a:	f000 bb17 	b.w	d6dbc <__aeabi_atexit>
   d678e:	bf00      	nop
   d6790:	2003e5d8 	.word	0x2003e5d8
   d6794:	2003e254 	.word	0x2003e254
   d6798:	000d4149 	.word	0x000d4149

000d679c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d679c:	4b02      	ldr	r3, [pc, #8]	; (d67a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d679e:	681a      	ldr	r2, [r3, #0]
   d67a0:	4b02      	ldr	r3, [pc, #8]	; (d67ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d67a2:	601a      	str	r2, [r3, #0]
   d67a4:	4770      	bx	lr
   d67a6:	bf00      	nop
   d67a8:	2003e1ec 	.word	0x2003e1ec
   d67ac:	2003e5e4 	.word	0x2003e5e4

000d67b0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d67b0:	4770      	bx	lr

000d67b2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d67b2:	7441      	strb	r1, [r0, #17]
   d67b4:	4770      	bx	lr

000d67b6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d67b6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d67b8:	7c00      	ldrb	r0, [r0, #16]
   d67ba:	f7ff f8ff 	bl	d59bc <HAL_USART_Available_Data_For_Write>
}
   d67be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d67c2:	bd08      	pop	{r3, pc}

000d67c4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d67c4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d67c6:	7c00      	ldrb	r0, [r0, #16]
   d67c8:	f7ff f8d0 	bl	d596c <HAL_USART_Available_Data>
}
   d67cc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d67d0:	bd08      	pop	{r3, pc}

000d67d2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d67d2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d67d4:	7c00      	ldrb	r0, [r0, #16]
   d67d6:	f7ff f8d9 	bl	d598c <HAL_USART_Peek_Data>
}
   d67da:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d67de:	bf28      	it	cs
   d67e0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d67e4:	bd08      	pop	{r3, pc}

000d67e6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d67e6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d67e8:	7c00      	ldrb	r0, [r0, #16]
   d67ea:	f7ff f8c7 	bl	d597c <HAL_USART_Read_Data>
}
   d67ee:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d67f2:	bf28      	it	cs
   d67f4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d67f8:	bd08      	pop	{r3, pc}

000d67fa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d67fa:	7c00      	ldrb	r0, [r0, #16]
   d67fc:	f7ff b8ce 	b.w	d599c <HAL_USART_Flush_Data>

000d6800 <_ZN11USARTSerialD0Ev>:
   d6800:	b510      	push	{r4, lr}
   d6802:	2114      	movs	r1, #20
   d6804:	4604      	mov	r4, r0
   d6806:	f000 fade 	bl	d6dc6 <_ZdlPvj>
   d680a:	4620      	mov	r0, r4
   d680c:	bd10      	pop	{r4, pc}

000d680e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d680e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6810:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6812:	4604      	mov	r4, r0
   d6814:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6816:	b925      	cbnz	r5, d6822 <_ZN11USARTSerial5writeEh+0x14>
   d6818:	7c00      	ldrb	r0, [r0, #16]
   d681a:	f7ff f8cf 	bl	d59bc <HAL_USART_Available_Data_For_Write>
   d681e:	2800      	cmp	r0, #0
   d6820:	dd05      	ble.n	d682e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6822:	4631      	mov	r1, r6
   d6824:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6826:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d682a:	f7ff b897 	b.w	d595c <HAL_USART_Write_Data>
  }
  return 0;
}
   d682e:	4628      	mov	r0, r5
   d6830:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6834 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6834:	b510      	push	{r4, lr}
   d6836:	4604      	mov	r4, r0
   d6838:	4608      	mov	r0, r1
   d683a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d683c:	2200      	movs	r2, #0
   d683e:	6062      	str	r2, [r4, #4]
   d6840:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6844:	60a2      	str	r2, [r4, #8]
   d6846:	4a05      	ldr	r2, [pc, #20]	; (d685c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6848:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d684a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d684c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d684e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6850:	461a      	mov	r2, r3
   d6852:	f7ff f87b 	bl	d594c <HAL_USART_Init>
}
   d6856:	4620      	mov	r0, r4
   d6858:	bd10      	pop	{r4, pc}
   d685a:	bf00      	nop
   d685c:	000d8630 	.word	0x000d8630

000d6860 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6860:	7c00      	ldrb	r0, [r0, #16]
   d6862:	f7ff b8a3 	b.w	d59ac <HAL_USART_Is_Enabled>
	...

000d6868 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6868:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d686a:	4d0c      	ldr	r5, [pc, #48]	; (d689c <_Z22__fetch_global_Serial1v+0x34>)
   d686c:	6829      	ldr	r1, [r5, #0]
   d686e:	f011 0401 	ands.w	r4, r1, #1
   d6872:	d111      	bne.n	d6898 <_Z22__fetch_global_Serial1v+0x30>
   d6874:	4628      	mov	r0, r5
   d6876:	f7fd fc1d 	bl	d40b4 <__cxa_guard_acquire>
   d687a:	b168      	cbz	r0, d6898 <_Z22__fetch_global_Serial1v+0x30>
   d687c:	4a08      	ldr	r2, [pc, #32]	; (d68a0 <_Z22__fetch_global_Serial1v+0x38>)
   d687e:	4b09      	ldr	r3, [pc, #36]	; (d68a4 <_Z22__fetch_global_Serial1v+0x3c>)
   d6880:	4809      	ldr	r0, [pc, #36]	; (d68a8 <_Z22__fetch_global_Serial1v+0x40>)
   d6882:	4621      	mov	r1, r4
   d6884:	f7ff ffd6 	bl	d6834 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6888:	4628      	mov	r0, r5
   d688a:	f7fd fc18 	bl	d40be <__cxa_guard_release>
   d688e:	4a07      	ldr	r2, [pc, #28]	; (d68ac <_Z22__fetch_global_Serial1v+0x44>)
   d6890:	4907      	ldr	r1, [pc, #28]	; (d68b0 <_Z22__fetch_global_Serial1v+0x48>)
   d6892:	4805      	ldr	r0, [pc, #20]	; (d68a8 <_Z22__fetch_global_Serial1v+0x40>)
   d6894:	f000 fa92 	bl	d6dbc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6898:	4803      	ldr	r0, [pc, #12]	; (d68a8 <_Z22__fetch_global_Serial1v+0x40>)
   d689a:	bd38      	pop	{r3, r4, r5, pc}
   d689c:	2003e680 	.word	0x2003e680
   d68a0:	2003e684 	.word	0x2003e684
   d68a4:	2003e5fc 	.word	0x2003e5fc
   d68a8:	2003e5e8 	.word	0x2003e5e8
   d68ac:	2003e254 	.word	0x2003e254
   d68b0:	000d67b1 	.word	0x000d67b1

000d68b4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d68b4:	7441      	strb	r1, [r0, #17]
   d68b6:	4770      	bx	lr

000d68b8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d68b8:	4770      	bx	lr

000d68ba <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d68ba:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d68bc:	2100      	movs	r1, #0
   d68be:	7c00      	ldrb	r0, [r0, #16]
   d68c0:	f7ff f8a4 	bl	d5a0c <HAL_USB_USART_Receive_Data>
}
   d68c4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d68c8:	bf28      	it	cs
   d68ca:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d68ce:	bd08      	pop	{r3, pc}

000d68d0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d68d0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d68d2:	2101      	movs	r1, #1
   d68d4:	7c00      	ldrb	r0, [r0, #16]
   d68d6:	f7ff f899 	bl	d5a0c <HAL_USB_USART_Receive_Data>
}
   d68da:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d68de:	bf28      	it	cs
   d68e0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d68e4:	bd08      	pop	{r3, pc}

000d68e6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d68e6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d68e8:	7c00      	ldrb	r0, [r0, #16]
   d68ea:	f7ff f887 	bl	d59fc <HAL_USB_USART_Available_Data_For_Write>
}
   d68ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d68f2:	bd08      	pop	{r3, pc}

000d68f4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d68f4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d68f6:	7c00      	ldrb	r0, [r0, #16]
   d68f8:	f7ff f878 	bl	d59ec <HAL_USB_USART_Available_Data>
}
   d68fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6900:	bd08      	pop	{r3, pc}

000d6902 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6902:	7c00      	ldrb	r0, [r0, #16]
   d6904:	f7ff b892 	b.w	d5a2c <HAL_USB_USART_Flush_Data>

000d6908 <_ZN9USBSerialD0Ev>:
   d6908:	b510      	push	{r4, lr}
   d690a:	2114      	movs	r1, #20
   d690c:	4604      	mov	r4, r0
   d690e:	f000 fa5a 	bl	d6dc6 <_ZdlPvj>
   d6912:	4620      	mov	r0, r4
   d6914:	bd10      	pop	{r4, pc}

000d6916 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6916:	b538      	push	{r3, r4, r5, lr}
   d6918:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d691a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d691c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d691e:	f7ff f86d 	bl	d59fc <HAL_USB_USART_Available_Data_For_Write>
   d6922:	2800      	cmp	r0, #0
   d6924:	dc01      	bgt.n	d692a <_ZN9USBSerial5writeEh+0x14>
   d6926:	7c60      	ldrb	r0, [r4, #17]
   d6928:	b128      	cbz	r0, d6936 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d692a:	4629      	mov	r1, r5
   d692c:	7c20      	ldrb	r0, [r4, #16]
   d692e:	f7ff f875 	bl	d5a1c <HAL_USB_USART_Send_Data>
   d6932:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6936:	bd38      	pop	{r3, r4, r5, pc}

000d6938 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6938:	b510      	push	{r4, lr}
   d693a:	4604      	mov	r4, r0
   d693c:	2300      	movs	r3, #0
   d693e:	6063      	str	r3, [r4, #4]
   d6940:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6944:	60a3      	str	r3, [r4, #8]
   d6946:	4b05      	ldr	r3, [pc, #20]	; (d695c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6948:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d694a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d694c:	4608      	mov	r0, r1
{
  _serial = serial;
   d694e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6950:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6952:	4611      	mov	r1, r2
   d6954:	f7ff f83a 	bl	d59cc <HAL_USB_USART_Init>
}
   d6958:	4620      	mov	r0, r4
   d695a:	bd10      	pop	{r4, pc}
   d695c:	000d8660 	.word	0x000d8660

000d6960 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6960:	2200      	movs	r2, #0
   d6962:	7c00      	ldrb	r0, [r0, #16]
   d6964:	f7ff b83a 	b.w	d59dc <HAL_USB_USART_Begin>

000d6968 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6968:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d696a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d696c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d696e:	2100      	movs	r1, #0
   d6970:	f001 f9c9 	bl	d7d06 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6974:	4620      	mov	r0, r4
   d6976:	bd10      	pop	{r4, pc}

000d6978 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6978:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d697a:	4d0e      	ldr	r5, [pc, #56]	; (d69b4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d697c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d697e:	a801      	add	r0, sp, #4
   d6980:	f7ff fff2 	bl	d6968 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6984:	6829      	ldr	r1, [r5, #0]
   d6986:	f011 0401 	ands.w	r4, r1, #1
   d698a:	d110      	bne.n	d69ae <_Z16_fetch_usbserialv+0x36>
   d698c:	4628      	mov	r0, r5
   d698e:	f7fd fb91 	bl	d40b4 <__cxa_guard_acquire>
   d6992:	b160      	cbz	r0, d69ae <_Z16_fetch_usbserialv+0x36>
   d6994:	aa01      	add	r2, sp, #4
   d6996:	4621      	mov	r1, r4
   d6998:	4807      	ldr	r0, [pc, #28]	; (d69b8 <_Z16_fetch_usbserialv+0x40>)
   d699a:	f7ff ffcd 	bl	d6938 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d699e:	4628      	mov	r0, r5
   d69a0:	f7fd fb8d 	bl	d40be <__cxa_guard_release>
   d69a4:	4a05      	ldr	r2, [pc, #20]	; (d69bc <_Z16_fetch_usbserialv+0x44>)
   d69a6:	4906      	ldr	r1, [pc, #24]	; (d69c0 <_Z16_fetch_usbserialv+0x48>)
   d69a8:	4803      	ldr	r0, [pc, #12]	; (d69b8 <_Z16_fetch_usbserialv+0x40>)
   d69aa:	f000 fa07 	bl	d6dbc <__aeabi_atexit>
	return _usbserial;
}
   d69ae:	4802      	ldr	r0, [pc, #8]	; (d69b8 <_Z16_fetch_usbserialv+0x40>)
   d69b0:	b007      	add	sp, #28
   d69b2:	bd30      	pop	{r4, r5, pc}
   d69b4:	2003e708 	.word	0x2003e708
   d69b8:	2003e70c 	.word	0x2003e70c
   d69bc:	2003e254 	.word	0x2003e254
   d69c0:	000d68b9 	.word	0x000d68b9

000d69c4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d69c4:	2200      	movs	r2, #0
   d69c6:	4611      	mov	r1, r2
   d69c8:	6840      	ldr	r0, [r0, #4]
   d69ca:	f7ff b88b 	b.w	d5ae4 <network_ready>

000d69ce <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d69ce:	2200      	movs	r2, #0
   d69d0:	4611      	mov	r1, r2
   d69d2:	6840      	ldr	r0, [r0, #4]
   d69d4:	f7ff b8a6 	b.w	d5b24 <network_listening>

000d69d8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d69d8:	2200      	movs	r2, #0
   d69da:	4611      	mov	r1, r2
   d69dc:	6840      	ldr	r0, [r0, #4]
   d69de:	f7ff b8b1 	b.w	d5b44 <network_get_listen_timeout>

000d69e2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d69e2:	2200      	movs	r2, #0
   d69e4:	6840      	ldr	r0, [r0, #4]
   d69e6:	f7ff b8a5 	b.w	d5b34 <network_set_listen_timeout>

000d69ea <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d69ea:	2200      	movs	r2, #0
   d69ec:	f081 0101 	eor.w	r1, r1, #1
   d69f0:	6840      	ldr	r0, [r0, #4]
   d69f2:	f7ff b88f 	b.w	d5b14 <network_listen>

000d69f6 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d69f6:	2300      	movs	r3, #0
   d69f8:	461a      	mov	r2, r3
   d69fa:	4619      	mov	r1, r3
   d69fc:	6840      	ldr	r0, [r0, #4]
   d69fe:	f7ff b881 	b.w	d5b04 <network_off>

000d6a02 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6a02:	2300      	movs	r3, #0
   d6a04:	461a      	mov	r2, r3
   d6a06:	4619      	mov	r1, r3
   d6a08:	6840      	ldr	r0, [r0, #4]
   d6a0a:	f7ff b873 	b.w	d5af4 <network_on>

000d6a0e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6a0e:	2200      	movs	r2, #0
   d6a10:	4611      	mov	r1, r2
   d6a12:	6840      	ldr	r0, [r0, #4]
   d6a14:	f7ff b856 	b.w	d5ac4 <network_connecting>

000d6a18 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6a18:	2200      	movs	r2, #0
   d6a1a:	2102      	movs	r1, #2
   d6a1c:	6840      	ldr	r0, [r0, #4]
   d6a1e:	f7ff b859 	b.w	d5ad4 <network_disconnect>

000d6a22 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6a22:	2300      	movs	r3, #0
   d6a24:	461a      	mov	r2, r3
   d6a26:	6840      	ldr	r0, [r0, #4]
   d6a28:	f7ff b844 	b.w	d5ab4 <network_connect>

000d6a2c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6a2c:	4b02      	ldr	r3, [pc, #8]	; (d6a38 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6a2e:	2204      	movs	r2, #4
   d6a30:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6a32:	4a02      	ldr	r2, [pc, #8]	; (d6a3c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6a34:	601a      	str	r2, [r3, #0]
   d6a36:	4770      	bx	lr
   d6a38:	2003e720 	.word	0x2003e720
   d6a3c:	000d8690 	.word	0x000d8690

000d6a40 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d6a40:	b510      	push	{r4, lr}
   d6a42:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d6a44:	f001 f998 	bl	d7d78 <strlen>
   d6a48:	3801      	subs	r0, #1
   d6a4a:	1823      	adds	r3, r4, r0
   d6a4c:	4620      	mov	r0, r4
	while(i<j){
   d6a4e:	4298      	cmp	r0, r3
   d6a50:	d206      	bcs.n	d6a60 <_Z11str_reversePc+0x20>
		c = *i;
   d6a52:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d6a54:	7819      	ldrb	r1, [r3, #0]
   d6a56:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d6a5a:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d6a5e:	e7f6      	b.n	d6a4e <_Z11str_reversePc+0xe>
   d6a60:	bd10      	pop	{r4, pc}

000d6a62 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d6a62:	b570      	push	{r4, r5, r6, lr}
   d6a64:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d6a66:	1e91      	subs	r1, r2, #2
   d6a68:	2922      	cmp	r1, #34	; 0x22
   d6a6a:	d820      	bhi.n	d6aae <ultoa+0x4c>
   d6a6c:	4625      	mov	r5, r4
   d6a6e:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d6a70:	b910      	cbnz	r0, d6a78 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d6a72:	4423      	add	r3, r4
            *ptr++ = '0';
   d6a74:	2230      	movs	r2, #48	; 0x30
   d6a76:	e00e      	b.n	d6a96 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d6a78:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d6a7c:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d6a80:	b2c1      	uxtb	r1, r0
   d6a82:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d6a86:	2809      	cmp	r0, #9
                *ptr += '0';
   d6a88:	bf94      	ite	ls
   d6a8a:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d6a8c:	3157      	addhi	r1, #87	; 0x57
   d6a8e:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d6a92:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d6a94:	e7eb      	b.n	d6a6e <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d6a96:	4299      	cmp	r1, r3
   d6a98:	d202      	bcs.n	d6aa0 <ultoa+0x3e>
            *ptr++ = '0';
   d6a9a:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d6a9e:	e7fa      	b.n	d6a96 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d6aa0:	2300      	movs	r3, #0
	str_reverse(buffer);
   d6aa2:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d6aa4:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d6aa6:	f7ff ffcb 	bl	d6a40 <_Z11str_reversePc>
	return buffer;
   d6aaa:	4620      	mov	r0, r4
   d6aac:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d6aae:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d6ab0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6ab4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6ab4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6ab6:	4b0c      	ldr	r3, [pc, #48]	; (d6ae8 <serialEventRun+0x34>)
   d6ab8:	b133      	cbz	r3, d6ac8 <serialEventRun+0x14>
   d6aba:	f7ff ff5d 	bl	d6978 <_Z16_fetch_usbserialv>
   d6abe:	6803      	ldr	r3, [r0, #0]
   d6ac0:	691b      	ldr	r3, [r3, #16]
   d6ac2:	4798      	blx	r3
   d6ac4:	2800      	cmp	r0, #0
   d6ac6:	dc09      	bgt.n	d6adc <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6ac8:	4b08      	ldr	r3, [pc, #32]	; (d6aec <serialEventRun+0x38>)
   d6aca:	b163      	cbz	r3, d6ae6 <serialEventRun+0x32>
   d6acc:	f7ff fecc 	bl	d6868 <_Z22__fetch_global_Serial1v>
   d6ad0:	6803      	ldr	r3, [r0, #0]
   d6ad2:	691b      	ldr	r3, [r3, #16]
   d6ad4:	4798      	blx	r3
   d6ad6:	2800      	cmp	r0, #0
   d6ad8:	dc03      	bgt.n	d6ae2 <serialEventRun+0x2e>
   d6ada:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6adc:	f3af 8000 	nop.w
   d6ae0:	e7f2      	b.n	d6ac8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6ae2:	f3af 8000 	nop.w
   d6ae6:	bd08      	pop	{r3, pc}
	...

000d6af0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6af0:	b508      	push	{r3, lr}
	serialEventRun();
   d6af2:	f7ff ffdf 	bl	d6ab4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6af6:	f7fe fe19 	bl	d572c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6afa:	4b01      	ldr	r3, [pc, #4]	; (d6b00 <_post_loop+0x10>)
   d6afc:	6018      	str	r0, [r3, #0]
   d6afe:	bd08      	pop	{r3, pc}
   d6b00:	2003e730 	.word	0x2003e730

000d6b04 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6b04:	4802      	ldr	r0, [pc, #8]	; (d6b10 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6b06:	4a03      	ldr	r2, [pc, #12]	; (d6b14 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6b08:	4903      	ldr	r1, [pc, #12]	; (d6b18 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6b0a:	1a12      	subs	r2, r2, r0
   d6b0c:	f001 b8f0 	b.w	d7cf0 <memcpy>
   d6b10:	2003f400 	.word	0x2003f400
   d6b14:	2003f404 	.word	0x2003f404
   d6b18:	000d8778 	.word	0x000d8778

000d6b1c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6b1c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6b1e:	2300      	movs	r3, #0
   d6b20:	9300      	str	r3, [sp, #0]
   d6b22:	461a      	mov	r2, r3
   d6b24:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6b28:	f7fe ffb2 	bl	d5a90 <system_ctrl_set_result>
}
   d6b2c:	b003      	add	sp, #12
   d6b2e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6b34 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6b34:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6b36:	8843      	ldrh	r3, [r0, #2]
   d6b38:	2b0a      	cmp	r3, #10
   d6b3a:	d008      	beq.n	d6b4e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6b3c:	2b50      	cmp	r3, #80	; 0x50
   d6b3e:	d109      	bne.n	d6b54 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6b40:	4b09      	ldr	r3, [pc, #36]	; (d6b68 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6b42:	681b      	ldr	r3, [r3, #0]
   d6b44:	b13b      	cbz	r3, d6b56 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6b46:	b003      	add	sp, #12
   d6b48:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6b4c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6b4e:	f7ff ffe5 	bl	d6b1c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6b52:	e006      	b.n	d6b62 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6b54:	2300      	movs	r3, #0
   d6b56:	9300      	str	r3, [sp, #0]
   d6b58:	461a      	mov	r2, r3
   d6b5a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6b5e:	f7fe ff97 	bl	d5a90 <system_ctrl_set_result>
        break;
    }
}
   d6b62:	b003      	add	sp, #12
   d6b64:	f85d fb04 	ldr.w	pc, [sp], #4
   d6b68:	2003e728 	.word	0x2003e728

000d6b6c <module_user_init_hook>:

void module_user_init_hook()
{
   d6b6c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6b6e:	4c10      	ldr	r4, [pc, #64]	; (d6bb0 <module_user_init_hook+0x44>)
   d6b70:	4d10      	ldr	r5, [pc, #64]	; (d6bb4 <module_user_init_hook+0x48>)
   d6b72:	6823      	ldr	r3, [r4, #0]
   d6b74:	42ab      	cmp	r3, r5
   d6b76:	4b10      	ldr	r3, [pc, #64]	; (d6bb8 <module_user_init_hook+0x4c>)
   d6b78:	bf0c      	ite	eq
   d6b7a:	2201      	moveq	r2, #1
   d6b7c:	2200      	movne	r2, #0
   d6b7e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6b80:	d002      	beq.n	d6b88 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d6b82:	f7ff ffbf 	bl	d6b04 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6b86:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6b88:	f7fe fdc0 	bl	d570c <HAL_RNG_GetRandomNumber>
   d6b8c:	4604      	mov	r4, r0
    srand(seed);
   d6b8e:	f001 f8c3 	bl	d7d18 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6b92:	4b0a      	ldr	r3, [pc, #40]	; (d6bbc <module_user_init_hook+0x50>)
   d6b94:	b113      	cbz	r3, d6b9c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d6b96:	4620      	mov	r0, r4
   d6b98:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6b9c:	2100      	movs	r1, #0
   d6b9e:	4807      	ldr	r0, [pc, #28]	; (d6bbc <module_user_init_hook+0x50>)
   d6ba0:	f7fe ff80 	bl	d5aa4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6ba4:	2100      	movs	r1, #0
   d6ba6:	4806      	ldr	r0, [pc, #24]	; (d6bc0 <module_user_init_hook+0x54>)
}
   d6ba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6bac:	f7fe bf66 	b.w	d5a7c <system_ctrl_set_app_request_handler>
   d6bb0:	2003f400 	.word	0x2003f400
   d6bb4:	9a271c1e 	.word	0x9a271c1e
   d6bb8:	2003e72c 	.word	0x2003e72c
   d6bbc:	00000000 	.word	0x00000000
   d6bc0:	000d6b35 	.word	0x000d6b35

000d6bc4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6bc4:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6bc6:	4e18      	ldr	r6, [pc, #96]	; (d6c28 <pinAvailable+0x64>)
   d6bc8:	6831      	ldr	r1, [r6, #0]
   d6bca:	f011 0501 	ands.w	r5, r1, #1
   d6bce:	4604      	mov	r4, r0
   d6bd0:	d10a      	bne.n	d6be8 <pinAvailable+0x24>
   d6bd2:	4630      	mov	r0, r6
   d6bd4:	f7fd fa6e 	bl	d40b4 <__cxa_guard_acquire>
   d6bd8:	b130      	cbz	r0, d6be8 <pinAvailable+0x24>
   d6bda:	4629      	mov	r1, r5
   d6bdc:	4813      	ldr	r0, [pc, #76]	; (d6c2c <pinAvailable+0x68>)
   d6bde:	f7ff fb5d 	bl	d629c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6be2:	4630      	mov	r0, r6
   d6be4:	f7fd fa6b 	bl	d40be <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d6be8:	4810      	ldr	r0, [pc, #64]	; (d6c2c <pinAvailable+0x68>)
   d6bea:	f7ff fc79 	bl	d64e0 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6bee:	b128      	cbz	r0, d6bfc <pinAvailable+0x38>
   d6bf0:	f1a4 030b 	sub.w	r3, r4, #11
   d6bf4:	2b02      	cmp	r3, #2
   d6bf6:	d801      	bhi.n	d6bfc <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d6bf8:	2000      	movs	r0, #0
   d6bfa:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6bfc:	f000 f8b8 	bl	d6d70 <_Z19__fetch_global_Wirev>
   d6c00:	f7ff f8b3 	bl	d5d6a <_ZN7TwoWire9isEnabledEv>
   d6c04:	b108      	cbz	r0, d6c0a <pinAvailable+0x46>
   d6c06:	2c01      	cmp	r4, #1
   d6c08:	d9f6      	bls.n	d6bf8 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6c0a:	f7ff fe2d 	bl	d6868 <_Z22__fetch_global_Serial1v>
   d6c0e:	f7ff fe27 	bl	d6860 <_ZN11USARTSerial9isEnabledEv>
   d6c12:	b118      	cbz	r0, d6c1c <pinAvailable+0x58>
   d6c14:	f1a4 0309 	sub.w	r3, r4, #9
   d6c18:	2b01      	cmp	r3, #1
   d6c1a:	d9ed      	bls.n	d6bf8 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6c1c:	2c23      	cmp	r4, #35	; 0x23
   d6c1e:	bf8c      	ite	hi
   d6c20:	2000      	movhi	r0, #0
   d6c22:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6c24:	bd70      	pop	{r4, r5, r6, pc}
   d6c26:	bf00      	nop
   d6c28:	2003e3cc 	.word	0x2003e3cc
   d6c2c:	2003e3d0 	.word	0x2003e3d0

000d6c30 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6c30:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6c32:	b538      	push	{r3, r4, r5, lr}
   d6c34:	4604      	mov	r4, r0
   d6c36:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6c38:	d80a      	bhi.n	d6c50 <pinMode+0x20>
   d6c3a:	29ff      	cmp	r1, #255	; 0xff
   d6c3c:	d008      	beq.n	d6c50 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6c3e:	f7ff ffc1 	bl	d6bc4 <pinAvailable>
   d6c42:	b128      	cbz	r0, d6c50 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6c44:	4629      	mov	r1, r5
   d6c46:	4620      	mov	r0, r4
}
   d6c48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6c4c:	f7fe bd86 	b.w	d575c <HAL_Pin_Mode>
   d6c50:	bd38      	pop	{r3, r4, r5, pc}

000d6c52 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6c52:	b538      	push	{r3, r4, r5, lr}
   d6c54:	4604      	mov	r4, r0
   d6c56:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6c58:	f7fe fd88 	bl	d576c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6c5c:	28ff      	cmp	r0, #255	; 0xff
   d6c5e:	d010      	beq.n	d6c82 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6c60:	2806      	cmp	r0, #6
   d6c62:	d804      	bhi.n	d6c6e <digitalWrite+0x1c>
   d6c64:	234d      	movs	r3, #77	; 0x4d
   d6c66:	fa23 f000 	lsr.w	r0, r3, r0
   d6c6a:	07c3      	lsls	r3, r0, #31
   d6c6c:	d409      	bmi.n	d6c82 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6c6e:	4620      	mov	r0, r4
   d6c70:	f7ff ffa8 	bl	d6bc4 <pinAvailable>
   d6c74:	b128      	cbz	r0, d6c82 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6c76:	4629      	mov	r1, r5
   d6c78:	4620      	mov	r0, r4
}
   d6c7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6c7e:	f7fe bd7d 	b.w	d577c <HAL_GPIO_Write>
   d6c82:	bd38      	pop	{r3, r4, r5, pc}

000d6c84 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6c84:	b510      	push	{r4, lr}
   d6c86:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6c88:	f7fe fd70 	bl	d576c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d6c8c:	3804      	subs	r0, #4
   d6c8e:	b2c0      	uxtb	r0, r0
   d6c90:	2801      	cmp	r0, #1
   d6c92:	d908      	bls.n	d6ca6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6c94:	4620      	mov	r0, r4
   d6c96:	f7ff ff95 	bl	d6bc4 <pinAvailable>
   d6c9a:	b120      	cbz	r0, d6ca6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6c9c:	4620      	mov	r0, r4
}
   d6c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6ca2:	f7fe bd73 	b.w	d578c <HAL_GPIO_Read>
}
   d6ca6:	2000      	movs	r0, #0
   d6ca8:	bd10      	pop	{r4, pc}

000d6caa <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d6caa:	b538      	push	{r3, r4, r5, lr}
   d6cac:	4604      	mov	r4, r0
   d6cae:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d6cb0:	f7ff ff88 	bl	d6bc4 <pinAvailable>
   d6cb4:	b1f0      	cbz	r0, d6cf4 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d6cb6:	2104      	movs	r1, #4
   d6cb8:	4620      	mov	r0, r4
   d6cba:	f7fe fd47 	bl	d574c <HAL_Validate_Pin_Function>
   d6cbe:	2804      	cmp	r0, #4
   d6cc0:	d105      	bne.n	d6cce <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d6cc2:	b2a9      	uxth	r1, r5
   d6cc4:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
   d6cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
   d6cca:	f7fe bd67 	b.w	d579c <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d6cce:	2102      	movs	r1, #2
   d6cd0:	4620      	mov	r0, r4
   d6cd2:	f7fe fd3b 	bl	d574c <HAL_Validate_Pin_Function>
   d6cd6:	2802      	cmp	r0, #2
   d6cd8:	d10c      	bne.n	d6cf4 <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d6cda:	4620      	mov	r0, r4
   d6cdc:	f7fe fd46 	bl	d576c <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d6ce0:	2801      	cmp	r0, #1
   d6ce2:	d001      	beq.n	d6ce8 <_Z11analogWritetm+0x3e>
   d6ce4:	2804      	cmp	r0, #4
   d6ce6:	d105      	bne.n	d6cf4 <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d6ce8:	4629      	mov	r1, r5
   d6cea:	4620      	mov	r0, r4
    }
}
   d6cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d6cf0:	f7fe bd5c 	b.w	d57ac <HAL_PWM_Write_Ext>
   d6cf4:	bd38      	pop	{r3, r4, r5, pc}

000d6cf6 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d6cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6cfa:	4690      	mov	r8, r2
   d6cfc:	461e      	mov	r6, r3
   d6cfe:	2407      	movs	r4, #7
   d6d00:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d6d02:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d6d04:	f1b8 0f00 	cmp.w	r8, #0
   d6d08:	d104      	bne.n	d6d14 <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d6d0a:	f1c4 0107 	rsb	r1, r4, #7
   d6d0e:	fa46 f101 	asr.w	r1, r6, r1
   d6d12:	e001      	b.n	d6d18 <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d6d14:	fa46 f104 	asr.w	r1, r6, r4
   d6d18:	f001 0101 	and.w	r1, r1, #1
   d6d1c:	4638      	mov	r0, r7
   d6d1e:	f7ff ff98 	bl	d6c52 <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d6d22:	2101      	movs	r1, #1
   d6d24:	4628      	mov	r0, r5
   d6d26:	f7ff ff94 	bl	d6c52 <digitalWrite>
    digitalWrite(clockPin, LOW);
   d6d2a:	2100      	movs	r1, #0
   d6d2c:	4628      	mov	r0, r5
   d6d2e:	f7ff ff90 	bl	d6c52 <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d6d32:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   d6d36:	d2e5      	bcs.n	d6d04 <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d6d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6d3c <_Z17acquireWireBufferv>:
   d6d3c:	b570      	push	{r4, r5, r6, lr}
   d6d3e:	4604      	mov	r4, r0
   d6d40:	2514      	movs	r5, #20
   d6d42:	462a      	mov	r2, r5
   d6d44:	4e09      	ldr	r6, [pc, #36]	; (d6d6c <_Z17acquireWireBufferv+0x30>)
   d6d46:	2100      	movs	r1, #0
   d6d48:	f000 ffdd 	bl	d7d06 <memset>
   d6d4c:	8025      	strh	r5, [r4, #0]
   d6d4e:	2520      	movs	r5, #32
   d6d50:	4631      	mov	r1, r6
   d6d52:	60a5      	str	r5, [r4, #8]
   d6d54:	6125      	str	r5, [r4, #16]
   d6d56:	4628      	mov	r0, r5
   d6d58:	f000 f84f 	bl	d6dfa <_ZnajRKSt9nothrow_t>
   d6d5c:	4631      	mov	r1, r6
   d6d5e:	6060      	str	r0, [r4, #4]
   d6d60:	4628      	mov	r0, r5
   d6d62:	f000 f84a 	bl	d6dfa <_ZnajRKSt9nothrow_t>
   d6d66:	60e0      	str	r0, [r4, #12]
   d6d68:	4620      	mov	r0, r4
   d6d6a:	bd70      	pop	{r4, r5, r6, pc}
   d6d6c:	000d86bc 	.word	0x000d86bc

000d6d70 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6d70:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6d72:	4d0e      	ldr	r5, [pc, #56]	; (d6dac <_Z19__fetch_global_Wirev+0x3c>)
   d6d74:	6829      	ldr	r1, [r5, #0]
   d6d76:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6d7a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6d7c:	d113      	bne.n	d6da6 <_Z19__fetch_global_Wirev+0x36>
   d6d7e:	4628      	mov	r0, r5
   d6d80:	f7fd f998 	bl	d40b4 <__cxa_guard_acquire>
   d6d84:	b178      	cbz	r0, d6da6 <_Z19__fetch_global_Wirev+0x36>
   d6d86:	a801      	add	r0, sp, #4
   d6d88:	f7ff ffd8 	bl	d6d3c <_Z17acquireWireBufferv>
   d6d8c:	aa01      	add	r2, sp, #4
   d6d8e:	4621      	mov	r1, r4
   d6d90:	4807      	ldr	r0, [pc, #28]	; (d6db0 <_Z19__fetch_global_Wirev+0x40>)
   d6d92:	f7fe ff93 	bl	d5cbc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d6d96:	4628      	mov	r0, r5
   d6d98:	f7fd f991 	bl	d40be <__cxa_guard_release>
   d6d9c:	4a05      	ldr	r2, [pc, #20]	; (d6db4 <_Z19__fetch_global_Wirev+0x44>)
   d6d9e:	4906      	ldr	r1, [pc, #24]	; (d6db8 <_Z19__fetch_global_Wirev+0x48>)
   d6da0:	4803      	ldr	r0, [pc, #12]	; (d6db0 <_Z19__fetch_global_Wirev+0x40>)
   d6da2:	f000 f80b 	bl	d6dbc <__aeabi_atexit>
	return wire;
}
   d6da6:	4802      	ldr	r0, [pc, #8]	; (d6db0 <_Z19__fetch_global_Wirev+0x40>)
   d6da8:	b007      	add	sp, #28
   d6daa:	bd30      	pop	{r4, r5, pc}
   d6dac:	2003e734 	.word	0x2003e734
   d6db0:	2003e738 	.word	0x2003e738
   d6db4:	2003e254 	.word	0x2003e254
   d6db8:	000d5c65 	.word	0x000d5c65

000d6dbc <__aeabi_atexit>:
   d6dbc:	460b      	mov	r3, r1
   d6dbe:	4601      	mov	r1, r0
   d6dc0:	4618      	mov	r0, r3
   d6dc2:	f000 bf87 	b.w	d7cd4 <__cxa_atexit>

000d6dc6 <_ZdlPvj>:
   d6dc6:	f7fd b966 	b.w	d4096 <_ZdlPv>
	...

000d6dcc <_ZSt15get_new_handlerv>:
   d6dcc:	4b02      	ldr	r3, [pc, #8]	; (d6dd8 <_ZSt15get_new_handlerv+0xc>)
   d6dce:	6818      	ldr	r0, [r3, #0]
   d6dd0:	f3bf 8f5f 	dmb	sy
   d6dd4:	4770      	bx	lr
   d6dd6:	bf00      	nop
   d6dd8:	2003e74c 	.word	0x2003e74c

000d6ddc <_ZnwjRKSt9nothrow_t>:
   d6ddc:	b510      	push	{r4, lr}
   d6dde:	2800      	cmp	r0, #0
   d6de0:	bf14      	ite	ne
   d6de2:	4604      	movne	r4, r0
   d6de4:	2401      	moveq	r4, #1
   d6de6:	4620      	mov	r0, r4
   d6de8:	f7fe feb4 	bl	d5b54 <malloc>
   d6dec:	b920      	cbnz	r0, d6df8 <_ZnwjRKSt9nothrow_t+0x1c>
   d6dee:	f7ff ffed 	bl	d6dcc <_ZSt15get_new_handlerv>
   d6df2:	b108      	cbz	r0, d6df8 <_ZnwjRKSt9nothrow_t+0x1c>
   d6df4:	4780      	blx	r0
   d6df6:	e7f6      	b.n	d6de6 <_ZnwjRKSt9nothrow_t+0xa>
   d6df8:	bd10      	pop	{r4, pc}

000d6dfa <_ZnajRKSt9nothrow_t>:
   d6dfa:	f7ff bfef 	b.w	d6ddc <_ZnwjRKSt9nothrow_t>
	...

000d6e00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6e00:	4b24      	ldr	r3, [pc, #144]	; (d6e94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6e02:	681a      	ldr	r2, [r3, #0]
   d6e04:	07d0      	lsls	r0, r2, #31
   d6e06:	bf5c      	itt	pl
   d6e08:	2201      	movpl	r2, #1
   d6e0a:	601a      	strpl	r2, [r3, #0]
   d6e0c:	4b22      	ldr	r3, [pc, #136]	; (d6e98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6e0e:	681a      	ldr	r2, [r3, #0]
   d6e10:	07d1      	lsls	r1, r2, #31
   d6e12:	bf5c      	itt	pl
   d6e14:	2201      	movpl	r2, #1
   d6e16:	601a      	strpl	r2, [r3, #0]
   d6e18:	4b20      	ldr	r3, [pc, #128]	; (d6e9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6e1a:	681a      	ldr	r2, [r3, #0]
   d6e1c:	07d2      	lsls	r2, r2, #31
   d6e1e:	bf5c      	itt	pl
   d6e20:	2201      	movpl	r2, #1
   d6e22:	601a      	strpl	r2, [r3, #0]
   d6e24:	4b1e      	ldr	r3, [pc, #120]	; (d6ea0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6e26:	681a      	ldr	r2, [r3, #0]
   d6e28:	07d0      	lsls	r0, r2, #31
   d6e2a:	bf5c      	itt	pl
   d6e2c:	2201      	movpl	r2, #1
   d6e2e:	601a      	strpl	r2, [r3, #0]
   d6e30:	4b1c      	ldr	r3, [pc, #112]	; (d6ea4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6e32:	681a      	ldr	r2, [r3, #0]
   d6e34:	07d1      	lsls	r1, r2, #31
   d6e36:	bf5c      	itt	pl
   d6e38:	2201      	movpl	r2, #1
   d6e3a:	601a      	strpl	r2, [r3, #0]
   d6e3c:	4b1a      	ldr	r3, [pc, #104]	; (d6ea8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6e3e:	681a      	ldr	r2, [r3, #0]
   d6e40:	07d2      	lsls	r2, r2, #31
   d6e42:	bf5c      	itt	pl
   d6e44:	2201      	movpl	r2, #1
   d6e46:	601a      	strpl	r2, [r3, #0]
   d6e48:	4b18      	ldr	r3, [pc, #96]	; (d6eac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6e4a:	681a      	ldr	r2, [r3, #0]
   d6e4c:	07d0      	lsls	r0, r2, #31
   d6e4e:	bf5c      	itt	pl
   d6e50:	2201      	movpl	r2, #1
   d6e52:	601a      	strpl	r2, [r3, #0]
   d6e54:	4b16      	ldr	r3, [pc, #88]	; (d6eb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6e56:	681a      	ldr	r2, [r3, #0]
   d6e58:	07d1      	lsls	r1, r2, #31
   d6e5a:	bf5c      	itt	pl
   d6e5c:	2201      	movpl	r2, #1
   d6e5e:	601a      	strpl	r2, [r3, #0]
   d6e60:	4b14      	ldr	r3, [pc, #80]	; (d6eb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6e62:	681a      	ldr	r2, [r3, #0]
   d6e64:	07d2      	lsls	r2, r2, #31
   d6e66:	bf5c      	itt	pl
   d6e68:	2201      	movpl	r2, #1
   d6e6a:	601a      	strpl	r2, [r3, #0]
   d6e6c:	4b12      	ldr	r3, [pc, #72]	; (d6eb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6e6e:	681a      	ldr	r2, [r3, #0]
   d6e70:	07d0      	lsls	r0, r2, #31
   d6e72:	bf5c      	itt	pl
   d6e74:	2201      	movpl	r2, #1
   d6e76:	601a      	strpl	r2, [r3, #0]
   d6e78:	4b10      	ldr	r3, [pc, #64]	; (d6ebc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6e7a:	681a      	ldr	r2, [r3, #0]
   d6e7c:	07d1      	lsls	r1, r2, #31
   d6e7e:	bf5c      	itt	pl
   d6e80:	2201      	movpl	r2, #1
   d6e82:	601a      	strpl	r2, [r3, #0]
   d6e84:	4b0e      	ldr	r3, [pc, #56]	; (d6ec0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6e86:	681a      	ldr	r2, [r3, #0]
   d6e88:	07d2      	lsls	r2, r2, #31
   d6e8a:	bf5c      	itt	pl
   d6e8c:	2201      	movpl	r2, #1
   d6e8e:	601a      	strpl	r2, [r3, #0]
   d6e90:	4770      	bx	lr
   d6e92:	bf00      	nop
   d6e94:	2003e77c 	.word	0x2003e77c
   d6e98:	2003e778 	.word	0x2003e778
   d6e9c:	2003e774 	.word	0x2003e774
   d6ea0:	2003e770 	.word	0x2003e770
   d6ea4:	2003e76c 	.word	0x2003e76c
   d6ea8:	2003e768 	.word	0x2003e768
   d6eac:	2003e764 	.word	0x2003e764
   d6eb0:	2003e760 	.word	0x2003e760
   d6eb4:	2003e75c 	.word	0x2003e75c
   d6eb8:	2003e758 	.word	0x2003e758
   d6ebc:	2003e754 	.word	0x2003e754
   d6ec0:	2003e750 	.word	0x2003e750

000d6ec4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6ec4:	4b18      	ldr	r3, [pc, #96]	; (d6f28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6ec6:	681a      	ldr	r2, [r3, #0]
   d6ec8:	07d1      	lsls	r1, r2, #31
   d6eca:	bf5c      	itt	pl
   d6ecc:	2201      	movpl	r2, #1
   d6ece:	601a      	strpl	r2, [r3, #0]
   d6ed0:	4b16      	ldr	r3, [pc, #88]	; (d6f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6ed2:	681a      	ldr	r2, [r3, #0]
   d6ed4:	07d2      	lsls	r2, r2, #31
   d6ed6:	bf5c      	itt	pl
   d6ed8:	2201      	movpl	r2, #1
   d6eda:	601a      	strpl	r2, [r3, #0]
   d6edc:	4b14      	ldr	r3, [pc, #80]	; (d6f30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6ede:	681a      	ldr	r2, [r3, #0]
   d6ee0:	07d0      	lsls	r0, r2, #31
   d6ee2:	bf5c      	itt	pl
   d6ee4:	2201      	movpl	r2, #1
   d6ee6:	601a      	strpl	r2, [r3, #0]
   d6ee8:	4b12      	ldr	r3, [pc, #72]	; (d6f34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6eea:	681a      	ldr	r2, [r3, #0]
   d6eec:	07d1      	lsls	r1, r2, #31
   d6eee:	bf5c      	itt	pl
   d6ef0:	2201      	movpl	r2, #1
   d6ef2:	601a      	strpl	r2, [r3, #0]
   d6ef4:	4b10      	ldr	r3, [pc, #64]	; (d6f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6ef6:	681a      	ldr	r2, [r3, #0]
   d6ef8:	07d2      	lsls	r2, r2, #31
   d6efa:	bf5c      	itt	pl
   d6efc:	2201      	movpl	r2, #1
   d6efe:	601a      	strpl	r2, [r3, #0]
   d6f00:	4b0e      	ldr	r3, [pc, #56]	; (d6f3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6f02:	681a      	ldr	r2, [r3, #0]
   d6f04:	07d0      	lsls	r0, r2, #31
   d6f06:	bf5c      	itt	pl
   d6f08:	2201      	movpl	r2, #1
   d6f0a:	601a      	strpl	r2, [r3, #0]
   d6f0c:	4b0c      	ldr	r3, [pc, #48]	; (d6f40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6f0e:	681a      	ldr	r2, [r3, #0]
   d6f10:	07d1      	lsls	r1, r2, #31
   d6f12:	bf5c      	itt	pl
   d6f14:	2201      	movpl	r2, #1
   d6f16:	601a      	strpl	r2, [r3, #0]
   d6f18:	4b0a      	ldr	r3, [pc, #40]	; (d6f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6f1a:	681a      	ldr	r2, [r3, #0]
   d6f1c:	07d2      	lsls	r2, r2, #31
   d6f1e:	bf5c      	itt	pl
   d6f20:	2201      	movpl	r2, #1
   d6f22:	601a      	strpl	r2, [r3, #0]
   d6f24:	4770      	bx	lr
   d6f26:	bf00      	nop
   d6f28:	2003e79c 	.word	0x2003e79c
   d6f2c:	2003e798 	.word	0x2003e798
   d6f30:	2003e794 	.word	0x2003e794
   d6f34:	2003e790 	.word	0x2003e790
   d6f38:	2003e78c 	.word	0x2003e78c
   d6f3c:	2003e788 	.word	0x2003e788
   d6f40:	2003e784 	.word	0x2003e784
   d6f44:	2003e780 	.word	0x2003e780

000d6f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6f48:	4b18      	ldr	r3, [pc, #96]	; (d6fac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6f4a:	681a      	ldr	r2, [r3, #0]
   d6f4c:	07d1      	lsls	r1, r2, #31
   d6f4e:	bf5c      	itt	pl
   d6f50:	2201      	movpl	r2, #1
   d6f52:	601a      	strpl	r2, [r3, #0]
   d6f54:	4b16      	ldr	r3, [pc, #88]	; (d6fb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6f56:	681a      	ldr	r2, [r3, #0]
   d6f58:	07d2      	lsls	r2, r2, #31
   d6f5a:	bf5c      	itt	pl
   d6f5c:	2201      	movpl	r2, #1
   d6f5e:	601a      	strpl	r2, [r3, #0]
   d6f60:	4b14      	ldr	r3, [pc, #80]	; (d6fb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6f62:	681a      	ldr	r2, [r3, #0]
   d6f64:	07d0      	lsls	r0, r2, #31
   d6f66:	bf5c      	itt	pl
   d6f68:	2201      	movpl	r2, #1
   d6f6a:	601a      	strpl	r2, [r3, #0]
   d6f6c:	4b12      	ldr	r3, [pc, #72]	; (d6fb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6f6e:	681a      	ldr	r2, [r3, #0]
   d6f70:	07d1      	lsls	r1, r2, #31
   d6f72:	bf5c      	itt	pl
   d6f74:	2201      	movpl	r2, #1
   d6f76:	601a      	strpl	r2, [r3, #0]
   d6f78:	4b10      	ldr	r3, [pc, #64]	; (d6fbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6f7a:	681a      	ldr	r2, [r3, #0]
   d6f7c:	07d2      	lsls	r2, r2, #31
   d6f7e:	bf5c      	itt	pl
   d6f80:	2201      	movpl	r2, #1
   d6f82:	601a      	strpl	r2, [r3, #0]
   d6f84:	4b0e      	ldr	r3, [pc, #56]	; (d6fc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6f86:	681a      	ldr	r2, [r3, #0]
   d6f88:	07d0      	lsls	r0, r2, #31
   d6f8a:	bf5c      	itt	pl
   d6f8c:	2201      	movpl	r2, #1
   d6f8e:	601a      	strpl	r2, [r3, #0]
   d6f90:	4b0c      	ldr	r3, [pc, #48]	; (d6fc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6f92:	681a      	ldr	r2, [r3, #0]
   d6f94:	07d1      	lsls	r1, r2, #31
   d6f96:	bf5c      	itt	pl
   d6f98:	2201      	movpl	r2, #1
   d6f9a:	601a      	strpl	r2, [r3, #0]
   d6f9c:	4b0a      	ldr	r3, [pc, #40]	; (d6fc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6f9e:	681a      	ldr	r2, [r3, #0]
   d6fa0:	07d2      	lsls	r2, r2, #31
   d6fa2:	bf5c      	itt	pl
   d6fa4:	2201      	movpl	r2, #1
   d6fa6:	601a      	strpl	r2, [r3, #0]
   d6fa8:	4770      	bx	lr
   d6faa:	bf00      	nop
   d6fac:	2003e7bc 	.word	0x2003e7bc
   d6fb0:	2003e7b8 	.word	0x2003e7b8
   d6fb4:	2003e7b4 	.word	0x2003e7b4
   d6fb8:	2003e7b0 	.word	0x2003e7b0
   d6fbc:	2003e7ac 	.word	0x2003e7ac
   d6fc0:	2003e7a8 	.word	0x2003e7a8
   d6fc4:	2003e7a4 	.word	0x2003e7a4
   d6fc8:	2003e7a0 	.word	0x2003e7a0

000d6fcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6fcc:	4b24      	ldr	r3, [pc, #144]	; (d7060 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6fce:	681a      	ldr	r2, [r3, #0]
   d6fd0:	07d0      	lsls	r0, r2, #31
   d6fd2:	bf5c      	itt	pl
   d6fd4:	2201      	movpl	r2, #1
   d6fd6:	601a      	strpl	r2, [r3, #0]
   d6fd8:	4b22      	ldr	r3, [pc, #136]	; (d7064 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6fda:	681a      	ldr	r2, [r3, #0]
   d6fdc:	07d1      	lsls	r1, r2, #31
   d6fde:	bf5c      	itt	pl
   d6fe0:	2201      	movpl	r2, #1
   d6fe2:	601a      	strpl	r2, [r3, #0]
   d6fe4:	4b20      	ldr	r3, [pc, #128]	; (d7068 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6fe6:	681a      	ldr	r2, [r3, #0]
   d6fe8:	07d2      	lsls	r2, r2, #31
   d6fea:	bf5c      	itt	pl
   d6fec:	2201      	movpl	r2, #1
   d6fee:	601a      	strpl	r2, [r3, #0]
   d6ff0:	4b1e      	ldr	r3, [pc, #120]	; (d706c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6ff2:	681a      	ldr	r2, [r3, #0]
   d6ff4:	07d0      	lsls	r0, r2, #31
   d6ff6:	bf5c      	itt	pl
   d6ff8:	2201      	movpl	r2, #1
   d6ffa:	601a      	strpl	r2, [r3, #0]
   d6ffc:	4b1c      	ldr	r3, [pc, #112]	; (d7070 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6ffe:	681a      	ldr	r2, [r3, #0]
   d7000:	07d1      	lsls	r1, r2, #31
   d7002:	bf5c      	itt	pl
   d7004:	2201      	movpl	r2, #1
   d7006:	601a      	strpl	r2, [r3, #0]
   d7008:	4b1a      	ldr	r3, [pc, #104]	; (d7074 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d700a:	681a      	ldr	r2, [r3, #0]
   d700c:	07d2      	lsls	r2, r2, #31
   d700e:	bf5c      	itt	pl
   d7010:	2201      	movpl	r2, #1
   d7012:	601a      	strpl	r2, [r3, #0]
   d7014:	4b18      	ldr	r3, [pc, #96]	; (d7078 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7016:	681a      	ldr	r2, [r3, #0]
   d7018:	07d0      	lsls	r0, r2, #31
   d701a:	bf5c      	itt	pl
   d701c:	2201      	movpl	r2, #1
   d701e:	601a      	strpl	r2, [r3, #0]
   d7020:	4b16      	ldr	r3, [pc, #88]	; (d707c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7022:	681a      	ldr	r2, [r3, #0]
   d7024:	07d1      	lsls	r1, r2, #31
   d7026:	bf5c      	itt	pl
   d7028:	2201      	movpl	r2, #1
   d702a:	601a      	strpl	r2, [r3, #0]
   d702c:	4b14      	ldr	r3, [pc, #80]	; (d7080 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d702e:	681a      	ldr	r2, [r3, #0]
   d7030:	07d2      	lsls	r2, r2, #31
   d7032:	bf5c      	itt	pl
   d7034:	2201      	movpl	r2, #1
   d7036:	601a      	strpl	r2, [r3, #0]
   d7038:	4b12      	ldr	r3, [pc, #72]	; (d7084 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d703a:	681a      	ldr	r2, [r3, #0]
   d703c:	07d0      	lsls	r0, r2, #31
   d703e:	bf5c      	itt	pl
   d7040:	2201      	movpl	r2, #1
   d7042:	601a      	strpl	r2, [r3, #0]
   d7044:	4b10      	ldr	r3, [pc, #64]	; (d7088 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7046:	681a      	ldr	r2, [r3, #0]
   d7048:	07d1      	lsls	r1, r2, #31
   d704a:	bf5c      	itt	pl
   d704c:	2201      	movpl	r2, #1
   d704e:	601a      	strpl	r2, [r3, #0]
   d7050:	4b0e      	ldr	r3, [pc, #56]	; (d708c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7052:	681a      	ldr	r2, [r3, #0]
   d7054:	07d2      	lsls	r2, r2, #31
   d7056:	bf5c      	itt	pl
   d7058:	2201      	movpl	r2, #1
   d705a:	601a      	strpl	r2, [r3, #0]
   d705c:	4770      	bx	lr
   d705e:	bf00      	nop
   d7060:	2003e7ec 	.word	0x2003e7ec
   d7064:	2003e7e8 	.word	0x2003e7e8
   d7068:	2003e7e4 	.word	0x2003e7e4
   d706c:	2003e7e0 	.word	0x2003e7e0
   d7070:	2003e7dc 	.word	0x2003e7dc
   d7074:	2003e7d8 	.word	0x2003e7d8
   d7078:	2003e7d4 	.word	0x2003e7d4
   d707c:	2003e7d0 	.word	0x2003e7d0
   d7080:	2003e7cc 	.word	0x2003e7cc
   d7084:	2003e7c8 	.word	0x2003e7c8
   d7088:	2003e7c4 	.word	0x2003e7c4
   d708c:	2003e7c0 	.word	0x2003e7c0

000d7090 <__aeabi_drsub>:
   d7090:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7094:	e002      	b.n	d709c <__adddf3>
   d7096:	bf00      	nop

000d7098 <__aeabi_dsub>:
   d7098:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d709c <__adddf3>:
   d709c:	b530      	push	{r4, r5, lr}
   d709e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d70a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d70a6:	ea94 0f05 	teq	r4, r5
   d70aa:	bf08      	it	eq
   d70ac:	ea90 0f02 	teqeq	r0, r2
   d70b0:	bf1f      	itttt	ne
   d70b2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d70b6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d70ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d70be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d70c2:	f000 80e2 	beq.w	d728a <__adddf3+0x1ee>
   d70c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d70ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d70ce:	bfb8      	it	lt
   d70d0:	426d      	neglt	r5, r5
   d70d2:	dd0c      	ble.n	d70ee <__adddf3+0x52>
   d70d4:	442c      	add	r4, r5
   d70d6:	ea80 0202 	eor.w	r2, r0, r2
   d70da:	ea81 0303 	eor.w	r3, r1, r3
   d70de:	ea82 0000 	eor.w	r0, r2, r0
   d70e2:	ea83 0101 	eor.w	r1, r3, r1
   d70e6:	ea80 0202 	eor.w	r2, r0, r2
   d70ea:	ea81 0303 	eor.w	r3, r1, r3
   d70ee:	2d36      	cmp	r5, #54	; 0x36
   d70f0:	bf88      	it	hi
   d70f2:	bd30      	pophi	{r4, r5, pc}
   d70f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d70f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d70fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7100:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7104:	d002      	beq.n	d710c <__adddf3+0x70>
   d7106:	4240      	negs	r0, r0
   d7108:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d710c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7110:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7114:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7118:	d002      	beq.n	d7120 <__adddf3+0x84>
   d711a:	4252      	negs	r2, r2
   d711c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7120:	ea94 0f05 	teq	r4, r5
   d7124:	f000 80a7 	beq.w	d7276 <__adddf3+0x1da>
   d7128:	f1a4 0401 	sub.w	r4, r4, #1
   d712c:	f1d5 0e20 	rsbs	lr, r5, #32
   d7130:	db0d      	blt.n	d714e <__adddf3+0xb2>
   d7132:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7136:	fa22 f205 	lsr.w	r2, r2, r5
   d713a:	1880      	adds	r0, r0, r2
   d713c:	f141 0100 	adc.w	r1, r1, #0
   d7140:	fa03 f20e 	lsl.w	r2, r3, lr
   d7144:	1880      	adds	r0, r0, r2
   d7146:	fa43 f305 	asr.w	r3, r3, r5
   d714a:	4159      	adcs	r1, r3
   d714c:	e00e      	b.n	d716c <__adddf3+0xd0>
   d714e:	f1a5 0520 	sub.w	r5, r5, #32
   d7152:	f10e 0e20 	add.w	lr, lr, #32
   d7156:	2a01      	cmp	r2, #1
   d7158:	fa03 fc0e 	lsl.w	ip, r3, lr
   d715c:	bf28      	it	cs
   d715e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7162:	fa43 f305 	asr.w	r3, r3, r5
   d7166:	18c0      	adds	r0, r0, r3
   d7168:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d716c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7170:	d507      	bpl.n	d7182 <__adddf3+0xe6>
   d7172:	f04f 0e00 	mov.w	lr, #0
   d7176:	f1dc 0c00 	rsbs	ip, ip, #0
   d717a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d717e:	eb6e 0101 	sbc.w	r1, lr, r1
   d7182:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7186:	d31b      	bcc.n	d71c0 <__adddf3+0x124>
   d7188:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d718c:	d30c      	bcc.n	d71a8 <__adddf3+0x10c>
   d718e:	0849      	lsrs	r1, r1, #1
   d7190:	ea5f 0030 	movs.w	r0, r0, rrx
   d7194:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7198:	f104 0401 	add.w	r4, r4, #1
   d719c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d71a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d71a4:	f080 809a 	bcs.w	d72dc <__adddf3+0x240>
   d71a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d71ac:	bf08      	it	eq
   d71ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d71b2:	f150 0000 	adcs.w	r0, r0, #0
   d71b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d71ba:	ea41 0105 	orr.w	r1, r1, r5
   d71be:	bd30      	pop	{r4, r5, pc}
   d71c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d71c4:	4140      	adcs	r0, r0
   d71c6:	eb41 0101 	adc.w	r1, r1, r1
   d71ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d71ce:	f1a4 0401 	sub.w	r4, r4, #1
   d71d2:	d1e9      	bne.n	d71a8 <__adddf3+0x10c>
   d71d4:	f091 0f00 	teq	r1, #0
   d71d8:	bf04      	itt	eq
   d71da:	4601      	moveq	r1, r0
   d71dc:	2000      	moveq	r0, #0
   d71de:	fab1 f381 	clz	r3, r1
   d71e2:	bf08      	it	eq
   d71e4:	3320      	addeq	r3, #32
   d71e6:	f1a3 030b 	sub.w	r3, r3, #11
   d71ea:	f1b3 0220 	subs.w	r2, r3, #32
   d71ee:	da0c      	bge.n	d720a <__adddf3+0x16e>
   d71f0:	320c      	adds	r2, #12
   d71f2:	dd08      	ble.n	d7206 <__adddf3+0x16a>
   d71f4:	f102 0c14 	add.w	ip, r2, #20
   d71f8:	f1c2 020c 	rsb	r2, r2, #12
   d71fc:	fa01 f00c 	lsl.w	r0, r1, ip
   d7200:	fa21 f102 	lsr.w	r1, r1, r2
   d7204:	e00c      	b.n	d7220 <__adddf3+0x184>
   d7206:	f102 0214 	add.w	r2, r2, #20
   d720a:	bfd8      	it	le
   d720c:	f1c2 0c20 	rsble	ip, r2, #32
   d7210:	fa01 f102 	lsl.w	r1, r1, r2
   d7214:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7218:	bfdc      	itt	le
   d721a:	ea41 010c 	orrle.w	r1, r1, ip
   d721e:	4090      	lslle	r0, r2
   d7220:	1ae4      	subs	r4, r4, r3
   d7222:	bfa2      	ittt	ge
   d7224:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7228:	4329      	orrge	r1, r5
   d722a:	bd30      	popge	{r4, r5, pc}
   d722c:	ea6f 0404 	mvn.w	r4, r4
   d7230:	3c1f      	subs	r4, #31
   d7232:	da1c      	bge.n	d726e <__adddf3+0x1d2>
   d7234:	340c      	adds	r4, #12
   d7236:	dc0e      	bgt.n	d7256 <__adddf3+0x1ba>
   d7238:	f104 0414 	add.w	r4, r4, #20
   d723c:	f1c4 0220 	rsb	r2, r4, #32
   d7240:	fa20 f004 	lsr.w	r0, r0, r4
   d7244:	fa01 f302 	lsl.w	r3, r1, r2
   d7248:	ea40 0003 	orr.w	r0, r0, r3
   d724c:	fa21 f304 	lsr.w	r3, r1, r4
   d7250:	ea45 0103 	orr.w	r1, r5, r3
   d7254:	bd30      	pop	{r4, r5, pc}
   d7256:	f1c4 040c 	rsb	r4, r4, #12
   d725a:	f1c4 0220 	rsb	r2, r4, #32
   d725e:	fa20 f002 	lsr.w	r0, r0, r2
   d7262:	fa01 f304 	lsl.w	r3, r1, r4
   d7266:	ea40 0003 	orr.w	r0, r0, r3
   d726a:	4629      	mov	r1, r5
   d726c:	bd30      	pop	{r4, r5, pc}
   d726e:	fa21 f004 	lsr.w	r0, r1, r4
   d7272:	4629      	mov	r1, r5
   d7274:	bd30      	pop	{r4, r5, pc}
   d7276:	f094 0f00 	teq	r4, #0
   d727a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d727e:	bf06      	itte	eq
   d7280:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7284:	3401      	addeq	r4, #1
   d7286:	3d01      	subne	r5, #1
   d7288:	e74e      	b.n	d7128 <__adddf3+0x8c>
   d728a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d728e:	bf18      	it	ne
   d7290:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7294:	d029      	beq.n	d72ea <__adddf3+0x24e>
   d7296:	ea94 0f05 	teq	r4, r5
   d729a:	bf08      	it	eq
   d729c:	ea90 0f02 	teqeq	r0, r2
   d72a0:	d005      	beq.n	d72ae <__adddf3+0x212>
   d72a2:	ea54 0c00 	orrs.w	ip, r4, r0
   d72a6:	bf04      	itt	eq
   d72a8:	4619      	moveq	r1, r3
   d72aa:	4610      	moveq	r0, r2
   d72ac:	bd30      	pop	{r4, r5, pc}
   d72ae:	ea91 0f03 	teq	r1, r3
   d72b2:	bf1e      	ittt	ne
   d72b4:	2100      	movne	r1, #0
   d72b6:	2000      	movne	r0, #0
   d72b8:	bd30      	popne	{r4, r5, pc}
   d72ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d72be:	d105      	bne.n	d72cc <__adddf3+0x230>
   d72c0:	0040      	lsls	r0, r0, #1
   d72c2:	4149      	adcs	r1, r1
   d72c4:	bf28      	it	cs
   d72c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d72ca:	bd30      	pop	{r4, r5, pc}
   d72cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d72d0:	bf3c      	itt	cc
   d72d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d72d6:	bd30      	popcc	{r4, r5, pc}
   d72d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d72dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d72e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d72e4:	f04f 0000 	mov.w	r0, #0
   d72e8:	bd30      	pop	{r4, r5, pc}
   d72ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d72ee:	bf1a      	itte	ne
   d72f0:	4619      	movne	r1, r3
   d72f2:	4610      	movne	r0, r2
   d72f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d72f8:	bf1c      	itt	ne
   d72fa:	460b      	movne	r3, r1
   d72fc:	4602      	movne	r2, r0
   d72fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7302:	bf06      	itte	eq
   d7304:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7308:	ea91 0f03 	teqeq	r1, r3
   d730c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7310:	bd30      	pop	{r4, r5, pc}
   d7312:	bf00      	nop

000d7314 <__aeabi_ui2d>:
   d7314:	f090 0f00 	teq	r0, #0
   d7318:	bf04      	itt	eq
   d731a:	2100      	moveq	r1, #0
   d731c:	4770      	bxeq	lr
   d731e:	b530      	push	{r4, r5, lr}
   d7320:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7324:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7328:	f04f 0500 	mov.w	r5, #0
   d732c:	f04f 0100 	mov.w	r1, #0
   d7330:	e750      	b.n	d71d4 <__adddf3+0x138>
   d7332:	bf00      	nop

000d7334 <__aeabi_i2d>:
   d7334:	f090 0f00 	teq	r0, #0
   d7338:	bf04      	itt	eq
   d733a:	2100      	moveq	r1, #0
   d733c:	4770      	bxeq	lr
   d733e:	b530      	push	{r4, r5, lr}
   d7340:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7344:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7348:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d734c:	bf48      	it	mi
   d734e:	4240      	negmi	r0, r0
   d7350:	f04f 0100 	mov.w	r1, #0
   d7354:	e73e      	b.n	d71d4 <__adddf3+0x138>
   d7356:	bf00      	nop

000d7358 <__aeabi_f2d>:
   d7358:	0042      	lsls	r2, r0, #1
   d735a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d735e:	ea4f 0131 	mov.w	r1, r1, rrx
   d7362:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7366:	bf1f      	itttt	ne
   d7368:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d736c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7370:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7374:	4770      	bxne	lr
   d7376:	f092 0f00 	teq	r2, #0
   d737a:	bf14      	ite	ne
   d737c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7380:	4770      	bxeq	lr
   d7382:	b530      	push	{r4, r5, lr}
   d7384:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7388:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d738c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7390:	e720      	b.n	d71d4 <__adddf3+0x138>
   d7392:	bf00      	nop

000d7394 <__aeabi_ul2d>:
   d7394:	ea50 0201 	orrs.w	r2, r0, r1
   d7398:	bf08      	it	eq
   d739a:	4770      	bxeq	lr
   d739c:	b530      	push	{r4, r5, lr}
   d739e:	f04f 0500 	mov.w	r5, #0
   d73a2:	e00a      	b.n	d73ba <__aeabi_l2d+0x16>

000d73a4 <__aeabi_l2d>:
   d73a4:	ea50 0201 	orrs.w	r2, r0, r1
   d73a8:	bf08      	it	eq
   d73aa:	4770      	bxeq	lr
   d73ac:	b530      	push	{r4, r5, lr}
   d73ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d73b2:	d502      	bpl.n	d73ba <__aeabi_l2d+0x16>
   d73b4:	4240      	negs	r0, r0
   d73b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d73ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d73be:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d73c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d73c6:	f43f aedc 	beq.w	d7182 <__adddf3+0xe6>
   d73ca:	f04f 0203 	mov.w	r2, #3
   d73ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d73d2:	bf18      	it	ne
   d73d4:	3203      	addne	r2, #3
   d73d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d73da:	bf18      	it	ne
   d73dc:	3203      	addne	r2, #3
   d73de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d73e2:	f1c2 0320 	rsb	r3, r2, #32
   d73e6:	fa00 fc03 	lsl.w	ip, r0, r3
   d73ea:	fa20 f002 	lsr.w	r0, r0, r2
   d73ee:	fa01 fe03 	lsl.w	lr, r1, r3
   d73f2:	ea40 000e 	orr.w	r0, r0, lr
   d73f6:	fa21 f102 	lsr.w	r1, r1, r2
   d73fa:	4414      	add	r4, r2
   d73fc:	e6c1      	b.n	d7182 <__adddf3+0xe6>
   d73fe:	bf00      	nop

000d7400 <__aeabi_dmul>:
   d7400:	b570      	push	{r4, r5, r6, lr}
   d7402:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7406:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d740a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d740e:	bf1d      	ittte	ne
   d7410:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7414:	ea94 0f0c 	teqne	r4, ip
   d7418:	ea95 0f0c 	teqne	r5, ip
   d741c:	f000 f8de 	bleq	d75dc <__aeabi_dmul+0x1dc>
   d7420:	442c      	add	r4, r5
   d7422:	ea81 0603 	eor.w	r6, r1, r3
   d7426:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d742a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d742e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7432:	bf18      	it	ne
   d7434:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7438:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d743c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7440:	d038      	beq.n	d74b4 <__aeabi_dmul+0xb4>
   d7442:	fba0 ce02 	umull	ip, lr, r0, r2
   d7446:	f04f 0500 	mov.w	r5, #0
   d744a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d744e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7452:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7456:	f04f 0600 	mov.w	r6, #0
   d745a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d745e:	f09c 0f00 	teq	ip, #0
   d7462:	bf18      	it	ne
   d7464:	f04e 0e01 	orrne.w	lr, lr, #1
   d7468:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d746c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7470:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7474:	d204      	bcs.n	d7480 <__aeabi_dmul+0x80>
   d7476:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d747a:	416d      	adcs	r5, r5
   d747c:	eb46 0606 	adc.w	r6, r6, r6
   d7480:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7484:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7488:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d748c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7490:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7494:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7498:	bf88      	it	hi
   d749a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d749e:	d81e      	bhi.n	d74de <__aeabi_dmul+0xde>
   d74a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d74a4:	bf08      	it	eq
   d74a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d74aa:	f150 0000 	adcs.w	r0, r0, #0
   d74ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d74b2:	bd70      	pop	{r4, r5, r6, pc}
   d74b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d74b8:	ea46 0101 	orr.w	r1, r6, r1
   d74bc:	ea40 0002 	orr.w	r0, r0, r2
   d74c0:	ea81 0103 	eor.w	r1, r1, r3
   d74c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d74c8:	bfc2      	ittt	gt
   d74ca:	ebd4 050c 	rsbsgt	r5, r4, ip
   d74ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d74d2:	bd70      	popgt	{r4, r5, r6, pc}
   d74d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d74d8:	f04f 0e00 	mov.w	lr, #0
   d74dc:	3c01      	subs	r4, #1
   d74de:	f300 80ab 	bgt.w	d7638 <__aeabi_dmul+0x238>
   d74e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d74e6:	bfde      	ittt	le
   d74e8:	2000      	movle	r0, #0
   d74ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d74ee:	bd70      	pople	{r4, r5, r6, pc}
   d74f0:	f1c4 0400 	rsb	r4, r4, #0
   d74f4:	3c20      	subs	r4, #32
   d74f6:	da35      	bge.n	d7564 <__aeabi_dmul+0x164>
   d74f8:	340c      	adds	r4, #12
   d74fa:	dc1b      	bgt.n	d7534 <__aeabi_dmul+0x134>
   d74fc:	f104 0414 	add.w	r4, r4, #20
   d7500:	f1c4 0520 	rsb	r5, r4, #32
   d7504:	fa00 f305 	lsl.w	r3, r0, r5
   d7508:	fa20 f004 	lsr.w	r0, r0, r4
   d750c:	fa01 f205 	lsl.w	r2, r1, r5
   d7510:	ea40 0002 	orr.w	r0, r0, r2
   d7514:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7518:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d751c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7520:	fa21 f604 	lsr.w	r6, r1, r4
   d7524:	eb42 0106 	adc.w	r1, r2, r6
   d7528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d752c:	bf08      	it	eq
   d752e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7532:	bd70      	pop	{r4, r5, r6, pc}
   d7534:	f1c4 040c 	rsb	r4, r4, #12
   d7538:	f1c4 0520 	rsb	r5, r4, #32
   d753c:	fa00 f304 	lsl.w	r3, r0, r4
   d7540:	fa20 f005 	lsr.w	r0, r0, r5
   d7544:	fa01 f204 	lsl.w	r2, r1, r4
   d7548:	ea40 0002 	orr.w	r0, r0, r2
   d754c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7550:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7554:	f141 0100 	adc.w	r1, r1, #0
   d7558:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d755c:	bf08      	it	eq
   d755e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7562:	bd70      	pop	{r4, r5, r6, pc}
   d7564:	f1c4 0520 	rsb	r5, r4, #32
   d7568:	fa00 f205 	lsl.w	r2, r0, r5
   d756c:	ea4e 0e02 	orr.w	lr, lr, r2
   d7570:	fa20 f304 	lsr.w	r3, r0, r4
   d7574:	fa01 f205 	lsl.w	r2, r1, r5
   d7578:	ea43 0302 	orr.w	r3, r3, r2
   d757c:	fa21 f004 	lsr.w	r0, r1, r4
   d7580:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7584:	fa21 f204 	lsr.w	r2, r1, r4
   d7588:	ea20 0002 	bic.w	r0, r0, r2
   d758c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7594:	bf08      	it	eq
   d7596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d759a:	bd70      	pop	{r4, r5, r6, pc}
   d759c:	f094 0f00 	teq	r4, #0
   d75a0:	d10f      	bne.n	d75c2 <__aeabi_dmul+0x1c2>
   d75a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d75a6:	0040      	lsls	r0, r0, #1
   d75a8:	eb41 0101 	adc.w	r1, r1, r1
   d75ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d75b0:	bf08      	it	eq
   d75b2:	3c01      	subeq	r4, #1
   d75b4:	d0f7      	beq.n	d75a6 <__aeabi_dmul+0x1a6>
   d75b6:	ea41 0106 	orr.w	r1, r1, r6
   d75ba:	f095 0f00 	teq	r5, #0
   d75be:	bf18      	it	ne
   d75c0:	4770      	bxne	lr
   d75c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d75c6:	0052      	lsls	r2, r2, #1
   d75c8:	eb43 0303 	adc.w	r3, r3, r3
   d75cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d75d0:	bf08      	it	eq
   d75d2:	3d01      	subeq	r5, #1
   d75d4:	d0f7      	beq.n	d75c6 <__aeabi_dmul+0x1c6>
   d75d6:	ea43 0306 	orr.w	r3, r3, r6
   d75da:	4770      	bx	lr
   d75dc:	ea94 0f0c 	teq	r4, ip
   d75e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d75e4:	bf18      	it	ne
   d75e6:	ea95 0f0c 	teqne	r5, ip
   d75ea:	d00c      	beq.n	d7606 <__aeabi_dmul+0x206>
   d75ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d75f0:	bf18      	it	ne
   d75f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d75f6:	d1d1      	bne.n	d759c <__aeabi_dmul+0x19c>
   d75f8:	ea81 0103 	eor.w	r1, r1, r3
   d75fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7600:	f04f 0000 	mov.w	r0, #0
   d7604:	bd70      	pop	{r4, r5, r6, pc}
   d7606:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d760a:	bf06      	itte	eq
   d760c:	4610      	moveq	r0, r2
   d760e:	4619      	moveq	r1, r3
   d7610:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7614:	d019      	beq.n	d764a <__aeabi_dmul+0x24a>
   d7616:	ea94 0f0c 	teq	r4, ip
   d761a:	d102      	bne.n	d7622 <__aeabi_dmul+0x222>
   d761c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7620:	d113      	bne.n	d764a <__aeabi_dmul+0x24a>
   d7622:	ea95 0f0c 	teq	r5, ip
   d7626:	d105      	bne.n	d7634 <__aeabi_dmul+0x234>
   d7628:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d762c:	bf1c      	itt	ne
   d762e:	4610      	movne	r0, r2
   d7630:	4619      	movne	r1, r3
   d7632:	d10a      	bne.n	d764a <__aeabi_dmul+0x24a>
   d7634:	ea81 0103 	eor.w	r1, r1, r3
   d7638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d763c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7640:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7644:	f04f 0000 	mov.w	r0, #0
   d7648:	bd70      	pop	{r4, r5, r6, pc}
   d764a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d764e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7652:	bd70      	pop	{r4, r5, r6, pc}

000d7654 <__aeabi_ddiv>:
   d7654:	b570      	push	{r4, r5, r6, lr}
   d7656:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d765a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d765e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7662:	bf1d      	ittte	ne
   d7664:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7668:	ea94 0f0c 	teqne	r4, ip
   d766c:	ea95 0f0c 	teqne	r5, ip
   d7670:	f000 f8a7 	bleq	d77c2 <__aeabi_ddiv+0x16e>
   d7674:	eba4 0405 	sub.w	r4, r4, r5
   d7678:	ea81 0e03 	eor.w	lr, r1, r3
   d767c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7680:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7684:	f000 8088 	beq.w	d7798 <__aeabi_ddiv+0x144>
   d7688:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d768c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7690:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7694:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7698:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d769c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d76a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d76a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d76a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d76ac:	429d      	cmp	r5, r3
   d76ae:	bf08      	it	eq
   d76b0:	4296      	cmpeq	r6, r2
   d76b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d76b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d76ba:	d202      	bcs.n	d76c2 <__aeabi_ddiv+0x6e>
   d76bc:	085b      	lsrs	r3, r3, #1
   d76be:	ea4f 0232 	mov.w	r2, r2, rrx
   d76c2:	1ab6      	subs	r6, r6, r2
   d76c4:	eb65 0503 	sbc.w	r5, r5, r3
   d76c8:	085b      	lsrs	r3, r3, #1
   d76ca:	ea4f 0232 	mov.w	r2, r2, rrx
   d76ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d76d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d76d6:	ebb6 0e02 	subs.w	lr, r6, r2
   d76da:	eb75 0e03 	sbcs.w	lr, r5, r3
   d76de:	bf22      	ittt	cs
   d76e0:	1ab6      	subcs	r6, r6, r2
   d76e2:	4675      	movcs	r5, lr
   d76e4:	ea40 000c 	orrcs.w	r0, r0, ip
   d76e8:	085b      	lsrs	r3, r3, #1
   d76ea:	ea4f 0232 	mov.w	r2, r2, rrx
   d76ee:	ebb6 0e02 	subs.w	lr, r6, r2
   d76f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d76f6:	bf22      	ittt	cs
   d76f8:	1ab6      	subcs	r6, r6, r2
   d76fa:	4675      	movcs	r5, lr
   d76fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7700:	085b      	lsrs	r3, r3, #1
   d7702:	ea4f 0232 	mov.w	r2, r2, rrx
   d7706:	ebb6 0e02 	subs.w	lr, r6, r2
   d770a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d770e:	bf22      	ittt	cs
   d7710:	1ab6      	subcs	r6, r6, r2
   d7712:	4675      	movcs	r5, lr
   d7714:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7718:	085b      	lsrs	r3, r3, #1
   d771a:	ea4f 0232 	mov.w	r2, r2, rrx
   d771e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7722:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7726:	bf22      	ittt	cs
   d7728:	1ab6      	subcs	r6, r6, r2
   d772a:	4675      	movcs	r5, lr
   d772c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7730:	ea55 0e06 	orrs.w	lr, r5, r6
   d7734:	d018      	beq.n	d7768 <__aeabi_ddiv+0x114>
   d7736:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d773a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d773e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7742:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7746:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d774a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d774e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7752:	d1c0      	bne.n	d76d6 <__aeabi_ddiv+0x82>
   d7754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7758:	d10b      	bne.n	d7772 <__aeabi_ddiv+0x11e>
   d775a:	ea41 0100 	orr.w	r1, r1, r0
   d775e:	f04f 0000 	mov.w	r0, #0
   d7762:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7766:	e7b6      	b.n	d76d6 <__aeabi_ddiv+0x82>
   d7768:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d776c:	bf04      	itt	eq
   d776e:	4301      	orreq	r1, r0
   d7770:	2000      	moveq	r0, #0
   d7772:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7776:	bf88      	it	hi
   d7778:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d777c:	f63f aeaf 	bhi.w	d74de <__aeabi_dmul+0xde>
   d7780:	ebb5 0c03 	subs.w	ip, r5, r3
   d7784:	bf04      	itt	eq
   d7786:	ebb6 0c02 	subseq.w	ip, r6, r2
   d778a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d778e:	f150 0000 	adcs.w	r0, r0, #0
   d7792:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7796:	bd70      	pop	{r4, r5, r6, pc}
   d7798:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d779c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d77a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d77a4:	bfc2      	ittt	gt
   d77a6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d77aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d77ae:	bd70      	popgt	{r4, r5, r6, pc}
   d77b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d77b4:	f04f 0e00 	mov.w	lr, #0
   d77b8:	3c01      	subs	r4, #1
   d77ba:	e690      	b.n	d74de <__aeabi_dmul+0xde>
   d77bc:	ea45 0e06 	orr.w	lr, r5, r6
   d77c0:	e68d      	b.n	d74de <__aeabi_dmul+0xde>
   d77c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d77c6:	ea94 0f0c 	teq	r4, ip
   d77ca:	bf08      	it	eq
   d77cc:	ea95 0f0c 	teqeq	r5, ip
   d77d0:	f43f af3b 	beq.w	d764a <__aeabi_dmul+0x24a>
   d77d4:	ea94 0f0c 	teq	r4, ip
   d77d8:	d10a      	bne.n	d77f0 <__aeabi_ddiv+0x19c>
   d77da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d77de:	f47f af34 	bne.w	d764a <__aeabi_dmul+0x24a>
   d77e2:	ea95 0f0c 	teq	r5, ip
   d77e6:	f47f af25 	bne.w	d7634 <__aeabi_dmul+0x234>
   d77ea:	4610      	mov	r0, r2
   d77ec:	4619      	mov	r1, r3
   d77ee:	e72c      	b.n	d764a <__aeabi_dmul+0x24a>
   d77f0:	ea95 0f0c 	teq	r5, ip
   d77f4:	d106      	bne.n	d7804 <__aeabi_ddiv+0x1b0>
   d77f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d77fa:	f43f aefd 	beq.w	d75f8 <__aeabi_dmul+0x1f8>
   d77fe:	4610      	mov	r0, r2
   d7800:	4619      	mov	r1, r3
   d7802:	e722      	b.n	d764a <__aeabi_dmul+0x24a>
   d7804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7808:	bf18      	it	ne
   d780a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d780e:	f47f aec5 	bne.w	d759c <__aeabi_dmul+0x19c>
   d7812:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7816:	f47f af0d 	bne.w	d7634 <__aeabi_dmul+0x234>
   d781a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d781e:	f47f aeeb 	bne.w	d75f8 <__aeabi_dmul+0x1f8>
   d7822:	e712      	b.n	d764a <__aeabi_dmul+0x24a>

000d7824 <__gedf2>:
   d7824:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d7828:	e006      	b.n	d7838 <__cmpdf2+0x4>
   d782a:	bf00      	nop

000d782c <__ledf2>:
   d782c:	f04f 0c01 	mov.w	ip, #1
   d7830:	e002      	b.n	d7838 <__cmpdf2+0x4>
   d7832:	bf00      	nop

000d7834 <__cmpdf2>:
   d7834:	f04f 0c01 	mov.w	ip, #1
   d7838:	f84d cd04 	str.w	ip, [sp, #-4]!
   d783c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7840:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7844:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7848:	bf18      	it	ne
   d784a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d784e:	d01b      	beq.n	d7888 <__cmpdf2+0x54>
   d7850:	b001      	add	sp, #4
   d7852:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d7856:	bf0c      	ite	eq
   d7858:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d785c:	ea91 0f03 	teqne	r1, r3
   d7860:	bf02      	ittt	eq
   d7862:	ea90 0f02 	teqeq	r0, r2
   d7866:	2000      	moveq	r0, #0
   d7868:	4770      	bxeq	lr
   d786a:	f110 0f00 	cmn.w	r0, #0
   d786e:	ea91 0f03 	teq	r1, r3
   d7872:	bf58      	it	pl
   d7874:	4299      	cmppl	r1, r3
   d7876:	bf08      	it	eq
   d7878:	4290      	cmpeq	r0, r2
   d787a:	bf2c      	ite	cs
   d787c:	17d8      	asrcs	r0, r3, #31
   d787e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d7882:	f040 0001 	orr.w	r0, r0, #1
   d7886:	4770      	bx	lr
   d7888:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d788c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7890:	d102      	bne.n	d7898 <__cmpdf2+0x64>
   d7892:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7896:	d107      	bne.n	d78a8 <__cmpdf2+0x74>
   d7898:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d789c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d78a0:	d1d6      	bne.n	d7850 <__cmpdf2+0x1c>
   d78a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d78a6:	d0d3      	beq.n	d7850 <__cmpdf2+0x1c>
   d78a8:	f85d 0b04 	ldr.w	r0, [sp], #4
   d78ac:	4770      	bx	lr
   d78ae:	bf00      	nop

000d78b0 <__aeabi_cdrcmple>:
   d78b0:	4684      	mov	ip, r0
   d78b2:	4610      	mov	r0, r2
   d78b4:	4662      	mov	r2, ip
   d78b6:	468c      	mov	ip, r1
   d78b8:	4619      	mov	r1, r3
   d78ba:	4663      	mov	r3, ip
   d78bc:	e000      	b.n	d78c0 <__aeabi_cdcmpeq>
   d78be:	bf00      	nop

000d78c0 <__aeabi_cdcmpeq>:
   d78c0:	b501      	push	{r0, lr}
   d78c2:	f7ff ffb7 	bl	d7834 <__cmpdf2>
   d78c6:	2800      	cmp	r0, #0
   d78c8:	bf48      	it	mi
   d78ca:	f110 0f00 	cmnmi.w	r0, #0
   d78ce:	bd01      	pop	{r0, pc}

000d78d0 <__aeabi_dcmpeq>:
   d78d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d78d4:	f7ff fff4 	bl	d78c0 <__aeabi_cdcmpeq>
   d78d8:	bf0c      	ite	eq
   d78da:	2001      	moveq	r0, #1
   d78dc:	2000      	movne	r0, #0
   d78de:	f85d fb08 	ldr.w	pc, [sp], #8
   d78e2:	bf00      	nop

000d78e4 <__aeabi_dcmplt>:
   d78e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d78e8:	f7ff ffea 	bl	d78c0 <__aeabi_cdcmpeq>
   d78ec:	bf34      	ite	cc
   d78ee:	2001      	movcc	r0, #1
   d78f0:	2000      	movcs	r0, #0
   d78f2:	f85d fb08 	ldr.w	pc, [sp], #8
   d78f6:	bf00      	nop

000d78f8 <__aeabi_dcmple>:
   d78f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d78fc:	f7ff ffe0 	bl	d78c0 <__aeabi_cdcmpeq>
   d7900:	bf94      	ite	ls
   d7902:	2001      	movls	r0, #1
   d7904:	2000      	movhi	r0, #0
   d7906:	f85d fb08 	ldr.w	pc, [sp], #8
   d790a:	bf00      	nop

000d790c <__aeabi_dcmpge>:
   d790c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7910:	f7ff ffce 	bl	d78b0 <__aeabi_cdrcmple>
   d7914:	bf94      	ite	ls
   d7916:	2001      	movls	r0, #1
   d7918:	2000      	movhi	r0, #0
   d791a:	f85d fb08 	ldr.w	pc, [sp], #8
   d791e:	bf00      	nop

000d7920 <__aeabi_dcmpgt>:
   d7920:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7924:	f7ff ffc4 	bl	d78b0 <__aeabi_cdrcmple>
   d7928:	bf34      	ite	cc
   d792a:	2001      	movcc	r0, #1
   d792c:	2000      	movcs	r0, #0
   d792e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7932:	bf00      	nop

000d7934 <__aeabi_d2uiz>:
   d7934:	004a      	lsls	r2, r1, #1
   d7936:	d211      	bcs.n	d795c <__aeabi_d2uiz+0x28>
   d7938:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d793c:	d211      	bcs.n	d7962 <__aeabi_d2uiz+0x2e>
   d793e:	d50d      	bpl.n	d795c <__aeabi_d2uiz+0x28>
   d7940:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7944:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7948:	d40e      	bmi.n	d7968 <__aeabi_d2uiz+0x34>
   d794a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d794e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7952:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7956:	fa23 f002 	lsr.w	r0, r3, r2
   d795a:	4770      	bx	lr
   d795c:	f04f 0000 	mov.w	r0, #0
   d7960:	4770      	bx	lr
   d7962:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7966:	d102      	bne.n	d796e <__aeabi_d2uiz+0x3a>
   d7968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d796c:	4770      	bx	lr
   d796e:	f04f 0000 	mov.w	r0, #0
   d7972:	4770      	bx	lr

000d7974 <__aeabi_uldivmod>:
   d7974:	b953      	cbnz	r3, d798c <__aeabi_uldivmod+0x18>
   d7976:	b94a      	cbnz	r2, d798c <__aeabi_uldivmod+0x18>
   d7978:	2900      	cmp	r1, #0
   d797a:	bf08      	it	eq
   d797c:	2800      	cmpeq	r0, #0
   d797e:	bf1c      	itt	ne
   d7980:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d7984:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d7988:	f000 b9a2 	b.w	d7cd0 <__aeabi_idiv0>
   d798c:	f1ad 0c08 	sub.w	ip, sp, #8
   d7990:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d7994:	f000 f82a 	bl	d79ec <__udivmoddi4>
   d7998:	f8dd e004 	ldr.w	lr, [sp, #4]
   d799c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d79a0:	b004      	add	sp, #16
   d79a2:	4770      	bx	lr

000d79a4 <__aeabi_d2ulz>:
   d79a4:	b5d0      	push	{r4, r6, r7, lr}
   d79a6:	2200      	movs	r2, #0
   d79a8:	4b0e      	ldr	r3, [pc, #56]	; (d79e4 <__aeabi_d2ulz+0x40>)
   d79aa:	4606      	mov	r6, r0
   d79ac:	460f      	mov	r7, r1
   d79ae:	f7ff fd27 	bl	d7400 <__aeabi_dmul>
   d79b2:	f7ff ffbf 	bl	d7934 <__aeabi_d2uiz>
   d79b6:	4604      	mov	r4, r0
   d79b8:	f7ff fcac 	bl	d7314 <__aeabi_ui2d>
   d79bc:	2200      	movs	r2, #0
   d79be:	4b0a      	ldr	r3, [pc, #40]	; (d79e8 <__aeabi_d2ulz+0x44>)
   d79c0:	f7ff fd1e 	bl	d7400 <__aeabi_dmul>
   d79c4:	4602      	mov	r2, r0
   d79c6:	460b      	mov	r3, r1
   d79c8:	4630      	mov	r0, r6
   d79ca:	4639      	mov	r1, r7
   d79cc:	f7ff fb64 	bl	d7098 <__aeabi_dsub>
   d79d0:	f7ff ffb0 	bl	d7934 <__aeabi_d2uiz>
   d79d4:	4623      	mov	r3, r4
   d79d6:	2200      	movs	r2, #0
   d79d8:	ea42 0200 	orr.w	r2, r2, r0
   d79dc:	4610      	mov	r0, r2
   d79de:	4619      	mov	r1, r3
   d79e0:	bdd0      	pop	{r4, r6, r7, pc}
   d79e2:	bf00      	nop
   d79e4:	3df00000 	.word	0x3df00000
   d79e8:	41f00000 	.word	0x41f00000

000d79ec <__udivmoddi4>:
   d79ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d79f0:	468c      	mov	ip, r1
   d79f2:	460e      	mov	r6, r1
   d79f4:	4604      	mov	r4, r0
   d79f6:	9d08      	ldr	r5, [sp, #32]
   d79f8:	2b00      	cmp	r3, #0
   d79fa:	d150      	bne.n	d7a9e <__udivmoddi4+0xb2>
   d79fc:	428a      	cmp	r2, r1
   d79fe:	4617      	mov	r7, r2
   d7a00:	d96c      	bls.n	d7adc <__udivmoddi4+0xf0>
   d7a02:	fab2 fe82 	clz	lr, r2
   d7a06:	f1be 0f00 	cmp.w	lr, #0
   d7a0a:	d00b      	beq.n	d7a24 <__udivmoddi4+0x38>
   d7a0c:	f1ce 0420 	rsb	r4, lr, #32
   d7a10:	fa20 f404 	lsr.w	r4, r0, r4
   d7a14:	fa01 f60e 	lsl.w	r6, r1, lr
   d7a18:	ea44 0c06 	orr.w	ip, r4, r6
   d7a1c:	fa02 f70e 	lsl.w	r7, r2, lr
   d7a20:	fa00 f40e 	lsl.w	r4, r0, lr
   d7a24:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d7a28:	0c22      	lsrs	r2, r4, #16
   d7a2a:	fbbc f0f9 	udiv	r0, ip, r9
   d7a2e:	fa1f f887 	uxth.w	r8, r7
   d7a32:	fb09 c610 	mls	r6, r9, r0, ip
   d7a36:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d7a3a:	fb00 f308 	mul.w	r3, r0, r8
   d7a3e:	42b3      	cmp	r3, r6
   d7a40:	d909      	bls.n	d7a56 <__udivmoddi4+0x6a>
   d7a42:	19f6      	adds	r6, r6, r7
   d7a44:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d7a48:	f080 8122 	bcs.w	d7c90 <__udivmoddi4+0x2a4>
   d7a4c:	42b3      	cmp	r3, r6
   d7a4e:	f240 811f 	bls.w	d7c90 <__udivmoddi4+0x2a4>
   d7a52:	3802      	subs	r0, #2
   d7a54:	443e      	add	r6, r7
   d7a56:	1af6      	subs	r6, r6, r3
   d7a58:	b2a2      	uxth	r2, r4
   d7a5a:	fbb6 f3f9 	udiv	r3, r6, r9
   d7a5e:	fb09 6613 	mls	r6, r9, r3, r6
   d7a62:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d7a66:	fb03 f808 	mul.w	r8, r3, r8
   d7a6a:	45a0      	cmp	r8, r4
   d7a6c:	d909      	bls.n	d7a82 <__udivmoddi4+0x96>
   d7a6e:	19e4      	adds	r4, r4, r7
   d7a70:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d7a74:	f080 810a 	bcs.w	d7c8c <__udivmoddi4+0x2a0>
   d7a78:	45a0      	cmp	r8, r4
   d7a7a:	f240 8107 	bls.w	d7c8c <__udivmoddi4+0x2a0>
   d7a7e:	3b02      	subs	r3, #2
   d7a80:	443c      	add	r4, r7
   d7a82:	ebc8 0404 	rsb	r4, r8, r4
   d7a86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d7a8a:	2100      	movs	r1, #0
   d7a8c:	2d00      	cmp	r5, #0
   d7a8e:	d062      	beq.n	d7b56 <__udivmoddi4+0x16a>
   d7a90:	fa24 f40e 	lsr.w	r4, r4, lr
   d7a94:	2300      	movs	r3, #0
   d7a96:	602c      	str	r4, [r5, #0]
   d7a98:	606b      	str	r3, [r5, #4]
   d7a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7a9e:	428b      	cmp	r3, r1
   d7aa0:	d907      	bls.n	d7ab2 <__udivmoddi4+0xc6>
   d7aa2:	2d00      	cmp	r5, #0
   d7aa4:	d055      	beq.n	d7b52 <__udivmoddi4+0x166>
   d7aa6:	2100      	movs	r1, #0
   d7aa8:	e885 0041 	stmia.w	r5, {r0, r6}
   d7aac:	4608      	mov	r0, r1
   d7aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7ab2:	fab3 f183 	clz	r1, r3
   d7ab6:	2900      	cmp	r1, #0
   d7ab8:	f040 8090 	bne.w	d7bdc <__udivmoddi4+0x1f0>
   d7abc:	42b3      	cmp	r3, r6
   d7abe:	d302      	bcc.n	d7ac6 <__udivmoddi4+0xda>
   d7ac0:	4282      	cmp	r2, r0
   d7ac2:	f200 80f8 	bhi.w	d7cb6 <__udivmoddi4+0x2ca>
   d7ac6:	1a84      	subs	r4, r0, r2
   d7ac8:	eb66 0603 	sbc.w	r6, r6, r3
   d7acc:	2001      	movs	r0, #1
   d7ace:	46b4      	mov	ip, r6
   d7ad0:	2d00      	cmp	r5, #0
   d7ad2:	d040      	beq.n	d7b56 <__udivmoddi4+0x16a>
   d7ad4:	e885 1010 	stmia.w	r5, {r4, ip}
   d7ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7adc:	b912      	cbnz	r2, d7ae4 <__udivmoddi4+0xf8>
   d7ade:	2701      	movs	r7, #1
   d7ae0:	fbb7 f7f2 	udiv	r7, r7, r2
   d7ae4:	fab7 fe87 	clz	lr, r7
   d7ae8:	f1be 0f00 	cmp.w	lr, #0
   d7aec:	d135      	bne.n	d7b5a <__udivmoddi4+0x16e>
   d7aee:	1bf3      	subs	r3, r6, r7
   d7af0:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d7af4:	fa1f fc87 	uxth.w	ip, r7
   d7af8:	2101      	movs	r1, #1
   d7afa:	fbb3 f0f8 	udiv	r0, r3, r8
   d7afe:	0c22      	lsrs	r2, r4, #16
   d7b00:	fb08 3610 	mls	r6, r8, r0, r3
   d7b04:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d7b08:	fb0c f300 	mul.w	r3, ip, r0
   d7b0c:	42b3      	cmp	r3, r6
   d7b0e:	d907      	bls.n	d7b20 <__udivmoddi4+0x134>
   d7b10:	19f6      	adds	r6, r6, r7
   d7b12:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d7b16:	d202      	bcs.n	d7b1e <__udivmoddi4+0x132>
   d7b18:	42b3      	cmp	r3, r6
   d7b1a:	f200 80ce 	bhi.w	d7cba <__udivmoddi4+0x2ce>
   d7b1e:	4610      	mov	r0, r2
   d7b20:	1af6      	subs	r6, r6, r3
   d7b22:	b2a2      	uxth	r2, r4
   d7b24:	fbb6 f3f8 	udiv	r3, r6, r8
   d7b28:	fb08 6613 	mls	r6, r8, r3, r6
   d7b2c:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d7b30:	fb0c fc03 	mul.w	ip, ip, r3
   d7b34:	45a4      	cmp	ip, r4
   d7b36:	d907      	bls.n	d7b48 <__udivmoddi4+0x15c>
   d7b38:	19e4      	adds	r4, r4, r7
   d7b3a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d7b3e:	d202      	bcs.n	d7b46 <__udivmoddi4+0x15a>
   d7b40:	45a4      	cmp	ip, r4
   d7b42:	f200 80b5 	bhi.w	d7cb0 <__udivmoddi4+0x2c4>
   d7b46:	4613      	mov	r3, r2
   d7b48:	ebcc 0404 	rsb	r4, ip, r4
   d7b4c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d7b50:	e79c      	b.n	d7a8c <__udivmoddi4+0xa0>
   d7b52:	4629      	mov	r1, r5
   d7b54:	4628      	mov	r0, r5
   d7b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7b5a:	f1ce 0120 	rsb	r1, lr, #32
   d7b5e:	fa06 f30e 	lsl.w	r3, r6, lr
   d7b62:	fa07 f70e 	lsl.w	r7, r7, lr
   d7b66:	fa20 f901 	lsr.w	r9, r0, r1
   d7b6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d7b6e:	40ce      	lsrs	r6, r1
   d7b70:	ea49 0903 	orr.w	r9, r9, r3
   d7b74:	fbb6 faf8 	udiv	sl, r6, r8
   d7b78:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d7b7c:	fb08 661a 	mls	r6, r8, sl, r6
   d7b80:	fa1f fc87 	uxth.w	ip, r7
   d7b84:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d7b88:	fb0a f20c 	mul.w	r2, sl, ip
   d7b8c:	429a      	cmp	r2, r3
   d7b8e:	fa00 f40e 	lsl.w	r4, r0, lr
   d7b92:	d90a      	bls.n	d7baa <__udivmoddi4+0x1be>
   d7b94:	19db      	adds	r3, r3, r7
   d7b96:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
   d7b9a:	f080 8087 	bcs.w	d7cac <__udivmoddi4+0x2c0>
   d7b9e:	429a      	cmp	r2, r3
   d7ba0:	f240 8084 	bls.w	d7cac <__udivmoddi4+0x2c0>
   d7ba4:	f1aa 0a02 	sub.w	sl, sl, #2
   d7ba8:	443b      	add	r3, r7
   d7baa:	1a9b      	subs	r3, r3, r2
   d7bac:	fa1f f989 	uxth.w	r9, r9
   d7bb0:	fbb3 f1f8 	udiv	r1, r3, r8
   d7bb4:	fb08 3311 	mls	r3, r8, r1, r3
   d7bb8:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d7bbc:	fb01 f60c 	mul.w	r6, r1, ip
   d7bc0:	429e      	cmp	r6, r3
   d7bc2:	d907      	bls.n	d7bd4 <__udivmoddi4+0x1e8>
   d7bc4:	19db      	adds	r3, r3, r7
   d7bc6:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   d7bca:	d26b      	bcs.n	d7ca4 <__udivmoddi4+0x2b8>
   d7bcc:	429e      	cmp	r6, r3
   d7bce:	d969      	bls.n	d7ca4 <__udivmoddi4+0x2b8>
   d7bd0:	3902      	subs	r1, #2
   d7bd2:	443b      	add	r3, r7
   d7bd4:	1b9b      	subs	r3, r3, r6
   d7bd6:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d7bda:	e78e      	b.n	d7afa <__udivmoddi4+0x10e>
   d7bdc:	f1c1 0e20 	rsb	lr, r1, #32
   d7be0:	fa22 f40e 	lsr.w	r4, r2, lr
   d7be4:	408b      	lsls	r3, r1
   d7be6:	4323      	orrs	r3, r4
   d7be8:	fa20 f70e 	lsr.w	r7, r0, lr
   d7bec:	fa06 f401 	lsl.w	r4, r6, r1
   d7bf0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d7bf4:	fa26 f60e 	lsr.w	r6, r6, lr
   d7bf8:	433c      	orrs	r4, r7
   d7bfa:	fbb6 f9fc 	udiv	r9, r6, ip
   d7bfe:	0c27      	lsrs	r7, r4, #16
   d7c00:	fb0c 6619 	mls	r6, ip, r9, r6
   d7c04:	fa1f f883 	uxth.w	r8, r3
   d7c08:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d7c0c:	fb09 f708 	mul.w	r7, r9, r8
   d7c10:	42b7      	cmp	r7, r6
   d7c12:	fa02 f201 	lsl.w	r2, r2, r1
   d7c16:	fa00 fa01 	lsl.w	sl, r0, r1
   d7c1a:	d908      	bls.n	d7c2e <__udivmoddi4+0x242>
   d7c1c:	18f6      	adds	r6, r6, r3
   d7c1e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d7c22:	d241      	bcs.n	d7ca8 <__udivmoddi4+0x2bc>
   d7c24:	42b7      	cmp	r7, r6
   d7c26:	d93f      	bls.n	d7ca8 <__udivmoddi4+0x2bc>
   d7c28:	f1a9 0902 	sub.w	r9, r9, #2
   d7c2c:	441e      	add	r6, r3
   d7c2e:	1bf6      	subs	r6, r6, r7
   d7c30:	b2a0      	uxth	r0, r4
   d7c32:	fbb6 f4fc 	udiv	r4, r6, ip
   d7c36:	fb0c 6614 	mls	r6, ip, r4, r6
   d7c3a:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d7c3e:	fb04 f808 	mul.w	r8, r4, r8
   d7c42:	45b8      	cmp	r8, r7
   d7c44:	d907      	bls.n	d7c56 <__udivmoddi4+0x26a>
   d7c46:	18ff      	adds	r7, r7, r3
   d7c48:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
   d7c4c:	d228      	bcs.n	d7ca0 <__udivmoddi4+0x2b4>
   d7c4e:	45b8      	cmp	r8, r7
   d7c50:	d926      	bls.n	d7ca0 <__udivmoddi4+0x2b4>
   d7c52:	3c02      	subs	r4, #2
   d7c54:	441f      	add	r7, r3
   d7c56:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d7c5a:	ebc8 0707 	rsb	r7, r8, r7
   d7c5e:	fba0 8902 	umull	r8, r9, r0, r2
   d7c62:	454f      	cmp	r7, r9
   d7c64:	4644      	mov	r4, r8
   d7c66:	464e      	mov	r6, r9
   d7c68:	d314      	bcc.n	d7c94 <__udivmoddi4+0x2a8>
   d7c6a:	d029      	beq.n	d7cc0 <__udivmoddi4+0x2d4>
   d7c6c:	b365      	cbz	r5, d7cc8 <__udivmoddi4+0x2dc>
   d7c6e:	ebba 0304 	subs.w	r3, sl, r4
   d7c72:	eb67 0706 	sbc.w	r7, r7, r6
   d7c76:	fa07 fe0e 	lsl.w	lr, r7, lr
   d7c7a:	40cb      	lsrs	r3, r1
   d7c7c:	40cf      	lsrs	r7, r1
   d7c7e:	ea4e 0303 	orr.w	r3, lr, r3
   d7c82:	e885 0088 	stmia.w	r5, {r3, r7}
   d7c86:	2100      	movs	r1, #0
   d7c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7c8c:	4613      	mov	r3, r2
   d7c8e:	e6f8      	b.n	d7a82 <__udivmoddi4+0x96>
   d7c90:	4610      	mov	r0, r2
   d7c92:	e6e0      	b.n	d7a56 <__udivmoddi4+0x6a>
   d7c94:	ebb8 0402 	subs.w	r4, r8, r2
   d7c98:	eb69 0603 	sbc.w	r6, r9, r3
   d7c9c:	3801      	subs	r0, #1
   d7c9e:	e7e5      	b.n	d7c6c <__udivmoddi4+0x280>
   d7ca0:	4604      	mov	r4, r0
   d7ca2:	e7d8      	b.n	d7c56 <__udivmoddi4+0x26a>
   d7ca4:	4611      	mov	r1, r2
   d7ca6:	e795      	b.n	d7bd4 <__udivmoddi4+0x1e8>
   d7ca8:	4681      	mov	r9, r0
   d7caa:	e7c0      	b.n	d7c2e <__udivmoddi4+0x242>
   d7cac:	468a      	mov	sl, r1
   d7cae:	e77c      	b.n	d7baa <__udivmoddi4+0x1be>
   d7cb0:	3b02      	subs	r3, #2
   d7cb2:	443c      	add	r4, r7
   d7cb4:	e748      	b.n	d7b48 <__udivmoddi4+0x15c>
   d7cb6:	4608      	mov	r0, r1
   d7cb8:	e70a      	b.n	d7ad0 <__udivmoddi4+0xe4>
   d7cba:	3802      	subs	r0, #2
   d7cbc:	443e      	add	r6, r7
   d7cbe:	e72f      	b.n	d7b20 <__udivmoddi4+0x134>
   d7cc0:	45c2      	cmp	sl, r8
   d7cc2:	d3e7      	bcc.n	d7c94 <__udivmoddi4+0x2a8>
   d7cc4:	463e      	mov	r6, r7
   d7cc6:	e7d1      	b.n	d7c6c <__udivmoddi4+0x280>
   d7cc8:	4629      	mov	r1, r5
   d7cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7cce:	bf00      	nop

000d7cd0 <__aeabi_idiv0>:
   d7cd0:	4770      	bx	lr
   d7cd2:	bf00      	nop

000d7cd4 <__cxa_atexit>:
   d7cd4:	b510      	push	{r4, lr}
   d7cd6:	4c05      	ldr	r4, [pc, #20]	; (d7cec <__cxa_atexit+0x18>)
   d7cd8:	4613      	mov	r3, r2
   d7cda:	b12c      	cbz	r4, d7ce8 <__cxa_atexit+0x14>
   d7cdc:	460a      	mov	r2, r1
   d7cde:	4601      	mov	r1, r0
   d7ce0:	2002      	movs	r0, #2
   d7ce2:	f3af 8000 	nop.w
   d7ce6:	bd10      	pop	{r4, pc}
   d7ce8:	4620      	mov	r0, r4
   d7cea:	bd10      	pop	{r4, pc}
   d7cec:	00000000 	.word	0x00000000

000d7cf0 <memcpy>:
   d7cf0:	b510      	push	{r4, lr}
   d7cf2:	1e43      	subs	r3, r0, #1
   d7cf4:	440a      	add	r2, r1
   d7cf6:	4291      	cmp	r1, r2
   d7cf8:	d004      	beq.n	d7d04 <memcpy+0x14>
   d7cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7cfe:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7d02:	e7f8      	b.n	d7cf6 <memcpy+0x6>
   d7d04:	bd10      	pop	{r4, pc}

000d7d06 <memset>:
   d7d06:	4402      	add	r2, r0
   d7d08:	4603      	mov	r3, r0
   d7d0a:	4293      	cmp	r3, r2
   d7d0c:	d002      	beq.n	d7d14 <memset+0xe>
   d7d0e:	f803 1b01 	strb.w	r1, [r3], #1
   d7d12:	e7fa      	b.n	d7d0a <memset+0x4>
   d7d14:	4770      	bx	lr
	...

000d7d18 <srand>:
   d7d18:	b538      	push	{r3, r4, r5, lr}
   d7d1a:	4b12      	ldr	r3, [pc, #72]	; (d7d64 <srand+0x4c>)
   d7d1c:	681c      	ldr	r4, [r3, #0]
   d7d1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7d20:	4605      	mov	r5, r0
   d7d22:	b9d3      	cbnz	r3, d7d5a <srand+0x42>
   d7d24:	2018      	movs	r0, #24
   d7d26:	f7fd ff15 	bl	d5b54 <malloc>
   d7d2a:	f243 330e 	movw	r3, #13070	; 0x330e
   d7d2e:	63a0      	str	r0, [r4, #56]	; 0x38
   d7d30:	8003      	strh	r3, [r0, #0]
   d7d32:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7d36:	8043      	strh	r3, [r0, #2]
   d7d38:	f241 2334 	movw	r3, #4660	; 0x1234
   d7d3c:	8083      	strh	r3, [r0, #4]
   d7d3e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7d42:	80c3      	strh	r3, [r0, #6]
   d7d44:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7d48:	8103      	strh	r3, [r0, #8]
   d7d4a:	2305      	movs	r3, #5
   d7d4c:	8143      	strh	r3, [r0, #10]
   d7d4e:	230b      	movs	r3, #11
   d7d50:	8183      	strh	r3, [r0, #12]
   d7d52:	2201      	movs	r2, #1
   d7d54:	2300      	movs	r3, #0
   d7d56:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7d5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7d5c:	2200      	movs	r2, #0
   d7d5e:	611d      	str	r5, [r3, #16]
   d7d60:	615a      	str	r2, [r3, #20]
   d7d62:	bd38      	pop	{r3, r4, r5, pc}
   d7d64:	2003e250 	.word	0x2003e250

000d7d68 <strcpy>:
   d7d68:	4603      	mov	r3, r0
   d7d6a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7d6e:	f803 2b01 	strb.w	r2, [r3], #1
   d7d72:	2a00      	cmp	r2, #0
   d7d74:	d1f9      	bne.n	d7d6a <strcpy+0x2>
   d7d76:	4770      	bx	lr

000d7d78 <strlen>:
   d7d78:	4603      	mov	r3, r0
   d7d7a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7d7e:	2a00      	cmp	r2, #0
   d7d80:	d1fb      	bne.n	d7d7a <strlen+0x2>
   d7d82:	1a18      	subs	r0, r3, r0
   d7d84:	3801      	subs	r0, #1
   d7d86:	4770      	bx	lr

000d7d88 <strncpy>:
   d7d88:	b510      	push	{r4, lr}
   d7d8a:	4603      	mov	r3, r0
   d7d8c:	b142      	cbz	r2, d7da0 <strncpy+0x18>
   d7d8e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7d92:	f803 4b01 	strb.w	r4, [r3], #1
   d7d96:	3a01      	subs	r2, #1
   d7d98:	2c00      	cmp	r4, #0
   d7d9a:	d1f7      	bne.n	d7d8c <strncpy+0x4>
   d7d9c:	441a      	add	r2, r3
   d7d9e:	e000      	b.n	d7da2 <strncpy+0x1a>
   d7da0:	bd10      	pop	{r4, pc}
   d7da2:	4293      	cmp	r3, r2
   d7da4:	d002      	beq.n	d7dac <strncpy+0x24>
   d7da6:	f803 4b01 	strb.w	r4, [r3], #1
   d7daa:	e7fa      	b.n	d7da2 <strncpy+0x1a>
   d7dac:	bd10      	pop	{r4, pc}

000d7dae <link_code_end>:
	...

000d7db0 <dynalib_user>:
   d7db0:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d7dc0:	0000 0000 7542 7474 6e6f 3120 6c20 6e6f     ....Button 1 lon
   d7dd0:	5067 6572 7373 7320 6f74 0070 7542 7474     gPress stop.Butt
   d7de0:	6e6f 3120 6c20 6e6f 5067 6572 7373 7320     on 1 longPress s
   d7df0:	6174 7472 5400 6d65 6570 6172 7574 6572     tart.Temperature
   d7e00:	203a 6625 000a 5953 5453 4d45 520a 4145     : %f..SYSTEM.REA
   d7e10:	5944 2e2e 0a2e 5300 7379 6574 206d 6552     DY.....System Re
   d7e20:	6461 2e79 2e2e 000a 0030 4553 444e 4e49     ady.....0.SENDIN
   d7e30:	0a47 4144 4154 0a3a 2e25 6632 6325 0043     G.DATA:.%.2f%cC.
   d7e40:	6554 706d 7265 7461 7275 3a65 2520 322e     Temperature: %.2
   d7e50:	0a66 7400 6d65 5f70 7261 6172 3a79 2520     f..temp_array: %
   d7e60:	2078 6164 6174 203a 6925 6920 203a 6925     x data: %i i: %i
   d7e70:	6e20 203a 6925 000a                          n: %i..

000d7e78 <_ZTVN8particle13__SPISettingsE>:
	...
   d7e80:	44f9 000d 6564 6166 6c75 2074 4d00 4253     .D..default .MSB
   d7e90:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   d7ea0:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   d7eb0:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
   d7ec0:	4d20 444f 2545 3e64 0000 0000                MODE%d>....

000d7ecc <_ZTV12Adafruit_GFX>:
	...
   d7edc:	4eb5 000d 612d 000d 40a1 000d 4bb3 000d     .N..-a...@...K..
   d7eec:	4cd3 000d 4cef 000d 4c73 000d 4d09 000d     .L...L..sL...M..
   d7efc:	4d41 000d 4d5d 000d                         AM..]M..

000d7f04 <_ZL4font>:
   d7f04:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d7f14:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d7f24:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d7f34:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d7f44:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d7f54:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d7f64:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d7f74:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d7f84:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d7f94:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d7fa4:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d7fb4:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d7fc4:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d7fd4:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d7fe4:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d7ff4:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d8004:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d8014:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d8024:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d8034:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d8044:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d8054:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d8064:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d8074:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d8084:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d8094:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d80a4:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d80b4:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d80c4:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d80d4:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d80e4:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d80f4:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d8104:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d8114:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d8124:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d8134:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d8144:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d8154:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d8164:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d8174:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d8184:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d8194:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   d81a4:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d81b4:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d81c4:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   d81d4:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d81e4:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   d81f4:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   d8204:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   d8214:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d8224:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d8234:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d8244:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d8254:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d8264:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d8274:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   d8284:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   d8294:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   d82a4:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   d82b4:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   d82c4:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   d82d4:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   d82e4:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   d82f4:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   d8304:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   d8314:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   d8324:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   d8334:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   d8344:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   d8354:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   d8364:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   d8374:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   d8384:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   d8394:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   d83a4:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   d83b4:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   d83c4:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   d83d4:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   d83e4:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   d83f4:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000d8400 <_ZTV16Adafruit_SSD1306>:
	...
   d8408:	40e5 000d 4441 000d 4eb5 000d 612d 000d     .@..AD...N..-a..
   d8418:	5235 000d 4bb3 000d 50bd 000d 4f49 000d     5R...K...P..IO..
   d8428:	4c73 000d 4d09 000d 4d41 000d 4d5d 000d     sL...M..AM..]M..

000d8438 <_ZTVN5spark13EthernetClassE>:
	...
   d8440:	5c45 000d 5c3b 000d 5c31 000d 5c27 000d     E\..;\..1\..'\..
   d8450:	5c1b 000d 5c0f 000d 5c03 000d 5bfb 000d     .\...\...\...[..
   d8460:	5bf1 000d 5be7 000d 604d 000d               .[...[..M`..

000d846c <_ZTV7TwoWire>:
	...
   d8474:	5c65 000d 5caf 000d 5c87 000d 5c67 000d     e\...\...\..g\..
   d8484:	5c8f 000d 5c97 000d 5c9f 000d 5ca7 000d     .\...\...\...\..

000d8494 <_ZTV9IPAddress>:
	...
   d849c:	5d83 000d 5d73 000d 5d75 000d 6162 6475     .]..s]..u]..baud
   d84ac:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d84bc:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d84cc:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d84dc:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d84ec:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d84fc:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d850c:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d851c:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d852c:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d853c:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d854c:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
   d855c:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   d856c:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d857c:	726f 7000 6e61 6369 6100 6c6c 0000 0000     or.panic.all....

000d858c <_ZTVN5spark9MeshClassE>:
	...
   d8594:	5ec7 000d 5ebd 000d 5eb3 000d 5ea9 000d     .^...^...^...^..
   d85a4:	5e9d 000d 5e91 000d 5e85 000d 5e7d 000d     .^...^...^..}^..
   d85b4:	5e73 000d 5e69 000d 604d 000d               s^..i^..M`..

000d85c0 <_ZTVN5spark12NetworkClassE>:
	...
   d85c8:	5fe5 000d 5fef 000d 5ff9 000d 6003 000d     ._..._..._...`..
   d85d8:	600d 000d 6019 000d 6025 000d 6031 000d     .`...`..%`..1`..
   d85e8:	6039 000d 6043 000d 604d 000d               9`..C`..M`..

000d85f4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d85f4:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
   d8604:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d8614:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d8624:	0000 0000                                   ....

000d8628 <_ZTV11USARTSerial>:
	...
   d8630:	67b1 000d 6801 000d 680f 000d 612d 000d     .g...h...h..-a..
   d8640:	67c5 000d 67e7 000d 67d3 000d 67fb 000d     .g...g...g...g..
   d8650:	67b3 000d 67b7 000d                         .g...g..

000d8658 <_ZTV9USBSerial>:
	...
   d8660:	68b9 000d 6909 000d 6917 000d 612d 000d     .h...i...i..-a..
   d8670:	68f5 000d 68bb 000d 68d1 000d 6903 000d     .h...h...h...i..
   d8680:	68e7 000d 68b5 000d                         .h...h..

000d8688 <_ZTVN5spark9WiFiClassE>:
	...
   d8690:	6a23 000d 6a19 000d 6a0f 000d 69c5 000d     #j...j...j...i..
   d86a0:	6a03 000d 69f7 000d 69eb 000d 69e3 000d     .j...i...i...i..
   d86b0:	69d9 000d 69cf 000d 604d 000d               .i...i..M`..

000d86bc <_ZSt7nothrow>:
   d86bc:	0000 0000                                   ....

000d86c0 <__sf_fake_stdin>:
	...

000d86e0 <__sf_fake_stdout>:
	...

000d8700 <__sf_fake_stderr>:
	...

000d8720 <link_const_variable_data_end>:
   d8720:	000d4451 	.word	0x000d4451
   d8724:	000d4baf 	.word	0x000d4baf
   d8728:	000d4f45 	.word	0x000d4f45
   d872c:	000d5635 	.word	0x000d5635
   d8730:	000d56a3 	.word	0x000d56a3
   d8734:	000d56a9 	.word	0x000d56a9
   d8738:	000d5bad 	.word	0x000d5bad
   d873c:	000d5c51 	.word	0x000d5c51
   d8740:	000d5e59 	.word	0x000d5e59
   d8744:	000d5f95 	.word	0x000d5f95
   d8748:	000d6119 	.word	0x000d6119
   d874c:	000d6275 	.word	0x000d6275
   d8750:	000d6769 	.word	0x000d6769
   d8754:	000d679d 	.word	0x000d679d
   d8758:	000d6a2d 	.word	0x000d6a2d
   d875c:	000d6e01 	.word	0x000d6e01
   d8760:	000d6ec5 	.word	0x000d6ec5
   d8764:	000d6f49 	.word	0x000d6f49
   d8768:	000d6fcd 	.word	0x000d6fcd

000d876c <link_constructors_end>:
   d876c:	00000000 	.word	0x00000000
